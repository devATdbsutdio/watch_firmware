
/private/var/folders/yp/37w_03rx1qdbfsqckbyyk9t80000gn/T/arduino-sketch-57431938940A86EFDE130007D33B4A0A/clock_firmware_production.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	3e c0       	rjmp	.+124    	; 0x7e <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	ff c4       	rjmp	.+2558   	; 0xa14 <__vector_5>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	ec c4       	rjmp	.+2520   	; 0x9f2 <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	90 c4       	rjmp	.+2336   	; 0x946 <__vector_9>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	ff c3       	rjmp	.+2046   	; 0x86c <__vector_27>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	f8 c3       	rjmp	.+2032   	; 0x862 <__vector_28>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	00 c4       	rjmp	.+2048   	; 0x876 <__vector_29>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
	...

0000007c <__ctors_start>:
__trampolines_start():
      7c:	21 05       	cpc	r18, r1

0000007e <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      7e:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      80:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      82:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      84:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      86:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      88:	de bf       	out	0x3e, r29	; 62

0000008a <_initThreeStuff()>:
_Z15_initThreeStuffv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/main.cpp:95
 * (many are available reasonably cheaply on aliexpress et al.) end up being very useful        *
 * for this sort of thing.                                                                      */

  void __attribute__((weak)) init_reset_flags();
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
      8a:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <vtable for UartClass+0x7f6efd>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/main.cpp:96
    RSTCTRL.RSTFR = flags;
      8e:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <vtable for UartClass+0x7f6efd>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/main.cpp:97
    if (flags == 0) {
      92:	81 11       	cpse	r24, r1
      94:	05 c0       	rjmp	.+10     	; 0xa0 <_initThreeStuff()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/main.cpp:98
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
      96:	98 ed       	ldi	r25, 0xD8	; 216
      98:	21 e0       	ldi	r18, 0x01	; 1
      9a:	94 bf       	out	0x34, r25	; 52
      9c:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <vtable for UartClass+0x7f6efe>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/main.cpp:100
    }
    GPIOR0 = flags;
      a0:	8c bb       	out	0x1c, r24	; 28

000000a2 <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      a2:	2c e3       	ldi	r18, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      a4:	aa e0       	ldi	r26, 0x0A	; 10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      a6:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      ac:	ae 3d       	cpi	r26, 0xDE	; 222
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      ae:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>

000000b2 <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      b2:	1c e3       	ldi	r17, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      b4:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      b6:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      b8:	ef e5       	ldi	r30, 0x5F	; 95
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ba:	f1 e1       	ldi	r31, 0x11	; 17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      be:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      c0:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      c2:	aa 30       	cpi	r26, 0x0A	; 10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      c4:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      c8:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      ca:	cf e3       	ldi	r28, 0x3F	; 63
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      cc:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      ce:	03 c0       	rjmp	.+6      	; 0xd6 <__do_global_ctors+0xe>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      d0:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      d2:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      d4:	f5 d7       	rcall	.+4074   	; 0x10c0 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      d6:	ce 33       	cpi	r28, 0x3E	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      d8:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      da:	d1 f7       	brne	.-12     	; 0xd0 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
      dc:	c9 d4       	rcall	.+2450   	; 0xa70 <main>
../../../../crt1/gcrt1.S:315
      de:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <_exit>

000000e2 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
      e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>:
_ZN17TinyMegaI2CMaster5writeEh.constprop.20():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:55
  return TinyMegaI2CMaster::read();
}

bool TinyMegaI2CMaster::write(uint8_t data)
{
  while (!(TWI0.MSTATUS & TWI_WIF_bm))
      e4:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <vtable for UartClass+0x7f76d2>
      e8:	96 ff       	sbrs	r25, 6
      ea:	fc cf       	rjmp	.-8      	; 0xe4 <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:57
    ; // Wait for write interrupt flag
  TWI0.MDATA = data;
      ec:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <vtable for UartClass+0x7f76d5>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:58
  TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;   // Do nothing
      f0:	82 e0       	ldi	r24, 0x02	; 2
      f2:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f76d1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:59
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Returns true if slave gave an ACK
      f6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f76d2>
      fa:	82 95       	swap	r24
      fc:	81 70       	andi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:60
}
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	89 27       	eor	r24, r25
     102:	08 95       	ret

00000104 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>:
_ZN17TinyMegaI2CMaster5startEhi.constprop.17():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:66

// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
     104:	89 2b       	or	r24, r25
     106:	c9 f0       	breq	.+50     	; 0x13a <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]+0x36>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:70
    read = 0; // Write
  else
  {
    I2Ccount = readcount;
     108:	8f ef       	ldi	r24, 0xFF	; 255
     10a:	9f ef       	ldi	r25, 0xFF	; 255
     10c:	80 93 56 3c 	sts	0x3C56, r24	; 0x803c56 <TinyMegaI2C>
     110:	90 93 57 3c 	sts	0x3C57, r25	; 0x803c57 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:71
    read = 1;
     114:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:73
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
     116:	84 66       	ori	r24, 0x64	; 100
     118:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <vtable for UartClass+0x7f76d4>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:74
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
     11c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f76d2>
     120:	80 7c       	andi	r24, 0xC0	; 192
     122:	e1 f3       	breq	.-8      	; 0x11c <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]+0x18>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:76
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
     124:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f76d2>
     128:	83 fd       	sbrc	r24, 3
     12a:	09 c0       	rjmp	.+18     	; 0x13e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]+0x3a>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:78
    return false;                        // Return false if arbitration lost or bus error
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
     12c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f76d2>
     130:	82 95       	swap	r24
     132:	81 70       	andi	r24, 0x01	; 1
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	89 27       	eor	r24, r25
     138:	08 95       	ret
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:67
// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
    read = 0; // Write
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	ec cf       	rjmp	.-40     	; 0x116 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]+0x12>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:77
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
    return false;                        // Return false if arbitration lost or bus error
     13e:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:79
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}
     140:	08 95       	ret

00000142 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]>:
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.4():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:402
    {
        return (false);
    }
}

bool RV8803Tiny::readMultipleRegisters(uint8_t addr, uint8_t *dest, uint8_t len)
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:405
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	db df       	rcall	.-74     	; 0x104 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>
     14e:	81 11       	cpse	r24, r1
     150:	02 c0       	rjmp	.+4      	; 0x156 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	32 c0       	rjmp	.+100    	; 0x1ba <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x78>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:408
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803-C7.
        if (TinyMegaI2C.write(addr))
     156:	80 e1       	ldi	r24, 0x10	; 16
     158:	c5 df       	rcall	.-118    	; 0xe4 <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>
     15a:	88 23       	and	r24, r24
     15c:	d1 f3       	breq	.-12     	; 0x152 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x10>
restart():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:83

bool TinyMegaI2CMaster::restart(uint8_t address, int readcount)
{
  return TinyMegaI2CMaster::start(address, readcount);
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	9f ef       	ldi	r25, 0xFF	; 255
     162:	d0 df       	rcall	.-96     	; 0x104 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.4():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:412
        { //  if Acknowledged from RV-8803
            //  Master sends out the Repeated START condition (or STOP condition followed by START condition)
            //  Master sends out Slave Address, 65h for the RV-8803 [ R/W bit is -1 ] indicating unknown number of read operation
            if (TinyMegaI2C.restart(RV8803_ADDR, -1))
     164:	88 23       	and	r24, r24
     166:	a9 f3       	breq	.-22     	; 0x152 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x10>
     168:	fe 01       	movw	r30, r28
     16a:	9e 01       	movw	r18, r28
     16c:	28 5f       	subi	r18, 0xF8	; 248
     16e:	3f 4f       	sbci	r19, 0xFF	; 255
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     170:	46 e0       	ldi	r20, 0x06	; 6
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     172:	52 e0       	ldi	r21, 0x02	; 2
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:34
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
}

uint8_t TinyMegaI2CMaster::read(void)
{
  if (I2Ccount != 0)
     174:	80 91 56 3c 	lds	r24, 0x3C56	; 0x803c56 <TinyMegaI2C>
     178:	90 91 57 3c 	lds	r25, 0x3C57	; 0x803c57 <TinyMegaI2C+0x1>
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	29 f0       	breq	.+10     	; 0x18a <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x48>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:35
    I2Ccount--;
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	80 93 56 3c 	sts	0x3C56, r24	; 0x803c56 <TinyMegaI2C>
     186:	90 93 57 3c 	sts	0x3C57, r25	; 0x803c57 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:36
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
     18a:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f76d2>
     18e:	87 ff       	sbrs	r24, 7
     190:	fc cf       	rjmp	.-8      	; 0x18a <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x48>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:38
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
     192:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <vtable for UartClass+0x7f76d5>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:40
  // Check slave sent ACK?
  if (I2Ccount != 0)
     196:	60 91 56 3c 	lds	r22, 0x3C56	; 0x803c56 <TinyMegaI2C>
     19a:	70 91 57 3c 	lds	r23, 0x3C57	; 0x803c57 <TinyMegaI2C+0x1>
     19e:	67 2b       	or	r22, r23
     1a0:	79 f0       	breq	.+30     	; 0x1c0 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x7e>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     1a2:	50 93 14 08 	sts	0x0814, r21	; 0x800814 <vtable for UartClass+0x7f76d1>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.4():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:423
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
                {
                    dest[i] = TinyMegaI2C.read();
     1a6:	81 93       	st	Z+, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:421
                // 2. [NO NEED] The above Steps can be repeated if necessary and the address bit increments automatically.
                // 3. ** The Master, addressed as Receiver, can stop data transmission by not generating an acknowledge on the
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
     1a8:	2e 17       	cp	r18, r30
     1aa:	3f 07       	cpc	r19, r31
     1ac:	19 f7       	brne	.-58     	; 0x174 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x32>
stop():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     1ae:	87 e0       	ldi	r24, 0x07	; 7
     1b0:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f76d1>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.4():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	cd 2b       	or	r28, r29
     1b8:	61 f2       	breq	.-104    	; 0x152 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:443
    }
    else
    {
        return (false);
    }
}
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     1c0:	40 93 14 08 	sts	0x0814, r20	; 0x800814 <vtable for UartClass+0x7f76d1>
     1c4:	f0 cf       	rjmp	.-32     	; 0x1a6 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x64>

000001c6 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     1c6:	af 92       	push	r10
     1c8:	bf 92       	push	r11
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	6c 01       	movw	r12, r24
     1dc:	7b 01       	movw	r14, r22
     1de:	8b 01       	movw	r16, r22
     1e0:	04 0f       	add	r16, r20
     1e2:	15 1f       	adc	r17, r21
     1e4:	eb 01       	movw	r28, r22
     1e6:	5e 01       	movw	r10, r28
     1e8:	ae 18       	sub	r10, r14
     1ea:	bf 08       	sbc	r11, r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     1ec:	c0 17       	cp	r28, r16
     1ee:	d1 07       	cpc	r29, r17
     1f0:	59 f0       	breq	.+22     	; 0x208 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/api/Print.cpp:32
    if (write(*buffer++)) {
     1f2:	69 91       	ld	r22, Y+
     1f4:	d6 01       	movw	r26, r12
     1f6:	ed 91       	ld	r30, X+
     1f8:	fc 91       	ld	r31, X
     1fa:	01 90       	ld	r0, Z+
     1fc:	f0 81       	ld	r31, Z
     1fe:	e0 2d       	mov	r30, r0
     200:	c6 01       	movw	r24, r12
     202:	09 95       	icall
     204:	89 2b       	or	r24, r25
     206:	79 f7       	brne	.-34     	; 0x1e6 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     208:	c5 01       	movw	r24, r10
     20a:	df 91       	pop	r29
     20c:	cf 91       	pop	r28
     20e:	1f 91       	pop	r17
     210:	0f 91       	pop	r16
     212:	ff 90       	pop	r15
     214:	ef 90       	pop	r14
     216:	df 90       	pop	r13
     218:	cf 90       	pop	r12
     21a:	bf 90       	pop	r11
     21c:	af 90       	pop	r10
     21e:	08 95       	ret

00000220 <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:642
  int UartClass::availableForWrite(void) {
    tx_buffer_index_t head;
    tx_buffer_index_t tail;

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
     220:	fc 01       	movw	r30, r24
     222:	53 89       	ldd	r21, Z+19	; 0x13
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:643
      tail = _tx_buffer_tail;
     224:	44 89       	ldd	r20, Z+20	; 0x14
     226:	25 2f       	mov	r18, r21
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	84 2f       	mov	r24, r20
     22c:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:646
    }
    if (head >= tail) {
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     22e:	82 1b       	sub	r24, r18
     230:	93 0b       	sbc	r25, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:645

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
      tail = _tx_buffer_tail;
    }
    if (head >= tail) {
     232:	54 17       	cp	r21, r20
     234:	10 f0       	brcs	.+4      	; 0x23a <UartClass::availableForWrite()+0x1a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:646
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     236:	4f 96       	adiw	r24, 0x1f	; 31
     238:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:648
    }
    return tail - head - 1;
     23a:	01 97       	sbiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:649
  }
     23c:	08 95       	ret

0000023e <UartClass::read()>:
_ZN9UartClass4readEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:626
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }

  int UartClass::read(void) {
     23e:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:628
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
     240:	91 89       	ldd	r25, Z+17	; 0x11
     242:	82 89       	ldd	r24, Z+18	; 0x12
     244:	98 17       	cp	r25, r24
     246:	61 f0       	breq	.+24     	; 0x260 <UartClass::read()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:631
      return -1;
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
     248:	a2 89       	ldd	r26, Z+18	; 0x12
     24a:	ae 0f       	add	r26, r30
     24c:	bf 2f       	mov	r27, r31
     24e:	b1 1d       	adc	r27, r1
     250:	55 96       	adiw	r26, 0x15	; 21
     252:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:632
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
     254:	92 89       	ldd	r25, Z+18	; 0x12
     256:	9f 5f       	subi	r25, 0xFF	; 255
     258:	9f 73       	andi	r25, 0x3F	; 63
     25a:	92 8b       	std	Z+18, r25	; 0x12
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:633
      return c;
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:629
  }

  int UartClass::read(void) {
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:635
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
      return c;
    }
  }
     264:	08 95       	ret

00000266 <UartClass::peek()>:
_ZN9UartClass4peekEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:618
}
  int UartClass::available(void) {
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
     266:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:619
    if (_rx_buffer_head == _rx_buffer_tail) {
     268:	91 89       	ldd	r25, Z+17	; 0x11
     26a:	82 89       	ldd	r24, Z+18	; 0x12
     26c:	98 17       	cp	r25, r24
     26e:	31 f0       	breq	.+12     	; 0x27c <UartClass::peek()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:622
      return -1;
    } else {
      return _rx_buffer[_rx_buffer_tail];
     270:	82 89       	ldd	r24, Z+18	; 0x12
     272:	e8 0f       	add	r30, r24
     274:	f1 1d       	adc	r31, r1
     276:	85 89       	ldd	r24, Z+21	; 0x15
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:620
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:624
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }
     280:	08 95       	ret

00000282 <UartClass::available()>:
_ZN9UartClass9availableEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:614

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}
  int UartClass::available(void) {
     282:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:615
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
     284:	91 89       	ldd	r25, Z+17	; 0x11
     286:	22 89       	ldd	r18, Z+18	; 0x12
     288:	89 2f       	mov	r24, r25
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	80 5c       	subi	r24, 0xC0	; 192
     28e:	9f 4f       	sbci	r25, 0xFF	; 255
     290:	82 1b       	sub	r24, r18
     292:	91 09       	sbc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:616
  }
     294:	8f 73       	andi	r24, 0x3F	; 63
     296:	99 27       	eor	r25, r25
     298:	08 95       	ret

0000029a <UartClass::end()>:
_ZN9UartClass3endEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:598
    pinMode(_usart_pins[muxrow][3], OUTPUT); // make XDIR output.
  }
  */
}

void UartClass::end() {
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:600
  // wait for transmission of outgoing data
  flush();
     2a0:	e8 81       	ld	r30, Y
     2a2:	f9 81       	ldd	r31, Y+1	; 0x01
     2a4:	06 80       	ldd	r0, Z+6	; 0x06
     2a6:	f7 81       	ldd	r31, Z+7	; 0x07
     2a8:	e0 2d       	mov	r30, r0
     2aa:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:603
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  // TXCIE only used in half duplex - we can just turn the damned thing off yo!
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     2ac:	ec 85       	ldd	r30, Y+12	; 0x0c
     2ae:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:604
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     2b0:	86 81       	ldd	r24, Z+6	; 0x06
     2b2:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:605
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     2b4:	85 81       	ldd	r24, Z+5	; 0x05
     2b6:	15 82       	std	Z+5, r1	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:606
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error.
     2b8:	80 e4       	ldi	r24, 0x40	; 64
     2ba:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:608
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     2bc:	8a 89       	ldd	r24, Y+18	; 0x12
     2be:	89 8b       	std	Y+17, r24	; 0x11
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:612

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     2c0:	18 8a       	std	Y+16, r1	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:613
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:352
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     2c8:	dc 01       	movw	r26, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:353
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	07 fe       	sbrs	r0, 7
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <UartClass::_poll_tx_data_empty()+0x10>
     2d0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vtable for UartClass+0x7f6fce>
     2d4:	88 23       	and	r24, r24
     2d6:	b1 f0       	breq	.+44     	; 0x304 <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:370
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     2d8:	1c 96       	adiw	r26, 0x0c	; 12
     2da:	ed 91       	ld	r30, X+
     2dc:	fc 91       	ld	r31, X
     2de:	1d 97       	sbiw	r26, 0x0d	; 13
     2e0:	84 81       	ldd	r24, Z+4	; 0x04
     2e2:	85 ff       	sbrs	r24, 5
     2e4:	0f c0       	rjmp	.+30     	; 0x304 <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:371
      if (_tx_buffer_head != _tx_buffer_tail) {
     2e6:	53 96       	adiw	r26, 0x13	; 19
     2e8:	9c 91       	ld	r25, X
     2ea:	53 97       	sbiw	r26, 0x13	; 19
     2ec:	54 96       	adiw	r26, 0x14	; 20
     2ee:	8c 91       	ld	r24, X
     2f0:	98 17       	cp	r25, r24
     2f2:	21 f0       	breq	.+8      	; 0x2fc <UartClass::_poll_tx_data_empty()+0x34>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:373
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     2f4:	85 81       	ldd	r24, Z+5	; 0x05
     2f6:	8f 7d       	andi	r24, 0xDF	; 223
     2f8:	85 83       	std	Z+5, r24	; 0x05
     2fa:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:397
#ifdef USART1
                ::"z"((uint16_t)thisSerial)
#else
                ::"z"(&Serial)
#endif
                : "r18","r19","r24","r25","r26","r27");
     2fc:	e8 e5       	ldi	r30, 0x58	; 88
     2fe:	fc e3       	ldi	r31, 0x3C	; 60
     300:	e8 94       	clt
     302:	c4 c2       	rjmp	.+1416   	; 0x88c <_poll_dre>

00000304 <_poll_dre_done>:
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:404
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
  // Note that this currently does not handle cases where the DRE interruopt becomes
  // disabled, yet you are actually attempting to send. I don't think it can happen.
}
     304:	08 95       	ret

00000306 <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:682
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }


  size_t UartClass::write(uint8_t c) {
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:683
    _state |= 1; // Record that we have written to serial since it was begun.
     310:	88 89       	ldd	r24, Y+16	; 0x10
     312:	98 2f       	mov	r25, r24
     314:	91 60       	ori	r25, 0x01	; 1
     316:	98 8b       	std	Y+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:688
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     318:	2b 89       	ldd	r18, Y+19	; 0x13
     31a:	9c 89       	ldd	r25, Y+20	; 0x14
     31c:	29 13       	cpse	r18, r25
     31e:	0a c0       	rjmp	.+20     	; 0x334 <UartClass::write(unsigned char)+0x2e>
     320:	ec 85       	ldd	r30, Y+12	; 0x0c
     322:	fd 85       	ldd	r31, Y+13	; 0x0d
     324:	94 81       	ldd	r25, Z+4	; 0x04
     326:	95 ff       	sbrs	r25, 5
     328:	05 c0       	rjmp	.+10     	; 0x334 <UartClass::write(unsigned char)+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:689
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     32a:	81 fd       	sbrc	r24, 1
     32c:	0d c0       	rjmp	.+26     	; 0x348 <UartClass::write(unsigned char)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:696
        ctrla &= ~USART_RXCIE_bm;
        ctrla |=  USART_TXCIE_bm;
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
        (*_hwserial_module).CTRLA = ctrla;
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     32e:	80 e4       	ldi	r24, 0x40	; 64
     330:	84 83       	std	Z+4, r24	; 0x04
     332:	12 c0       	rjmp	.+36     	; 0x358 <UartClass::write(unsigned char)+0x52>
     334:	06 2f       	mov	r16, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:714
       * // that the interrupt handler is called in this situation
       * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
       */
      return 1;
    }
    tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     336:	1b 89       	ldd	r17, Y+19	; 0x13
     338:	1f 5f       	subi	r17, 0xFF	; 255
     33a:	1f 71       	andi	r17, 0x1F	; 31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:718

    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
     33c:	8c 89       	ldd	r24, Y+20	; 0x14
     33e:	81 13       	cpse	r24, r17
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:719
      _poll_tx_data_empty();
     340:	15 c0       	rjmp	.+42     	; 0x36c <UartClass::write(unsigned char)+0x66>
     342:	ce 01       	movw	r24, r28
     344:	c1 df       	rcall	.-126    	; 0x2c8 <UartClass::_poll_tx_data_empty()>
     346:	fa cf       	rjmp	.-12     	; 0x33c <UartClass::write(unsigned char)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:690
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
        uint8_t ctrla = (*_hwserial_module).CTRLA;
     348:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:691
        ctrla &= ~USART_RXCIE_bm;
     34a:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:692
        ctrla |=  USART_TXCIE_bm;
     34c:	80 64       	ori	r24, 0x40	; 64
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:693
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     34e:	90 e4       	ldi	r25, 0x40	; 64
     350:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:694
        (*_hwserial_module).CTRLA = ctrla;
     352:	ec 85       	ldd	r30, Y+12	; 0x0c
     354:	fd 85       	ldd	r31, Y+13	; 0x0d
     356:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:699
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
      }
      // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
      (*_hwserial_module).TXDATAL = c;
     358:	ec 85       	ldd	r30, Y+12	; 0x0c
     35a:	fd 85       	ldd	r31, Y+13	; 0x0d
     35c:	62 83       	std	Z+2, r22	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:734
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    }
    return 1;
  }
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:721
    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
      _poll_tx_data_empty();
    }
    _tx_buffer[_tx_buffer_head] = c;
     36c:	eb 89       	ldd	r30, Y+19	; 0x13
     36e:	ec 0f       	add	r30, r28
     370:	fd 2f       	mov	r31, r29
     372:	f1 1d       	adc	r31, r1
     374:	eb 5a       	subi	r30, 0xAB	; 171
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	00 83       	st	Z, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:722
    _tx_buffer_head = i;
     37a:	1b 8b       	std	Y+19, r17	; 0x13
     37c:	ec 85       	ldd	r30, Y+12	; 0x0c
     37e:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:723
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     380:	88 89       	ldd	r24, Y+16	; 0x10
     382:	81 ff       	sbrs	r24, 1
     384:	09 c0       	rjmp	.+18     	; 0x398 <UartClass::write(unsigned char)+0x92>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:724
      uint8_t ctrla = (*_hwserial_module).CTRLA;
     386:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:725
      ctrla &= ~USART_RXCIE_bm;
     388:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:726
      ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     38a:	80 66       	ori	r24, 0x60	; 96
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:727
      (*_hwserial_module).STATUS = USART_TXCIF_bm;
     38c:	90 e4       	ldi	r25, 0x40	; 64
     38e:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:728
      (*_hwserial_module).CTRLA = ctrla;
     390:	ec 85       	ldd	r30, Y+12	; 0x0c
     392:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:731
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     394:	85 83       	std	Z+5, r24	; 0x05
     396:	e3 cf       	rjmp	.-58     	; 0x35e <UartClass::write(unsigned char)+0x58>
     398:	85 81       	ldd	r24, Z+5	; 0x05
     39a:	80 62       	ori	r24, 0x20	; 32
     39c:	fb cf       	rjmp	.-10     	; 0x394 <UartClass::write(unsigned char)+0x8e>

0000039e <UartClass::flush()>:
_ZN9UartClass5flushEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:651
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    }
    return tail - head - 1;
  }

  void UartClass::flush() {
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:655
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXCIF (transmit
    // complete) bit to 1 during initialization
    if (!_state & 1) {
     3a4:	88 89       	ldd	r24, Y+16	; 0x10
     3a6:	88 23       	and	r24, r24
     3a8:	59 f0       	breq	.+22     	; 0x3c0 <UartClass::flush()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:670
    // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
    // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
    // and in that case flush(), and write() with full buffer would just straight up hang...

    // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
    while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     3aa:	ec 85       	ldd	r30, Y+12	; 0x0c
     3ac:	fd 85       	ldd	r31, Y+13	; 0x0d
     3ae:	85 81       	ldd	r24, Z+5	; 0x05
     3b0:	85 fd       	sbrc	r24, 5
     3b2:	03 c0       	rjmp	.+6      	; 0x3ba <UartClass::flush()+0x1c>
     3b4:	84 81       	ldd	r24, Z+4	; 0x04
     3b6:	86 fd       	sbrc	r24, 6
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:675

      // If interrupts are globally disabled or the and DR empty interrupt is disabled,
      // poll the "data register empty" interrupt flag to prevent deadlock

      _poll_tx_data_empty();
     3b8:	03 c0       	rjmp	.+6      	; 0x3c0 <UartClass::flush()+0x22>
     3ba:	ce 01       	movw	r24, r28
     3bc:	85 df       	rcall	.-246    	; 0x2c8 <UartClass::_poll_tx_data_empty()>
     3be:	f5 cf       	rjmp	.-22     	; 0x3aa <UartClass::flush()+0xc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:679
    }
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.h:293
    inline   size_t write(unsigned int n)   {return write((uint8_t)n);}
    inline   size_t write(int n)            {return write((uint8_t)n);}
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	08 95       	ret

000003ca <micros>:
micros():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:271
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     3ca:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:272
    cli(); /* INTERRUPTS OFF */
     3cc:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:274
    #if defined(MILLIS_USE_TIMERA0)
      ticks = TCA0.SPLIT.HCNT;
     3ce:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <vtable for UartClass+0x7f78de>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:275
      flags = TCA0.SPLIT.INTFLAGS;
     3d2:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <vtable for UartClass+0x7f78c8>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:291
     * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
     * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1))
      overflows = timer_overflow_count;
     3d6:	20 91 17 3c 	lds	r18, 0x3C17	; 0x803c17 <timer_overflow_count>
     3da:	30 91 18 3c 	lds	r19, 0x3C18	; 0x803c18 <timer_overflow_count+0x1>
     3de:	40 91 19 3c 	lds	r20, 0x3C19	; 0x803c19 <timer_overflow_count+0x2>
     3e2:	50 91 1a 3c 	lds	r21, 0x3C1A	; 0x803c1a <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:296
    #else
      overflows = timer_millis;
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     3e6:	8f bf       	out	0x3f, r24	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:300
    #if defined(MILLIS_USE_TIMERD0)
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
     3e8:	8e ef       	ldi	r24, 0xFE	; 254
     3ea:	86 1b       	sub	r24, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:301
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
     3ec:	91 ff       	sbrs	r25, 1
     3ee:	06 c0       	rjmp	.+12     	; 0x3fc <micros+0x32>
     3f0:	84 30       	cpi	r24, 0x04	; 4
     3f2:	20 f4       	brcc	.+8      	; 0x3fc <micros+0x32>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:308
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
    #endif
      #if ((defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1)) && (F_CPU <= 1000000))
        overflows += 2;
      #else
        overflows++;
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	4f 4f       	sbci	r20, 0xFF	; 255
     3fa:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:646
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                     + (ticks * 3 + ((uint16_t)(ticks >> 2) - (ticks >> 4)));
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	89 9f       	mul	r24, r25
     400:	f0 01       	movw	r30, r0
     402:	11 24       	eor	r1, r1
     404:	98 2f       	mov	r25, r24
     406:	92 95       	swap	r25
     408:	9f 70       	andi	r25, 0x0F	; 15
     40a:	e9 1b       	sub	r30, r25
     40c:	f1 09       	sbc	r31, r1
     40e:	86 95       	lsr	r24
     410:	86 95       	lsr	r24
     412:	e8 0f       	add	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:645
            + (ticks * 5 + ((uint16_t)(ticks >> 2) + (ticks >> 4) + (ticks >> 5)));
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
     414:	f1 1d       	adc	r31, r1
     416:	a0 e3       	ldi	r26, 0x30	; 48
     418:	b3 e0       	ldi	r27, 0x03	; 3
     41a:	48 d6       	rcall	.+3216   	; 0x10ac <__muluhisi3>
     41c:	6e 0f       	add	r22, r30
     41e:	7f 1f       	adc	r23, r31
     420:	81 1d       	adc	r24, r1
     422:	91 1d       	adc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:656
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     424:	08 95       	ret

00000426 <disableTWI()>:
_Z10disableTWIv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:26
  sei();
}

void disableTWI() {
  //  TWI0.MCTRLA &= ~(TWI_ENABLE_bm);
  PORTB.DIRSET = PIN0_bm;
     426:	e0 e2       	ldi	r30, 0x20	; 32
     428:	f4 e0       	ldi	r31, 0x04	; 4
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:27
  PORTB.DIRSET = PIN1_bm;
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:28
  cli();
     432:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:29
  PORTB.OUT &= ~PIN0_bm;
     434:	84 81       	ldd	r24, Z+4	; 0x04
     436:	8e 7f       	andi	r24, 0xFE	; 254
     438:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:30
  PORTB.OUT &= ~PIN1_bm;
     43a:	84 81       	ldd	r24, Z+4	; 0x04
     43c:	8d 7f       	andi	r24, 0xFD	; 253
     43e:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:31
  sei();
     440:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:32
}
     442:	08 95       	ret

00000444 <disableSerialHWPins()>:
_Z19disableSerialHWPinsv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:18
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
  PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
}

void disableSerialHWPins() {
  PORTB.DIRSET = PIN3_bm;
     444:	e0 e2       	ldi	r30, 0x20	; 32
     446:	f4 e0       	ldi	r31, 0x04	; 4
     448:	88 e0       	ldi	r24, 0x08	; 8
     44a:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:19
  cli();
     44c:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:20
  PORTB.OUT &= ~PIN3_bm;
     44e:	84 81       	ldd	r24, Z+4	; 0x04
     450:	87 7f       	andi	r24, 0xF7	; 247
     452:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:21
  sei();
     454:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:22
}
     456:	08 95       	ret

00000458 <turnOffDisplay()>:
_Z14turnOffDisplayv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:100
}



void turnOffDisplay() {
  cli();
     458:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:101
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     45a:	80 e2       	ldi	r24, 0x20	; 32
     45c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f7303>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:102
  PORTA.OUTCLR = 0b11111110;  // turn OFF all the cathode pins of the LED sugemnt by setting them to HIGH bits (in common ANODE config)
     460:	8e ef       	ldi	r24, 0xFE	; 254
     462:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f72c3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:103
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH (in common ANODE config)
     466:	80 ef       	ldi	r24, 0xF0	; 240
     468:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f72e2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:105
  sei();
}
     46c:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:71
  0b00010000 //_
};


int c = 0;
void showOnDisplay(uint8_t * digits) {
     46e:	08 95       	ret

00000470 <showOnDisplay(unsigned char*)>:
_Z13showOnDisplayPh():
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:72
  currentMicros = micros();
     478:	ec 01       	movw	r28, r24
     47a:	a7 df       	rcall	.-178    	; 0x3ca <micros>
     47c:	60 93 0c 3c 	sts	0x3C0C, r22	; 0x803c0c <currentMicros>
     480:	70 93 0d 3c 	sts	0x3C0D, r23	; 0x803c0d <currentMicros+0x1>
     484:	80 93 0e 3c 	sts	0x3C0E, r24	; 0x803c0e <currentMicros+0x2>
     488:	90 93 0f 3c 	sts	0x3C0F, r25	; 0x803c0f <currentMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:74

  if (currentMicros - startMicros >= period) {
     48c:	00 91 1b 3c 	lds	r16, 0x3C1B	; 0x803c1b <startMicros>
     490:	10 91 1c 3c 	lds	r17, 0x3C1C	; 0x803c1c <startMicros+0x1>
     494:	20 91 1d 3c 	lds	r18, 0x3C1D	; 0x803c1d <startMicros+0x2>
     498:	30 91 1e 3c 	lds	r19, 0x3C1E	; 0x803c1e <startMicros+0x3>
     49c:	60 1b       	sub	r22, r16
     49e:	71 0b       	sbc	r23, r17
     4a0:	82 0b       	sbc	r24, r18
     4a2:	93 0b       	sbc	r25, r19
     4a4:	6a 30       	cpi	r22, 0x0A	; 10
     4a6:	71 05       	cpc	r23, r1
     4a8:	81 05       	cpc	r24, r1
     4aa:	91 05       	cpc	r25, r1
     4ac:	d0 f1       	brcs	.+116    	; 0x522 <showOnDisplay(unsigned char*)+0xb2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:77

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
     4ae:	8e ef       	ldi	r24, 0xFE	; 254
     4b0:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f72c3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:79
    // ---- Deactivate all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
     4b4:	80 ef       	ldi	r24, 0xF0	; 240
     4b6:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f72e2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:82

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
     4ba:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:83
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
     4bc:	80 91 0a 3c 	lds	r24, 0x3C0A	; 0x803c0a <__data_end>
     4c0:	90 91 0b 3c 	lds	r25, 0x3C0B	; 0x803c0b <__data_end+0x1>
     4c4:	21 e1       	ldi	r18, 0x11	; 17
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	08 2e       	mov	r0, r24
     4ca:	01 c0       	rjmp	.+2      	; 0x4ce <showOnDisplay(unsigned char*)+0x5e>
     4cc:	22 0f       	add	r18, r18
     4ce:	0a 94       	dec	r0
     4d0:	ea f7       	brpl	.-6      	; 0x4cc <showOnDisplay(unsigned char*)+0x5c>
     4d2:	20 7f       	andi	r18, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:84
    PORTB.OUTTGL = mask;                    // Toggle those bits
     4d4:	20 93 27 04 	sts	0x0427, r18	; 0x800427 <vtable for UartClass+0x7f72e4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:86
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
     4d8:	c8 0f       	add	r28, r24
     4da:	d9 1f       	adc	r29, r25
     4dc:	e8 81       	ld	r30, Y
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	e2 51       	subi	r30, 0x12	; 18
     4e2:	ff 46       	sbci	r31, 0x6F	; 111
     4e4:	80 81       	ld	r24, Z
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:87
    VPORTA.OUT = this_digit;
     4e6:	81 b9       	out	0x01, r24	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:88
    sei(); // Interrupts back on
     4e8:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:90

    c++;
     4ea:	80 91 0a 3c 	lds	r24, 0x3C0A	; 0x803c0a <__data_end>
     4ee:	90 91 0b 3c 	lds	r25, 0x3C0B	; 0x803c0b <__data_end+0x1>
     4f2:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:91
    if (c > 3) c = 0;
     4f4:	84 30       	cpi	r24, 0x04	; 4
     4f6:	91 05       	cpc	r25, r1
     4f8:	cc f4       	brge	.+50     	; 0x52c <showOnDisplay(unsigned char*)+0xbc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:90
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
     4fa:	80 93 0a 3c 	sts	0x3C0A, r24	; 0x803c0a <__data_end>
     4fe:	90 93 0b 3c 	sts	0x3C0B, r25	; 0x803c0b <__data_end+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:93
    if (c > 3) c = 0;

    startMicros = currentMicros;
     502:	80 91 0c 3c 	lds	r24, 0x3C0C	; 0x803c0c <currentMicros>
     506:	90 91 0d 3c 	lds	r25, 0x3C0D	; 0x803c0d <currentMicros+0x1>
     50a:	a0 91 0e 3c 	lds	r26, 0x3C0E	; 0x803c0e <currentMicros+0x2>
     50e:	b0 91 0f 3c 	lds	r27, 0x3C0F	; 0x803c0f <currentMicros+0x3>
     512:	80 93 1b 3c 	sts	0x3C1B, r24	; 0x803c1b <startMicros>
     516:	90 93 1c 3c 	sts	0x3C1C, r25	; 0x803c1c <startMicros+0x1>
     51a:	a0 93 1d 3c 	sts	0x3C1D, r26	; 0x803c1d <startMicros+0x2>
     51e:	b0 93 1e 3c 	sts	0x3C1E, r27	; 0x803c1e <startMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:95
  }
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:91
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    if (c > 3) c = 0;
     52c:	10 92 0a 3c 	sts	0x3C0A, r1	; 0x803c0a <__data_end>
     530:	10 92 0b 3c 	sts	0x3C0B, r1	; 0x803c0b <__data_end+0x1>
     534:	e6 cf       	rjmp	.-52     	; 0x502 <showOnDisplay(unsigned char*)+0x92>

00000536 <getAndShowTime()>:
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:29
  }
  rtcAvailable = true;
}


void getAndShowTime() {
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	28 97       	sbiw	r28, 0x08	; 8
     548:	cd bf       	out	0x3d, r28	; 61
     54a:	de bf       	out	0x3e, r29	; 62
millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     54c:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:227
  cli();
     54e:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     550:	c0 90 48 3c 	lds	r12, 0x3C48	; 0x803c48 <timer_millis>
     554:	d0 90 49 3c 	lds	r13, 0x3C49	; 0x803c49 <timer_millis+0x1>
     558:	e0 90 4a 3c 	lds	r14, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     55c:	f0 90 4b 3c 	lds	r15, 0x3C4B	; 0x803c4b <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     560:	8f bf       	out	0x3f, r24	; 63
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:30
  currentCountMillis = millis();
     562:	c0 92 11 3c 	sts	0x3C11, r12	; 0x803c11 <currentCountMillis>
     566:	d0 92 12 3c 	sts	0x3C12, r13	; 0x803c12 <currentCountMillis+0x1>
     56a:	e0 92 13 3c 	sts	0x3C13, r14	; 0x803c13 <currentCountMillis+0x2>
     56e:	f0 92 14 3c 	sts	0x3C14, r15	; 0x803c14 <currentCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:31
  if (currentCountMillis - startCountMillis >= secPeriod) {
     572:	80 91 1f 3c 	lds	r24, 0x3C1F	; 0x803c1f <startCountMillis>
     576:	90 91 20 3c 	lds	r25, 0x3C20	; 0x803c20 <startCountMillis+0x1>
     57a:	a0 91 21 3c 	lds	r26, 0x3C21	; 0x803c21 <startCountMillis+0x2>
     57e:	b0 91 22 3c 	lds	r27, 0x3C22	; 0x803c22 <startCountMillis+0x3>
     582:	a7 01       	movw	r20, r14
     584:	96 01       	movw	r18, r12
     586:	28 1b       	sub	r18, r24
     588:	39 0b       	sbc	r19, r25
     58a:	4a 0b       	sbc	r20, r26
     58c:	5b 0b       	sbc	r21, r27
     58e:	da 01       	movw	r26, r20
     590:	c9 01       	movw	r24, r18
     592:	88 3e       	cpi	r24, 0xE8	; 232
     594:	93 40       	sbci	r25, 0x03	; 3
     596:	a1 05       	cpc	r26, r1
     598:	b1 05       	cpc	r27, r1
     59a:	08 f4       	brcc	.+2      	; 0x59e <getAndShowTime()+0x68>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:32
    if (rtcAvailable) {
     59c:	3b c0       	rjmp	.+118    	; 0x614 <getAndShowTime()+0xde>
     59e:	80 91 53 3c 	lds	r24, 0x3C53	; 0x803c53 <rtcAvailable>
     5a2:	88 23       	and	r24, r24
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <getAndShowTime()+0x72>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:81
    }
}

bool RV8803Tiny::updateTime()
{
    if (!readMultipleRegisters(RV8803_HUNDREDTHS, _time, TIME_ARRAY_LENGTH))
     5a6:	7f c0       	rjmp	.+254    	; 0x6a6 <getAndShowTime()+0x170>
updateTime():
     5a8:	83 ed       	ldi	r24, 0xD3	; 211
     5aa:	9c e3       	ldi	r25, 0x3C	; 60
     5ac:	ca dd       	rcall	.-1132   	; 0x142 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]>
     5ae:	88 23       	and	r24, r24
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <getAndShowTime()+0x7e>
     5b2:	79 c0       	rjmp	.+242    	; 0x6a6 <getAndShowTime()+0x170>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    // If seconds are at 59, read again to make sure we didn't accidentally skip a minute
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
     5b4:	80 91 d4 3c 	lds	r24, 0x3CD4	; 0x803cd4 <rtc+0x7>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     5b8:	28 2f       	mov	r18, r24
     5ba:	22 95       	swap	r18
     5bc:	2f 70       	andi	r18, 0x0F	; 15
     5be:	9a e0       	ldi	r25, 0x0A	; 10
     5c0:	8f 70       	andi	r24, 0x0F	; 15
     5c2:	29 9f       	mul	r18, r25
     5c4:	80 0d       	add	r24, r0
     5c6:	11 24       	eor	r1, r1
updateTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    // If seconds are at 59, read again to make sure we didn't accidentally skip a minute
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
     5c8:	8b 33       	cpi	r24, 0x3B	; 59
     5ca:	c9 f4       	brne	.+50     	; 0x5fe <getAndShowTime()+0xc8>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for seconds changed, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(tempTime[TIME_SECONDS]) == 0)
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     5ce:	28 2f       	mov	r18, r24
     5d0:	22 95       	swap	r18
     5d2:	2f 70       	andi	r18, 0x0F	; 15
     5d4:	8f 70       	andi	r24, 0x0F	; 15
     5d6:	29 9f       	mul	r18, r25
     5d8:	80 0d       	add	r24, r0
     5da:	11 24       	eor	r1, r1
updateTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for seconds changed, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(tempTime[TIME_SECONDS]) == 0)
     5dc:	81 11       	cpse	r24, r1
     5de:	09 c0       	rjmp	.+18     	; 0x5f2 <getAndShowTime()+0xbc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:95
        {
            memcpy(_time, tempTime, TIME_ARRAY_LENGTH);
     5e0:	88 e0       	ldi	r24, 0x08	; 8
     5e2:	fe 01       	movw	r30, r28
     5e4:	31 96       	adiw	r30, 0x01	; 1
     5e6:	a3 ed       	ldi	r26, 0xD3	; 211
     5e8:	bc e3       	ldi	r27, 0x3C	; 60
     5ea:	01 90       	ld	r0, Z+
     5ec:	0d 92       	st	X+, r0
     5ee:	8a 95       	dec	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:97
        }
        if (!readMultipleRegisters(RV8803_HUNDREDTHS, tempTime, TIME_ARRAY_LENGTH))
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <getAndShowTime()+0xb4>
     5f2:	ce 01       	movw	r24, r28
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	a5 dd       	rcall	.-1206   	; 0x142 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]>
     5f8:	88 23       	and	r24, r24
     5fa:	09 f4       	brne	.+2      	; 0x5fe <getAndShowTime()+0xc8>
     5fc:	54 c0       	rjmp	.+168    	; 0x6a6 <getAndShowTime()+0x170>
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:34
      // updateTime i.e read registers, ** must for getting current time
      if (rtc.updateTime()) rtcReadable = true;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	80 93 10 3c 	sts	0x3C10, r24	; 0x803c10 <rtcReadable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:39
      else rtcReadable = false;
    } else {
      rtcReadable = false;
    }
    startCountMillis = currentCountMillis;
     604:	c0 92 1f 3c 	sts	0x3C1F, r12	; 0x803c1f <startCountMillis>
     608:	d0 92 20 3c 	sts	0x3C20, r13	; 0x803c20 <startCountMillis+0x1>
     60c:	e0 92 21 3c 	sts	0x3C21, r14	; 0x803c21 <startCountMillis+0x2>
     610:	f0 92 22 3c 	sts	0x3C22, r15	; 0x803c22 <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:44
  }

  // :: Display Time :: //
  // --- ** corner case handler (In case time retreival was unsuccessful) ** --- //
  if (rtcAvailable && rtcReadable) showOnDisplay(rtc.currTimeAsArray());
     614:	80 91 53 3c 	lds	r24, 0x3C53	; 0x803c53 <rtcAvailable>
     618:	88 23       	and	r24, r24
     61a:	09 f4       	brne	.+2      	; 0x61e <getAndShowTime()+0xe8>
     61c:	47 c0       	rjmp	.+142    	; 0x6ac <getAndShowTime()+0x176>
     61e:	80 91 10 3c 	lds	r24, 0x3C10	; 0x803c10 <rtcReadable>
     622:	88 23       	and	r24, r24
     624:	09 f4       	brne	.+2      	; 0x628 <getAndShowTime()+0xf2>
     626:	42 c0       	rjmp	.+132    	; 0x6ac <getAndShowTime()+0x176>
getHours():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:134
    return BCDtoDEC(_time[TIME_MINUTES]);
}

uint8_t RV8803Tiny::getHours()
{
    return BCDtoDEC(_time[TIME_HOURS]);
     628:	80 91 d6 3c 	lds	r24, 0x3CD6	; 0x803cd6 <rtc+0x9>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     62c:	98 2f       	mov	r25, r24
     62e:	92 95       	swap	r25
     630:	9f 70       	andi	r25, 0x0F	; 15
     632:	2a e0       	ldi	r18, 0x0A	; 10
     634:	8f 70       	andi	r24, 0x0F	; 15
     636:	92 9f       	mul	r25, r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     638:	80 0d       	add	r24, r0
     63a:	11 24       	eor	r1, r1
nthdig():
     63c:	62 2f       	mov	r22, r18
     63e:	f4 d4       	rcall	.+2536   	; 0x1028 <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     640:	39 2f       	mov	r19, r25
     642:	f2 d4       	rcall	.+2532   	; 0x1028 <__udivmodqi4>
currTimeAsArray():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:179
// }

//-- NEW TEST ADDITION --//
uint8_t* RV8803Tiny::currTimeAsArray()
{
    currTimeArray[0] = nthdig(1, getHours());
     644:	90 93 cd 3c 	sts	0x3CCD, r25	; 0x803ccd <rtc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:129
    return BCDtoDEC(_time[TIME_SECONDS]);
}

uint8_t RV8803Tiny::getMinutes()
{
    return BCDtoDEC(_time[TIME_MINUTES]);
     648:	30 93 ce 3c 	sts	0x3CCE, r19	; 0x803cce <rtc+0x1>
getMinutes():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     64c:	80 91 d5 3c 	lds	r24, 0x3CD5	; 0x803cd5 <rtc+0x8>
BCDtoDEC():
     650:	98 2f       	mov	r25, r24
     652:	92 95       	swap	r25
     654:	9f 70       	andi	r25, 0x0F	; 15
     656:	8f 70       	andi	r24, 0x0F	; 15
     658:	92 9f       	mul	r25, r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     65a:	80 0d       	add	r24, r0
     65c:	11 24       	eor	r1, r1
nthdig():
     65e:	e4 d4       	rcall	.+2504   	; 0x1028 <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     660:	39 2f       	mov	r19, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:181
//-- NEW TEST ADDITION --//
uint8_t* RV8803Tiny::currTimeAsArray()
{
    currTimeArray[0] = nthdig(1, getHours());
    currTimeArray[1] = nthdig(0, getHours());
    currTimeArray[2] = nthdig(1, getMinutes());
     662:	e2 d4       	rcall	.+2500   	; 0x1028 <__udivmodqi4>
currTimeAsArray():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:182
    currTimeArray[3] = nthdig(0, getMinutes());
     664:	90 93 cf 3c 	sts	0x3CCF, r25	; 0x803ccf <rtc+0x2>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:124
    return (date);
}

uint8_t RV8803Tiny::getSeconds()
{
    return BCDtoDEC(_time[TIME_SECONDS]);
     668:	30 93 d0 3c 	sts	0x3CD0, r19	; 0x803cd0 <rtc+0x3>
getSeconds():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     66c:	80 91 d4 3c 	lds	r24, 0x3CD4	; 0x803cd4 <rtc+0x7>
BCDtoDEC():
     670:	98 2f       	mov	r25, r24
     672:	92 95       	swap	r25
     674:	9f 70       	andi	r25, 0x0F	; 15
     676:	8f 70       	andi	r24, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     678:	92 9f       	mul	r25, r18
     67a:	80 0d       	add	r24, r0
     67c:	11 24       	eor	r1, r1
nthdig():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     67e:	d4 d4       	rcall	.+2472   	; 0x1028 <__udivmodqi4>
     680:	39 2f       	mov	r19, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:183
{
    currTimeArray[0] = nthdig(1, getHours());
    currTimeArray[1] = nthdig(0, getHours());
    currTimeArray[2] = nthdig(1, getMinutes());
    currTimeArray[3] = nthdig(0, getMinutes());
    currTimeArray[4] = nthdig(1, getSeconds());
     682:	d2 d4       	rcall	.+2468   	; 0x1028 <__udivmodqi4>
currTimeAsArray():
     684:	90 93 d1 3c 	sts	0x3CD1, r25	; 0x803cd1 <rtc+0x4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:184
    currTimeArray[5] = nthdig(0, getSeconds());
     688:	30 93 d2 3c 	sts	0x3CD2, r19	; 0x803cd2 <rtc+0x5>
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:44
     68c:	8d ec       	ldi	r24, 0xCD	; 205
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:45
  else showOnDisplay(blankSignal);
     68e:	9c e3       	ldi	r25, 0x3C	; 60
     690:	ef de       	rcall	.-546    	; 0x470 <showOnDisplay(unsigned char*)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:46
}
     692:	28 96       	adiw	r28, 0x08	; 8
     694:	cd bf       	out	0x3d, r28	; 61
     696:	de bf       	out	0x3e, r29	; 62
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	08 95       	ret
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:35
  currentCountMillis = millis();
  if (currentCountMillis - startCountMillis >= secPeriod) {
    if (rtcAvailable) {
      // updateTime i.e read registers, ** must for getting current time
      if (rtc.updateTime()) rtcReadable = true;
      else rtcReadable = false;
     6a6:	10 92 10 3c 	sts	0x3C10, r1	; 0x803c10 <rtcReadable>
     6aa:	ac cf       	rjmp	.-168    	; 0x604 <getAndShowTime()+0xce>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:45
  }

  // :: Display Time :: //
  // --- ** corner case handler (In case time retreival was unsuccessful) ** --- //
  if (rtcAvailable && rtcReadable) showOnDisplay(rtc.currTimeAsArray());
  else showOnDisplay(blankSignal);
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	9c e3       	ldi	r25, 0x3C	; 60
     6b0:	ef cf       	rjmp	.-34     	; 0x690 <getAndShowTime()+0x15a>

000006b2 <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.h:257

  public:
    inline             UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t default_pinset);
    bool                    pins(uint8_t tx, uint8_t rx);
    bool                    swap(uint8_t mux_level = 1);
    void                   begin(uint32_t baud) {begin(baud, SERIAL_8N1);}
     6b2:	dc 01       	movw	r26, r24
     6b4:	ed 91       	ld	r30, X+
     6b6:	fc 91       	ld	r31, X
     6b8:	00 88       	ldd	r0, Z+16	; 0x10
     6ba:	f1 89       	ldd	r31, Z+17	; 0x11
     6bc:	e0 2d       	mov	r30, r0
     6be:	23 e0       	ldi	r18, 0x03	; 3
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	09 94       	ijmp

000006c4 <pinMode>:
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     6c4:	86 31       	cpi	r24, 0x16	; 22
     6c6:	f0 f4       	brcc	.+60     	; 0x704 <pinMode+0x40>
check_valid_digital_pin():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin))
     6c8:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     6ca:	fc 01       	movw	r30, r24
     6cc:	eb 5d       	subi	r30, 0xDB	; 219
     6ce:	fe 46       	sbci	r31, 0x6E	; 110
     6d0:	20 81       	ld	r18, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:137
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
     6d2:	2f 3f       	cpi	r18, 0xFF	; 255
     6d4:	b9 f0       	breq	.+46     	; 0x704 <pinMode+0x40>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:140
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     6d6:	fc 01       	movw	r30, r24
     6d8:	e1 5f       	subi	r30, 0xF1	; 241
     6da:	fe 46       	sbci	r31, 0x6E	; 110
portToPortBaseOffset():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:130
  SREG = oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
     6dc:	e0 81       	ld	r30, Z
     6de:	e2 95       	swap	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:131
  return port << 1;
     6e0:	ee 0f       	add	r30, r30
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:140
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	f4 60       	ori	r31, 0x04	; 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:141
  if (mode & 0x01) {
     6e6:	61 30       	cpi	r22, 0x01	; 1
     6e8:	71 f4       	brne	.+28     	; 0x706 <pinMode+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:143
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     6ea:	21 83       	std	Z+1, r18	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:152
      *(port_base + 5) = bit_mask;
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
     6ec:	87 50       	subi	r24, 0x07	; 7
     6ee:	9f 46       	sbci	r25, 0x6F	; 111
     6f0:	dc 01       	movw	r26, r24
     6f2:	8c 91       	ld	r24, X
     6f4:	80 61       	ori	r24, 0x10	; 16
     6f6:	e8 0f       	add	r30, r24
     6f8:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:153
  bit_mask = *port_base;
     6fa:	80 81       	ld	r24, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:154
  if (mode & 2) {
     6fc:	61 30       	cpi	r22, 0x01	; 1
     6fe:	31 f0       	breq	.+12     	; 0x70c <pinMode+0x48>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:155
    bit_mask |= 0x08;
     700:	88 60       	ori	r24, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:159
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
     702:	80 83       	st	Z, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:160
}
     704:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:145
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
     706:	22 83       	std	Z+2, r18	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:147
    if (mode == 2) {
      *(port_base + 5) = bit_mask;
     708:	25 83       	std	Z+5, r18	; 0x05
     70a:	f0 cf       	rjmp	.-32     	; 0x6ec <pinMode+0x28>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring_digital.c:157
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     70c:	87 7f       	andi	r24, 0xF7	; 247
     70e:	f9 cf       	rjmp	.-14     	; 0x702 <pinMode+0x3e>

00000710 <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:470
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     710:	8f 92       	push	r8
     712:	9f 92       	push	r9
     714:	af 92       	push	r10
     716:	bf 92       	push	r11
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	8c 01       	movw	r16, r24
     726:	4a 01       	movw	r8, r20
     728:	5b 01       	movw	r10, r22
     72a:	e9 01       	movw	r28, r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:473
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     72c:	dc 01       	movw	r26, r24
     72e:	50 96       	adiw	r26, 0x10	; 16
     730:	8c 91       	ld	r24, X
     732:	50 97       	sbiw	r26, 0x10	; 16
     734:	80 ff       	sbrs	r24, 0
     736:	07 c0       	rjmp	.+14     	; 0x746 <UartClass::begin(unsigned long, unsigned int)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:474
    this->end();
     738:	ed 91       	ld	r30, X+
     73a:	fc 91       	ld	r31, X
     73c:	02 88       	ldd	r0, Z+18	; 0x12
     73e:	f3 89       	ldd	r31, Z+19	; 0x13
     740:	e0 2d       	mov	r30, r0
     742:	c8 01       	movw	r24, r16
     744:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:478
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                         // see if they passed anything in low byte or SERIAL_CONFIG_VALID.
     746:	c1 11       	cpse	r28, r1
     748:	01 c0       	rjmp	.+2      	; 0x74c <UartClass::begin(unsigned long, unsigned int)+0x3c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:479
    ctrlc = (uint8_t)SERIAL_8N1;            // low byte of 0 could mean they want SERIAL_5N1. Or that they thought they'd
     74a:	c3 e0       	ldi	r28, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:481
  }
  ctrlc &= ~0x04; // Now unset that 0x04 bit if it's set, because none of the values with it set are supported. We use that to smuggle in a "this constant was specified" for 5N1
     74c:	ec 2e       	mov	r14, r28
     74e:	e8 94       	clt
     750:	e2 f8       	bld	r14, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:482
  uint8_t ctrla = (uint8_t) (options >> 8);// CTRLA will get the remains of the options high byte.
     752:	fd 2e       	mov	r15, r29
     754:	cd 2f       	mov	r28, r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:484
  uint16_t baud_setting = 0;                // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t   ctrlb = (~ctrla & 0xC0);        // Top two bits (TXEN RXEN), inverted so they match he sense in the registers.
     756:	d0 95       	com	r29
     758:	d0 7c       	andi	r29, 0xC0	; 192
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:485
  if (baud   > F_CPU / 16) {            // if this baud is too fast for non-U2X
     75a:	b5 eb       	ldi	r27, 0xB5	; 181
     75c:	8b 16       	cp	r8, r27
     75e:	b4 ec       	ldi	r27, 0xC4	; 196
     760:	9b 06       	cpc	r9, r27
     762:	b4 e0       	ldi	r27, 0x04	; 4
     764:	ab 06       	cpc	r10, r27
     766:	b1 04       	cpc	r11, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:486
        ctrlb   |= USART_RXMODE0_bm;        // set the U2X bit in what will become CTRLB
     768:	28 f0       	brcs	.+10     	; 0x774 <UartClass::begin(unsigned long, unsigned int)+0x64>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:487
        baud   >>= 1;                       // And lower the baud rate by haldf
     76a:	d2 60       	ori	r29, 0x02	; 2
     76c:	b6 94       	lsr	r11
     76e:	a7 94       	ror	r10
     770:	97 94       	ror	r9
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:489
  }
  baud_setting = (((4 * F_CPU) / baud));  // And now the registers that baud was passed in are done.
     772:	87 94       	ror	r8
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	7d e2       	ldi	r23, 0x2D	; 45
     778:	81 e3       	ldi	r24, 0x31	; 49
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	a5 01       	movw	r20, r10
     77e:	94 01       	movw	r18, r8
     780:	73 d4       	rcall	.+2278   	; 0x1068 <__udivmodsi4>
     782:	20 34       	cpi	r18, 0x40	; 64
     784:	31 05       	cpc	r19, r1
     786:	10 f4       	brcc	.+4      	; 0x78c <UartClass::begin(unsigned long, unsigned int)+0x7c>
     788:	20 e4       	ldi	r18, 0x40	; 64
     78a:	30 e0       	ldi	r19, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:495
  if (baud_setting < 64)                      // so set to the maximum baud rate setting.
    baud_setting= 64;       // set the U2X bit in what will become CTRLB
  //} else if (baud < (F_CPU / 16800)) {      // Baud rate is too low
  //  baud_setting = 65535;                   // minimum baud rate.'
                                            // Baud setting done now we do the other options not in CTRLC;
  if (ctrla & 0x04) {                       // is ODME option set?
     78c:	f2 fc       	sbrc	r15, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:496
    ctrlb |= USART_ODME_bm;                 // set the bit in what will become CTRLB
     78e:	d8 60       	ori	r29, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:498
  }
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     790:	8c 2f       	mov	r24, r28
     792:	8b 72       	andi	r24, 0x2B	; 43
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:499
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     794:	d7 fd       	sbrc	r29, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:500
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     796:	80 68       	ori	r24, 0x80	; 128
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:502
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     798:	cd 2f       	mov	r28, r29
     79a:	c8 7c       	andi	r28, 0xC8	; 200
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:503
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback, need to set state bit 2.
     79c:	83 ff       	sbrs	r24, 3
     79e:	07 c0       	rjmp	.+14     	; 0x7ae <UartClass::begin(unsigned long, unsigned int)+0x9e>
     7a0:	c8 3c       	cpi	r28, 0xC8	; 200
     7a2:	29 f4       	brne	.+10     	; 0x7ae <UartClass::begin(unsigned long, unsigned int)+0x9e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:504
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
     7a4:	f8 01       	movw	r30, r16
     7a6:	90 89       	ldd	r25, Z+16	; 0x10
     7a8:	92 60       	ori	r25, 0x02	; 2
     7aa:	90 8b       	std	Z+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:505
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
     7ac:	c8 ed       	ldi	r28, 0xD8	; 216
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:507
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     7ae:	80 fd       	sbrc	r24, 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:508
    setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
     7b0:	c1 60       	ori	r28, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:510
  }
  uint8_t oldSREG = SREG;
     7b2:	ff b6       	in	r15, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:511
  cli();
     7b4:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:512
  volatile USART_t* MyUSART = _hwserial_module;
     7b6:	d8 01       	movw	r26, r16
     7b8:	1c 96       	adiw	r26, 0x0c	; 12
     7ba:	ed 91       	ld	r30, X+
     7bc:	fc 91       	ld	r31, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:513
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     7be:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:514
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     7c0:	e7 82       	std	Z+7, r14	; 0x07
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:515
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     7c2:	20 87       	std	Z+8, r18	; 0x08
     7c4:	31 87       	std	Z+9, r19	; 0x09
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:516
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     7c6:	85 ff       	sbrs	r24, 5
     7c8:	3f c0       	rjmp	.+126    	; 0x848 <UartClass::begin(unsigned long, unsigned int)+0x138>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:517
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     7ca:	cf 77       	andi	r28, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:518
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	94 87       	std	Z+12, r25	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:519
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
     7d2:	95 87       	std	Z+13, r25	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:523
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     7d4:	8f 7d       	andi	r24, 0xDF	; 223
     7d6:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:524
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     7d8:	d6 83       	std	Z+6, r29	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:525
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
     7da:	f8 01       	movw	r30, r16
     7dc:	27 85       	ldd	r18, Z+15	; 0x0f
     7de:	86 85       	ldd	r24, Z+14	; 0x0e
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:538
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     7e0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vtable for UartClass+0x7f70be>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:537
    uint8_t muxregval    = PORTMUX.USARTROUTEA;
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
     7e4:	22 23       	and	r18, r18
     7e6:	91 f1       	breq	.+100    	; 0x84c <UartClass::begin(unsigned long, unsigned int)+0x13c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:538
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     7e8:	91 60       	ori	r25, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:540
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     7ea:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <vtable for UartClass+0x7f70be>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:548
  #if MEGATINYCORE_SERIES == 2
    if (mux_set == 3) { // not connected to pins...
      return;           // so we are done!
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
     7ee:	82 0f       	add	r24, r18
     7f0:	99 27       	eor	r25, r25
     7f2:	99 1f       	adc	r25, r25
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	8c 01       	movw	r16, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:549
  if ((enmask & 0x40 && !(enmask & 0x08))) {
     7fe:	05 5c       	subi	r16, 0xC5	; 197
     800:	1e 46       	sbci	r17, 0x6E	; 110
     802:	c6 ff       	sbrs	r28, 6
     804:	25 c0       	rjmp	.+74     	; 0x850 <UartClass::begin(unsigned long, unsigned int)+0x140>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:550
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
     806:	c3 fd       	sbrc	r28, 3
     808:	23 c0       	rjmp	.+70     	; 0x850 <UartClass::begin(unsigned long, unsigned int)+0x140>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:553
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	d8 01       	movw	r26, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:555
  }
  if (enmask & 0x80 && !(enmask & 0x10)) {
     80e:	8c 91       	ld	r24, X
     810:	59 df       	rcall	.-334    	; 0x6c4 <pinMode>
     812:	c7 ff       	sbrs	r28, 7
     814:	07 c0       	rjmp	.+14     	; 0x824 <UartClass::begin(unsigned long, unsigned int)+0x114>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:557
    // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
    pinMode(muxrow[1], INPUT_PULLUP);
     816:	c4 fd       	sbrc	r28, 4
     818:	05 c0       	rjmp	.+10     	; 0x824 <UartClass::begin(unsigned long, unsigned int)+0x114>
     81a:	62 e0       	ldi	r22, 0x02	; 2
     81c:	d8 01       	movw	r26, r16
     81e:	11 96       	adiw	r26, 0x01	; 1
     820:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:559
  }
  if (enmask & 0x01) { // finally if RS485 mode is enabled, we make XDIR output, otherwise it can't drive the pin.
     822:	50 df       	rcall	.-352    	; 0x6c4 <pinMode>
     824:	c0 ff       	sbrs	r28, 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:560
    pinMode(muxrow[3], OUTPUT); // make XDIR output.
     826:	04 c0       	rjmp	.+8      	; 0x830 <UartClass::begin(unsigned long, unsigned int)+0x120>
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	f8 01       	movw	r30, r16
     82c:	83 81       	ldd	r24, Z+3	; 0x03
     82e:	4a df       	rcall	.-364    	; 0x6c4 <pinMode>
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:526
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
  SREG = oldSREG;                             // re-enable interrupts, and we're done.
     830:	ff be       	out	0x3f, r15	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:527
}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	bf 90       	pop	r11
     840:	af 90       	pop	r10
     842:	9f 90       	pop	r9
     844:	8f 90       	pop	r8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:521
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     846:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:540

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     848:	14 86       	std	Z+12, r1	; 0x0c
     84a:	c4 cf       	rjmp	.-120    	; 0x7d4 <UartClass::begin(unsigned long, unsigned int)+0xc4>
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:551
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
  if ((enmask & 0x40 && !(enmask & 0x08))) {
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     84c:	9e 7f       	andi	r25, 0xFE	; 254
     84e:	cd cf       	rjmp	.-102    	; 0x7ea <UartClass::begin(unsigned long, unsigned int)+0xda>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:553
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     850:	2c 2f       	mov	r18, r28
     852:	20 75       	andi	r18, 0x50	; 80
     854:	f1 f2       	breq	.-68     	; 0x812 <UartClass::begin(unsigned long, unsigned int)+0x102>
     856:	85 5c       	subi	r24, 0xC5	; 197
     858:	9e 46       	sbci	r25, 0x6E	; 110
     85a:	62 e0       	ldi	r22, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART0.cpp:73
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     85c:	fc 01       	movw	r30, r24
     85e:	80 81       	ld	r24, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART0.cpp:76
      __asm__ __volatile__(
                "jmp _do_dre"  "\n"
                ::"z"(&Serial));
     860:	d7 cf       	rjmp	.-82     	; 0x810 <UartClass::begin(unsigned long, unsigned int)+0x100>

00000862 <__vector_28>:
__vector_28():
     862:	ef 93       	push	r30
     864:	ff 93       	push	r31
     866:	e8 e5       	ldi	r30, 0x58	; 88
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART0.cpp:55
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     868:	fc e3       	ldi	r31, 0x3C	; 60
     86a:	08 c0       	rjmp	.+16     	; 0x87c <_do_dre()>

0000086c <__vector_27>:
__vector_27():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART0.cpp:58
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	e8 e5       	ldi	r30, 0x58	; 88
     872:	fc e3       	ldi	r31, 0x3C	; 60
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART0.cpp:31
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     874:	31 c0       	rjmp	.+98     	; 0x8d8 <_do_rxc()>

00000876 <__vector_29>:
__vector_29():
     876:	ef 93       	push	r30
     878:	e0 e0       	ldi	r30, 0x00	; 0
     87a:	52 c0       	rjmp	.+164    	; 0x920 <_do_txc()>

0000087c <_do_dre()>:
_Z7_do_drev():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:307
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                        "\n"   // and RETI!
      ::);
     87c:	2f 93       	push	r18
     87e:	2f b7       	in	r18, 0x3f	; 63
     880:	2f 93       	push	r18
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	68 94       	set

0000088c <_poll_dre>:
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	c4 85       	ldd	r28, Z+12	; 0x0c
     894:	d8 e0       	ldi	r29, 0x08	; 8
     896:	94 89       	ldd	r25, Z+20	; 0x14
     898:	df 01       	movw	r26, r30
     89a:	a9 0f       	add	r26, r25
     89c:	b2 1f       	adc	r27, r18
     89e:	ab 5a       	subi	r26, 0xAB	; 171
     8a0:	bf 4f       	sbci	r27, 0xFF	; 255
     8a2:	8c 91       	ld	r24, X
     8a4:	20 e4       	ldi	r18, 0x40	; 64
     8a6:	2c 83       	std	Y+4, r18	; 0x04
     8a8:	8a 83       	std	Y+2, r24	; 0x02
     8aa:	9f 5f       	subi	r25, 0xFF	; 255
     8ac:	9f 71       	andi	r25, 0x1F	; 31
     8ae:	8d 81       	ldd	r24, Y+5	; 0x05
     8b0:	23 89       	ldd	r18, Z+19	; 0x13
     8b2:	29 13       	cpse	r18, r25
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <_done_dre_irq>
     8b6:	8f 7d       	andi	r24, 0xDF	; 223
     8b8:	8d 83       	std	Y+5, r24	; 0x05

000008ba <_done_dre_irq>:
     8ba:	94 8b       	std	Z+20, r25	; 0x14
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	0e f0       	brts	.+2      	; 0x8c4 <_done_dre_irq+0xa>
     8c2:	20 cd       	rjmp	.-1472   	; 0x304 <_poll_dre_done>
     8c4:	bf 91       	pop	r27
     8c6:	af 91       	pop	r26
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	2f 91       	pop	r18
     8ce:	2f bf       	out	0x3f, r18	; 63
     8d0:	2f 91       	pop	r18
     8d2:	ff 91       	pop	r31
     8d4:	ef 91       	pop	r30
     8d6:	18 95       	reti

000008d8 <_do_rxc()>:
_Z7_do_rxcv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:175
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     8d8:	2f 93       	push	r18
     8da:	2f b7       	in	r18, 0x3f	; 63
     8dc:	2f 93       	push	r18
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	c4 85       	ldd	r28, Z+12	; 0x0c
     8e8:	d8 e0       	ldi	r29, 0x08	; 8
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	98 81       	ld	r25, Y
     8ee:	81 fd       	sbrc	r24, 1
     8f0:	0d c0       	rjmp	.+26     	; 0x90c <_end_rxc>
     8f2:	c1 89       	ldd	r28, Z+17	; 0x11
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	8c 0f       	add	r24, r28
     8f8:	8f 73       	andi	r24, 0x3F	; 63
     8fa:	22 89       	ldd	r18, Z+18	; 0x12
     8fc:	28 17       	cp	r18, r24
     8fe:	31 f0       	breq	.+12     	; 0x90c <_end_rxc>
     900:	ce 0f       	add	r28, r30
     902:	df 2f       	mov	r29, r31
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	d2 1f       	adc	r29, r18
     908:	9d 8b       	std	Y+21, r25	; 0x15
     90a:	81 8b       	std	Z+17, r24	; 0x11

0000090c <_end_rxc>:
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	2f 91       	pop	r18
     916:	2f bf       	out	0x3f, r18	; 63
     918:	2f 91       	pop	r18
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	18 95       	reti

00000920 <_do_txc()>:
_Z7_do_txcv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/UART.cpp:105
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     920:	ff 93       	push	r31
     922:	8f 93       	push	r24
     924:	8f b7       	in	r24, 0x3f	; 63
     926:	8f 93       	push	r24
     928:	f8 e0       	ldi	r31, 0x08	; 8

0000092a <_txc_flush_rx>:
     92a:	80 81       	ld	r24, Z
     92c:	84 81       	ldd	r24, Z+4	; 0x04
     92e:	87 ff       	sbrs	r24, 7
     930:	fc cf       	rjmp	.-8      	; 0x92a <_txc_flush_rx>
     932:	85 81       	ldd	r24, Z+5	; 0x05
     934:	8f 7b       	andi	r24, 0xBF	; 191
     936:	80 68       	ori	r24, 0x80	; 128
     938:	85 83       	std	Z+5, r24	; 0x05
     93a:	8f 91       	pop	r24
     93c:	8f bf       	out	0x3f, r24	; 63
     93e:	8f 91       	pop	r24
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	18 95       	reti

00000946 <__vector_9>:
__vector_9():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:142
#elif defined(MILLIS_USE_TIMERB1)
  ISR(TCB1_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:154
    #else
      timer_millis += 2;
    #endif
  #else
    #if !defined(MILLIS_USE_TIMERRTC) // TCA0 or TCD0
      uint32_t m = timer_millis;
     962:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <timer_millis>
     966:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <timer_millis+0x1>
     96a:	a0 91 4a 3c 	lds	r26, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     96e:	b0 91 4b 3c 	lds	r27, 0x3C4B	; 0x803c4b <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:155
      uint16_t f = timer_fract;
     972:	40 91 15 3c 	lds	r20, 0x3C15	; 0x803c15 <timer_fract>
     976:	50 91 16 3c 	lds	r21, 0x3C16	; 0x803c16 <timer_fract+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:157
      m += MILLIS_INC;
      f += FRACT_INC;
     97a:	9a 01       	movw	r18, r20
     97c:	20 5d       	subi	r18, 0xD0	; 208
     97e:	3c 4f       	sbci	r19, 0xFC	; 252
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:158
      if (f >= FRACT_MAX) {
     980:	28 3e       	cpi	r18, 0xE8	; 232
     982:	63 e0       	ldi	r22, 0x03	; 3
     984:	36 07       	cpc	r19, r22
     986:	28 f0       	brcs	.+10     	; 0x992 <__vector_9+0x4c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:160

        f -= FRACT_MAX;
     988:	28 5e       	subi	r18, 0xE8	; 232
     98a:	33 40       	sbci	r19, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:161
        m += 1;
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	a1 1d       	adc	r26, r1
     990:	b1 1d       	adc	r27, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:163
      }
      timer_fract = f;
     992:	20 93 15 3c 	sts	0x3C15, r18	; 0x803c15 <timer_fract>
     996:	30 93 16 3c 	sts	0x3C16, r19	; 0x803c16 <timer_fract+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:164
      timer_millis = m;
     99a:	80 93 48 3c 	sts	0x3C48, r24	; 0x803c48 <timer_millis>
     99e:	90 93 49 3c 	sts	0x3C49, r25	; 0x803c49 <timer_millis+0x1>
     9a2:	a0 93 4a 3c 	sts	0x3C4A, r26	; 0x803c4a <timer_millis+0x2>
     9a6:	b0 93 4b 3c 	sts	0x3C4B, r27	; 0x803c4b <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:167
    #endif
    // if RTC is used as timer, we only increment the overflow count
    timer_overflow_count++;
     9aa:	80 91 17 3c 	lds	r24, 0x3C17	; 0x803c17 <timer_overflow_count>
     9ae:	90 91 18 3c 	lds	r25, 0x3C18	; 0x803c18 <timer_overflow_count+0x1>
     9b2:	a0 91 19 3c 	lds	r26, 0x3C19	; 0x803c19 <timer_overflow_count+0x2>
     9b6:	b0 91 1a 3c 	lds	r27, 0x3C1A	; 0x803c1a <timer_overflow_count+0x3>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	a1 1d       	adc	r26, r1
     9be:	b1 1d       	adc	r27, r1
     9c0:	80 93 17 3c 	sts	0x3C17, r24	; 0x803c17 <timer_overflow_count>
     9c4:	90 93 18 3c 	sts	0x3C18, r25	; 0x803c18 <timer_overflow_count+0x1>
     9c8:	a0 93 19 3c 	sts	0x3C19, r26	; 0x803c19 <timer_overflow_count+0x2>
     9cc:	b0 93 1a 3c 	sts	0x3C1A, r27	; 0x803c1a <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:171
  #endif
  /* Clear flag */
  #if defined(MILLIS_USE_TIMERA0)
    TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm;
     9d0:	82 e0       	ldi	r24, 0x02	; 2
     9d2:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <vtable for UartClass+0x7f78c8>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:179
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
  #endif
}
     9d6:	bf 91       	pop	r27
     9d8:	af 91       	pop	r26
     9da:	9f 91       	pop	r25
     9dc:	8f 91       	pop	r24
     9de:	6f 91       	pop	r22
     9e0:	5f 91       	pop	r21
     9e2:	4f 91       	pop	r20
     9e4:	3f 91       	pop	r19
     9e6:	2f 91       	pop	r18
     9e8:	0f 90       	pop	r0
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	0f 90       	pop	r0
     9ee:	1f 90       	pop	r1
     9f0:	18 95       	reti

000009f2 <__vector_6>:
__vector_6():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:39
  RTC.CTRLA = RTC_PRESCALER_DIV32_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
              | RTC_RTCEN_bm                        // Enable: enabled
              | RTC_RUNSTDBY_bm;                    // Run In Standby: enabled
}

ISR(RTC_CNT_vect) {
     9f2:	1f 92       	push	r1
     9f4:	0f 92       	push	r0
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	0f 92       	push	r0
     9fa:	11 24       	eor	r1, r1
     9fc:	8f 93       	push	r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:40
  RTC.INTFLAGS = RTC_OVF_bm;            // Clear flag by writing '1':
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <vtable for UartClass+0x7f7000>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:41
  showTimePeriodOver = 1;
     a04:	80 93 54 3c 	sts	0x3C54, r24	; 0x803c54 <showTimePeriodOver>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:42
}
     a08:	8f 91       	pop	r24
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <__vector_5>:
__vector_5():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:19
volatile byte showTimePeriodOver;



//--- ISR for waking up from sleep mode ---//
ISR(PORTC_PORT_vect) {
     a14:	1f 92       	push	r1
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
     a1e:	8f 93       	push	r24
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:20
  byte flags = PORTC.INTFLAGS; // slower a TID BIT 
     a24:	e0 e4       	ldi	r30, 0x40	; 64
     a26:	f4 e0       	ldi	r31, 0x04	; 4
     a28:	81 85       	ldd	r24, Z+9	; 0x09
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:23
  //  byte flags = VPORTC.INTFLAGS; // faster (TEST TBD)
  
  PORTC.INTFLAGS = flags; //clear flags
     a2a:	81 87       	std	Z+9, r24	; 0x09
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:24
  wakeUpTriggered = 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	80 93 23 3c 	sts	0x3C23, r24	; 0x803c23 <wakeUpTriggered>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:25
}
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	8f 91       	pop	r24
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <global constructors keyed to 65535_0_clock_firmware_production.ino.cpp.o.2557>:
_GLOBAL__I_65535_0_clock_firmware_production.ino.cpp.o.2557():
     a42:	e8 e5       	ldi	r30, 0x58	; 88
     a44:	fc e3       	ldi	r31, 0x3C	; 60
     a46:	12 82       	std	Z+2, r1	; 0x02
     a48:	13 82       	std	Z+3, r1	; 0x03
     a4a:	88 ee       	ldi	r24, 0xE8	; 232
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	84 83       	std	Z+4, r24	; 0x04
     a54:	95 83       	std	Z+5, r25	; 0x05
     a56:	a6 83       	std	Z+6, r26	; 0x06
     a58:	b7 83       	std	Z+7, r27	; 0x07
     a5a:	87 e4       	ldi	r24, 0x47	; 71
     a5c:	91 e9       	ldi	r25, 0x91	; 145
     a5e:	80 83       	st	Z, r24
     a60:	91 83       	std	Z+1, r25	; 0x01
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	98 e0       	ldi	r25, 0x08	; 8
     a66:	84 87       	std	Z+12, r24	; 0x0c
     a68:	95 87       	std	Z+13, r25	; 0x0d
     a6a:	16 86       	std	Z+14, r1	; 0x0e
     a6c:	17 86       	std	Z+15, r1	; 0x0f
     a6e:	08 95       	ret

00000a70 <main>:
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	00 d0       	rcall	.+0      	; 0xa76 <main+0x6>
     a76:	00 d0       	rcall	.+0      	; 0xa78 <main+0x8>
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
init_clock():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1287
      #elif (F_CPU == 8000000) // 16MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
      #elif (F_CPU == 5000000) // 20MHz prescaled by 4
        /* Clock DIV4 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));
     a7c:	88 ed       	ldi	r24, 0xD8	; 216
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	84 bf       	out	0x34, r24	; 52
     a82:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f6f1e>
init_ADC0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1383
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      ADC0.CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  3000000    //  4 MHz /  4 = 1.0 MHz,   5 MHz /  4 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
     a86:	81 e5       	ldi	r24, 0x51	; 81
     a88:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f74bf>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1390
      ADC0.CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #endif
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      ADC0.SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      ADC0.SAMPCTRL = (13);   // 15 ADC clock,s 12 us
     a8c:	8d e0       	ldi	r24, 0x0D	; 13
     a8e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <vtable for UartClass+0x7f74c2>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1394
    #else
      ADC0.SAMPCTRL = (10); // 12 ADC clocks, 12 us
    #endif
    ADC0.CTRLD    = ADC_INITDLY_DLY16_gc;
     a92:	50 e2       	ldi	r21, 0x20	; 32
     a94:	85 2e       	mov	r8, r21
     a96:	80 92 03 06 	sts	0x0603, r8	; 0x800603 <vtable for UartClass+0x7f74c0>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1395
    ADC0.CTRLA    = ADC_ENABLE_bm;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <vtable for UartClass+0x7f74bd>
init_TCA0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1487
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     aa0:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <vtable for UartClass+0x7f78c0>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1492

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     aa4:	6e ef       	ldi	r22, 0xFE	; 254
     aa6:	96 2e       	mov	r9, r22
     aa8:	90 92 26 0a 	sts	0x0A26, r9	; 0x800a26 <vtable for UartClass+0x7f78e3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1493
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     aac:	90 92 27 0a 	sts	0x0A27, r9	; 0x800a27 <vtable for UartClass+0x7f78e4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1513
  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 1000000) // and use 16...
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
     ab0:	19 e0       	ldi	r17, 0x09	; 9
     ab2:	10 93 00 0a 	sts	0x0A00, r17	; 0x800a00 <vtable for UartClass+0x7f78bd>
init_millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1181
{
  #if defined(MILLIS_USE_TIMERNONE)
    badCall("init_millis() is only valid with millis time keeping enabled.");
  #else
    #if defined(MILLIS_USE_TIMERA0)
      TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
     ab6:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <vtable for UartClass+0x7f78c7>
     aba:	82 60       	ori	r24, 0x02	; 2
     abc:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <vtable for UartClass+0x7f78c7>
init():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:1257
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
     ac0:	78 94       	sei
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
     ac2:	78 94       	sei
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:27
uint16_t safeLowVoltage   = 31; //3.0V

uint8_t currTime[6];

void setup() {
  disableSerialHWPins();
     ac4:	bf dc       	rcall	.-1666   	; 0x444 <disableSerialHWPins()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:28
  disableTWI();
     ac6:	af dc       	rcall	.-1698   	; 0x426 <disableTWI()>
disableUnusedPins():
     ac8:	88 e0       	ldi	r24, 0x08	; 8
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:11
  License: MIT
*/

void disableUnusedPins() {
  //  Set them to input pull and do not keep them floating
  PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
     aca:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <vtable for UartClass+0x7f730d>
     ace:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <vtable for UartClass+0x7f730e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:12
  PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
     ad2:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <vtable for UartClass+0x7f7310>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:13
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
     ad6:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <vtable for UartClass+0x7f7311>
setupDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:14
  PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
     ada:	80 92 41 04 	sts	0x0441, r8	; 0x800441 <vtable for UartClass+0x7f72fe>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:29
unsigned long currentWarningCountMillis;


void setupDisplay() {
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
     ade:	80 92 46 04 	sts	0x0446, r8	; 0x800446 <vtable for UartClass+0x7f7303>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:30
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off
     ae2:	90 92 01 04 	sts	0x0401, r9	; 0x800401 <vtable for UartClass+0x7f72be>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:33

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
     ae6:	80 ef       	ldi	r24, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:36

  //  Anode Pins for LEDS
  PORTB.DIRSET = 0b11110000;
     ae8:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <vtable for UartClass+0x7f72de>
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:35
  //--- Disable unused pins (i.e do not keep them floating) | For efficient low power in sleep mode ---//
  disableUnusedPins();

  //--- Seven segment display initialization ---//
  setupDisplay();
  turnOffDisplay();
     aec:	b5 dc       	rcall	.-1686   	; 0x458 <turnOffDisplay()>
setupButtons():
     aee:	10 93 52 04 	sts	0x0452, r17	; 0x800452 <vtable for UartClass+0x7f730f>
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:48



//--- Buttons initialization ---//
void setupButtons() {
  PORTC.PIN2CTRL = 0b00001001; // in INPUT pullup mode - will trigger an async ISR // for wakeup from sleep
     af2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <vtable for UartClass+0x7f76dd>
  //--- Enable ADC ---//
  // ADC0.CTRLA |= ADC_ENABLE_bm;


  //--- disable SPI ---//
  SPI0.CTRLA &= ~(SPI_ENABLE_bm);
     af6:	8e 7f       	andi	r24, 0xFE	; 254
     af8:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <vtable for UartClass+0x7f76dd>
     afc:	78 94       	sei
millis():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:51

  // Enable interrupt
  sei();
     afe:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     b00:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:227
  cli();
     b02:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     b06:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <timer_millis+0x1>
     b0a:	a0 91 4a 3c 	lds	r26, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     b0e:	b0 91 4b 3c 	lds	r27, 0x3C4B	; 0x803c4b <timer_millis+0x3>
     b12:	2f bf       	out	0x3f, r18	; 63
setup():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     b14:	80 93 1f 3c 	sts	0x3C1F, r24	; 0x803c1f <startCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:54

  // Setup some counters...
  startCountMillis = millis();        // For the ext rtc
     b18:	90 93 20 3c 	sts	0x3C20, r25	; 0x803c20 <startCountMillis+0x1>
     b1c:	a0 93 21 3c 	sts	0x3C21, r26	; 0x803c21 <startCountMillis+0x2>
     b20:	b0 93 22 3c 	sts	0x3C22, r27	; 0x803c22 <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:55
  startMicros = micros();             // For display fps
     b24:	52 dc       	rcall	.-1884   	; 0x3ca <micros>
     b26:	60 93 1b 3c 	sts	0x3C1B, r22	; 0x803c1b <startMicros>
     b2a:	70 93 1c 3c 	sts	0x3C1C, r23	; 0x803c1c <startMicros+0x1>
     b2e:	80 93 1d 3c 	sts	0x3C1D, r24	; 0x803c1d <startMicros+0x2>
     b32:	90 93 1e 3c 	sts	0x3C1E, r25	; 0x803c1e <startMicros+0x3>
millis():
     b36:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     b38:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:227
  cli();
     b3a:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     b3e:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <timer_millis+0x1>
     b42:	a0 91 4a 3c 	lds	r26, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     b46:	b0 91 4b 3c 	lds	r27, 0x3C4B	; 0x803c4b <timer_millis+0x3>
     b4a:	2f bf       	out	0x3f, r18	; 63
setup():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     b4c:	80 93 4f 3c 	sts	0x3C4F, r24	; 0x803c4f <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:56
  startWarningCountMillis = millis(); // For battery low voltage warning LED blinking
     b50:	90 93 50 3c 	sts	0x3C50, r25	; 0x803c50 <startWarningCountMillis+0x1>
     b54:	a0 93 51 3c 	sts	0x3C51, r26	; 0x803c51 <startWarningCountMillis+0x2>
     b58:	b0 93 52 3c 	sts	0x3C52, r27	; 0x803c52 <startWarningCountMillis+0x3>
     b5c:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <vtable for UartClass+0x7f6f0d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:59

  //--- Sleep mode enablers ---//
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b60:	89 7f       	andi	r24, 0xF9	; 249
     b62:	84 60       	ori	r24, 0x04	; 4
     b64:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <vtable for UartClass+0x7f6f0d>
     b68:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <vtable for UartClass+0x7f6f0d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:60
  sleep_enable();
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <vtable for UartClass+0x7f6f0d>
ADCVoltRefSetup():
     b72:	70 e1       	ldi	r23, 0x10	; 16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:42
//----- LOW VOLTAGE CALCULATION -----//
//-----------------------------------//
// Courtesy: http://www.technoblogy.com/show?3K82 & http://www.technoblogy.com/list?3KKM

void ADCVoltRefSetup() {
  VREF.CTRLA = VREF_ADC0REFSEL_1V1_gc;
     b74:	57 2e       	mov	r5, r23
batteryWarningLED_OFF():
     b76:	e0 ef       	ldi	r30, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:120



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     b78:	7e 2e       	mov	r7, r30
loop():
     b7a:	44 24       	eor	r4, r4
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:94
    //      Serial.println(" V");
    //    }

    batteryWarningLED_OFF();      // On wake up, initialize the warning led dot of the segment to be OFF
    turnOffDisplay();             // On wake up, initialize the whole display segment to be OFF
    do_blink = 1;                 // On wake up, initializing the variable for low voltage warning blinking action.
     b7c:	43 94       	inc	r4
     b7e:	31 2c       	mov	r3, r1
     b80:	fb ed       	ldi	r31, 0xDB	; 219
     b82:	ef 2e       	mov	r14, r31
     b84:	fc e3       	ldi	r31, 0x3C	; 60
     b86:	ff 2e       	mov	r15, r31
     b88:	ad e3       	ldi	r26, 0x3D	; 61
     b8a:	ca 2e       	mov	r12, r26
     b8c:	ac e3       	ldi	r26, 0x3C	; 60
     b8e:	da 2e       	mov	r13, r26
     b90:	80 91 55 3c 	lds	r24, 0x3C55	; 0x803c55 <showCurrTimePressed>
watchButtons():
     b94:	90 91 23 3c 	lds	r25, 0x3C23	; 0x803c23 <wakeUpTriggered>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:53
}


void watchButtons() {
  if (wakeUpTriggered == 1) {
     b98:	91 30       	cpi	r25, 0x01	; 1
     b9a:	41 f4       	brne	.+16     	; 0xbac <main+0x13c>
     b9c:	10 92 23 3c 	sts	0x3C23, r1	; 0x803c23 <wakeUpTriggered>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:54
    wakeUpTriggered = 0;
     ba0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <vtable for UartClass+0x7f7305>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:59

    //    if (debug_log) Serial.println(F("Interrupt-1 fired. Awaking device & reading Pins.."));

    // Read PC2
    SW_OneState = PORTC.IN & PIN2_bm;
     ba4:	82 ff       	sbrs	r24, 2
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:61

    if (SW_OneState) {
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <main+0x140>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	f4 cf       	rjmp	.-24     	; 0xb94 <main+0x124>
loop():
     bac:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:69


void loop() {
  watchButtons();

  if (showCurrTimePressed) {
     bae:	e1 f3       	breq	.-8      	; 0xba8 <main+0x138>
     bb0:	10 92 55 3c 	sts	0x3C55, r1	; 0x803c55 <showCurrTimePressed>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:70
    showCurrTimePressed = false;
     bb4:	40 e0       	ldi	r20, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:73

    //--- Enable Serial for time setting over serial ---//
    Serial.begin(115200);
     bb6:	52 ec       	ldi	r21, 0xC2	; 194
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	88 e5       	ldi	r24, 0x58	; 88
     bbe:	9c e3       	ldi	r25, 0x3C	; 60
     bc0:	78 dd       	rcall	.-1296   	; 0x6b2 <UartClass::begin(unsigned long)>
init():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     bc2:	11 e0       	ldi	r17, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:19
{
}

void TinyMegaI2CMaster::init()
{
  pinMode(PIN_WIRE_SDA, INPUT_PULLUP);
     bc4:	62 e0       	ldi	r22, 0x02	; 2
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	7d dd       	rcall	.-1286   	; 0x6c4 <pinMode>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:20
  pinMode(PIN_WIRE_SCL, INPUT_PULLUP);
     bca:	62 e0       	ldi	r22, 0x02	; 2
     bcc:	8b e0       	ldi	r24, 0x0B	; 11
     bce:	7a dd       	rcall	.-1292   	; 0x6c4 <pinMode>
     bd0:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <vtable for UartClass+0x7f76d3>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     bd4:	10 93 13 08 	sts	0x0813, r17	; 0x800813 <vtable for UartClass+0x7f76d0>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:29
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     bd8:	10 93 15 08 	sts	0x0815, r17	; 0x800815 <vtable for UartClass+0x7f76d2>
begin():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	91 da       	rcall	.-2782   	; 0x104 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>
     be2:	88 23       	and	r24, r24
     be4:	09 f4       	brne	.+2      	; 0xbe8 <main+0x178>
     be6:	54 c0       	rjmp	.+168    	; 0xc90 <main+0x220>
setupRTC():
     be8:	10 93 53 3c 	sts	0x3C53, r17	; 0x803c53 <rtcAvailable>
ADCVoltRefSetup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:25

void setupRTC() {
  while (rtc.begin() == false) { // un-shifted default address for RV-8803 is 0x32. Check library!
    rtcAvailable = false;
  }
  rtcAvailable = true;
     bec:	50 92 a0 00 	sts	0x00A0, r5	; 0x8000a0 <vtable for UartClass+0x7f6f5d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:42
     bf0:	87 e1       	ldi	r24, 0x17	; 23
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:43
  ADC0.CTRLC = ADC_REFSEL_VDDREF_gc | ADC_PRESC_DIV256_gc; // 78kHz clock
     bf2:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f74bf>
     bf6:	8d e1       	ldi	r24, 0x1D	; 29
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:44
  ADC0.MUXPOS = ADC_MUXPOS_INTREF_gc;                      // Measure INTREF
     bf8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <vtable for UartClass+0x7f74c3>
     bfc:	10 93 00 06 	sts	0x0600, r17	; 0x800600 <vtable for UartClass+0x7f74bd>
measuredVoltage():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:45
  ADC0.CTRLA = ADC_ENABLE_bm;                              // Single, 10-bit
     c00:	10 93 08 06 	sts	0x0608, r17	; 0x800608 <vtable for UartClass+0x7f74c5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:50
}

uint16_t measuredVoltage() {
  uint16_t  v;
  ADC0.COMMAND = ADC_STCONV_bm;                            // Start conversion
     c04:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <vtable for UartClass+0x7f74c5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:51
  while (ADC0.COMMAND & ADC_STCONV_bm);                    // Wait for completion
     c08:	80 fd       	sbrc	r24, 0
     c0a:	fc cf       	rjmp	.-8      	; 0xc04 <main+0x194>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:52
  uint16_t adc_reading = ADC0.RES;                         // ADC conversion result
     c0c:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <vtable for UartClass+0x7f74cd>
     c10:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <vtable for UartClass+0x7f74ce>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:53
  v = 11264 / adc_reading;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	9c e2       	ldi	r25, 0x2C	; 44
     c18:	13 d2       	rcall	.+1062   	; 0x1040 <__udivmodhi4>
     c1a:	8b 01       	movw	r16, r22
batteryWarningLED_OFF():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:119
}



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
     c1c:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:120
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     c1e:	70 92 25 04 	sts	0x0425, r7	; 0x800425 <vtable for UartClass+0x7f72e2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:121
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	a4 2e       	mov	r10, r20
     c26:	a0 92 46 04 	sts	0x0446, r10	; 0x800446 <vtable for UartClass+0x7f7303>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:122
  sei();                      // Attach interrupt again
     c2a:	78 94       	sei
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:93
    //      Serial.print(float(currBattVolt) / 10);
    //      Serial.println(" V");
    //    }

    batteryWarningLED_OFF();      // On wake up, initialize the warning led dot of the segment to be OFF
    turnOffDisplay();             // On wake up, initialize the whole display segment to be OFF
     c2c:	15 dc       	rcall	.-2006   	; 0x458 <turnOffDisplay()>
     c2e:	40 92 08 3c 	sts	0x3C08, r4	; 0x803c08 <do_blink>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:94
    do_blink = 1;                 // On wake up, initializing the variable for low voltage warning blinking action.
     c32:	30 92 09 3c 	sts	0x3C09, r3	; 0x803c09 <do_blink+0x1>
     c36:	80 91 06 3c 	lds	r24, 0x3C06	; 0x803c06 <stayAwakeFor>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:97


    RTC_DELAY_init(stayAwakeFor); // Start the timer for keeping track of time for how long to keep the uC awake and do it's business (5000 ms)
     c3a:	90 91 07 3c 	lds	r25, 0x3C07	; 0x803c07 <stayAwakeFor+0x1>
RTC_DELAY_init():
     c3e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <vtable for UartClass+0x7f7004>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:30
}


//--- uC's internal RTC & interrupt based based delay method ---//
void RTC_DELAY_init(int RTCdelay) {
  RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;    // 32.768kHz Internal Crystal Oscillator (INT32K)
     c42:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <vtable for UartClass+0x7f6ffe>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:31
  while (RTC.STATUS > 0);               // Wait for all register to be synchronized
     c46:	21 11       	cpse	r18, r1
     c48:	fc cf       	rjmp	.-8      	; 0xc42 <main+0x1d2>
     c4a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <vtable for UartClass+0x7f7007>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:32
  RTC.PER = RTCdelay;                   // Set period for delay
     c4e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <vtable for UartClass+0x7f7008>
     c52:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <vtable for UartClass+0x7f6fff>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:33
  RTC.INTCTRL |= RTC_OVF_bm;            // Enable overflow Interrupt which will trigger ISR
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <vtable for UartClass+0x7f6fff>
     c5c:	89 ea       	ldi	r24, 0xA9	; 169
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:34
  RTC.CTRLA = RTC_PRESCALER_DIV32_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
     c5e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <vtable for UartClass+0x7f6ffd>
fillDataArray():
     c62:	66 24       	eor	r6, r6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:47
  newDataArrived = false;

  while (Serial.available() > 0) {
    incomingChar = Serial.read();
    if (incomingChar == '\n') {
      newDataArrived = true;
     c64:	63 94       	inc	r6
stop():
     c66:	37 e0       	ldi	r19, 0x07	; 7
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     c68:	23 2e       	mov	r2, r19
loop():
     c6a:	80 91 54 3c 	lds	r24, 0x3C54	; 0x803c54 <showTimePeriodOver>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:99

    while (showTimePeriodOver == 0) {
     c6e:	81 11       	cpse	r24, r1
     c70:	6d c1       	rjmp	.+730    	; 0xf4c <main+0x4dc>
     c72:	0f 31       	cpi	r16, 0x1F	; 31
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:101
      // If voltage detected is lower than the safe operational voltage threshold!
      if (currBattVolt < safeLowVoltage && currBattVolt <= unsafeLowVoltage) {
     c74:	11 05       	cpc	r17, r1
     c76:	08 f0       	brcs	.+2      	; 0xc7a <main+0x20a>
     c78:	85 c1       	rjmp	.+778    	; 0xf84 <main+0x514>
     c7a:	0d 31       	cpi	r16, 0x1D	; 29
     c7c:	11 05       	cpc	r17, r1
     c7e:	e0 f4       	brcc	.+56     	; 0xcb8 <main+0x248>
batteryWarningLED_ON():
     c80:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:110
}



void batteryWarningLED_ON() {
  cli();                      // Detach interrupt (to avoid any glitch)
     c82:	50 92 27 04 	sts	0x0427, r5	; 0x800427 <vtable for UartClass+0x7f72e4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:111
  PORTB.OUTTGL = 0b00010000;  // Toggle the ANODE bit responsible for our LED dot in the matrix
     c86:	20 e2       	ldi	r18, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:112
  VPORTC.OUT = PIN5_bm;       // Quickly set the pin PC5 to high with this spl method.
     c88:	b2 2e       	mov	r11, r18
     c8a:	b9 b8       	out	0x09, r11	; 9
     c8c:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:113
  sei();                      // Attach interrupt again
     c8e:	ed cf       	rjmp	.-38     	; 0xc6a <main+0x1fa>
setupRTC():
     c90:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <rtcAvailable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:23



void setupRTC() {
  while (rtc.begin() == false) { // un-shifted default address for RV-8803 is 0x32. Check library!
    rtcAvailable = false;
     c94:	97 cf       	rjmp	.-210    	; 0xbc4 <main+0x154>
low_voltage_warn():
     c96:	80 91 4c 3c 	lds	r24, 0x3C4C	; 0x803c4c <tog>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:151
        break;
      }

      //--- Toggle PC5 (Battery warning LED dot) output on and off mechanism ---//
      byte dot_pin_mask = 0b00010000; // mask to make the cathide bit, responsible for our led dot to toggle
      tog = !tog;
     c9a:	86 25       	eor	r24, r6
     c9c:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <tog>
     ca0:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:152
      if (tog) {
     ca2:	09 f4       	brne	.+2      	; 0xca6 <main+0x236>
     ca4:	55 c0       	rjmp	.+170    	; 0xd50 <main+0x2e0>
main():
     ca6:	80 e1       	ldi	r24, 0x10	; 16
low_voltage_warn():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:153
        dot_pin_mask = 0b00010000;
     ca8:	70 92 25 04 	sts	0x0425, r7	; 0x800425 <vtable for UartClass+0x7f72e2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:159
      } else {
        dot_pin_mask = 0b00000000;
      }

      //      PORTC.OUTCLR = PIN5_bm;       // Set the pin LOW
      PORTB.OUTSET = 0b11110000;    // Deactivate all on PORTB bits to which the COMMON CATHODE pins of our LED segment are connected, which are  by setting them HIGH
     cac:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:160
      cli();                        // Detach interrupt (to avoid any glitch)
     cae:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <vtable for UartClass+0x7f72e4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:161
      PORTB.OUTTGL = dot_pin_mask;  // Toggle the cathode bit responsible for our LED dot in the matrix
     cb2:	40 e2       	ldi	r20, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:162
      VPORTC.OUT = PIN5_bm;         // Quickly set the pin to high with this spl method.
     cb4:	49 b9       	out	0x09, r20	; 9
     cb6:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:163
      sei();                        // Attach interrupt again
     cb8:	80 91 08 3c 	lds	r24, 0x3C08	; 0x803c08 <do_blink>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:133
// This function show a warning LED for (total ON period)/2 seconds
// and then shows the time...
void low_voltage_warn() {
  // Block code to only blink warning LED
  // while (true) {
  while (do_blink == 1) {
     cbc:	90 91 09 3c 	lds	r25, 0x3C09	; 0x803c09 <do_blink+0x1>
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <main+0x256>
     cc4:	43 c0       	rjmp	.+134    	; 0xd4c <main+0x2dc>
millis():
     cc6:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     cc8:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:227
  cli();
     cca:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     cce:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <timer_millis+0x1>
     cd2:	a0 91 4a 3c 	lds	r26, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     cd6:	b0 91 4b 3c 	lds	r27, 0x3C4B	; 0x803c4b <timer_millis+0x3>
     cda:	2f bf       	out	0x3f, r18	; 63
low_voltage_warn():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.9/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     cdc:	20 91 4f 3c 	lds	r18, 0x3C4F	; 0x803c4f <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:135
    currentWarningCountMillis = millis();
    if (currentWarningCountMillis - startWarningCountMillis >= warning_blink_gap) {
     ce0:	30 91 50 3c 	lds	r19, 0x3C50	; 0x803c50 <startWarningCountMillis+0x1>
     ce4:	40 91 51 3c 	lds	r20, 0x3C51	; 0x803c51 <startWarningCountMillis+0x2>
     ce8:	50 91 52 3c 	lds	r21, 0x3C52	; 0x803c52 <startWarningCountMillis+0x3>
     cec:	4c 01       	movw	r8, r24
     cee:	5d 01       	movw	r10, r26
     cf0:	82 1a       	sub	r8, r18
     cf2:	93 0a       	sbc	r9, r19
     cf4:	a4 0a       	sbc	r10, r20
     cf6:	b5 0a       	sbc	r11, r21
     cf8:	a5 01       	movw	r20, r10
     cfa:	94 01       	movw	r18, r8
     cfc:	2d 37       	cpi	r18, 0x7D	; 125
     cfe:	31 05       	cpc	r19, r1
     d00:	41 05       	cpc	r20, r1
     d02:	51 05       	cpc	r21, r1
     d04:	c8 f2       	brcs	.-78     	; 0xcb8 <main+0x248>
     d06:	80 93 4f 3c 	sts	0x3C4F, r24	; 0x803c4f <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:137

      startWarningCountMillis = currentWarningCountMillis;
     d0a:	90 93 50 3c 	sts	0x3C50, r25	; 0x803c50 <startWarningCountMillis+0x1>
     d0e:	a0 93 51 3c 	sts	0x3C51, r26	; 0x803c51 <startWarningCountMillis+0x2>
     d12:	b0 93 52 3c 	sts	0x3C52, r27	; 0x803c52 <startWarningCountMillis+0x3>
     d16:	80 91 4d 3c 	lds	r24, 0x3C4D	; 0x803c4d <blink_count>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:139

      blink_count++;
     d1a:	90 91 4e 3c 	lds	r25, 0x3C4E	; 0x803c4e <blink_count+0x1>
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	80 93 4d 3c 	sts	0x3C4D, r24	; 0x803c4d <blink_count>
     d24:	90 93 4e 3c 	sts	0x3C4E, r25	; 0x803c4e <blink_count+0x1>
     d28:	05 97       	sbiw	r24, 0x05	; 5
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:141

      if (blink_count >= max_blinks) {
     d2a:	0c f4       	brge	.+2      	; 0xd2e <main+0x2be>
     d2c:	b4 cf       	rjmp	.-152    	; 0xc96 <main+0x226>
batteryWarningLED_OFF():
     d2e:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:119
}



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
     d30:	70 92 25 04 	sts	0x0425, r7	; 0x800425 <vtable for UartClass+0x7f72e2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:120
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     d34:	30 e2       	ldi	r19, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:121
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     d36:	30 93 46 04 	sts	0x0446, r19	; 0x800446 <vtable for UartClass+0x7f7303>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:122
  sei();                      // Attach interrupt again
     d3a:	78 94       	sei
low_voltage_warn():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:144
      blink_count++;

      if (blink_count >= max_blinks) {
        //--- Clear and Stop the blinking LED ---//
        batteryWarningLED_OFF();
        blink_count = 0;
     d3c:	10 92 4d 3c 	sts	0x3C4D, r1	; 0x803c4d <blink_count>
     d40:	10 92 4e 3c 	sts	0x3C4E, r1	; 0x803c4e <blink_count+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:145
        do_blink = 0;
     d44:	10 92 08 3c 	sts	0x3C08, r1	; 0x803c08 <do_blink>
     d48:	10 92 09 3c 	sts	0x3C09, r1	; 0x803c09 <do_blink+0x1>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:110
      // If voltage detected is low but not critically low and below safest threshold!
      if (currBattVolt < safeLowVoltage && currBattVolt > unsafeLowVoltage) {
        // Blocks and Blinks a dot LED, 2 times (in 1250 ms) as the warning to show that the battery voltage is falling.
        low_voltage_warn();
        // In the next remaining period [ (5000-1250)ms ] of the whole awake period, it continues to show the time.
        getAndShowTime();
     d4c:	f4 db       	rcall	.-2072   	; 0x536 <getAndShowTime()>
     d4e:	8d cf       	rjmp	.-230    	; 0xc6a <main+0x1fa>
main():
     d50:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:155
      byte dot_pin_mask = 0b00010000; // mask to make the cathide bit, responsible for our led dot to toggle
      tog = !tog;
      if (tog) {
        dot_pin_mask = 0b00010000;
      } else {
        dot_pin_mask = 0b00000000;
     d52:	aa cf       	rjmp	.-172    	; 0xca8 <main+0x238>
fillDataArray():
     d54:	10 92 3f 3c 	sts	0x3C3F, r1	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:50
      idx = 0;
    } else {
      newDataArrived = false;
     d58:	20 91 24 3c 	lds	r18, 0x3C24	; 0x803c24 <idx>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:51
      dataArray[idx] = incomingChar;
     d5c:	30 91 25 3c 	lds	r19, 0x3C25	; 0x803c25 <idx+0x1>
     d60:	f9 01       	movw	r30, r18
     d62:	ea 5d       	subi	r30, 0xDA	; 218
     d64:	f3 4c       	sbci	r31, 0xC3	; 195
     d66:	80 83       	st	Z, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:52
      idx++;
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	20 93 24 3c 	sts	0x3C24, r18	; 0x803c24 <idx>
     d70:	30 93 25 3c 	sts	0x3C25, r19	; 0x803c25 <idx+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:44


void fillDataArray() {
  newDataArrived = false;

  while (Serial.available() > 0) {
     d74:	88 e5       	ldi	r24, 0x58	; 88
     d76:	9c e3       	ldi	r25, 0x3C	; 60
     d78:	84 da       	rcall	.-2808   	; 0x282 <UartClass::available()>
     d7a:	18 16       	cp	r1, r24
     d7c:	19 06       	cpc	r1, r25
     d7e:	64 f4       	brge	.+24     	; 0xd98 <main+0x328>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:45
    incomingChar = Serial.read();
     d80:	88 e5       	ldi	r24, 0x58	; 88
     d82:	9c e3       	ldi	r25, 0x3C	; 60
     d84:	5c da       	rcall	.-2888   	; 0x23e <UartClass::read()>
     d86:	8a 30       	cpi	r24, 0x0A	; 10
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:46
    if (incomingChar == '\n') {
     d88:	29 f7       	brne	.-54     	; 0xd54 <main+0x2e4>
     d8a:	60 92 3f 3c 	sts	0x3C3F, r6	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:47
      newDataArrived = true;
     d8e:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <idx>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:48
      idx = 0;
     d92:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <idx+0x1>
     d96:	ee cf       	rjmp	.-36     	; 0xd74 <main+0x304>
parseDataArray():
     d98:	80 91 3f 3c 	lds	r24, 0x3C3F	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:61

// 02:18:19:6:25:06:2021    (totalDelimators == 6)
// 02:18:19:6:25:06:2021:5  (totalDelimators == 7)
// 02:18:19:6:25:06:2021:5:1(totalDelimators == 8)
void parseDataArray() {
  if (newDataArrived) {
     d9c:	88 23       	and	r24, r24
     d9e:	09 f4       	brne	.+2      	; 0xda2 <main+0x332>
     da0:	cf c0       	rjmp	.+414    	; 0xf40 <main+0x4d0>
     da2:	10 92 3f 3c 	sts	0x3C3F, r1	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:62
    newDataArrived = false;
     da6:	e6 e2       	ldi	r30, 0x26	; 38
     da8:	fc e3       	ldi	r31, 0x3C	; 60
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	21 91       	ld	r18, Z+
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:67
    totalDelimators = 0;

    // Count how many delimators (in our case that is ':') are there
    for (int i = 0; i < sizeOfDataStructure; i++) {
      if (dataArray[i] == ':') {
     db0:	2a 33       	cpi	r18, 0x3A	; 58
     db2:	09 f4       	brne	.+2      	; 0xdb6 <main+0x346>
     db4:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:68
        totalDelimators++;
     db6:	ce 16       	cp	r12, r30
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:66
  if (newDataArrived) {
    newDataArrived = false;
    totalDelimators = 0;

    // Count how many delimators (in our case that is ':') are there
    for (int i = 0; i < sizeOfDataStructure; i++) {
     db8:	df 06       	cpc	r13, r31
     dba:	c9 f7       	brne	.-14     	; 0xdae <main+0x33e>
     dbc:	80 93 3d 3c 	sts	0x3C3D, r24	; 0x803c3d <totalDelimators>
     dc0:	90 93 3e 3c 	sts	0x3C3E, r25	; 0x803c3e <totalDelimators+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:73
        totalDelimators++;
      }
    }

    // Check received data's format & integrity
    if (totalDelimators >= 6) {  // or 6/7/8 based on the stream ends with year value or with additional delay value or with enable tilt flag
     dc4:	06 97       	sbiw	r24, 0x06	; 6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:75
      char * strtokIndx; // this is used by strtok() as an index
      strtokIndx = strtok(dataArray, ":"); // get the first part - the string
     dc6:	0c f4       	brge	.+2      	; 0xdca <main+0x35a>
     dc8:	50 c0       	rjmp	.+160    	; 0xe6a <main+0x3fa>
     dca:	6d e5       	ldi	r22, 0x5D	; 93
     dcc:	71 e9       	ldi	r23, 0x91	; 145
     dce:	86 e2       	ldi	r24, 0x26	; 38
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:77

      hrToBeSet = atoi(strtokIndx);        // convert this part to an integer
     dd0:	9c e3       	ldi	r25, 0x3C	; 60
     dd2:	f8 d0       	rcall	.+496    	; 0xfc4 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:78
      strtokIndx = strtok(NULL, ":");      // this continues where the previous call left off
     dd4:	da d0       	rcall	.+436    	; 0xf8a <atoi>
     dd6:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <hrToBeSet>
     dda:	6d e5       	ldi	r22, 0x5D	; 93
     ddc:	71 e9       	ldi	r23, 0x91	; 145
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:79
      minToBeSet = atoi(strtokIndx);       // convert this part to an integer
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	f0 d0       	rcall	.+480    	; 0xfc4 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:80
      strtokIndx = strtok(NULL, ":");
     de4:	d2 d0       	rcall	.+420    	; 0xf8a <atoi>
     de6:	80 93 41 3c 	sts	0x3C41, r24	; 0x803c41 <minToBeSet>
     dea:	6d e5       	ldi	r22, 0x5D	; 93
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:81
      secToBeSet = atoi(strtokIndx);
     dec:	71 e9       	ldi	r23, 0x91	; 145
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	e8 d0       	rcall	.+464    	; 0xfc4 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:82
      strtokIndx = strtok(NULL, ":");
     df4:	ca d0       	rcall	.+404    	; 0xf8a <atoi>
     df6:	80 93 40 3c 	sts	0x3C40, r24	; 0x803c40 <secToBeSet>
     dfa:	6d e5       	ldi	r22, 0x5D	; 93
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:83
      weekdayToBeSet = atoi(strtokIndx);
     dfc:	71 e9       	ldi	r23, 0x91	; 145
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:84
      strtokIndx = strtok(NULL, ":");
     e02:	e0 d0       	rcall	.+448    	; 0xfc4 <strtok>
     e04:	c2 d0       	rcall	.+388    	; 0xf8a <atoi>
     e06:	80 93 43 3c 	sts	0x3C43, r24	; 0x803c43 <weekdayToBeSet>
     e0a:	6d e5       	ldi	r22, 0x5D	; 93
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:85
      dateToBeSet = atoi(strtokIndx);
     e0c:	71 e9       	ldi	r23, 0x91	; 145
     e0e:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:86
      strtokIndx = strtok(NULL, ":");
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	d8 d0       	rcall	.+432    	; 0xfc4 <strtok>
     e14:	ba d0       	rcall	.+372    	; 0xf8a <atoi>
     e16:	80 93 44 3c 	sts	0x3C44, r24	; 0x803c44 <dateToBeSet>
     e1a:	6d e5       	ldi	r22, 0x5D	; 93
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:87
      monthToBeSet = atoi(strtokIndx);
     e1c:	71 e9       	ldi	r23, 0x91	; 145
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	d0 d0       	rcall	.+416    	; 0xfc4 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:88
      strtokIndx = strtok(NULL, ":");
     e24:	b2 d0       	rcall	.+356    	; 0xf8a <atoi>
     e26:	80 93 45 3c 	sts	0x3C45, r24	; 0x803c45 <monthToBeSet>
     e2a:	6d e5       	ldi	r22, 0x5D	; 93
     e2c:	71 e9       	ldi	r23, 0x91	; 145
     e2e:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:89
      yearToBeSet = atoi(strtokIndx);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	c8 d0       	rcall	.+400    	; 0xfc4 <strtok>
     e34:	aa d0       	rcall	.+340    	; 0xf8a <atoi>
     e36:	80 93 46 3c 	sts	0x3C46, r24	; 0x803c46 <yearToBeSet>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:90
      strtokIndx = strtok(NULL, ":");
     e3a:	6d e5       	ldi	r22, 0x5D	; 93
     e3c:	71 e9       	ldi	r23, 0x91	; 145
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	c0 d0       	rcall	.+384    	; 0xfc4 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:91
      new_stayAwakeFor = (atoi(strtokIndx))*1000; // in millis
     e44:	a2 d0       	rcall	.+324    	; 0xf8a <atoi>
     e46:	fc 01       	movw	r30, r24
     e48:	98 ee       	ldi	r25, 0xE8	; 232
     e4a:	89 2e       	mov	r8, r25
     e4c:	93 e0       	ldi	r25, 0x03	; 3
     e4e:	99 2e       	mov	r9, r25
     e50:	e8 9d       	mul	r30, r8
     e52:	c0 01       	movw	r24, r0
     e54:	e9 9d       	mul	r30, r9
     e56:	90 0d       	add	r25, r0
     e58:	f8 9d       	mul	r31, r8
     e5a:	90 0d       	add	r25, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	80 93 04 3c 	sts	0x3C04, r24	; 0x803c04 <new_stayAwakeFor>
     e62:	90 93 05 3c 	sts	0x3C05, r25	; 0x803c05 <new_stayAwakeFor+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:104
      //        Serial.print("DATE: "); Serial.print(dateToBeSet); Serial.print("-"); Serial.print(monthToBeSet); Serial.print("-"); Serial.println(yearToBeSet);
      //        Serial.print("MS operational delay: "); Serial.println(new_stayAwakeFor);
      //        Serial.print("Tilt SW enable Flag"); Serial.println(enableTiltFunc);
      //      }

      setNewTime = true;
     e66:	60 92 47 3c 	sts	0x3C47, r6	; 0x803c47 <setNewTime>
setRTCToNewTime():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:114
}



void setRTCToNewTime() {
  if (setNewTime) {
     e6a:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <setNewTime>
     e6e:	88 23       	and	r24, r24
     e70:	09 f4       	brne	.+2      	; 0xe74 <main+0x404>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:117
    //    if (debug_log) Serial.println(F("Setting custom time..."));

    if (rtc.setTime(secToBeSet, minToBeSet, hrToBeSet, weekdayToBeSet, dateToBeSet, monthToBeSet, yearToBeSet) == false) {
     e72:	6c cf       	rjmp	.-296    	; 0xd4c <main+0x2dc>
     e74:	20 91 46 3c 	lds	r18, 0x3C46	; 0x803c46 <yearToBeSet>
     e78:	30 91 45 3c 	lds	r19, 0x3C45	; 0x803c45 <monthToBeSet>
     e7c:	50 91 44 3c 	lds	r21, 0x3C44	; 0x803c44 <dateToBeSet>
     e80:	40 91 43 3c 	lds	r20, 0x3C43	; 0x803c43 <weekdayToBeSet>
     e84:	e0 91 42 3c 	lds	r30, 0x3C42	; 0x803c42 <hrToBeSet>
     e88:	f0 91 41 3c 	lds	r31, 0x3C41	; 0x803c41 <minToBeSet>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
     e8c:	80 91 40 3c 	lds	r24, 0x3C40	; 0x803c40 <secToBeSet>
DECtoBCD():
     e90:	6a e0       	ldi	r22, 0x0A	; 10
     e92:	ca d0       	rcall	.+404    	; 0x1028 <__udivmodqi4>
     e94:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:203
    return writeMultipleRegisters(RV8803_SECONDS, time + 1, len - 1);
}

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
     e96:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
     e98:	98 0f       	add	r25, r24
setTime():
     e9a:	90 93 d4 3c 	sts	0x3CD4, r25	; 0x803cd4 <rtc+0x7>
DECtoBCD():
     e9e:	8f 2f       	mov	r24, r31
     ea0:	c3 d0       	rcall	.+390    	; 0x1028 <__udivmodqi4>
     ea2:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:204
}

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
     ea4:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
     ea6:	98 0f       	add	r25, r24
setTime():
     ea8:	90 93 d5 3c 	sts	0x3CD5, r25	; 0x803cd5 <rtc+0x8>
DECtoBCD():
     eac:	8e 2f       	mov	r24, r30
     eae:	bc d0       	rcall	.+376    	; 0x1028 <__udivmodqi4>
     eb0:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:205

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
     eb2:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
     eb4:	98 0f       	add	r25, r24
setTime():
     eb6:	90 93 d6 3c 	sts	0x3CD6, r25	; 0x803cd6 <rtc+0x9>
DECtoBCD():
     eba:	85 2f       	mov	r24, r21
     ebc:	b5 d0       	rcall	.+362    	; 0x1028 <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:206
bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
     ebe:	82 95       	swap	r24
     ec0:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:207
    _time[TIME_WEEKDAY] = 1 << weekday;
     ec2:	98 0f       	add	r25, r24
setTime():
     ec4:	90 93 d8 3c 	sts	0x3CD8, r25	; 0x803cd8 <rtc+0xb>
     ec8:	84 2d       	mov	r24, r4
     eca:	01 c0       	rjmp	.+2      	; 0xece <main+0x45e>
     ecc:	88 0f       	add	r24, r24
     ece:	4a 95       	dec	r20
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
     ed0:	ea f7       	brpl	.-6      	; 0xecc <main+0x45c>
     ed2:	80 93 d7 3c 	sts	0x3CD7, r24	; 0x803cd7 <rtc+0xa>
DECtoBCD():
     ed6:	83 2f       	mov	r24, r19
     ed8:	a7 d0       	rcall	.+334    	; 0x1028 <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:208
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
    _time[TIME_WEEKDAY] = 1 << weekday;
    _time[TIME_MONTH] = DECtoBCD(month);
     eda:	82 95       	swap	r24
     edc:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:209
    _time[TIME_YEAR] = DECtoBCD(year - 2000);
     ede:	98 0f       	add	r25, r24
setTime():
     ee0:	90 93 d9 3c 	sts	0x3CD9, r25	; 0x803cd9 <rtc+0xc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
     ee4:	80 e3       	ldi	r24, 0x30	; 48
     ee6:	82 0f       	add	r24, r18
DECtoBCD():
     ee8:	9f d0       	rcall	.+318    	; 0x1028 <__udivmodqi4>
     eea:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:209
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
    _time[TIME_WEEKDAY] = 1 << weekday;
    _time[TIME_MONTH] = DECtoBCD(month);
    _time[TIME_YEAR] = DECtoBCD(year - 2000);
     eec:	80 7f       	andi	r24, 0xF0	; 240
     eee:	98 0f       	add	r25, r24
setTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:324
}

bool RV8803Tiny::writeMultipleRegisters(uint8_t addr, uint8_t *values, uint8_t len)
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     ef0:	90 93 da 3c 	sts	0x3CDA, r25	; 0x803cda <rtc+0xd>
writeMultipleRegisters():
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	05 d9       	rcall	.-3574   	; 0x104 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>
     efa:	88 23       	and	r24, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:327
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803
        if (TinyMegaI2C.write(addr))
     efc:	f1 f0       	breq	.+60     	; 0xf3a <main+0x4ca>
     efe:	81 e1       	ldi	r24, 0x11	; 17
     f00:	f1 d8       	rcall	.-3614   	; 0xe4 <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>
     f02:	88 23       	and	r24, r24
     f04:	d1 f0       	breq	.+52     	; 0xf3a <main+0x4ca>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:330
        { //  if Acknowledged from RV-8803
            // Master sends out **multiple Data to write to the specified address
            dataSentCounter = 0;
     f06:	10 92 db 3c 	sts	0x3CDB, r1	; 0x803cdb <rtc+0xe>
     f0a:	84 ed       	ldi	r24, 0xD4	; 212
     f0c:	88 2e       	mov	r8, r24
     f0e:	8c e3       	ldi	r24, 0x3C	; 60
     f10:	98 2e       	mov	r9, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:333
            for (uint8_t i = 0; i < len; i++)
            {
                if (TinyMegaI2C.write(values[i]))
     f12:	f4 01       	movw	r30, r8
     f14:	81 91       	ld	r24, Z+
     f16:	4f 01       	movw	r8, r30
     f18:	e5 d8       	rcall	.-3638   	; 0xe4 <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>
     f1a:	88 23       	and	r24, r24
     f1c:	29 f0       	breq	.+10     	; 0xf28 <main+0x4b8>
     f1e:	80 91 db 3c 	lds	r24, 0x3CDB	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:335
                { // if Acknowledged from RV-8803
                    dataSentCounter++;
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 db 3c 	sts	0x3CDB, r24	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:331
        //  Master sends out the Register Address to RV-8803
        if (TinyMegaI2C.write(addr))
        { //  if Acknowledged from RV-8803
            // Master sends out **multiple Data to write to the specified address
            dataSentCounter = 0;
            for (uint8_t i = 0; i < len; i++)
     f28:	e8 14       	cp	r14, r8
     f2a:	f9 04       	cpc	r15, r9
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:338
                if (TinyMegaI2C.write(values[i]))
                { // if Acknowledged from RV-8803
                    dataSentCounter++;
                }
            }
            if (dataSentCounter == len)
     f2c:	91 f7       	brne	.-28     	; 0xf12 <main+0x4a2>
     f2e:	80 91 db 3c 	lds	r24, 0x3CDB	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
     f32:	87 30       	cpi	r24, 0x07	; 7
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:122
      //      if (debug_log) Serial.println("Something went wrong setting the time");
    }

    //    if (debug_log) Serial.println(F("Custom Time set!"));
    setNewTime = false;
     f34:	41 f4       	brne	.+16     	; 0xf46 <main+0x4d6>
stop():
     f36:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f76d1>
setRTCToNewTime():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:107
      //      }

      setNewTime = true;
    }
  } else {
    setNewTime = false;
     f3a:	10 92 47 3c 	sts	0x3C47, r1	; 0x803c47 <setNewTime>
     f3e:	06 cf       	rjmp	.-500    	; 0xd4c <main+0x2dc>
parseDataArray():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
     f40:	10 92 47 3c 	sts	0x3C47, r1	; 0x803c47 <setNewTime>
     f44:	92 cf       	rjmp	.-220    	; 0xe6a <main+0x3fa>
stop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:124
        getAndShowTime();
      }
    }

    // Reset Trigger for RTC delay
    showTimePeriodOver = 0;
     f46:	20 92 14 08 	sts	0x0814, r2	; 0x800814 <vtable for UartClass+0x7f76d1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:127

    // Just before the next awake cycle begins, if the RTC_DELAY_init value has changed set it to new value.
    if (new_stayAwakeFor != stayAwakeFor) {
     f4a:	f7 cf       	rjmp	.-18     	; 0xf3a <main+0x4ca>
loop():
     f4c:	10 92 54 3c 	sts	0x3C54, r1	; 0x803c54 <showTimePeriodOver>
     f50:	80 91 04 3c 	lds	r24, 0x3C04	; 0x803c04 <new_stayAwakeFor>
     f54:	90 91 05 3c 	lds	r25, 0x3C05	; 0x803c05 <new_stayAwakeFor+0x1>
     f58:	20 91 06 3c 	lds	r18, 0x3C06	; 0x803c06 <stayAwakeFor>
     f5c:	30 91 07 3c 	lds	r19, 0x3C07	; 0x803c07 <stayAwakeFor+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:128
      stayAwakeFor = new_stayAwakeFor;
     f60:	82 17       	cp	r24, r18
     f62:	93 07       	cpc	r25, r19
     f64:	21 f0       	breq	.+8      	; 0xf6e <main+0x4fe>
     f66:	80 93 06 3c 	sts	0x3C06, r24	; 0x803c06 <stayAwakeFor>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:137
    // Serial.println(stayAwakeFor);
    // Serial.println(enableTiltFunc);

    // Then go to sleep
    //    if (debug_log) Serial.println(F("Sleeping..."));
    turnOffDisplay();
     f6a:	90 93 07 3c 	sts	0x3C07, r25	; 0x803c07 <stayAwakeFor+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:138
    Serial.flush();                    // flush everything before going to sleep
     f6e:	74 da       	rcall	.-2840   	; 0x458 <turnOffDisplay()>
     f70:	88 e5       	ldi	r24, 0x58	; 88
     f72:	9c e3       	ldi	r25, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:139
    Serial.end();
     f74:	14 da       	rcall	.-3032   	; 0x39e <UartClass::flush()>
     f76:	88 e5       	ldi	r24, 0x58	; 88
     f78:	9c e3       	ldi	r25, 0x3C	; 60
     f7a:	8f d9       	rcall	.-3298   	; 0x29a <UartClass::end()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:140
    disableSerialHWPins();
     f7c:	63 da       	rcall	.-2874   	; 0x444 <disableSerialHWPins()>
     f7e:	53 da       	rcall	.-2906   	; 0x426 <disableTWI()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:141
    disableTWI();
     f80:	88 95       	sleep
     f82:	06 ce       	rjmp	.-1012   	; 0xb90 <main+0x120>
fillDataArray():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:142
    sleep_cpu();
     f84:	10 92 3f 3c 	sts	0x3C3F, r1	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:42
boolean setNewTime;
//int enableTiltFunc = 0;


void fillDataArray() {
  newDataArrived = false;
     f88:	f5 ce       	rjmp	.-534    	; 0xd74 <main+0x304>

00000f8a <atoi>:
atoi():
     f8a:	fc 01       	movw	r30, r24
     f8c:	88 27       	eor	r24, r24
     f8e:	99 27       	eor	r25, r25
     f90:	e8 94       	clt
     f92:	21 91       	ld	r18, Z+
     f94:	20 32       	cpi	r18, 0x20	; 32
     f96:	e9 f3       	breq	.-6      	; 0xf92 <atoi+0x8>
     f98:	29 30       	cpi	r18, 0x09	; 9
     f9a:	10 f0       	brcs	.+4      	; 0xfa0 <atoi+0x16>
     f9c:	2e 30       	cpi	r18, 0x0E	; 14
     f9e:	c8 f3       	brcs	.-14     	; 0xf92 <atoi+0x8>
     fa0:	2b 32       	cpi	r18, 0x2B	; 43
     fa2:	39 f0       	breq	.+14     	; 0xfb2 <atoi+0x28>
     fa4:	2d 32       	cpi	r18, 0x2D	; 45
     fa6:	31 f4       	brne	.+12     	; 0xfb4 <atoi+0x2a>
     fa8:	68 94       	set
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <atoi+0x28>
     fac:	35 d0       	rcall	.+106    	; 0x1018 <__mulhi_const_10>
     fae:	82 0f       	add	r24, r18
     fb0:	91 1d       	adc	r25, r1
     fb2:	21 91       	ld	r18, Z+
     fb4:	20 53       	subi	r18, 0x30	; 48
     fb6:	2a 30       	cpi	r18, 0x0A	; 10
     fb8:	c8 f3       	brcs	.-14     	; 0xfac <atoi+0x22>
     fba:	1e f4       	brtc	.+6      	; 0xfc2 <atoi+0x38>
     fbc:	90 95       	com	r25
     fbe:	81 95       	neg	r24
     fc0:	9f 4f       	sbci	r25, 0xFF	; 255
     fc2:	08 95       	ret

00000fc4 <strtok>:
strtok():
     fc4:	4c ed       	ldi	r20, 0xDC	; 220
     fc6:	5c e3       	ldi	r21, 0x3C	; 60
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <strtok_r>

00000fca <strtok_r>:
strtok_r():
     fca:	fa 01       	movw	r30, r20
     fcc:	a1 91       	ld	r26, Z+
     fce:	b0 81       	ld	r27, Z
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	19 f4       	brne	.+6      	; 0xfda <strtok_r+0x10>
     fd4:	10 97       	sbiw	r26, 0x00	; 0
     fd6:	e1 f0       	breq	.+56     	; 0x1010 <strtok_r+0x46>
     fd8:	cd 01       	movw	r24, r26
     fda:	dc 01       	movw	r26, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0d 90       	ld	r0, X+
     fe0:	00 20       	and	r0, r0
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <strtok_r+0x1e>
     fe4:	c0 01       	movw	r24, r0
     fe6:	13 c0       	rjmp	.+38     	; 0x100e <strtok_r+0x44>
     fe8:	fb 01       	movw	r30, r22
     fea:	21 91       	ld	r18, Z+
     fec:	22 23       	and	r18, r18
     fee:	19 f0       	breq	.+6      	; 0xff6 <strtok_r+0x2c>
     ff0:	20 15       	cp	r18, r0
     ff2:	d9 f7       	brne	.-10     	; 0xfea <strtok_r+0x20>
     ff4:	f3 cf       	rjmp	.-26     	; 0xfdc <strtok_r+0x12>
     ff6:	fb 01       	movw	r30, r22
     ff8:	21 91       	ld	r18, Z+
     ffa:	20 15       	cp	r18, r0
     ffc:	19 f4       	brne	.+6      	; 0x1004 <strtok_r+0x3a>
     ffe:	1e 92       	st	-X, r1
    1000:	11 96       	adiw	r26, 0x01	; 1
    1002:	06 c0       	rjmp	.+12     	; 0x1010 <strtok_r+0x46>
    1004:	22 23       	and	r18, r18
    1006:	c1 f7       	brne	.-16     	; 0xff8 <strtok_r+0x2e>
    1008:	0d 90       	ld	r0, X+
    100a:	00 20       	and	r0, r0
    100c:	a1 f7       	brne	.-24     	; 0xff6 <strtok_r+0x2c>
    100e:	d0 01       	movw	r26, r0
    1010:	fa 01       	movw	r30, r20
    1012:	a1 93       	st	Z+, r26
    1014:	b0 83       	st	Z, r27
    1016:	08 95       	ret

00001018 <__mulhi_const_10>:
__mulhi_const_10():
    1018:	7a e0       	ldi	r23, 0x0A	; 10
    101a:	97 9f       	mul	r25, r23
    101c:	90 2d       	mov	r25, r0
    101e:	87 9f       	mul	r24, r23
    1020:	80 2d       	mov	r24, r0
    1022:	91 0d       	add	r25, r1
    1024:	11 24       	eor	r1, r1
    1026:	08 95       	ret

00001028 <__udivmodqi4>:
__udivmodqi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    1028:	99 1b       	sub	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    102a:	79 e0       	ldi	r23, 0x09	; 9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <__udivmodqi4_ep>

0000102e <__udivmodqi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    102e:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    1030:	96 17       	cp	r25, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__udivmodqi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    1034:	96 1b       	sub	r25, r22

00001036 <__udivmodqi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    1036:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    1038:	7a 95       	dec	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    103a:	c9 f7       	brne	.-14     	; 0x102e <__udivmodqi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    103c:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    103e:	08 95       	ret

00001040 <__udivmodhi4>:
__udivmodhi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1040:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1042:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1044:	51 e1       	ldi	r21, 0x11	; 17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1046:	07 c0       	rjmp	.+14     	; 0x1056 <__udivmodhi4_ep>

00001048 <__udivmodhi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1048:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    104a:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    104c:	a6 17       	cp	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    104e:	b7 07       	cpc	r27, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1050:	10 f0       	brcs	.+4      	; 0x1056 <__udivmodhi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1052:	a6 1b       	sub	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1054:	b7 0b       	sbc	r27, r23

00001056 <__udivmodhi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1056:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1058:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    105a:	5a 95       	dec	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    105c:	a9 f7       	brne	.-22     	; 0x1048 <__udivmodhi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    105e:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1060:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1062:	bc 01       	movw	r22, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1064:	cd 01       	movw	r24, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1066:	08 95       	ret

00001068 <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1068:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    106a:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    106c:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    106e:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1070:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1072:	0d c0       	rjmp	.+26     	; 0x108e <__udivmodsi4_ep>

00001074 <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1074:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1076:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1078:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    107a:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    107c:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    107e:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1080:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1082:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1084:	20 f0       	brcs	.+8      	; 0x108e <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1086:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1088:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    108a:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    108c:	f5 0b       	sbc	r31, r21

0000108e <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    108e:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1090:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1092:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1094:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1096:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1098:	69 f7       	brne	.-38     	; 0x1074 <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    109a:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    109c:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    109e:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    10a0:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    10a2:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    10a4:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    10a6:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    10a8:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    10aa:	08 95       	ret

000010ac <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    10ac:	0f d0       	rcall	.+30     	; 0x10cc <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    10ae:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    10b0:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    10b2:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    10b4:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    10b6:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    10b8:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    10ba:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    10bc:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    10be:	08 95       	ret

000010c0 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    10c0:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    10c2:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    10c4:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    10c6:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    10c8:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    10ca:	09 94       	ijmp

000010cc <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    10cc:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    10ce:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    10d0:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    10d2:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    10d4:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    10d6:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    10d8:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    10da:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    10dc:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    10de:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    10e0:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    10e2:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    10e4:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    10e6:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    10e8:	08 95       	ret

000010ea <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    10ea:	f8 94       	cli

000010ec <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    10ec:	ff cf       	rjmp	.-2      	; 0x10ec <__stop_program>
