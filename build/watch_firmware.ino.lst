
/private/var/folders/yp/37w_03rx1qdbfsqckbyyk9t80000gn/T/arduino-sketch-4007A95F47F35584BE7AA877974180FB/watch_firmware.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	22 c5       	rjmp	.+2628   	; 0xa5a <__vector_5>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	0f c5       	rjmp	.+2590   	; 0xa38 <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	41 c4       	rjmp	.+2178   	; 0x8a8 <__vector_9>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	78 c4       	rjmp	.+2288   	; 0x95e <__vector_27>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	71 c4       	rjmp	.+2274   	; 0x954 <__vector_28>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	79 c4       	rjmp	.+2290   	; 0x968 <__vector_29>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
	...

0000007c <__trampolines_end>:
__trampolines_start():
      7c:	45 46       	sbci	r20, 0x65	; 101
      7e:	47 65       	ori	r20, 0x57	; 87
      80:	66 67       	ori	r22, 0x76	; 118
	...

00000083 <__c.2210>:
      83:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000094 <__ctors_start>:
__ctors_start():
      94:	4f 06       	cpc	r4, r31

00000096 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      96:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      98:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      9a:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      9c:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      9e:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      a0:	de bf       	out	0x3e, r29	; 62

000000a2 <_initThreeStuff()>:
_Z15_initThreeStuffv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:95
 * (many are available reasonably cheaply on aliexpress et al.) end up being very useful        *
 * for this sort of thing.                                                                      */

  void __attribute__((weak)) init_reset_flags();
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
      a2:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <vtable for UartClass+0x7f6a83>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:96
    RSTCTRL.RSTFR = flags;
      a6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <vtable for UartClass+0x7f6a83>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:97
    if (flags == 0) {
      aa:	81 11       	cpse	r24, r1
      ac:	05 c0       	rjmp	.+10     	; 0xb8 <_initThreeStuff()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:98
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
      ae:	98 ed       	ldi	r25, 0xD8	; 216
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	94 bf       	out	0x34, r25	; 52
      b4:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <vtable for UartClass+0x7f6a84>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:100
    }
    GPIOR0 = flags;
      b8:	8c bb       	out	0x1c, r24	; 28

000000ba <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      ba:	2c e3       	ldi	r18, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      bc:	aa e0       	ldi	r26, 0x0A	; 10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      be:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      c4:	ae 3d       	cpi	r26, 0xDE	; 222
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      c6:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      ca:	1c e3       	ldi	r17, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      cc:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      ce:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      d0:	e9 ed       	ldi	r30, 0xD9	; 217
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      d2:	f5 e1       	ldi	r31, 0x15	; 21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      d6:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      d8:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      da:	aa 30       	cpi	r26, 0x0A	; 10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      dc:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      e0:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      e2:	cb e4       	ldi	r28, 0x4B	; 75
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      e4:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e8:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      ea:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ec:	0e 94 9d 0a 	call	0x153a	; 0x153a <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      f0:	ca 34       	cpi	r28, 0x4A	; 74
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      f2:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
      f6:	ea d5       	rcall	.+3028   	; 0xccc <main>
../../../../crt1/gcrt1.S:315
      f8:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <_exit>

000000fc <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.22]>:
_ZN17TinyMegaI2CMaster5writeEh.constprop.22():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:55
  return TinyMegaI2CMaster::read();
}

bool TinyMegaI2CMaster::write(uint8_t data)
{
  while (!(TWI0.MSTATUS & TWI_WIF_bm))
      fe:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <vtable for UartClass+0x7f7258>
     102:	96 ff       	sbrs	r25, 6
     104:	fc cf       	rjmp	.-8      	; 0xfe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.22]>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:57
    ; // Wait for write interrupt flag
  TWI0.MDATA = data;
     106:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <vtable for UartClass+0x7f725b>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:58
  TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;   // Do nothing
     10a:	82 e0       	ldi	r24, 0x02	; 2
     10c:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f7257>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:59
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Returns true if slave gave an ACK
     110:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f7258>
     114:	82 95       	swap	r24
     116:	81 70       	andi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:60
}
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	89 27       	eor	r24, r25
     11c:	08 95       	ret

0000011e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]>:
_ZN17TinyMegaI2CMaster5startEhi.constprop.19():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:66

// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
     11e:	89 2b       	or	r24, r25
     120:	c9 f0       	breq	.+50     	; 0x154 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]+0x36>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:70
    read = 0; // Write
  else
  {
    I2Ccount = readcount;
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	9f ef       	ldi	r25, 0xFF	; 255
     126:	80 93 56 3c 	sts	0x3C56, r24	; 0x803c56 <TinyMegaI2C>
     12a:	90 93 57 3c 	sts	0x3C57, r25	; 0x803c57 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:71
    read = 1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:73
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
     130:	84 66       	ori	r24, 0x64	; 100
     132:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <vtable for UartClass+0x7f725a>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:74
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
     136:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f7258>
     13a:	80 7c       	andi	r24, 0xC0	; 192
     13c:	e1 f3       	breq	.-8      	; 0x136 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]+0x18>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:76
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
     13e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f7258>
     142:	83 fd       	sbrc	r24, 3
     144:	09 c0       	rjmp	.+18     	; 0x158 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]+0x3a>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:78
    return false;                        // Return false if arbitration lost or bus error
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
     146:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f7258>
     14a:	82 95       	swap	r24
     14c:	81 70       	andi	r24, 0x01	; 1
     14e:	91 e0       	ldi	r25, 0x01	; 1
     150:	89 27       	eor	r24, r25
     152:	08 95       	ret
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:67
// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
    read = 0; // Write
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	ec cf       	rjmp	.-40     	; 0x130 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]+0x12>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:77
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
    return false;                        // Return false if arbitration lost or bus error
     158:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:79
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}
     15a:	08 95       	ret

0000015c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]>:
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.5():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:412
    {
        return (false);
    }
}

bool RV8803Tiny::readMultipleRegisters(uint8_t addr, uint8_t *dest, uint8_t len)
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:415
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	db df       	rcall	.-74     	; 0x11e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]>
     168:	81 11       	cpse	r24, r1
     16a:	02 c0       	rjmp	.+4      	; 0x170 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:437
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	32 c0       	rjmp	.+100    	; 0x1d4 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x78>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:418
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803-C7.
        if (TinyMegaI2C.write(addr))
     170:	80 e1       	ldi	r24, 0x10	; 16
     172:	c5 df       	rcall	.-118    	; 0xfe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.22]>
     174:	88 23       	and	r24, r24
     176:	d1 f3       	breq	.-12     	; 0x16c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x10>
restart():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:83

bool TinyMegaI2CMaster::restart(uint8_t address, int readcount)
{
  return TinyMegaI2CMaster::start(address, readcount);
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	9f ef       	ldi	r25, 0xFF	; 255
     17c:	d0 df       	rcall	.-96     	; 0x11e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.5():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:422
        { //  if Acknowledged from RV-8803
            //  Master sends out the Repeated START condition (or STOP condition followed by START condition)
            //  Master sends out Slave Address, 65h for the RV-8803 [ R/W bit is -1 ] indicating unknown number of read operation
            if (TinyMegaI2C.restart(RV8803_ADDR, -1))
     17e:	88 23       	and	r24, r24
     180:	a9 f3       	breq	.-22     	; 0x16c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x10>
     182:	fe 01       	movw	r30, r28
     184:	9e 01       	movw	r18, r28
     186:	28 5f       	subi	r18, 0xF8	; 248
     188:	3f 4f       	sbci	r19, 0xFF	; 255
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     18a:	46 e0       	ldi	r20, 0x06	; 6
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     18c:	52 e0       	ldi	r21, 0x02	; 2
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:34
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
}

uint8_t TinyMegaI2CMaster::read(void)
{
  if (I2Ccount != 0)
     18e:	80 91 56 3c 	lds	r24, 0x3C56	; 0x803c56 <TinyMegaI2C>
     192:	90 91 57 3c 	lds	r25, 0x3C57	; 0x803c57 <TinyMegaI2C+0x1>
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	29 f0       	breq	.+10     	; 0x1a4 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x48>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:35
    I2Ccount--;
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	80 93 56 3c 	sts	0x3C56, r24	; 0x803c56 <TinyMegaI2C>
     1a0:	90 93 57 3c 	sts	0x3C57, r25	; 0x803c57 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:36
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
     1a4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f7258>
     1a8:	87 ff       	sbrs	r24, 7
     1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x48>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:38
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
     1ac:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <vtable for UartClass+0x7f725b>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:40
  // Check slave sent ACK?
  if (I2Ccount != 0)
     1b0:	60 91 56 3c 	lds	r22, 0x3C56	; 0x803c56 <TinyMegaI2C>
     1b4:	70 91 57 3c 	lds	r23, 0x3C57	; 0x803c57 <TinyMegaI2C+0x1>
     1b8:	67 2b       	or	r22, r23
     1ba:	79 f0       	breq	.+30     	; 0x1da <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x7e>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     1bc:	50 93 14 08 	sts	0x0814, r21	; 0x800814 <vtable for UartClass+0x7f7257>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.5():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:433
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
                {
                    dest[i] = TinyMegaI2C.read();
     1c0:	81 93       	st	Z+, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:431
                // 2. [NO NEED] The above Steps can be repeated if necessary and the address bit increments automatically.
                // 3. ** The Master, addressed as Receiver, can stop data transmission by not generating an acknowledge on the
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
     1c2:	2e 17       	cp	r18, r30
     1c4:	3f 07       	cpc	r19, r31
     1c6:	19 f7       	brne	.-58     	; 0x18e <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x32>
stop():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     1c8:	87 e0       	ldi	r24, 0x07	; 7
     1ca:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f7257>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.5():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:437
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	cd 2b       	or	r28, r29
     1d2:	61 f2       	breq	.-104    	; 0x16c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:453
    }
    else
    {
        return (false);
    }
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     1da:	40 93 14 08 	sts	0x0814, r20	; 0x800814 <vtable for UartClass+0x7f7257>
     1de:	f0 cf       	rjmp	.-32     	; 0x1c0 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]+0x64>

000001e0 <micros>:
micros():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:316
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     1e0:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:317
    cli(); /* INTERRUPTS OFF */
     1e2:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:319
    #if defined(MILLIS_USE_TIMERA0)
      ticks = TCA0.SPLIT.HCNT;
     1e4:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <vtable for UartClass+0x7f7464>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:320
      flags = TCA0.SPLIT.INTFLAGS;
     1e8:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <vtable for UartClass+0x7f744e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:336
     * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
     * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4))
      overflows = timer_overflow_count;
     1ec:	20 91 52 3c 	lds	r18, 0x3C52	; 0x803c52 <timer_overflow_count>
     1f0:	30 91 53 3c 	lds	r19, 0x3C53	; 0x803c53 <timer_overflow_count+0x1>
     1f4:	40 91 54 3c 	lds	r20, 0x3C54	; 0x803c54 <timer_overflow_count+0x2>
     1f8:	50 91 55 3c 	lds	r21, 0x3C55	; 0x803c55 <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:341
    #else
      overflows = timer_millis;
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     1fc:	8f bf       	out	0x3f, r24	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:345
    #if defined(MILLIS_USE_TIMERD0)
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
     1fe:	8e ef       	ldi	r24, 0xFE	; 254
     200:	86 1b       	sub	r24, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:346
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
     202:	91 ff       	sbrs	r25, 1
     204:	06 c0       	rjmp	.+12     	; 0x212 <micros+0x32>
     206:	84 30       	cpi	r24, 0x04	; 4
     208:	20 f4       	brcc	.+8      	; 0x212 <micros+0x32>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:353
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
    #endif
        #if (defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4)) && !(F_CPU > 2000000UL)
          overflows +=2;
        #else
          overflows++;
     20a:	2f 5f       	subi	r18, 0xFF	; 255
     20c:	3f 4f       	sbci	r19, 0xFF	; 255
     20e:	4f 4f       	sbci	r20, 0xFF	; 255
     210:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:692
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                     + (ticks * 3 + ((uint16_t)(ticks >> 2) - (ticks >> 4)));
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	89 9f       	mul	r24, r25
     216:	f0 01       	movw	r30, r0
     218:	11 24       	eor	r1, r1
     21a:	98 2f       	mov	r25, r24
     21c:	92 95       	swap	r25
     21e:	9f 70       	andi	r25, 0x0F	; 15
     220:	e9 1b       	sub	r30, r25
     222:	f1 09       	sbc	r31, r1
     224:	86 95       	lsr	r24
     226:	86 95       	lsr	r24
     228:	e8 0f       	add	r30, r24
     22a:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:691
            + (ticks * 5 + ((uint16_t)(ticks >> 2) + (ticks >> 4) + (ticks >> 5)));
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
     22c:	a0 e3       	ldi	r26, 0x30	; 48
     22e:	b3 e0       	ldi	r27, 0x03	; 3
     230:	0e 94 93 0a 	call	0x1526	; 0x1526 <__muluhisi3>
     234:	6e 0f       	add	r22, r30
     236:	7f 1f       	adc	r23, r31
     238:	81 1d       	adc	r24, r1
     23a:	91 1d       	adc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:702
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     23c:	08 95       	ret

0000023e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     23e:	af 92       	push	r10
     240:	bf 92       	push	r11
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	6c 01       	movw	r12, r24
     254:	7b 01       	movw	r14, r22
     256:	8b 01       	movw	r16, r22
     258:	04 0f       	add	r16, r20
     25a:	15 1f       	adc	r17, r21
     25c:	eb 01       	movw	r28, r22
     25e:	5e 01       	movw	r10, r28
     260:	ae 18       	sub	r10, r14
     262:	bf 08       	sbc	r11, r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     264:	c0 17       	cp	r28, r16
     266:	d1 07       	cpc	r29, r17
     268:	59 f0       	breq	.+22     	; 0x280 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:32
    if (write(*buffer++)) {
     26a:	69 91       	ld	r22, Y+
     26c:	d6 01       	movw	r26, r12
     26e:	ed 91       	ld	r30, X+
     270:	fc 91       	ld	r31, X
     272:	01 90       	ld	r0, Z+
     274:	f0 81       	ld	r31, Z
     276:	e0 2d       	mov	r30, r0
     278:	c6 01       	movw	r24, r12
     27a:	09 95       	icall
     27c:	89 2b       	or	r24, r25
     27e:	79 f7       	brne	.-34     	; 0x25e <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     280:	c5 01       	movw	r24, r10
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	0f 91       	pop	r16
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	df 90       	pop	r13
     290:	cf 90       	pop	r12
     292:	bf 90       	pop	r11
     294:	af 90       	pop	r10
     296:	08 95       	ret

00000298 <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:642
  int UartClass::availableForWrite(void) {
    tx_buffer_index_t head;
    tx_buffer_index_t tail;

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
     298:	fc 01       	movw	r30, r24
     29a:	53 89       	ldd	r21, Z+19	; 0x13
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:643
      tail = _tx_buffer_tail;
     29c:	44 89       	ldd	r20, Z+20	; 0x14
     29e:	25 2f       	mov	r18, r21
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	84 2f       	mov	r24, r20
     2a4:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:646
    }
    if (head >= tail) {
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2a6:	82 1b       	sub	r24, r18
     2a8:	93 0b       	sbc	r25, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:645

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
      tail = _tx_buffer_tail;
    }
    if (head >= tail) {
     2aa:	54 17       	cp	r21, r20
     2ac:	10 f0       	brcs	.+4      	; 0x2b2 <UartClass::availableForWrite()+0x1a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:646
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     2ae:	4f 96       	adiw	r24, 0x1f	; 31
     2b0:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:648
    }
    return tail - head - 1;
     2b2:	01 97       	sbiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:649
  }
     2b4:	08 95       	ret

000002b6 <UartClass::read()>:
_ZN9UartClass4readEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:626
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }

  int UartClass::read(void) {
     2b6:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:628
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
     2b8:	91 89       	ldd	r25, Z+17	; 0x11
     2ba:	82 89       	ldd	r24, Z+18	; 0x12
     2bc:	98 17       	cp	r25, r24
     2be:	61 f0       	breq	.+24     	; 0x2d8 <UartClass::read()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:631
      return -1;
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
     2c0:	a2 89       	ldd	r26, Z+18	; 0x12
     2c2:	ae 0f       	add	r26, r30
     2c4:	bf 2f       	mov	r27, r31
     2c6:	b1 1d       	adc	r27, r1
     2c8:	55 96       	adiw	r26, 0x15	; 21
     2ca:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:632
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
     2cc:	92 89       	ldd	r25, Z+18	; 0x12
     2ce:	9f 5f       	subi	r25, 0xFF	; 255
     2d0:	9f 73       	andi	r25, 0x3F	; 63
     2d2:	92 8b       	std	Z+18, r25	; 0x12
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:633
      return c;
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:629
  }

  int UartClass::read(void) {
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
     2da:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:635
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
      return c;
    }
  }
     2dc:	08 95       	ret

000002de <UartClass::peek()>:
_ZN9UartClass4peekEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:618
}
  int UartClass::available(void) {
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
     2de:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:619
    if (_rx_buffer_head == _rx_buffer_tail) {
     2e0:	91 89       	ldd	r25, Z+17	; 0x11
     2e2:	82 89       	ldd	r24, Z+18	; 0x12
     2e4:	98 17       	cp	r25, r24
     2e6:	31 f0       	breq	.+12     	; 0x2f4 <UartClass::peek()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:622
      return -1;
    } else {
      return _rx_buffer[_rx_buffer_tail];
     2e8:	82 89       	ldd	r24, Z+18	; 0x12
     2ea:	e8 0f       	add	r30, r24
     2ec:	f1 1d       	adc	r31, r1
     2ee:	85 89       	ldd	r24, Z+21	; 0x15
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:620
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:624
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }
     2f8:	08 95       	ret

000002fa <UartClass::available()>:
_ZN9UartClass9availableEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:614

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}
  int UartClass::available(void) {
     2fa:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:615
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
     2fc:	91 89       	ldd	r25, Z+17	; 0x11
     2fe:	22 89       	ldd	r18, Z+18	; 0x12
     300:	89 2f       	mov	r24, r25
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	80 5c       	subi	r24, 0xC0	; 192
     306:	9f 4f       	sbci	r25, 0xFF	; 255
     308:	82 1b       	sub	r24, r18
     30a:	91 09       	sbc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:616
  }
     30c:	8f 73       	andi	r24, 0x3F	; 63
     30e:	99 27       	eor	r25, r25
     310:	08 95       	ret

00000312 <UartClass::end()>:
_ZN9UartClass3endEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:598
    pinMode(_usart_pins[muxrow][3], OUTPUT); // make XDIR output.
  }
  */
}

void UartClass::end() {
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
     316:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:600
  // wait for transmission of outgoing data
  flush();
     318:	e8 81       	ld	r30, Y
     31a:	f9 81       	ldd	r31, Y+1	; 0x01
     31c:	06 80       	ldd	r0, Z+6	; 0x06
     31e:	f7 81       	ldd	r31, Z+7	; 0x07
     320:	e0 2d       	mov	r30, r0
     322:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:603
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  // TXCIE only used in half duplex - we can just turn the damned thing off yo!
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     324:	ec 85       	ldd	r30, Y+12	; 0x0c
     326:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:604
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     328:	86 81       	ldd	r24, Z+6	; 0x06
     32a:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:605
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     32c:	85 81       	ldd	r24, Z+5	; 0x05
     32e:	15 82       	std	Z+5, r1	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:606
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error.
     330:	80 e4       	ldi	r24, 0x40	; 64
     332:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:608
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     334:	8a 89       	ldd	r24, Y+18	; 0x12
     336:	89 8b       	std	Y+17, r24	; 0x11
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:612

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     338:	18 8a       	std	Y+16, r1	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:613
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:352
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     340:	dc 01       	movw	r26, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:353
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	07 fe       	sbrs	r0, 7
     346:	04 c0       	rjmp	.+8      	; 0x350 <UartClass::_poll_tx_data_empty()+0x10>
     348:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vtable for UartClass+0x7f6b54>
     34c:	88 23       	and	r24, r24
     34e:	b1 f0       	breq	.+44     	; 0x37c <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:370
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     350:	1c 96       	adiw	r26, 0x0c	; 12
     352:	ed 91       	ld	r30, X+
     354:	fc 91       	ld	r31, X
     356:	1d 97       	sbiw	r26, 0x0d	; 13
     358:	84 81       	ldd	r24, Z+4	; 0x04
     35a:	85 ff       	sbrs	r24, 5
     35c:	0f c0       	rjmp	.+30     	; 0x37c <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:371
      if (_tx_buffer_head != _tx_buffer_tail) {
     35e:	53 96       	adiw	r26, 0x13	; 19
     360:	9c 91       	ld	r25, X
     362:	53 97       	sbiw	r26, 0x13	; 19
     364:	54 96       	adiw	r26, 0x14	; 20
     366:	8c 91       	ld	r24, X
     368:	98 17       	cp	r25, r24
     36a:	21 f0       	breq	.+8      	; 0x374 <UartClass::_poll_tx_data_empty()+0x34>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:373
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     36c:	85 81       	ldd	r24, Z+5	; 0x05
     36e:	8f 7d       	andi	r24, 0xDF	; 223
     370:	85 83       	std	Z+5, r24	; 0x05
     372:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:397
#ifdef USART1
                ::"z"((uint16_t)thisSerial)
#else
                ::"z"(&Serial)
#endif
                : "r18","r19","r24","r25","r26","r27");
     374:	e8 e5       	ldi	r30, 0x58	; 88
     376:	fc e3       	ldi	r31, 0x3C	; 60
     378:	e8 94       	clt
     37a:	01 c3       	rjmp	.+1538   	; 0x97e <_poll_dre>

0000037c <_poll_dre_done>:
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:404
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
  // Note that this currently does not handle cases where the DRE interruopt becomes
  // disabled, yet you are actually attempting to send. I don't think it can happen.
}
     37c:	08 95       	ret

0000037e <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:682
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }


  size_t UartClass::write(uint8_t c) {
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:683
    _state |= 1; // Record that we have written to serial since it was begun.
     388:	88 89       	ldd	r24, Y+16	; 0x10
     38a:	98 2f       	mov	r25, r24
     38c:	91 60       	ori	r25, 0x01	; 1
     38e:	98 8b       	std	Y+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:688
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     390:	2b 89       	ldd	r18, Y+19	; 0x13
     392:	9c 89       	ldd	r25, Y+20	; 0x14
     394:	29 13       	cpse	r18, r25
     396:	0a c0       	rjmp	.+20     	; 0x3ac <UartClass::write(unsigned char)+0x2e>
     398:	ec 85       	ldd	r30, Y+12	; 0x0c
     39a:	fd 85       	ldd	r31, Y+13	; 0x0d
     39c:	94 81       	ldd	r25, Z+4	; 0x04
     39e:	95 ff       	sbrs	r25, 5
     3a0:	05 c0       	rjmp	.+10     	; 0x3ac <UartClass::write(unsigned char)+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:689
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     3a2:	81 fd       	sbrc	r24, 1
     3a4:	0d c0       	rjmp	.+26     	; 0x3c0 <UartClass::write(unsigned char)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:696
        ctrla &= ~USART_RXCIE_bm;
        ctrla |=  USART_TXCIE_bm;
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
        (*_hwserial_module).CTRLA = ctrla;
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     3a6:	80 e4       	ldi	r24, 0x40	; 64
     3a8:	84 83       	std	Z+4, r24	; 0x04
     3aa:	12 c0       	rjmp	.+36     	; 0x3d0 <UartClass::write(unsigned char)+0x52>
     3ac:	06 2f       	mov	r16, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:714
       * // that the interrupt handler is called in this situation
       * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
       */
      return 1;
    }
    tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     3ae:	1b 89       	ldd	r17, Y+19	; 0x13
     3b0:	1f 5f       	subi	r17, 0xFF	; 255
     3b2:	1f 71       	andi	r17, 0x1F	; 31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:718

    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
     3b4:	8c 89       	ldd	r24, Y+20	; 0x14
     3b6:	81 13       	cpse	r24, r17
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:719
      _poll_tx_data_empty();
     3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <UartClass::write(unsigned char)+0x66>
     3ba:	ce 01       	movw	r24, r28
     3bc:	c1 df       	rcall	.-126    	; 0x340 <UartClass::_poll_tx_data_empty()>
     3be:	fa cf       	rjmp	.-12     	; 0x3b4 <UartClass::write(unsigned char)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:690
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
        uint8_t ctrla = (*_hwserial_module).CTRLA;
     3c0:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:691
        ctrla &= ~USART_RXCIE_bm;
     3c2:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:692
        ctrla |=  USART_TXCIE_bm;
     3c4:	80 64       	ori	r24, 0x40	; 64
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:693
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     3c6:	90 e4       	ldi	r25, 0x40	; 64
     3c8:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:694
        (*_hwserial_module).CTRLA = ctrla;
     3ca:	ec 85       	ldd	r30, Y+12	; 0x0c
     3cc:	fd 85       	ldd	r31, Y+13	; 0x0d
     3ce:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:699
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
      }
      // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
      (*_hwserial_module).TXDATAL = c;
     3d0:	ec 85       	ldd	r30, Y+12	; 0x0c
     3d2:	fd 85       	ldd	r31, Y+13	; 0x0d
     3d4:	62 83       	std	Z+2, r22	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:734
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    }
    return 1;
  }
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:721
    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
      _poll_tx_data_empty();
    }
    _tx_buffer[_tx_buffer_head] = c;
     3e4:	eb 89       	ldd	r30, Y+19	; 0x13
     3e6:	ec 0f       	add	r30, r28
     3e8:	fd 2f       	mov	r31, r29
     3ea:	f1 1d       	adc	r31, r1
     3ec:	eb 5a       	subi	r30, 0xAB	; 171
     3ee:	ff 4f       	sbci	r31, 0xFF	; 255
     3f0:	00 83       	st	Z, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:722
    _tx_buffer_head = i;
     3f2:	1b 8b       	std	Y+19, r17	; 0x13
     3f4:	ec 85       	ldd	r30, Y+12	; 0x0c
     3f6:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:723
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     3f8:	88 89       	ldd	r24, Y+16	; 0x10
     3fa:	81 ff       	sbrs	r24, 1
     3fc:	09 c0       	rjmp	.+18     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:724
      uint8_t ctrla = (*_hwserial_module).CTRLA;
     3fe:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:725
      ctrla &= ~USART_RXCIE_bm;
     400:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:726
      ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     402:	80 66       	ori	r24, 0x60	; 96
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:727
      (*_hwserial_module).STATUS = USART_TXCIF_bm;
     404:	90 e4       	ldi	r25, 0x40	; 64
     406:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:728
      (*_hwserial_module).CTRLA = ctrla;
     408:	ec 85       	ldd	r30, Y+12	; 0x0c
     40a:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:731
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     40c:	85 83       	std	Z+5, r24	; 0x05
     40e:	e3 cf       	rjmp	.-58     	; 0x3d6 <UartClass::write(unsigned char)+0x58>
     410:	85 81       	ldd	r24, Z+5	; 0x05
     412:	80 62       	ori	r24, 0x20	; 32
     414:	fb cf       	rjmp	.-10     	; 0x40c <__DATA_REGION_LENGTH__+0xc>

00000416 <UartClass::flush()>:
_ZN9UartClass5flushEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:651
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    }
    return tail - head - 1;
  }

  void UartClass::flush() {
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:655
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXCIF (transmit
    // complete) bit to 1 during initialization
    if (!_state & 1) {
     41c:	88 89       	ldd	r24, Y+16	; 0x10
     41e:	88 23       	and	r24, r24
     420:	59 f0       	breq	.+22     	; 0x438 <UartClass::flush()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:670
    // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
    // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
    // and in that case flush(), and write() with full buffer would just straight up hang...

    // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
    while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     422:	ec 85       	ldd	r30, Y+12	; 0x0c
     424:	fd 85       	ldd	r31, Y+13	; 0x0d
     426:	85 81       	ldd	r24, Z+5	; 0x05
     428:	85 fd       	sbrc	r24, 5
     42a:	03 c0       	rjmp	.+6      	; 0x432 <UartClass::flush()+0x1c>
     42c:	84 81       	ldd	r24, Z+4	; 0x04
     42e:	86 fd       	sbrc	r24, 6
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:675

      // If interrupts are globally disabled or the and DR empty interrupt is disabled,
      // poll the "data register empty" interrupt flag to prevent deadlock

      _poll_tx_data_empty();
     430:	03 c0       	rjmp	.+6      	; 0x438 <UartClass::flush()+0x22>
     432:	ce 01       	movw	r24, r28
     434:	85 df       	rcall	.-246    	; 0x340 <UartClass::_poll_tx_data_empty()>
     436:	f5 cf       	rjmp	.-22     	; 0x422 <UartClass::flush()+0xc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:679
    }
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.h:293
    inline   size_t write(unsigned int n)   {return write((uint8_t)n);}
    inline   size_t write(int n)            {return write((uint8_t)n);}
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	08 95       	ret

00000442 <disableTWI()>:
_Z10disableTWIv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:28
  sei();
}

void disableTWI() {
  //  TWI0.MCTRLA &= ~(TWI_ENABLE_bm);
  PORTB.DIRSET = PIN0_bm;
     442:	e0 e2       	ldi	r30, 0x20	; 32
     444:	f4 e0       	ldi	r31, 0x04	; 4
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:29
  PORTB.DIRSET = PIN1_bm;
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:30
  cli();
     44e:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:31
  PORTB.OUT &= ~PIN0_bm;
     450:	84 81       	ldd	r24, Z+4	; 0x04
     452:	8e 7f       	andi	r24, 0xFE	; 254
     454:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:32
  PORTB.OUT &= ~PIN1_bm;
     456:	84 81       	ldd	r24, Z+4	; 0x04
     458:	8d 7f       	andi	r24, 0xFD	; 253
     45a:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:33
  sei();
     45c:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:34
}
     45e:	08 95       	ret

00000460 <disableSerialHWPins()>:
_Z19disableSerialHWPinsv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:18
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
  PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
}

void disableSerialHWPins() {
  PORTB.DIRSET = PIN2_bm; // TX
     460:	e0 e2       	ldi	r30, 0x20	; 32
     462:	f4 e0       	ldi	r31, 0x04	; 4
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:19
  PORTB.DIRSET = PIN3_bm; // RX
     468:	88 e0       	ldi	r24, 0x08	; 8
     46a:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:20
  cli();
     46c:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:21
  PORTB.OUT &= ~PIN2_bm;
     46e:	84 81       	ldd	r24, Z+4	; 0x04
     470:	8b 7f       	andi	r24, 0xFB	; 251
     472:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:22
  PORTB.OUT &= ~PIN3_bm;
     474:	84 81       	ldd	r24, Z+4	; 0x04
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:23
  sei();
     47a:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:24
}
     47c:	08 95       	ret

0000047e <turnOffDisplay()>:
_Z14turnOffDisplayv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:100
}



void turnOffDisplay() {
  cli();
     47e:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:101
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     480:	80 e2       	ldi	r24, 0x20	; 32
     482:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f6e89>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:102
  PORTA.OUTCLR = 0b11111110;  // turn OFF all the cathode pins of the LED sugemnt by setting them to HIGH bits (in common ANODE config)
     486:	8e ef       	ldi	r24, 0xFE	; 254
     488:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f6e49>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:103
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH (in common ANODE config)
     48c:	80 ef       	ldi	r24, 0xF0	; 240
     48e:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f6e68>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:104
  sei();
     492:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:71
  0b00010000 //_
};


int c = 0;
void showOnDisplay(uint8_t * digits) {
     494:	08 95       	ret

00000496 <showOnDisplay(unsigned char*)>:
_Z13showOnDisplayPh():
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:72
  currentMicros = micros();
     49e:	ec 01       	movw	r28, r24
     4a0:	9f de       	rcall	.-706    	; 0x1e0 <micros>
     4a2:	60 93 0c 3c 	sts	0x3C0C, r22	; 0x803c0c <currentMicros>
     4a6:	70 93 0d 3c 	sts	0x3C0D, r23	; 0x803c0d <currentMicros+0x1>
     4aa:	80 93 0e 3c 	sts	0x3C0E, r24	; 0x803c0e <currentMicros+0x2>
     4ae:	90 93 0f 3c 	sts	0x3C0F, r25	; 0x803c0f <currentMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:74

  if (currentMicros - startMicros >= period) {
     4b2:	00 91 15 3c 	lds	r16, 0x3C15	; 0x803c15 <startMicros>
     4b6:	10 91 16 3c 	lds	r17, 0x3C16	; 0x803c16 <startMicros+0x1>
     4ba:	20 91 17 3c 	lds	r18, 0x3C17	; 0x803c17 <startMicros+0x2>
     4be:	30 91 18 3c 	lds	r19, 0x3C18	; 0x803c18 <startMicros+0x3>
     4c2:	60 1b       	sub	r22, r16
     4c4:	71 0b       	sbc	r23, r17
     4c6:	82 0b       	sbc	r24, r18
     4c8:	93 0b       	sbc	r25, r19
     4ca:	6a 30       	cpi	r22, 0x0A	; 10
     4cc:	71 05       	cpc	r23, r1
     4ce:	81 05       	cpc	r24, r1
     4d0:	91 05       	cpc	r25, r1
     4d2:	d0 f1       	brcs	.+116    	; 0x548 <showOnDisplay(unsigned char*)+0xb2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:77

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
     4d4:	8e ef       	ldi	r24, 0xFE	; 254
     4d6:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f6e49>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:79
    // ---- Deactivate all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
     4da:	80 ef       	ldi	r24, 0xF0	; 240
     4dc:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f6e68>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:82

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
     4e0:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:83
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
     4e2:	80 91 0a 3c 	lds	r24, 0x3C0A	; 0x803c0a <__data_end>
     4e6:	90 91 0b 3c 	lds	r25, 0x3C0B	; 0x803c0b <__data_end+0x1>
     4ea:	21 e1       	ldi	r18, 0x11	; 17
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	08 2e       	mov	r0, r24
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <showOnDisplay(unsigned char*)+0x5e>
     4f2:	22 0f       	add	r18, r18
     4f4:	0a 94       	dec	r0
     4f6:	ea f7       	brpl	.-6      	; 0x4f2 <showOnDisplay(unsigned char*)+0x5c>
     4f8:	20 7f       	andi	r18, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:84
    PORTB.OUTTGL = mask;                    // Toggle those bits
     4fa:	20 93 27 04 	sts	0x0427, r18	; 0x800427 <vtable for UartClass+0x7f6e6a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:86
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
     4fe:	c8 0f       	add	r28, r24
     500:	d9 1f       	adc	r29, r25
     502:	e8 81       	ld	r30, Y
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	e8 59       	subi	r30, 0x98	; 152
     508:	fa 46       	sbci	r31, 0x6A	; 106
     50a:	80 81       	ld	r24, Z
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:87
    VPORTA.OUT = this_digit;
     50c:	81 b9       	out	0x01, r24	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:88
    sei(); // Interrupts back on
     50e:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:90

    c++;
     510:	80 91 0a 3c 	lds	r24, 0x3C0A	; 0x803c0a <__data_end>
     514:	90 91 0b 3c 	lds	r25, 0x3C0B	; 0x803c0b <__data_end+0x1>
     518:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:91
    if (c > 3) c = 0;
     51a:	84 30       	cpi	r24, 0x04	; 4
     51c:	91 05       	cpc	r25, r1
     51e:	cc f4       	brge	.+50     	; 0x552 <showOnDisplay(unsigned char*)+0xbc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:90
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
     520:	80 93 0a 3c 	sts	0x3C0A, r24	; 0x803c0a <__data_end>
     524:	90 93 0b 3c 	sts	0x3C0B, r25	; 0x803c0b <__data_end+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:93
    if (c > 3) c = 0;

    startMicros = currentMicros;
     528:	80 91 0c 3c 	lds	r24, 0x3C0C	; 0x803c0c <currentMicros>
     52c:	90 91 0d 3c 	lds	r25, 0x3C0D	; 0x803c0d <currentMicros+0x1>
     530:	a0 91 0e 3c 	lds	r26, 0x3C0E	; 0x803c0e <currentMicros+0x2>
     534:	b0 91 0f 3c 	lds	r27, 0x3C0F	; 0x803c0f <currentMicros+0x3>
     538:	80 93 15 3c 	sts	0x3C15, r24	; 0x803c15 <startMicros>
     53c:	90 93 16 3c 	sts	0x3C16, r25	; 0x803c16 <startMicros+0x1>
     540:	a0 93 17 3c 	sts	0x3C17, r26	; 0x803c17 <startMicros+0x2>
     544:	b0 93 18 3c 	sts	0x3C18, r27	; 0x803c18 <startMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:95
  }
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	08 95       	ret
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:91
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    if (c > 3) c = 0;
     552:	10 92 0a 3c 	sts	0x3C0A, r1	; 0x803c0a <__data_end>
     556:	10 92 0b 3c 	sts	0x3C0B, r1	; 0x803c0b <__data_end+0x1>
     55a:	e6 cf       	rjmp	.-52     	; 0x528 <showOnDisplay(unsigned char*)+0x92>

0000055c <getAndShowTime()>:
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:29
  }
  rtcAvailable = true;
}


void getAndShowTime() {
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	28 97       	sbiw	r28, 0x08	; 8
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	de bf       	out	0x3e, r29	; 62
millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:248


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     572:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:249
  cli();
     574:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:300
      "adc %D0, %D1"    "\n\t"
      : "+r" (m), "+r" (temp), "+d" (cnt)
      );
    */
  #else
    m = timer_millis;
     576:	c0 90 4e 3c 	lds	r12, 0x3C4E	; 0x803c4e <timer_millis>
     57a:	d0 90 4f 3c 	lds	r13, 0x3C4F	; 0x803c4f <timer_millis+0x1>
     57e:	e0 90 50 3c 	lds	r14, 0x3C50	; 0x803c50 <timer_millis+0x2>
     582:	f0 90 51 3c 	lds	r15, 0x3C51	; 0x803c51 <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:301
    SREG = oldSREG;
     586:	8f bf       	out	0x3f, r24	; 63
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:30
  currentCountMillis = millis();
     588:	c0 92 11 3c 	sts	0x3C11, r12	; 0x803c11 <currentCountMillis>
     58c:	d0 92 12 3c 	sts	0x3C12, r13	; 0x803c12 <currentCountMillis+0x1>
     590:	e0 92 13 3c 	sts	0x3C13, r14	; 0x803c13 <currentCountMillis+0x2>
     594:	f0 92 14 3c 	sts	0x3C14, r15	; 0x803c14 <currentCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:31
  if (currentCountMillis - startCountMillis >= secPeriod) {
     598:	80 91 19 3c 	lds	r24, 0x3C19	; 0x803c19 <startCountMillis>
     59c:	90 91 1a 3c 	lds	r25, 0x3C1A	; 0x803c1a <startCountMillis+0x1>
     5a0:	a0 91 1b 3c 	lds	r26, 0x3C1B	; 0x803c1b <startCountMillis+0x2>
     5a4:	b0 91 1c 3c 	lds	r27, 0x3C1C	; 0x803c1c <startCountMillis+0x3>
     5a8:	a7 01       	movw	r20, r14
     5aa:	96 01       	movw	r18, r12
     5ac:	28 1b       	sub	r18, r24
     5ae:	39 0b       	sbc	r19, r25
     5b0:	4a 0b       	sbc	r20, r26
     5b2:	5b 0b       	sbc	r21, r27
     5b4:	da 01       	movw	r26, r20
     5b6:	c9 01       	movw	r24, r18
     5b8:	88 3e       	cpi	r24, 0xE8	; 232
     5ba:	93 40       	sbci	r25, 0x03	; 3
     5bc:	a1 05       	cpc	r26, r1
     5be:	b1 05       	cpc	r27, r1
     5c0:	08 f4       	brcc	.+2      	; 0x5c4 <getAndShowTime()+0x68>
     5c2:	4c c0       	rjmp	.+152    	; 0x65c <getAndShowTime()+0x100>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:32
    if (rtcAvailable) {
     5c4:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <rtcAvailable>
     5c8:	88 23       	and	r24, r24
     5ca:	09 f4       	brne	.+2      	; 0x5ce <getAndShowTime()+0x72>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:97
    // Serial.print(":");
    // Serial.println(BCDtoDEC(_time[TIME_SECONDS]));
    // bool update = false;
    /*------------------------------------------------------*/

    if (!readMultipleRegisters(RV8803_HUNDREDTHS, _time, TIME_ARRAY_LENGTH))
     5cc:	90 c0       	rjmp	.+288    	; 0x6ee <getAndShowTime()+0x192>
updateTime():
     5ce:	83 ed       	ldi	r24, 0xD3	; 211
     5d0:	9c e3       	ldi	r25, 0x3C	; 60
     5d2:	c4 dd       	rcall	.-1144   	; 0x15c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]>
     5d4:	88 23       	and	r24, r24
     5d6:	09 f4       	brne	.+2      	; 0x5da <getAndShowTime()+0x7e>
     5d8:	8a c0       	rjmp	.+276    	; 0x6ee <getAndShowTime()+0x192>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:103
    {   
        // Something went wrong
        return (false);
    }

    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 ||   /* if hundredths are at 99, read again to make sure we didn't accidentally skip a second/min */
     5da:	90 91 d3 3c 	lds	r25, 0x3CD3	; 0x803cd3 <rtc+0x6>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:288
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     5de:	89 2f       	mov	r24, r25
     5e0:	82 95       	swap	r24
     5e2:	8f 70       	andi	r24, 0x0F	; 15
     5e4:	2a e0       	ldi	r18, 0x0A	; 10
     5e6:	9f 70       	andi	r25, 0x0F	; 15
     5e8:	82 9f       	mul	r24, r18
     5ea:	90 0d       	add	r25, r0
     5ec:	11 24       	eor	r1, r1
updateTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:106
    }

    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 ||   /* if hundredths are at 99, read again to make sure we didn't accidentally skip a second/min */
        BCDtoDEC(_time[TIME_SECONDS]) == 59 ||      /* if seconds are at 59, read again to make sure we didn't accidentally skip a second/min */
        BCDtoDEC(_time[TIME_HUNDREDTHS]) == 0 || 
        BCDtoDEC(_time[TIME_SECONDS]) == 0 ||
     5ee:	93 36       	cpi	r25, 0x63	; 99
     5f0:	81 f0       	breq	.+32     	; 0x612 <getAndShowTime()+0xb6>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:104
        // Something went wrong
        return (false);
    }

    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 ||   /* if hundredths are at 99, read again to make sure we didn't accidentally skip a second/min */
        BCDtoDEC(_time[TIME_SECONDS]) == 59 ||      /* if seconds are at 59, read again to make sure we didn't accidentally skip a second/min */
     5f2:	80 91 d4 3c 	lds	r24, 0x3CD4	; 0x803cd4 <rtc+0x7>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:288
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     5f6:	38 2f       	mov	r19, r24
     5f8:	32 95       	swap	r19
     5fa:	3f 70       	andi	r19, 0x0F	; 15
     5fc:	8f 70       	andi	r24, 0x0F	; 15
     5fe:	32 9f       	mul	r19, r18
     600:	80 0d       	add	r24, r0
     602:	11 24       	eor	r1, r1
updateTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:103
    {   
        // Something went wrong
        return (false);
    }

    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 ||   /* if hundredths are at 99, read again to make sure we didn't accidentally skip a second/min */
     604:	8b 33       	cpi	r24, 0x3B	; 59
     606:	29 f0       	breq	.+10     	; 0x612 <getAndShowTime()+0xb6>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:104
        BCDtoDEC(_time[TIME_SECONDS]) == 59 ||      /* if seconds are at 59, read again to make sure we didn't accidentally skip a second/min */
     608:	99 23       	and	r25, r25
     60a:	19 f0       	breq	.+6      	; 0x612 <getAndShowTime()+0xb6>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:105
        BCDtoDEC(_time[TIME_HUNDREDTHS]) == 0 || 
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	8c 33       	cpi	r24, 0x3C	; 60
     610:	d0 f0       	brcs	.+52     	; 0x646 <getAndShowTime()+0xea>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:113
        {

        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for hundredths has rolled over, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(_time[TIME_HUNDREDTHS]) > BCDtoDEC(tempTime[TIME_HUNDREDTHS])) 
     612:	89 81       	ldd	r24, Y+1	; 0x01
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:288
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     614:	28 2f       	mov	r18, r24
     616:	22 95       	swap	r18
     618:	2f 70       	andi	r18, 0x0F	; 15
     61a:	8f 70       	andi	r24, 0x0F	; 15
     61c:	4a e0       	ldi	r20, 0x0A	; 10
     61e:	24 9f       	mul	r18, r20
     620:	80 0d       	add	r24, r0
     622:	11 24       	eor	r1, r1
updateTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:113
        {

        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for hundredths has rolled over, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(_time[TIME_HUNDREDTHS]) > BCDtoDEC(tempTime[TIME_HUNDREDTHS])) 
     624:	89 17       	cp	r24, r25
     626:	48 f4       	brcc	.+18     	; 0x63a <getAndShowTime()+0xde>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:115
        {
            memcpy(_time, tempTime, TIME_ARRAY_LENGTH);
     628:	88 e0       	ldi	r24, 0x08	; 8
     62a:	fe 01       	movw	r30, r28
     62c:	31 96       	adiw	r30, 0x01	; 1
     62e:	a3 ed       	ldi	r26, 0xD3	; 211
     630:	bc e3       	ldi	r27, 0x3C	; 60
     632:	01 90       	ld	r0, Z+
     634:	0d 92       	st	X+, r0
     636:	8a 95       	dec	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118
        }

        if (!readMultipleRegisters(RV8803_HUNDREDTHS, tempTime, TIME_ARRAY_LENGTH))
     638:	e1 f7       	brne	.-8      	; 0x632 <getAndShowTime()+0xd6>
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	8e dd       	rcall	.-1252   	; 0x15c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.5]>
     640:	88 23       	and	r24, r24
     642:	09 f4       	brne	.+2      	; 0x646 <getAndShowTime()+0xea>
     644:	54 c0       	rjmp	.+168    	; 0x6ee <getAndShowTime()+0x192>
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:34
      // updateTime i.e read registers, ** must for getting current time
      if (rtc.updateTime()) rtcReadable = true;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 10 3c 	sts	0x3C10, r24	; 0x803c10 <rtcReadable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:39
      else rtcReadable = false;
    } else {
      rtcReadable = false;
    }
    startCountMillis = currentCountMillis;
     64c:	c0 92 19 3c 	sts	0x3C19, r12	; 0x803c19 <startCountMillis>
     650:	d0 92 1a 3c 	sts	0x3C1A, r13	; 0x803c1a <startCountMillis+0x1>
     654:	e0 92 1b 3c 	sts	0x3C1B, r14	; 0x803c1b <startCountMillis+0x2>
     658:	f0 92 1c 3c 	sts	0x3C1C, r15	; 0x803c1c <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:44
  }
  
  // :: Display Time :: //
  // --- ** corner case handler (In case time retreival was unsuccessful) ** --- //
  if (rtcAvailable && rtcReadable) showOnDisplay(rtc.currTimeAsArray());
     65c:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <rtcAvailable>
     660:	88 23       	and	r24, r24
     662:	09 f4       	brne	.+2      	; 0x666 <getAndShowTime()+0x10a>
     664:	47 c0       	rjmp	.+142    	; 0x6f4 <getAndShowTime()+0x198>
     666:	80 91 10 3c 	lds	r24, 0x3C10	; 0x803c10 <rtcReadable>
     66a:	88 23       	and	r24, r24
     66c:	09 f4       	brne	.+2      	; 0x670 <getAndShowTime()+0x114>
     66e:	42 c0       	rjmp	.+132    	; 0x6f4 <getAndShowTime()+0x198>
getHours():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:156
    return BCDtoDEC(_time[TIME_MINUTES]);
}

uint8_t RV8803Tiny::getHours()
{
    return BCDtoDEC(_time[TIME_HOURS]);
     670:	80 91 d6 3c 	lds	r24, 0x3CD6	; 0x803cd6 <rtc+0x9>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:288
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     674:	98 2f       	mov	r25, r24
     676:	92 95       	swap	r25
     678:	9f 70       	andi	r25, 0x0F	; 15
     67a:	2a e0       	ldi	r18, 0x0A	; 10
     67c:	8f 70       	andi	r24, 0x0F	; 15
     67e:	92 9f       	mul	r25, r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:184
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     680:	80 0d       	add	r24, r0
     682:	11 24       	eor	r1, r1
nthdig():
     684:	62 2f       	mov	r22, r18
     686:	0d d7       	rcall	.+3610   	; 0x14a2 <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:185
    return k % 10;
     688:	39 2f       	mov	r19, r25
     68a:	0b d7       	rcall	.+3606   	; 0x14a2 <__udivmodqi4>
currTimeAsArray():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:190
}

uint8_t* RV8803Tiny::currTimeAsArray()
{
    currTimeArray[0] = nthdig(1, getHours());
     68c:	90 93 cd 3c 	sts	0x3CCD, r25	; 0x803ccd <rtc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:191
    currTimeArray[1] = nthdig(0, getHours());
     690:	30 93 ce 3c 	sts	0x3CCE, r19	; 0x803cce <rtc+0x1>
getMinutes():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:288
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     694:	80 91 d5 3c 	lds	r24, 0x3CD5	; 0x803cd5 <rtc+0x8>
BCDtoDEC():
     698:	98 2f       	mov	r25, r24
     69a:	92 95       	swap	r25
     69c:	9f 70       	andi	r25, 0x0F	; 15
     69e:	8f 70       	andi	r24, 0x0F	; 15
     6a0:	92 9f       	mul	r25, r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:184
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     6a2:	80 0d       	add	r24, r0
     6a4:	11 24       	eor	r1, r1
nthdig():
     6a6:	fd d6       	rcall	.+3578   	; 0x14a2 <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:185
    return k % 10;
     6a8:	39 2f       	mov	r19, r25
     6aa:	fb d6       	rcall	.+3574   	; 0x14a2 <__udivmodqi4>
currTimeAsArray():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:192

uint8_t* RV8803Tiny::currTimeAsArray()
{
    currTimeArray[0] = nthdig(1, getHours());
    currTimeArray[1] = nthdig(0, getHours());
    currTimeArray[2] = nthdig(1, getMinutes());
     6ac:	90 93 cf 3c 	sts	0x3CCF, r25	; 0x803ccf <rtc+0x2>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:146
    return (date);
}

uint8_t RV8803Tiny::getSeconds()
{
    return BCDtoDEC(_time[TIME_SECONDS]);
     6b0:	30 93 d0 3c 	sts	0x3CD0, r19	; 0x803cd0 <rtc+0x3>
getSeconds():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:288
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     6b4:	80 91 d4 3c 	lds	r24, 0x3CD4	; 0x803cd4 <rtc+0x7>
BCDtoDEC():
     6b8:	98 2f       	mov	r25, r24
     6ba:	92 95       	swap	r25
     6bc:	9f 70       	andi	r25, 0x0F	; 15
     6be:	8f 70       	andi	r24, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:184
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     6c0:	92 9f       	mul	r25, r18
     6c2:	80 0d       	add	r24, r0
     6c4:	11 24       	eor	r1, r1
nthdig():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:185
    return k % 10;
     6c6:	ed d6       	rcall	.+3546   	; 0x14a2 <__udivmodqi4>
     6c8:	39 2f       	mov	r19, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:194
{
    currTimeArray[0] = nthdig(1, getHours());
    currTimeArray[1] = nthdig(0, getHours());
    currTimeArray[2] = nthdig(1, getMinutes());
    currTimeArray[3] = nthdig(0, getMinutes());
    currTimeArray[4] = nthdig(1, getSeconds());
     6ca:	eb d6       	rcall	.+3542   	; 0x14a2 <__udivmodqi4>
currTimeAsArray():
     6cc:	90 93 d1 3c 	sts	0x3CD1, r25	; 0x803cd1 <rtc+0x4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:195
    currTimeArray[5] = nthdig(0, getSeconds());
     6d0:	30 93 d2 3c 	sts	0x3CD2, r19	; 0x803cd2 <rtc+0x5>
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:44
     6d4:	8d ec       	ldi	r24, 0xCD	; 205
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:45
  else showOnDisplay(blankSignal);
     6d6:	9c e3       	ldi	r25, 0x3C	; 60
     6d8:	de de       	rcall	.-580    	; 0x496 <showOnDisplay(unsigned char*)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:46
}
     6da:	28 96       	adiw	r28, 0x08	; 8
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:35
  currentCountMillis = millis();
  if (currentCountMillis - startCountMillis >= secPeriod) {
    if (rtcAvailable) {
      // updateTime i.e read registers, ** must for getting current time
      if (rtc.updateTime()) rtcReadable = true;
      else rtcReadable = false;
     6ee:	10 92 10 3c 	sts	0x3C10, r1	; 0x803c10 <rtcReadable>
     6f2:	ac cf       	rjmp	.-168    	; 0x64c <getAndShowTime()+0xf0>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:45
  }
  
  // :: Display Time :: //
  // --- ** corner case handler (In case time retreival was unsuccessful) ** --- //
  if (rtcAvailable && rtcReadable) showOnDisplay(rtc.currTimeAsArray());
  else showOnDisplay(blankSignal);
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	9c e3       	ldi	r25, 0x3C	; 60
     6f8:	ef cf       	rjmp	.-34     	; 0x6d8 <getAndShowTime()+0x17c>

000006fa <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.h:257

  public:
    inline             UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t default_pinset);
    bool                    pins(uint8_t tx, uint8_t rx);
    bool                    swap(uint8_t mux_level = 1);
    void                   begin(uint32_t baud) {begin(baud, SERIAL_8N1);}
     6fa:	dc 01       	movw	r26, r24
     6fc:	ed 91       	ld	r30, X+
     6fe:	fc 91       	ld	r31, X
     700:	00 88       	ldd	r0, Z+16	; 0x10
     702:	f1 89       	ldd	r31, Z+17	; 0x11
     704:	e0 2d       	mov	r30, r0
     706:	23 e0       	ldi	r18, 0x03	; 3
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	09 94       	ijmp

0000070c <pinMode>:
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     70c:	86 31       	cpi	r24, 0x16	; 22
     70e:	f0 f4       	brcc	.+60     	; 0x74c <pinMode+0x40>
check_valid_digital_pin():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin))
     710:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     712:	fc 01       	movw	r30, r24
     714:	e9 55       	subi	r30, 0x59	; 89
     716:	fa 46       	sbci	r31, 0x6A	; 106
     718:	20 81       	ld	r18, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:137
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
     71a:	2f 3f       	cpi	r18, 0xFF	; 255
     71c:	b9 f0       	breq	.+46     	; 0x74c <pinMode+0x40>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:140
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     71e:	fc 01       	movw	r30, r24
     720:	ef 56       	subi	r30, 0x6F	; 111
     722:	fa 46       	sbci	r31, 0x6A	; 106
portToPortBaseOffset():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:130
  SREG = oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
     724:	e0 81       	ld	r30, Z
     726:	e2 95       	swap	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:131
  return port << 1;
     728:	ee 0f       	add	r30, r30
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:140
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	f4 60       	ori	r31, 0x04	; 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:141
  if (mode & 0x01) {
     72e:	61 30       	cpi	r22, 0x01	; 1
     730:	71 f4       	brne	.+28     	; 0x74e <pinMode+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:143
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     732:	21 83       	std	Z+1, r18	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:154
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
    */
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
     734:	85 58       	subi	r24, 0x85	; 133
     736:	9a 46       	sbci	r25, 0x6A	; 106
     738:	dc 01       	movw	r26, r24
     73a:	8c 91       	ld	r24, X
     73c:	80 61       	ori	r24, 0x10	; 16
     73e:	e8 0f       	add	r30, r24
     740:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:155
  bit_mask = *port_base;
     742:	80 81       	ld	r24, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:156
  if (mode & 2) {
     744:	61 30       	cpi	r22, 0x01	; 1
     746:	29 f0       	breq	.+10     	; 0x752 <pinMode+0x46>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:157
    bit_mask |= 0x08;
     748:	88 60       	ori	r24, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:161
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
     74a:	80 83       	st	Z, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:162
}
     74c:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:145
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
     74e:	22 83       	std	Z+2, r18	; 0x02
     750:	f1 cf       	rjmp	.-30     	; 0x734 <pinMode+0x28>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:159
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     752:	87 7f       	andi	r24, 0xF7	; 247
     754:	fa cf       	rjmp	.-12     	; 0x74a <pinMode+0x3e>

00000756 <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:470
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     756:	8f 92       	push	r8
     758:	9f 92       	push	r9
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	8c 01       	movw	r16, r24
     76c:	4a 01       	movw	r8, r20
     76e:	5b 01       	movw	r10, r22
     770:	e9 01       	movw	r28, r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:473
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     772:	dc 01       	movw	r26, r24
     774:	50 96       	adiw	r26, 0x10	; 16
     776:	8c 91       	ld	r24, X
     778:	50 97       	sbiw	r26, 0x10	; 16
     77a:	80 ff       	sbrs	r24, 0
     77c:	07 c0       	rjmp	.+14     	; 0x78c <UartClass::begin(unsigned long, unsigned int)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:474
    this->end();
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	02 88       	ldd	r0, Z+18	; 0x12
     784:	f3 89       	ldd	r31, Z+19	; 0x13
     786:	e0 2d       	mov	r30, r0
     788:	c8 01       	movw	r24, r16
     78a:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:478
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                         // see if they passed anything in low byte or SERIAL_CONFIG_VALID.
     78c:	c1 11       	cpse	r28, r1
     78e:	01 c0       	rjmp	.+2      	; 0x792 <UartClass::begin(unsigned long, unsigned int)+0x3c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:479
    ctrlc = (uint8_t)SERIAL_8N1;            // low byte of 0 could mean they want SERIAL_5N1. Or that they thought they'd
     790:	c3 e0       	ldi	r28, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:481
  }
  ctrlc &= ~0x04; // Now unset that 0x04 bit if it's set, because none of the values with it set are supported. We use that to smuggle in a "this constant was specified" for 5N1
     792:	ec 2e       	mov	r14, r28
     794:	e8 94       	clt
     796:	e2 f8       	bld	r14, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:482
  uint8_t ctrla = (uint8_t) (options >> 8);// CTRLA will get the remains of the options high byte.
     798:	fd 2e       	mov	r15, r29
     79a:	cd 2f       	mov	r28, r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:484
  uint16_t baud_setting = 0;                // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t   ctrlb = (~ctrla & 0xC0);        // Top two bits (TXEN RXEN), inverted so they match he sense in the registers.
     79c:	d0 95       	com	r29
     79e:	d0 7c       	andi	r29, 0xC0	; 192
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:485
  if (baud   > F_CPU / 16) {            // if this baud is too fast for non-U2X
     7a0:	b5 eb       	ldi	r27, 0xB5	; 181
     7a2:	8b 16       	cp	r8, r27
     7a4:	b4 ec       	ldi	r27, 0xC4	; 196
     7a6:	9b 06       	cpc	r9, r27
     7a8:	b4 e0       	ldi	r27, 0x04	; 4
     7aa:	ab 06       	cpc	r10, r27
     7ac:	b1 04       	cpc	r11, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:486
        ctrlb   |= USART_RXMODE0_bm;        // set the U2X bit in what will become CTRLB
     7ae:	28 f0       	brcs	.+10     	; 0x7ba <UartClass::begin(unsigned long, unsigned int)+0x64>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:487
        baud   >>= 1;                       // And lower the baud rate by haldf
     7b0:	d2 60       	ori	r29, 0x02	; 2
     7b2:	b6 94       	lsr	r11
     7b4:	a7 94       	ror	r10
     7b6:	97 94       	ror	r9
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:489
  }
  baud_setting = (((4 * F_CPU) / baud));  // And now the registers that baud was passed in are done.
     7b8:	87 94       	ror	r8
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	7d e2       	ldi	r23, 0x2D	; 45
     7be:	81 e3       	ldi	r24, 0x31	; 49
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	a5 01       	movw	r20, r10
     7c4:	94 01       	movw	r18, r8
     7c6:	8d d6       	rcall	.+3354   	; 0x14e2 <__udivmodsi4>
     7c8:	20 34       	cpi	r18, 0x40	; 64
     7ca:	31 05       	cpc	r19, r1
     7cc:	10 f4       	brcc	.+4      	; 0x7d2 <UartClass::begin(unsigned long, unsigned int)+0x7c>
     7ce:	20 e4       	ldi	r18, 0x40	; 64
     7d0:	30 e0       	ldi	r19, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:495
  if (baud_setting < 64)                      // so set to the maximum baud rate setting.
    baud_setting= 64;       // set the U2X bit in what will become CTRLB
  //} else if (baud < (F_CPU / 16800)) {      // Baud rate is too low
  //  baud_setting = 65535;                   // minimum baud rate.'
                                            // Baud setting done now we do the other options not in CTRLC;
  if (ctrla & 0x04) {                       // is ODME option set?
     7d2:	f2 fc       	sbrc	r15, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:496
    ctrlb |= USART_ODME_bm;                 // set the bit in what will become CTRLB
     7d4:	d8 60       	ori	r29, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:498
  }
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     7d6:	8c 2f       	mov	r24, r28
     7d8:	8b 72       	andi	r24, 0x2B	; 43
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:499
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     7da:	d7 fd       	sbrc	r29, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:500
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     7dc:	80 68       	ori	r24, 0x80	; 128
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:502
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     7de:	cd 2f       	mov	r28, r29
     7e0:	c8 7c       	andi	r28, 0xC8	; 200
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:503
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback, need to set state bit 2.
     7e2:	83 ff       	sbrs	r24, 3
     7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <UartClass::begin(unsigned long, unsigned int)+0x9e>
     7e6:	c8 3c       	cpi	r28, 0xC8	; 200
     7e8:	29 f4       	brne	.+10     	; 0x7f4 <UartClass::begin(unsigned long, unsigned int)+0x9e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:504
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
     7ea:	f8 01       	movw	r30, r16
     7ec:	90 89       	ldd	r25, Z+16	; 0x10
     7ee:	92 60       	ori	r25, 0x02	; 2
     7f0:	90 8b       	std	Z+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:505
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
     7f2:	c8 ed       	ldi	r28, 0xD8	; 216
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:507
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     7f4:	80 fd       	sbrc	r24, 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:508
    setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
     7f6:	c1 60       	ori	r28, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:510
  }
  uint8_t oldSREG = SREG;
     7f8:	ff b6       	in	r15, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:511
  cli();
     7fa:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:512
  volatile USART_t* MyUSART = _hwserial_module;
     7fc:	d8 01       	movw	r26, r16
     7fe:	1c 96       	adiw	r26, 0x0c	; 12
     800:	ed 91       	ld	r30, X+
     802:	fc 91       	ld	r31, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:513
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     804:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:514
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     806:	e7 82       	std	Z+7, r14	; 0x07
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:515
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     808:	20 87       	std	Z+8, r18	; 0x08
     80a:	31 87       	std	Z+9, r19	; 0x09
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:516
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     80c:	85 ff       	sbrs	r24, 5
     80e:	3f c0       	rjmp	.+126    	; 0x88e <UartClass::begin(unsigned long, unsigned int)+0x138>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:517
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     810:	cf 77       	andi	r28, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:518
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	94 87       	std	Z+12, r25	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:519
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     816:	9f ef       	ldi	r25, 0xFF	; 255
     818:	95 87       	std	Z+13, r25	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:523
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     81a:	8f 7d       	andi	r24, 0xDF	; 223
     81c:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:524
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     81e:	d6 83       	std	Z+6, r29	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:525
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
     820:	f8 01       	movw	r30, r16
     822:	27 85       	ldd	r18, Z+15	; 0x0f
     824:	86 85       	ldd	r24, Z+14	; 0x0e
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:538
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     826:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vtable for UartClass+0x7f6c44>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:537
    uint8_t muxregval    = PORTMUX.USARTROUTEA;
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
     82a:	22 23       	and	r18, r18
     82c:	91 f1       	breq	.+100    	; 0x892 <UartClass::begin(unsigned long, unsigned int)+0x13c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:538
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     82e:	91 60       	ori	r25, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:540
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     830:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <vtable for UartClass+0x7f6c44>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:548
  #if MEGATINYCORE_SERIES == 2
    if (mux_set == 3) { // not connected to pins...
      return;           // so we are done!
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
     834:	82 0f       	add	r24, r18
     836:	99 27       	eor	r25, r25
     838:	99 1f       	adc	r25, r25
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	8c 01       	movw	r16, r24
     844:	0d 58       	subi	r16, 0x8D	; 141
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:549
  if ((enmask & 0x40 && !(enmask & 0x08))) {
     846:	1a 46       	sbci	r17, 0x6A	; 106
     848:	c6 ff       	sbrs	r28, 6
     84a:	25 c0       	rjmp	.+74     	; 0x896 <UartClass::begin(unsigned long, unsigned int)+0x140>
     84c:	c3 fd       	sbrc	r28, 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:550
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
     84e:	23 c0       	rjmp	.+70     	; 0x896 <UartClass::begin(unsigned long, unsigned int)+0x140>
     850:	61 e0       	ldi	r22, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:553
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     852:	d8 01       	movw	r26, r16
     854:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:555
  }
  if (enmask & 0x80 && !(enmask & 0x10)) {
     856:	5a df       	rcall	.-332    	; 0x70c <pinMode>
     858:	c7 ff       	sbrs	r28, 7
     85a:	07 c0       	rjmp	.+14     	; 0x86a <UartClass::begin(unsigned long, unsigned int)+0x114>
     85c:	c4 fd       	sbrc	r28, 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:557
    // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
    pinMode(muxrow[1], INPUT_PULLUP);
     85e:	05 c0       	rjmp	.+10     	; 0x86a <UartClass::begin(unsigned long, unsigned int)+0x114>
     860:	62 e0       	ldi	r22, 0x02	; 2
     862:	d8 01       	movw	r26, r16
     864:	11 96       	adiw	r26, 0x01	; 1
     866:	8c 91       	ld	r24, X
     868:	51 df       	rcall	.-350    	; 0x70c <pinMode>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:559
  }
  if (enmask & 0x01) { // finally if RS485 mode is enabled, we make XDIR output, otherwise it can't drive the pin.
     86a:	c0 ff       	sbrs	r28, 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <UartClass::begin(unsigned long, unsigned int)+0x120>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:560
    pinMode(muxrow[3], OUTPUT); // make XDIR output.
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	f8 01       	movw	r30, r16
     872:	83 81       	ldd	r24, Z+3	; 0x03
     874:	4b df       	rcall	.-362    	; 0x70c <pinMode>
_ZN9UartClass5beginEmj():
     876:	ff be       	out	0x3f, r15	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:526
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
  SREG = oldSREG;                             // re-enable interrupts, and we're done.
     878:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:527
}
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	9f 90       	pop	r9
     88a:	8f 90       	pop	r8
     88c:	08 95       	ret
     88e:	14 86       	std	Z+12, r1	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:521
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     890:	c4 cf       	rjmp	.-120    	; 0x81a <UartClass::begin(unsigned long, unsigned int)+0xc4>
_set_pins():
     892:	9e 7f       	andi	r25, 0xFE	; 254
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:540

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     894:	cd cf       	rjmp	.-102    	; 0x830 <UartClass::begin(unsigned long, unsigned int)+0xda>
     896:	2c 2f       	mov	r18, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:551
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
  if ((enmask & 0x40 && !(enmask & 0x08))) {
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     898:	20 75       	andi	r18, 0x50	; 80
     89a:	f1 f2       	breq	.-68     	; 0x858 <UartClass::begin(unsigned long, unsigned int)+0x102>
     89c:	8d 58       	subi	r24, 0x8D	; 141
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:553
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     89e:	9a 46       	sbci	r25, 0x6A	; 106
     8a0:	62 e0       	ldi	r22, 0x02	; 2
     8a2:	fc 01       	movw	r30, r24
     8a4:	80 81       	ld	r24, Z
     8a6:	d7 cf       	rjmp	.-82     	; 0x856 <UartClass::begin(unsigned long, unsigned int)+0x100>

000008a8 <__vector_9>:
__vector_9():
     8a8:	1f 92       	push	r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:163
#elif defined(MILLIS_USE_TIMERB4)
  ISR(TCB4_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	af 93       	push	r26
     8c2:	bf 93       	push	r27
     8c4:	80 91 4e 3c 	lds	r24, 0x3C4E	; 0x803c4e <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:175
    #else
      timer_millis += 2;
    #endif
  #else
    #if !defined(MILLIS_USE_TIMERRTC) // TCA0 or TCD0
      uint32_t m = timer_millis;
     8c8:	90 91 4f 3c 	lds	r25, 0x3C4F	; 0x803c4f <timer_millis+0x1>
     8cc:	a0 91 50 3c 	lds	r26, 0x3C50	; 0x803c50 <timer_millis+0x2>
     8d0:	b0 91 51 3c 	lds	r27, 0x3C51	; 0x803c51 <timer_millis+0x3>
     8d4:	40 91 4c 3c 	lds	r20, 0x3C4C	; 0x803c4c <timer_fract>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:176
      uint16_t f = timer_fract;
     8d8:	50 91 4d 3c 	lds	r21, 0x3C4D	; 0x803c4d <timer_fract+0x1>
     8dc:	9a 01       	movw	r18, r20
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:178
      m += MILLIS_INC;
      f += FRACT_INC;
     8de:	20 5d       	subi	r18, 0xD0	; 208
     8e0:	3c 4f       	sbci	r19, 0xFC	; 252
     8e2:	28 3e       	cpi	r18, 0xE8	; 232
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:179
      if (f >= FRACT_MAX) {
     8e4:	63 e0       	ldi	r22, 0x03	; 3
     8e6:	36 07       	cpc	r19, r22
     8e8:	28 f0       	brcs	.+10     	; 0x8f4 <__vector_9+0x4c>
     8ea:	28 5e       	subi	r18, 0xE8	; 232
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:181

        f -= FRACT_MAX;
     8ec:	33 40       	sbci	r19, 0x03	; 3
     8ee:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:182
        m += 1;
     8f0:	a1 1d       	adc	r26, r1
     8f2:	b1 1d       	adc	r27, r1
     8f4:	20 93 4c 3c 	sts	0x3C4C, r18	; 0x803c4c <timer_fract>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:184
      }
      timer_fract = f;
     8f8:	30 93 4d 3c 	sts	0x3C4D, r19	; 0x803c4d <timer_fract+0x1>
     8fc:	80 93 4e 3c 	sts	0x3C4E, r24	; 0x803c4e <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:185
      timer_millis = m;
     900:	90 93 4f 3c 	sts	0x3C4F, r25	; 0x803c4f <timer_millis+0x1>
     904:	a0 93 50 3c 	sts	0x3C50, r26	; 0x803c50 <timer_millis+0x2>
     908:	b0 93 51 3c 	sts	0x3C51, r27	; 0x803c51 <timer_millis+0x3>
     90c:	80 91 52 3c 	lds	r24, 0x3C52	; 0x803c52 <timer_overflow_count>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:189
    #endif
    // if RTC is used as timer, we only increment the overflow count
    // Overflow count isn't used for TCB's
    timer_overflow_count++;
     910:	90 91 53 3c 	lds	r25, 0x3C53	; 0x803c53 <timer_overflow_count+0x1>
     914:	a0 91 54 3c 	lds	r26, 0x3C54	; 0x803c54 <timer_overflow_count+0x2>
     918:	b0 91 55 3c 	lds	r27, 0x3C55	; 0x803c55 <timer_overflow_count+0x3>
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	a1 1d       	adc	r26, r1
     920:	b1 1d       	adc	r27, r1
     922:	80 93 52 3c 	sts	0x3C52, r24	; 0x803c52 <timer_overflow_count>
     926:	90 93 53 3c 	sts	0x3C53, r25	; 0x803c53 <timer_overflow_count+0x1>
     92a:	a0 93 54 3c 	sts	0x3C54, r26	; 0x803c54 <timer_overflow_count+0x2>
     92e:	b0 93 55 3c 	sts	0x3C55, r27	; 0x803c55 <timer_overflow_count+0x3>
     932:	82 e0       	ldi	r24, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:193
  #endif
  /* Clear flag */
  #if defined(MILLIS_USE_TIMERA0)
    TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm;
     934:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <vtable for UartClass+0x7f744e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:201
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
  #endif
}
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:73
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <__vector_28>:
__vector_28():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:76
      __asm__ __volatile__(
                "jmp _do_dre"  "\n"
                ::"z"(&Serial));
     954:	ef 93       	push	r30
     956:	ff 93       	push	r31
     958:	e8 e5       	ldi	r30, 0x58	; 88
     95a:	fc e3       	ldi	r31, 0x3C	; 60
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:55
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     95c:	08 c0       	rjmp	.+16     	; 0x96e <_do_dre()>

0000095e <__vector_27>:
__vector_27():
     95e:	ef 93       	push	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:58
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
     960:	ff 93       	push	r31
     962:	e8 e5       	ldi	r30, 0x58	; 88
     964:	fc e3       	ldi	r31, 0x3C	; 60
     966:	31 c0       	rjmp	.+98     	; 0x9ca <_do_rxc()>

00000968 <__vector_29>:
__vector_29():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:31
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     968:	ef 93       	push	r30
     96a:	e0 e0       	ldi	r30, 0x00	; 0
     96c:	52 c0       	rjmp	.+164    	; 0xa12 <_do_txc()>

0000096e <_do_dre()>:
_Z7_do_drev():
     96e:	2f 93       	push	r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:307
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                        "\n"   // and RETI!
      ::);
     970:	2f b7       	in	r18, 0x3f	; 63
     972:	2f 93       	push	r18
     974:	8f 93       	push	r24
     976:	9f 93       	push	r25
     978:	af 93       	push	r26
     97a:	bf 93       	push	r27
     97c:	68 94       	set

0000097e <_poll_dre>:
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	c4 85       	ldd	r28, Z+12	; 0x0c
     986:	d8 e0       	ldi	r29, 0x08	; 8
     988:	94 89       	ldd	r25, Z+20	; 0x14
     98a:	df 01       	movw	r26, r30
     98c:	a9 0f       	add	r26, r25
     98e:	b2 1f       	adc	r27, r18
     990:	ab 5a       	subi	r26, 0xAB	; 171
     992:	bf 4f       	sbci	r27, 0xFF	; 255
     994:	8c 91       	ld	r24, X
     996:	20 e4       	ldi	r18, 0x40	; 64
     998:	2c 83       	std	Y+4, r18	; 0x04
     99a:	8a 83       	std	Y+2, r24	; 0x02
     99c:	9f 5f       	subi	r25, 0xFF	; 255
     99e:	9f 71       	andi	r25, 0x1F	; 31
     9a0:	8d 81       	ldd	r24, Y+5	; 0x05
     9a2:	23 89       	ldd	r18, Z+19	; 0x13
     9a4:	29 13       	cpse	r18, r25
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <_done_dre_irq>
     9a8:	8f 7d       	andi	r24, 0xDF	; 223
     9aa:	8d 83       	std	Y+5, r24	; 0x05

000009ac <_done_dre_irq>:
     9ac:	94 8b       	std	Z+20, r25	; 0x14
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	0e f0       	brts	.+2      	; 0x9b6 <_done_dre_irq+0xa>
     9b4:	e3 cc       	rjmp	.-1594   	; 0x37c <_poll_dre_done>
     9b6:	bf 91       	pop	r27
     9b8:	af 91       	pop	r26
     9ba:	9f 91       	pop	r25
     9bc:	8f 91       	pop	r24
     9be:	2f 91       	pop	r18
     9c0:	2f bf       	out	0x3f, r18	; 63
     9c2:	2f 91       	pop	r18
     9c4:	ff 91       	pop	r31
     9c6:	ef 91       	pop	r30
     9c8:	18 95       	reti

000009ca <_do_rxc()>:
_Z7_do_rxcv():
     9ca:	2f 93       	push	r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:175
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     9cc:	2f b7       	in	r18, 0x3f	; 63
     9ce:	2f 93       	push	r18
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	c4 85       	ldd	r28, Z+12	; 0x0c
     9da:	d8 e0       	ldi	r29, 0x08	; 8
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	98 81       	ld	r25, Y
     9e0:	81 fd       	sbrc	r24, 1
     9e2:	0d c0       	rjmp	.+26     	; 0x9fe <_end_rxc>
     9e4:	c1 89       	ldd	r28, Z+17	; 0x11
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	8c 0f       	add	r24, r28
     9ea:	8f 73       	andi	r24, 0x3F	; 63
     9ec:	22 89       	ldd	r18, Z+18	; 0x12
     9ee:	28 17       	cp	r18, r24
     9f0:	31 f0       	breq	.+12     	; 0x9fe <_end_rxc>
     9f2:	ce 0f       	add	r28, r30
     9f4:	df 2f       	mov	r29, r31
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	d2 1f       	adc	r29, r18
     9fa:	9d 8b       	std	Y+21, r25	; 0x15
     9fc:	81 8b       	std	Z+17, r24	; 0x11

000009fe <_end_rxc>:
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	2f 91       	pop	r18
     a08:	2f bf       	out	0x3f, r18	; 63
     a0a:	2f 91       	pop	r18
     a0c:	ff 91       	pop	r31
     a0e:	ef 91       	pop	r30
     a10:	18 95       	reti

00000a12 <_do_txc()>:
_Z7_do_txcv():
     a12:	ff 93       	push	r31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:105
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     a14:	8f 93       	push	r24
     a16:	8f b7       	in	r24, 0x3f	; 63
     a18:	8f 93       	push	r24
     a1a:	f8 e0       	ldi	r31, 0x08	; 8

00000a1c <_txc_flush_rx>:
     a1c:	80 81       	ld	r24, Z
     a1e:	84 81       	ldd	r24, Z+4	; 0x04
     a20:	87 ff       	sbrs	r24, 7
     a22:	fc cf       	rjmp	.-8      	; 0xa1c <_txc_flush_rx>
     a24:	85 81       	ldd	r24, Z+5	; 0x05
     a26:	8f 7b       	andi	r24, 0xBF	; 191
     a28:	80 68       	ori	r24, 0x80	; 128
     a2a:	85 83       	std	Z+5, r24	; 0x05
     a2c:	8f 91       	pop	r24
     a2e:	8f bf       	out	0x3f, r24	; 63
     a30:	8f 91       	pop	r24
     a32:	ff 91       	pop	r31
     a34:	ef 91       	pop	r30
     a36:	18 95       	reti

00000a38 <__vector_6>:
__vector_6():
     a38:	1f 92       	push	r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:37
  RTC.CTRLA = RTC_PRESCALER_DIV32_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
              | RTC_RTCEN_bm                        // Enable: enabled
              | RTC_RUNSTDBY_bm;                    // Run In Standby: enabled
}

ISR(RTC_CNT_vect) {
     a3a:	0f 92       	push	r0
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	0f 92       	push	r0
     a40:	11 24       	eor	r1, r1
     a42:	8f 93       	push	r24
     a44:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:38
  RTC.INTFLAGS = RTC_OVF_bm;            // Clear flag by writing '1':
     a46:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <vtable for UartClass+0x7f6b86>
     a4a:	80 93 4a 3c 	sts	0x3C4A, r24	; 0x803c4a <showTimePeriodOver>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:39
  showTimePeriodOver = 1;
     a4e:	8f 91       	pop	r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:40
}
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_5>:
__vector_5():
     a5a:	1f 92       	push	r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:19
volatile byte showTimePeriodOver;



//--- ISR for waking up from sleep mode ---//
ISR(PORTC_PORT_vect) {
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	8f 93       	push	r24
     a66:	8b b1       	in	r24, 0x0b	; 11
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:20
  byte flags = VPORTC.INTFLAGS; // faster (TEST TBD)
     a68:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <vtable for UartClass+0x7f6e8c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:21
  PORTC.INTFLAGS = flags; //clear flags
     a6c:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:22
  wakeUpTriggered = 1;
     a6e:	80 93 1d 3c 	sts	0x3C1D, r24	; 0x803c1d <wakeUpTriggered>
     a72:	8f 91       	pop	r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:23
}
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <vfprintf>:
vfprintf():
     a7e:	ab e0       	ldi	r26, 0x0B	; 11
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	e4 e4       	ldi	r30, 0x44	; 68
     a84:	f5 e0       	ldi	r31, 0x05	; 5
     a86:	f8 c3       	rjmp	.+2032   	; 0x1278 <__prologue_saves__+0x8>
     a88:	6c 01       	movw	r12, r24
     a8a:	7b 01       	movw	r14, r22
     a8c:	3a 01       	movw	r6, r20
     a8e:	fc 01       	movw	r30, r24
     a90:	16 82       	std	Z+6, r1	; 0x06
     a92:	17 82       	std	Z+7, r1	; 0x07
     a94:	83 81       	ldd	r24, Z+3	; 0x03
     a96:	81 ff       	sbrs	r24, 1
     a98:	ff c0       	rjmp	.+510    	; 0xc98 <vfprintf+0x21a>
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	4c 01       	movw	r8, r24
     aa0:	f6 01       	movw	r30, r12
     aa2:	b3 80       	ldd	r11, Z+3	; 0x03
     aa4:	f7 01       	movw	r30, r14
     aa6:	b3 fc       	sbrc	r11, 3
     aa8:	05 91       	lpm	r16, Z+
     aaa:	b3 fe       	sbrs	r11, 3
     aac:	01 91       	ld	r16, Z+
     aae:	7f 01       	movw	r14, r30
     ab0:	00 23       	and	r16, r16
     ab2:	41 f1       	breq	.+80     	; 0xb04 <vfprintf+0x86>
     ab4:	05 32       	cpi	r16, 0x25	; 37
     ab6:	39 f4       	brne	.+14     	; 0xac6 <vfprintf+0x48>
     ab8:	b3 fc       	sbrc	r11, 3
     aba:	05 91       	lpm	r16, Z+
     abc:	b3 fe       	sbrs	r11, 3
     abe:	01 91       	ld	r16, Z+
     ac0:	7f 01       	movw	r14, r30
     ac2:	05 32       	cpi	r16, 0x25	; 37
     ac4:	39 f5       	brne	.+78     	; 0xb14 <vfprintf+0x96>
     ac6:	b6 01       	movw	r22, r12
     ac8:	80 2f       	mov	r24, r16
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	5c d4       	rcall	.+2232   	; 0x1386 <fputc>
     ace:	53 01       	movw	r10, r6
     ad0:	35 01       	movw	r6, r10
     ad2:	e6 cf       	rjmp	.-52     	; 0xaa0 <vfprintf+0x22>
     ad4:	10 68       	ori	r17, 0x80	; 128
     ad6:	f7 01       	movw	r30, r14
     ad8:	b3 fc       	sbrc	r11, 3
     ada:	05 91       	lpm	r16, Z+
     adc:	b3 fe       	sbrs	r11, 3
     ade:	01 91       	ld	r16, Z+
     ae0:	7f 01       	movw	r14, r30
     ae2:	17 fd       	sbrc	r17, 7
     ae4:	0d c0       	rjmp	.+26     	; 0xb00 <vfprintf+0x82>
     ae6:	00 23       	and	r16, r16
     ae8:	69 f0       	breq	.+26     	; 0xb04 <vfprintf+0x86>
     aea:	60 2f       	mov	r22, r16
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	83 e8       	ldi	r24, 0x83	; 131
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0c d4       	rcall	.+2072   	; 0x130c <strchr_P>
     af4:	89 2b       	or	r24, r25
     af6:	79 f7       	brne	.-34     	; 0xad6 <vfprintf+0x58>
     af8:	03 32       	cpi	r16, 0x23	; 35
     afa:	51 f0       	breq	.+20     	; 0xb10 <vfprintf+0x92>
     afc:	0c 36       	cpi	r16, 0x6C	; 108
     afe:	51 f3       	breq	.-44     	; 0xad4 <vfprintf+0x56>
     b00:	01 11       	cpse	r16, r1
     b02:	0a c0       	rjmp	.+20     	; 0xb18 <vfprintf+0x9a>
     b04:	f6 01       	movw	r30, r12
     b06:	86 81       	ldd	r24, Z+6	; 0x06
     b08:	97 81       	ldd	r25, Z+7	; 0x07
     b0a:	2b 96       	adiw	r28, 0x0b	; 11
     b0c:	ee e0       	ldi	r30, 0x0E	; 14
     b0e:	cd c3       	rjmp	.+1946   	; 0x12aa <__epilogue_restores__+0x8>
     b10:	10 e1       	ldi	r17, 0x10	; 16
     b12:	e1 cf       	rjmp	.-62     	; 0xad6 <vfprintf+0x58>
     b14:	10 e0       	ldi	r17, 0x00	; 0
     b16:	e5 cf       	rjmp	.-54     	; 0xae2 <vfprintf+0x64>
     b18:	60 2f       	mov	r22, r16
     b1a:	70 e0       	ldi	r23, 0x00	; 0
     b1c:	8c e7       	ldi	r24, 0x7C	; 124
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	f5 d3       	rcall	.+2026   	; 0x130c <strchr_P>
     b22:	89 2b       	or	r24, r25
     b24:	49 f0       	breq	.+18     	; 0xb38 <vfprintf+0xba>
     b26:	53 01       	movw	r10, r6
     b28:	f4 e0       	ldi	r31, 0x04	; 4
     b2a:	af 0e       	add	r10, r31
     b2c:	b1 1c       	adc	r11, r1
     b2e:	b6 01       	movw	r22, r12
     b30:	8f e3       	ldi	r24, 0x3F	; 63
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	28 d4       	rcall	.+2128   	; 0x1386 <fputc>
     b36:	cc cf       	rjmp	.-104    	; 0xad0 <vfprintf+0x52>
     b38:	03 36       	cpi	r16, 0x63	; 99
     b3a:	09 f4       	brne	.+2      	; 0xb3e <vfprintf+0xc0>
     b3c:	52 c0       	rjmp	.+164    	; 0xbe2 <vfprintf+0x164>
     b3e:	03 37       	cpi	r16, 0x73	; 115
     b40:	09 f4       	brne	.+2      	; 0xb44 <vfprintf+0xc6>
     b42:	59 c0       	rjmp	.+178    	; 0xbf6 <vfprintf+0x178>
     b44:	03 35       	cpi	r16, 0x53	; 83
     b46:	09 f4       	brne	.+2      	; 0xb4a <vfprintf+0xcc>
     b48:	55 c0       	rjmp	.+170    	; 0xbf4 <vfprintf+0x176>
     b4a:	04 36       	cpi	r16, 0x64	; 100
     b4c:	19 f0       	breq	.+6      	; 0xb54 <vfprintf+0xd6>
     b4e:	09 36       	cpi	r16, 0x69	; 105
     b50:	09 f0       	breq	.+2      	; 0xb54 <vfprintf+0xd6>
     b52:	70 c0       	rjmp	.+224    	; 0xc34 <vfprintf+0x1b6>
     b54:	53 01       	movw	r10, r6
     b56:	17 ff       	sbrs	r17, 7
     b58:	62 c0       	rjmp	.+196    	; 0xc1e <vfprintf+0x1a0>
     b5a:	f4 e0       	ldi	r31, 0x04	; 4
     b5c:	af 0e       	add	r10, r31
     b5e:	b1 1c       	adc	r11, r1
     b60:	f3 01       	movw	r30, r6
     b62:	60 81       	ld	r22, Z
     b64:	71 81       	ldd	r23, Z+1	; 0x01
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	93 81       	ldd	r25, Z+3	; 0x03
     b6a:	1f 7e       	andi	r17, 0xEF	; 239
     b6c:	97 ff       	sbrs	r25, 7
     b6e:	08 c0       	rjmp	.+16     	; 0xb80 <vfprintf+0x102>
     b70:	90 95       	com	r25
     b72:	80 95       	com	r24
     b74:	70 95       	com	r23
     b76:	61 95       	neg	r22
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	8f 4f       	sbci	r24, 0xFF	; 255
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	10 64       	ori	r17, 0x40	; 64
     b80:	2a e0       	ldi	r18, 0x0A	; 10
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	a4 01       	movw	r20, r8
     b86:	2f d4       	rcall	.+2142   	; 0x13e6 <__ultoa_invert>
     b88:	08 2f       	mov	r16, r24
     b8a:	08 19       	sub	r16, r8
     b8c:	16 ff       	sbrs	r17, 6
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <vfprintf+0x11a>
     b90:	b6 01       	movw	r22, r12
     b92:	8d e2       	ldi	r24, 0x2D	; 45
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	f7 d3       	rcall	.+2030   	; 0x1386 <fputc>
     b98:	14 ff       	sbrs	r17, 4
     b9a:	13 c0       	rjmp	.+38     	; 0xbc2 <vfprintf+0x144>
     b9c:	fe 01       	movw	r30, r28
     b9e:	e0 0f       	add	r30, r16
     ba0:	f1 1d       	adc	r31, r1
     ba2:	80 81       	ld	r24, Z
     ba4:	80 33       	cpi	r24, 0x30	; 48
     ba6:	69 f0       	breq	.+26     	; 0xbc2 <vfprintf+0x144>
     ba8:	b6 01       	movw	r22, r12
     baa:	80 e3       	ldi	r24, 0x30	; 48
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	eb d3       	rcall	.+2006   	; 0x1386 <fputc>
     bb0:	12 ff       	sbrs	r17, 2
     bb2:	07 c0       	rjmp	.+14     	; 0xbc2 <vfprintf+0x144>
     bb4:	10 72       	andi	r17, 0x20	; 32
     bb6:	81 2f       	mov	r24, r17
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	b6 01       	movw	r22, r12
     bbc:	88 5a       	subi	r24, 0xA8	; 168
     bbe:	9f 4f       	sbci	r25, 0xFF	; 255
     bc0:	e2 d3       	rcall	.+1988   	; 0x1386 <fputc>
     bc2:	01 50       	subi	r16, 0x01	; 1
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	0f 5f       	subi	r16, 0xFF	; 255
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
     bca:	08 0d       	add	r16, r8
     bcc:	19 1d       	adc	r17, r9
     bce:	f8 01       	movw	r30, r16
     bd0:	82 91       	ld	r24, -Z
     bd2:	8f 01       	movw	r16, r30
     bd4:	b6 01       	movw	r22, r12
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	d6 d3       	rcall	.+1964   	; 0x1386 <fputc>
     bda:	08 15       	cp	r16, r8
     bdc:	19 05       	cpc	r17, r9
     bde:	b9 f7       	brne	.-18     	; 0xbce <vfprintf+0x150>
     be0:	77 cf       	rjmp	.-274    	; 0xad0 <vfprintf+0x52>
     be2:	53 01       	movw	r10, r6
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	a8 0e       	add	r10, r24
     be8:	b1 1c       	adc	r11, r1
     bea:	b6 01       	movw	r22, r12
     bec:	f3 01       	movw	r30, r6
     bee:	80 81       	ld	r24, Z
     bf0:	91 81       	ldd	r25, Z+1	; 0x01
     bf2:	a0 cf       	rjmp	.-192    	; 0xb34 <vfprintf+0xb6>
     bf4:	11 60       	ori	r17, 0x01	; 1
     bf6:	53 01       	movw	r10, r6
     bf8:	f2 e0       	ldi	r31, 0x02	; 2
     bfa:	af 0e       	add	r10, r31
     bfc:	b1 1c       	adc	r11, r1
     bfe:	f3 01       	movw	r30, r6
     c00:	60 80       	ld	r6, Z
     c02:	71 80       	ldd	r7, Z+1	; 0x01
     c04:	f3 01       	movw	r30, r6
     c06:	10 fd       	sbrc	r17, 0
     c08:	85 91       	lpm	r24, Z+
     c0a:	10 ff       	sbrs	r17, 0
     c0c:	81 91       	ld	r24, Z+
     c0e:	3f 01       	movw	r6, r30
     c10:	88 23       	and	r24, r24
     c12:	09 f4       	brne	.+2      	; 0xc16 <vfprintf+0x198>
     c14:	5d cf       	rjmp	.-326    	; 0xad0 <vfprintf+0x52>
     c16:	b6 01       	movw	r22, r12
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	b5 d3       	rcall	.+1898   	; 0x1386 <fputc>
     c1c:	f3 cf       	rjmp	.-26     	; 0xc04 <vfprintf+0x186>
     c1e:	f2 e0       	ldi	r31, 0x02	; 2
     c20:	af 0e       	add	r10, r31
     c22:	b1 1c       	adc	r11, r1
     c24:	f3 01       	movw	r30, r6
     c26:	60 81       	ld	r22, Z
     c28:	71 81       	ldd	r23, Z+1	; 0x01
     c2a:	07 2e       	mov	r0, r23
     c2c:	00 0c       	add	r0, r0
     c2e:	88 0b       	sbc	r24, r24
     c30:	99 0b       	sbc	r25, r25
     c32:	9b cf       	rjmp	.-202    	; 0xb6a <vfprintf+0xec>
     c34:	00 37       	cpi	r16, 0x70	; 112
     c36:	09 f1       	breq	.+66     	; 0xc7a <vfprintf+0x1fc>
     c38:	40 f4       	brcc	.+16     	; 0xc4a <vfprintf+0x1cc>
     c3a:	08 35       	cpi	r16, 0x58	; 88
     c3c:	01 f1       	breq	.+64     	; 0xc7e <vfprintf+0x200>
     c3e:	0f 36       	cpi	r16, 0x6F	; 111
     c40:	09 f0       	breq	.+2      	; 0xc44 <vfprintf+0x1c6>
     c42:	60 cf       	rjmp	.-320    	; 0xb04 <vfprintf+0x86>
     c44:	28 e0       	ldi	r18, 0x08	; 8
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	0c c0       	rjmp	.+24     	; 0xc62 <vfprintf+0x1e4>
     c4a:	05 37       	cpi	r16, 0x75	; 117
     c4c:	39 f0       	breq	.+14     	; 0xc5c <vfprintf+0x1de>
     c4e:	08 37       	cpi	r16, 0x78	; 120
     c50:	09 f0       	breq	.+2      	; 0xc54 <vfprintf+0x1d6>
     c52:	58 cf       	rjmp	.-336    	; 0xb04 <vfprintf+0x86>
     c54:	14 62       	ori	r17, 0x24	; 36
     c56:	20 e1       	ldi	r18, 0x10	; 16
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	03 c0       	rjmp	.+6      	; 0xc62 <vfprintf+0x1e4>
     c5c:	1f 7e       	andi	r17, 0xEF	; 239
     c5e:	2a e0       	ldi	r18, 0x0A	; 10
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	53 01       	movw	r10, r6
     c64:	17 ff       	sbrs	r17, 7
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <vfprintf+0x208>
     c68:	f4 e0       	ldi	r31, 0x04	; 4
     c6a:	af 0e       	add	r10, r31
     c6c:	b1 1c       	adc	r11, r1
     c6e:	f3 01       	movw	r30, r6
     c70:	60 81       	ld	r22, Z
     c72:	71 81       	ldd	r23, Z+1	; 0x01
     c74:	82 81       	ldd	r24, Z+2	; 0x02
     c76:	93 81       	ldd	r25, Z+3	; 0x03
     c78:	85 cf       	rjmp	.-246    	; 0xb84 <vfprintf+0x106>
     c7a:	10 61       	ori	r17, 0x10	; 16
     c7c:	eb cf       	rjmp	.-42     	; 0xc54 <vfprintf+0x1d6>
     c7e:	14 60       	ori	r17, 0x04	; 4
     c80:	20 e1       	ldi	r18, 0x10	; 16
     c82:	32 e0       	ldi	r19, 0x02	; 2
     c84:	ee cf       	rjmp	.-36     	; 0xc62 <vfprintf+0x1e4>
     c86:	f2 e0       	ldi	r31, 0x02	; 2
     c88:	af 0e       	add	r10, r31
     c8a:	b1 1c       	adc	r11, r1
     c8c:	f3 01       	movw	r30, r6
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	76 cf       	rjmp	.-276    	; 0xb84 <vfprintf+0x106>
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	36 cf       	rjmp	.-404    	; 0xb0a <vfprintf+0x8c>

00000c9e <global constructors keyed to 65535_0_watch_firmware.ino.cpp.o.2572>:
_GLOBAL__I_65535_0_watch_firmware.ino.cpp.o.2572():
     c9e:	e8 e5       	ldi	r30, 0x58	; 88
     ca0:	fc e3       	ldi	r31, 0x3C	; 60
     ca2:	12 82       	std	Z+2, r1	; 0x02
     ca4:	13 82       	std	Z+3, r1	; 0x03
     ca6:	88 ee       	ldi	r24, 0xE8	; 232
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	a0 e0       	ldi	r26, 0x00	; 0
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	84 83       	std	Z+4, r24	; 0x04
     cb0:	95 83       	std	Z+5, r25	; 0x05
     cb2:	a6 83       	std	Z+6, r26	; 0x06
     cb4:	b7 83       	std	Z+7, r27	; 0x07
     cb6:	81 ec       	ldi	r24, 0xC1	; 193
     cb8:	95 e9       	ldi	r25, 0x95	; 149
     cba:	80 83       	st	Z, r24
     cbc:	91 83       	std	Z+1, r25	; 0x01
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	98 e0       	ldi	r25, 0x08	; 8
     cc2:	84 87       	std	Z+12, r24	; 0x0c
     cc4:	95 87       	std	Z+13, r25	; 0x0d
     cc6:	16 86       	std	Z+14, r1	; 0x0e
     cc8:	17 86       	std	Z+15, r1	; 0x0f
     cca:	08 95       	ret

00000ccc <main>:
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	28 97       	sbiw	r28, 0x08	; 8
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	de bf       	out	0x3e, r29	; 62
init_clock():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1333
      #elif (F_CPU == 8000000) // 16MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
      #elif (F_CPU == 5000000) // 20MHz prescaled by 4
        /* Clock DIV4 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));
     cda:	88 ed       	ldi	r24, 0xD8	; 216
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	84 bf       	out	0x34, r24	; 52
     ce0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f6aa4>
init_ADC0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1429
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      ADC0.CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  3000000    //  4 MHz /  4 = 1.0 MHz,   5 MHz /  4 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
     ce4:	81 e5       	ldi	r24, 0x51	; 81
     ce6:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f7045>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1436
      ADC0.CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #endif
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      ADC0.SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      ADC0.SAMPCTRL = (13);   // 15 ADC clock,s 12 us
     cea:	6d e0       	ldi	r22, 0x0D	; 13
     cec:	f6 2e       	mov	r15, r22
     cee:	f0 92 05 06 	sts	0x0605, r15	; 0x800605 <vtable for UartClass+0x7f7048>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1440
    #else
      ADC0.SAMPCTRL = (10); // 12 ADC clocks, 12 us
    #endif
    ADC0.CTRLD    = ADC_INITDLY_DLY16_gc;
     cf2:	00 e2       	ldi	r16, 0x20	; 32
     cf4:	00 93 03 06 	sts	0x0603, r16	; 0x800603 <vtable for UartClass+0x7f7046>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1441
    ADC0.CTRLA    = ADC_ENABLE_bm;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <vtable for UartClass+0x7f7043>
init_TCA0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1533
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     cfe:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <vtable for UartClass+0x7f7446>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1538

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     d02:	1e ef       	ldi	r17, 0xFE	; 254
     d04:	10 93 26 0a 	sts	0x0A26, r17	; 0x800a26 <vtable for UartClass+0x7f7469>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1539
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     d08:	10 93 27 0a 	sts	0x0A27, r17	; 0x800a27 <vtable for UartClass+0x7f746a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1559
  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 1000000) // and use 16...
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
     d0c:	89 e0       	ldi	r24, 0x09	; 9
     d0e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <vtable for UartClass+0x7f7443>
init_millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1227
{
  #if defined(MILLIS_USE_TIMERNONE)
    badCall("init_millis() is only valid with millis time keeping enabled.");
  #else
    #if defined(MILLIS_USE_TIMERA0)
      TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
     d12:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <vtable for UartClass+0x7f744d>
     d16:	82 60       	ori	r24, 0x02	; 2
     d18:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <vtable for UartClass+0x7f744d>
init():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1303
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
     d1c:	78 94       	sei
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
     d1e:	78 94       	sei
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:26
const uint16_t safeLowVoltage   = 31; // 3.0V

uint8_t currTime[6];

void setup() {
  disableSerialHWPins();
     d20:	9f db       	rcall	.-2242   	; 0x460 <disableSerialHWPins()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:27
  disableTWI();
     d22:	8f db       	rcall	.-2274   	; 0x442 <disableTWI()>
disableUnusedPins():
     d24:	88 e0       	ldi	r24, 0x08	; 8
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:11
  License: MIT
*/

void disableUnusedPins() {
  //  Set them to input pull and do not keep them floating
  PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
     d26:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <vtable for UartClass+0x7f6e93>
     d2a:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <vtable for UartClass+0x7f6e94>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:12
  PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
     d2e:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <vtable for UartClass+0x7f6e96>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:13
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
     d32:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <vtable for UartClass+0x7f6e97>
setupDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:14
  PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
     d36:	00 93 41 04 	sts	0x0441, r16	; 0x800441 <vtable for UartClass+0x7f6e84>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:29
unsigned long currentWarningCountMillis;


void setupDisplay() {
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm;    // Use PC5 as an output
     d3a:	00 93 46 04 	sts	0x0446, r16	; 0x800446 <vtable for UartClass+0x7f6e89>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:30
  PORTC.OUTCLR = PIN5_bm;    // Turn PC5 output off
     d3e:	10 93 01 04 	sts	0x0401, r17	; 0x800401 <vtable for UartClass+0x7f6e44>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:33

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [PA 1-7 as Outputs]
     d42:	80 ef       	ldi	r24, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:36

  //  Anode Pins for LEDS
  PORTB.DIRSET = 0b11110000; // [PB 4-7 as Outputs]
     d44:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <vtable for UartClass+0x7f6e64>
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:34
  //--- Disable unused pins (i.e do not keep them floating) | For efficient low power in sleep mode ---//
  disableUnusedPins();

  //--- Seven segment display initialization ---//
  setupDisplay();
  turnOffDisplay();
     d48:	9a db       	rcall	.-2252   	; 0x47e <turnOffDisplay()>
setupButton():
     d4a:	f0 92 52 04 	sts	0x0452, r15	; 0x800452 <vtable for UartClass+0x7f6e95>
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:46



//--- Buttons initialization ---//
void setupButton() {
  PORTC.PIN2CTRL = PORT_PULLUPEN_bm | PORT_ISC_LEVEL_gc;
     d4e:	80 91 00 06 	lds	r24, 0x0600	; 0x800600 <vtable for UartClass+0x7f7043>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:41
  //--- Button Modes Enabled ---//
  setupButton();


  //--- Disable ADC [TBD doesn't do much] ---//
  ADC0.CTRLA &= ~ADC_ENABLE_bm;
     d52:	8e 7f       	andi	r24, 0xFE	; 254
     d54:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <vtable for UartClass+0x7f7043>
     d58:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <vtable for UartClass+0x7f7263>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:49
  //--- Note: this is how you can re-enable ADC ---//
  // ADC0.CTRLA |= ADC_ENABLE_bm;


  //--- disable SPI ---//
  SPI0.CTRLA &= ~(SPI_ENABLE_bm);
     d5c:	8e 7f       	andi	r24, 0xFE	; 254
     d5e:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <vtable for UartClass+0x7f7263>
     d62:	78 94       	sei
millis():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:52

  // Enable interrupt
  sei();
     d64:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:248


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     d66:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:249
  cli();
     d68:	80 91 4e 3c 	lds	r24, 0x3C4E	; 0x803c4e <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:300
      "adc %D0, %D1"    "\n\t"
      : "+r" (m), "+r" (temp), "+d" (cnt)
      );
    */
  #else
    m = timer_millis;
     d6c:	90 91 4f 3c 	lds	r25, 0x3C4F	; 0x803c4f <timer_millis+0x1>
     d70:	a0 91 50 3c 	lds	r26, 0x3C50	; 0x803c50 <timer_millis+0x2>
     d74:	b0 91 51 3c 	lds	r27, 0x3C51	; 0x803c51 <timer_millis+0x3>
     d78:	2f bf       	out	0x3f, r18	; 63
setup():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:301
    SREG = oldSREG;
     d7a:	80 93 19 3c 	sts	0x3C19, r24	; 0x803c19 <startCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:55

  // Setup some counters...
  startCountMillis = millis();        // For the ext rtc
     d7e:	90 93 1a 3c 	sts	0x3C1A, r25	; 0x803c1a <startCountMillis+0x1>
     d82:	a0 93 1b 3c 	sts	0x3C1B, r26	; 0x803c1b <startCountMillis+0x2>
     d86:	b0 93 1c 3c 	sts	0x3C1C, r27	; 0x803c1c <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:56
  startMicros = micros();             // For display fps
     d8a:	2a da       	rcall	.-2988   	; 0x1e0 <micros>
     d8c:	60 93 15 3c 	sts	0x3C15, r22	; 0x803c15 <startMicros>
     d90:	70 93 16 3c 	sts	0x3C16, r23	; 0x803c16 <startMicros+0x1>
     d94:	80 93 17 3c 	sts	0x3C17, r24	; 0x803c17 <startMicros+0x2>
     d98:	90 93 18 3c 	sts	0x3C18, r25	; 0x803c18 <startMicros+0x3>
millis():
     d9c:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:248


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     d9e:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:249
  cli();
     da0:	80 91 4e 3c 	lds	r24, 0x3C4E	; 0x803c4e <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:300
      "adc %D0, %D1"    "\n\t"
      : "+r" (m), "+r" (temp), "+d" (cnt)
      );
    */
  #else
    m = timer_millis;
     da4:	90 91 4f 3c 	lds	r25, 0x3C4F	; 0x803c4f <timer_millis+0x1>
     da8:	a0 91 50 3c 	lds	r26, 0x3C50	; 0x803c50 <timer_millis+0x2>
     dac:	b0 91 51 3c 	lds	r27, 0x3C51	; 0x803c51 <timer_millis+0x3>
     db0:	2f bf       	out	0x3f, r18	; 63
setup():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:301
    SREG = oldSREG;
     db2:	80 93 45 3c 	sts	0x3C45, r24	; 0x803c45 <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:57
  startWarningCountMillis = millis(); // For battery low voltage warning LED blinking
     db6:	90 93 46 3c 	sts	0x3C46, r25	; 0x803c46 <startWarningCountMillis+0x1>
     dba:	a0 93 47 3c 	sts	0x3C47, r26	; 0x803c47 <startWarningCountMillis+0x2>
     dbe:	b0 93 48 3c 	sts	0x3C48, r27	; 0x803c48 <startWarningCountMillis+0x3>
_ZNK5EERefdeEv():
     dc2:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <vtable for UartClass+0x7f7e44>
_ZN11EEPROMClass3getIiEERT_hS2_.isra.7():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:62
  EERef(const INDEXDATATYPE index)
    : index(index)                 {}

  // Access/read members.
  uint8_t operator * () const            {
    return (*(uint8_t *)((uint16_t)(MAPPED_EEPROM_START + (index & EEPROM_INDEX_MASK))));
     dc6:	80 93 06 3c 	sts	0x3C06, r24	; 0x803c06 <new_stayAwakeFor>
_ZNK5EERefdeEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:256
  // Functionality to 'get' and 'put' objects to and from EEPROM.
  template< typename T > T &get(INDEXDATATYPE idx, T &t) {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *) &t;
    for (uint8_t count = sizeof(T); count; --count, ++e) {
      *ptr++ = *e;
     dca:	80 91 02 14 	lds	r24, 0x1402	; 0x801402 <vtable for UartClass+0x7f7e45>
_ZN11EEPROMClass3getIiEERT_hS2_.isra.7():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:62
  EERef(const INDEXDATATYPE index)
    : index(index)                 {}

  // Access/read members.
  uint8_t operator * () const            {
    return (*(uint8_t *)((uint16_t)(MAPPED_EEPROM_START + (index & EEPROM_INDEX_MASK))));
     dce:	80 93 07 3c 	sts	0x3C07, r24	; 0x803c07 <new_stayAwakeFor+0x1>
setup():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:256
  // Functionality to 'get' and 'put' objects to and from EEPROM.
  template< typename T > T &get(INDEXDATATYPE idx, T &t) {
    EEPtr e = idx;
    uint8_t *ptr = (uint8_t *) &t;
    for (uint8_t count = sizeof(T); count; --count, ++e) {
      *ptr++ = *e;
     dd2:	80 91 06 3c 	lds	r24, 0x3C06	; 0x803c06 <new_stayAwakeFor>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:61

  // Get the delay value (for which watch will stay awake), from EEPROM
  EEPROM.get(eeprom_addr, new_stayAwakeFor);
  if (new_stayAwakeFor == -1) {
     dd6:	90 91 07 3c 	lds	r25, 0x3C07	; 0x803c07 <new_stayAwakeFor+0x1>
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	31 f4       	brne	.+12     	; 0xdea <main+0x11e>
     dde:	8c ee       	ldi	r24, 0xEC	; 236
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:62
    new_stayAwakeFor = 5100;
     de0:	93 e1       	ldi	r25, 0x13	; 19
     de2:	80 93 06 3c 	sts	0x3C06, r24	; 0x803c06 <new_stayAwakeFor>
     de6:	90 93 07 3c 	sts	0x3C07, r25	; 0x803c07 <new_stayAwakeFor+0x1>
     dea:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <vtable for UartClass+0x7f6a93>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:66
  }

  //--- Sleep mode enablers ---//
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     dee:	89 7f       	andi	r24, 0xF9	; 249
     df0:	84 60       	ori	r24, 0x04	; 4
     df2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <vtable for UartClass+0x7f6a93>
     df6:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <vtable for UartClass+0x7f6a93>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:67
  sleep_enable();
     dfa:	81 60       	ori	r24, 0x01	; 1
     dfc:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <vtable for UartClass+0x7f6a93>
init():
     e00:	55 24       	eor	r5, r5
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     e02:	53 94       	inc	r5
measuredVoltage():
     e04:	61 2c       	mov	r6, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:55
uint16_t measuredVoltage() {
  uint16_t  v;
  ADC0.COMMAND = ADC_STCONV_bm;                            // Start conversion
  while (ADC0.COMMAND & ADC_STCONV_bm);                    // Wait for completion
  uint16_t adc_reading = ADC0.RES;                         // ADC conversion result
  v = 11264 / adc_reading;
     e06:	3c e2       	ldi	r19, 0x2C	; 44
     e08:	73 2e       	mov	r7, r19
batteryWarningLED_OFF():
     e0a:	40 ef       	ldi	r20, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:120



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     e0c:	34 2e       	mov	r3, r20
     e0e:	50 e2       	ldi	r21, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:121
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     e10:	45 2e       	mov	r4, r21
low_voltage_warn():
     e12:	22 24       	eor	r2, r2
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:150
        break;
      }

      //--- Toggle PC5 (Battery warning LED dot) output on and off mechanism ---//
      byte dot_pin_mask = 0b00010000; // mask to make the cathide bit, responsible for our led dot to toggle
      tog = !tog;
     e14:	23 94       	inc	r2
     e16:	80 91 4b 3c 	lds	r24, 0x3C4B	; 0x803c4b <showCurrTimePressed>
watchButtons():
     e1a:	90 91 1d 3c 	lds	r25, 0x3C1D	; 0x803c1d <wakeUpTriggered>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:60
  // PORTC.PIN2CTRL = 0b00001001;
}


void watchButtons() {
  if (wakeUpTriggered == 1) {
     e1e:	91 30       	cpi	r25, 0x01	; 1
     e20:	41 f4       	brne	.+16     	; 0xe32 <main+0x166>
     e22:	10 92 1d 3c 	sts	0x3C1D, r1	; 0x803c1d <wakeUpTriggered>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:61
    wakeUpTriggered = 0;
     e26:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <vtable for UartClass+0x7f6e8b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:64

    // Read PC2
    SW_OneState = PORTC.IN & PIN2_bm;
     e2a:	82 ff       	sbrs	r24, 2
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:66

    if (SW_OneState) {
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <main+0x16a>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	f4 cf       	rjmp	.-24     	; 0xe1a <main+0x14e>
loop():
     e32:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:74


void loop() {
  watchButtons();

  if (showCurrTimePressed) {
     e34:	e1 f3       	breq	.-8      	; 0xe2e <main+0x162>
     e36:	10 92 4b 3c 	sts	0x3C4B, r1	; 0x803c4b <showCurrTimePressed>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:75
    showCurrTimePressed = false;
     e3a:	40 e0       	ldi	r20, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:78

    //--- Enable Serial for time setting over serial ---//
    Serial.begin(115200);
     e3c:	52 ec       	ldi	r21, 0xC2	; 194
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	88 e5       	ldi	r24, 0x58	; 88
     e44:	9c e3       	ldi	r25, 0x3C	; 60
     e46:	59 dc       	rcall	.-1870   	; 0x6fa <UartClass::begin(unsigned long)>
init():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:19
{
}

void TinyMegaI2CMaster::init()
{
  pinMode(PIN_WIRE_SDA, INPUT_PULLUP);
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	8a e0       	ldi	r24, 0x0A	; 10
     e4c:	5f dc       	rcall	.-1858   	; 0x70c <pinMode>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:20
  pinMode(PIN_WIRE_SCL, INPUT_PULLUP);
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	8b e0       	ldi	r24, 0x0B	; 11
     e52:	5c dc       	rcall	.-1864   	; 0x70c <pinMode>
     e54:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <vtable for UartClass+0x7f7259>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     e58:	50 92 13 08 	sts	0x0813, r5	; 0x800813 <vtable for UartClass+0x7f7256>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:29
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     e5c:	50 92 15 08 	sts	0x0815, r5	; 0x800815 <vtable for UartClass+0x7f7258>
begin():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	5c d9       	rcall	.-3400   	; 0x11e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]>
     e66:	88 23       	and	r24, r24
     e68:	09 f4       	brne	.+2      	; 0xe6c <main+0x1a0>
     e6a:	af c0       	rjmp	.+350    	; 0xfca <main+0x2fe>
setupRTC():
     e6c:	31 e0       	ldi	r19, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:25

void setupRTC() {
  while (rtc.begin() == false) { // un-shifted default address for RV-8803 is 0x32. Check library!
    rtcAvailable = false;
  }
  rtcAvailable = true;
     e6e:	30 93 49 3c 	sts	0x3C49, r19	; 0x803c49 <rtcAvailable>
ADCVoltRefSetup():
     e72:	40 e1       	ldi	r20, 0x10	; 16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:44
//----- LOW VOLTAGE CALCULATION -----//
//-----------------------------------//
// Courtesy: http://www.technoblogy.com/show?3K82 & http://www.technoblogy.com/list?3KKM

void ADCVoltRefSetup() {
  VREF.CTRLA = VREF_ADC0REFSEL_1V1_gc;
     e74:	40 93 a0 00 	sts	0x00A0, r20	; 0x8000a0 <vtable for UartClass+0x7f6ae3>
     e78:	87 e1       	ldi	r24, 0x17	; 23
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:45
  ADC0.CTRLC = ADC_REFSEL_VDDREF_gc | ADC_PRESC_DIV256_gc; // 78kHz clock
     e7a:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f7045>
     e7e:	8d e1       	ldi	r24, 0x1D	; 29
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:46
  ADC0.MUXPOS = ADC_MUXPOS_INTREF_gc;                      // Measure INTREF
     e80:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <vtable for UartClass+0x7f7049>
     e84:	50 92 00 06 	sts	0x0600, r5	; 0x800600 <vtable for UartClass+0x7f7043>
measuredVoltage():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:47
  ADC0.CTRLA = ADC_ENABLE_bm;                              // Single, 10-bit
     e88:	50 92 08 06 	sts	0x0608, r5	; 0x800608 <vtable for UartClass+0x7f704b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:52
}

uint16_t measuredVoltage() {
  uint16_t  v;
  ADC0.COMMAND = ADC_STCONV_bm;                            // Start conversion
     e8c:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <vtable for UartClass+0x7f704b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:53
  while (ADC0.COMMAND & ADC_STCONV_bm);                    // Wait for completion
     e90:	80 fd       	sbrc	r24, 0
     e92:	fc cf       	rjmp	.-8      	; 0xe8c <main+0x1c0>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:54
  uint16_t adc_reading = ADC0.RES;                         // ADC conversion result
     e94:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <vtable for UartClass+0x7f7053>
     e98:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <vtable for UartClass+0x7f7054>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/ExtraUtils.h:55
  v = 11264 / adc_reading;
     e9c:	c3 01       	movw	r24, r6
     e9e:	0d d3       	rcall	.+1562   	; 0x14ba <__udivmodhi4>
     ea0:	8b 01       	movw	r16, r22
batteryWarningLED_OFF():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:119
}



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
     ea2:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:120
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     ea4:	30 92 25 04 	sts	0x0425, r3	; 0x800425 <vtable for UartClass+0x7f6e68>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:121
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     ea8:	40 92 46 04 	sts	0x0446, r4	; 0x800446 <vtable for UartClass+0x7f6e89>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:122
  sei();                      // Attach interrupt again
     eac:	78 94       	sei
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:87
    //--- Detect self referenced Batt voltage ---//
    ADCVoltRefSetup();
    uint16_t currBattVolt = measuredVoltage();

    batteryWarningLED_OFF();      // On wake up, initialize the warning led dot of the segment to be OFF
    turnOffDisplay();             // On wake up, initialize the whole display segment to be OFF
     eae:	e7 da       	rcall	.-2610   	; 0x47e <turnOffDisplay()>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:88
    do_blink = 1;                 // On wake up, initializing the variable for low voltage warning blinking action.
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	80 93 08 3c 	sts	0x3C08, r24	; 0x803c08 <do_blink>
     eb8:	90 93 09 3c 	sts	0x3C09, r25	; 0x803c09 <do_blink+0x1>
     ebc:	80 91 06 3c 	lds	r24, 0x3C06	; 0x803c06 <new_stayAwakeFor>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:91

    // Just before the awake cycle begins, if the RTC_DELAY_init value has changed (as Read from EEPROM in setup) set it to new value.
    if (new_stayAwakeFor != stayAwakeFor) {
     ec0:	90 91 07 3c 	lds	r25, 0x3C07	; 0x803c07 <new_stayAwakeFor+0x1>
     ec4:	20 91 04 3c 	lds	r18, 0x3C04	; 0x803c04 <stayAwakeFor>
     ec8:	30 91 05 3c 	lds	r19, 0x3C05	; 0x803c05 <stayAwakeFor+0x1>
     ecc:	82 17       	cp	r24, r18
     ece:	93 07       	cpc	r25, r19
     ed0:	21 f0       	breq	.+8      	; 0xeda <main+0x20e>
     ed2:	80 93 04 3c 	sts	0x3C04, r24	; 0x803c04 <stayAwakeFor>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:92
      stayAwakeFor = new_stayAwakeFor;
     ed6:	90 93 05 3c 	sts	0x3C05, r25	; 0x803c05 <stayAwakeFor+0x1>
     eda:	80 91 04 3c 	lds	r24, 0x3C04	; 0x803c04 <stayAwakeFor>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:95
    }

    RTC_DELAY_init(stayAwakeFor); // Start the timer for keeping track of time for how long to keep the uC awake and do it's business (5000 ms)
     ede:	90 91 05 3c 	lds	r25, 0x3C05	; 0x803c05 <stayAwakeFor+0x1>
RTC_DELAY_init():
     ee2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <vtable for UartClass+0x7f6b8a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:28
}


//--- uC's internal RTC & interrupt based based delay method ---//
void RTC_DELAY_init(int RTCdelay) {
  RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;    // 32.768kHz Internal Crystal Oscillator (INT32K)
     ee6:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <vtable for UartClass+0x7f6b84>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:29
  while (RTC.STATUS > 0);               // Wait for all register to be synchronized
     eea:	21 11       	cpse	r18, r1
     eec:	fc cf       	rjmp	.-8      	; 0xee6 <main+0x21a>
     eee:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <vtable for UartClass+0x7f6b8d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:30
  RTC.PER = RTCdelay;                   // Set period for delay
     ef2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <vtable for UartClass+0x7f6b8e>
     ef6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <vtable for UartClass+0x7f6b85>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:31
  RTC.INTCTRL |= RTC_OVF_bm;            // Enable overflow Interrupt which will trigger ISR
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <vtable for UartClass+0x7f6b85>
     f00:	89 ea       	ldi	r24, 0xA9	; 169
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Buttons.h:32
  RTC.CTRLA = RTC_PRESCALER_DIV32_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
     f02:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <vtable for UartClass+0x7f6b83>
loop():
     f06:	c8 01       	movw	r24, r16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:104
      if (currBattVolt <= unsafeLowVoltage) {
        batteryWarningLED_ON();
      }

      // If voltage detected is low but not critically low and below safest threshold!
      if (currBattVolt > unsafeLowVoltage && currBattVolt < safeLowVoltage) {
     f08:	4d 97       	sbiw	r24, 0x1d	; 29
     f0a:	8f 83       	std	Y+7, r24	; 0x07
     f0c:	98 87       	std	Y+8, r25	; 0x08
     f0e:	27 e3       	ldi	r18, 0x37	; 55
     f10:	a2 2e       	mov	r10, r18
     f12:	2c e3       	ldi	r18, 0x3C	; 60
     f14:	b2 2e       	mov	r11, r18
     f16:	80 91 4a 3c 	lds	r24, 0x3C4A	; 0x803c4a <showTimePeriodOver>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:97
      stayAwakeFor = new_stayAwakeFor;
    }

    RTC_DELAY_init(stayAwakeFor); // Start the timer for keeping track of time for how long to keep the uC awake and do it's business (5000 ms)

    while (showTimePeriodOver == 0) {
     f1a:	81 11       	cpse	r24, r1
     f1c:	9c c1       	rjmp	.+824    	; 0x1256 <main+0x58a>
     f1e:	0d 31       	cpi	r16, 0x1D	; 29
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:99
      // If voltage detected is lower than the safe operational voltage threshold!
      if (currBattVolt <= unsafeLowVoltage) {
     f20:	11 05       	cpc	r17, r1
     f22:	30 f4       	brcc	.+12     	; 0xf30 <main+0x264>
batteryWarningLED_ON():
     f24:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:110
}



void batteryWarningLED_ON() {
  cli();                      // Detach interrupt (to avoid any glitch)
     f26:	90 e1       	ldi	r25, 0x10	; 16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:111
  PORTB.OUTTGL = 0b00010000;  // Toggle the ANODE bit responsible for our LED dot in the matrix
     f28:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <vtable for UartClass+0x7f6e6a>
     f2c:	49 b8       	out	0x09, r4	; 9
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:112
  VPORTC.OUT = PIN5_bm;       // Quickly set the pin PC5 to high with this spl method.
     f2e:	78 94       	sei
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:113
  sei();                      // Attach interrupt again
     f30:	ef 81       	ldd	r30, Y+7	; 0x07
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:104
        batteryWarningLED_ON();
      }

      // If voltage detected is low but not critically low and below safest threshold!
      if (currBattVolt > unsafeLowVoltage && currBattVolt < safeLowVoltage) {
     f32:	f8 85       	ldd	r31, Y+8	; 0x08
     f34:	32 97       	sbiw	r30, 0x02	; 2
     f36:	08 f0       	brcs	.+2      	; 0xf3a <main+0x26e>
     f38:	5d c0       	rjmp	.+186    	; 0xff4 <main+0x328>
low_voltage_warn():
     f3a:	80 91 08 3c 	lds	r24, 0x3C08	; 0x803c08 <do_blink>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:132

// This function show a warning LED for (total ON period)/2 seconds
// and then shows the time...
void low_voltage_warn() {
  // Block code to only blink warning LED
  while (do_blink == 1) {
     f3e:	90 91 09 3c 	lds	r25, 0x3C09	; 0x803c09 <do_blink+0x1>
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	09 f0       	breq	.+2      	; 0xf48 <main+0x27c>
     f46:	3f c0       	rjmp	.+126    	; 0xfc6 <main+0x2fa>
millis():
     f48:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:248


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     f4a:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:249
  cli();
     f4c:	80 91 4e 3c 	lds	r24, 0x3C4E	; 0x803c4e <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:300
      "adc %D0, %D1"    "\n\t"
      : "+r" (m), "+r" (temp), "+d" (cnt)
      );
    */
  #else
    m = timer_millis;
     f50:	90 91 4f 3c 	lds	r25, 0x3C4F	; 0x803c4f <timer_millis+0x1>
     f54:	a0 91 50 3c 	lds	r26, 0x3C50	; 0x803c50 <timer_millis+0x2>
     f58:	b0 91 51 3c 	lds	r27, 0x3C51	; 0x803c51 <timer_millis+0x3>
     f5c:	2f bf       	out	0x3f, r18	; 63
low_voltage_warn():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:301
    SREG = oldSREG;
     f5e:	c0 90 45 3c 	lds	r12, 0x3C45	; 0x803c45 <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:134
    currentWarningCountMillis = millis();
    if (currentWarningCountMillis - startWarningCountMillis >= warning_blink_gap) {
     f62:	d0 90 46 3c 	lds	r13, 0x3C46	; 0x803c46 <startWarningCountMillis+0x1>
     f66:	e0 90 47 3c 	lds	r14, 0x3C47	; 0x803c47 <startWarningCountMillis+0x2>
     f6a:	f0 90 48 3c 	lds	r15, 0x3C48	; 0x803c48 <startWarningCountMillis+0x3>
     f6e:	9c 01       	movw	r18, r24
     f70:	ad 01       	movw	r20, r26
     f72:	2c 19       	sub	r18, r12
     f74:	3d 09       	sbc	r19, r13
     f76:	4e 09       	sbc	r20, r14
     f78:	5f 09       	sbc	r21, r15
     f7a:	2d 37       	cpi	r18, 0x7D	; 125
     f7c:	31 05       	cpc	r19, r1
     f7e:	41 05       	cpc	r20, r1
     f80:	51 05       	cpc	r21, r1
     f82:	d8 f2       	brcs	.-74     	; 0xf3a <main+0x26e>
     f84:	80 93 45 3c 	sts	0x3C45, r24	; 0x803c45 <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:136

      startWarningCountMillis = currentWarningCountMillis;
     f88:	90 93 46 3c 	sts	0x3C46, r25	; 0x803c46 <startWarningCountMillis+0x1>
     f8c:	a0 93 47 3c 	sts	0x3C47, r26	; 0x803c47 <startWarningCountMillis+0x2>
     f90:	b0 93 48 3c 	sts	0x3C48, r27	; 0x803c48 <startWarningCountMillis+0x3>
     f94:	80 91 43 3c 	lds	r24, 0x3C43	; 0x803c43 <blink_count>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:138

      blink_count++;
     f98:	90 91 44 3c 	lds	r25, 0x3C44	; 0x803c44 <blink_count+0x1>
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	80 93 43 3c 	sts	0x3C43, r24	; 0x803c43 <blink_count>
     fa2:	90 93 44 3c 	sts	0x3C44, r25	; 0x803c44 <blink_count+0x1>
     fa6:	05 97       	sbiw	r24, 0x05	; 5
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:140

      if (blink_count >= max_blinks) {
     fa8:	9c f0       	brlt	.+38     	; 0xfd0 <main+0x304>
batteryWarningLED_OFF():
     faa:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:119
}



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
     fac:	30 92 25 04 	sts	0x0425, r3	; 0x800425 <vtable for UartClass+0x7f6e68>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:120
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     fb0:	40 92 46 04 	sts	0x0446, r4	; 0x800446 <vtable for UartClass+0x7f6e89>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:122
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
  sei();                      // Attach interrupt again
     fb4:	78 94       	sei
low_voltage_warn():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:143
      blink_count++;

      if (blink_count >= max_blinks) {
        //--- Clear and Stop the blinking LED ---//
        batteryWarningLED_OFF();
        blink_count = 0;
     fb6:	10 92 43 3c 	sts	0x3C43, r1	; 0x803c43 <blink_count>
     fba:	10 92 44 3c 	sts	0x3C44, r1	; 0x803c44 <blink_count+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:144
        do_blink = 0;
     fbe:	10 92 08 3c 	sts	0x3C08, r1	; 0x803c08 <do_blink>
     fc2:	10 92 09 3c 	sts	0x3C09, r1	; 0x803c09 <do_blink+0x1>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:117
      if (currBattVolt >= safeLowVoltage) {
        // If data arrives over serial,
        // it will check for data format and set time to RTC
        // Anyways, and then "show time here" routine also runs after that!
        SetTimeOverSerial();
        getAndShowTime();
     fc6:	ca da       	rcall	.-2668   	; 0x55c <getAndShowTime()>
     fc8:	a6 cf       	rjmp	.-180    	; 0xf16 <main+0x24a>
setupRTC():
     fca:	10 92 49 3c 	sts	0x3C49, r1	; 0x803c49 <rtcAvailable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/RTCManager.h:23



void setupRTC() {
  while (rtc.begin() == false) { // un-shifted default address for RV-8803 is 0x32. Check library!
    rtcAvailable = false;
     fce:	3c cf       	rjmp	.-392    	; 0xe48 <main+0x17c>
low_voltage_warn():
     fd0:	80 91 42 3c 	lds	r24, 0x3C42	; 0x803c42 <tog>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:150
        break;
      }

      //--- Toggle PC5 (Battery warning LED dot) output on and off mechanism ---//
      byte dot_pin_mask = 0b00010000; // mask to make the cathide bit, responsible for our led dot to toggle
      tog = !tog;
     fd4:	85 25       	eor	r24, r5
     fd6:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <tog>
     fda:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:151
      if (tog) {
     fdc:	49 f0       	breq	.+18     	; 0xff0 <main+0x324>
main():
     fde:	80 e1       	ldi	r24, 0x10	; 16
low_voltage_warn():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:152
        dot_pin_mask = 0b00010000;
     fe0:	30 92 25 04 	sts	0x0425, r3	; 0x800425 <vtable for UartClass+0x7f6e68>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:157
      } else {
        dot_pin_mask = 0b00000000;
      }
      
      PORTB.OUTSET = 0b11110000;    // Deactivate all on PORTB bits to which the COMMON CATHODE pins of our LED segment are connected, which are  by setting them HIGH
     fe4:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:158
      cli();                        // Detach interrupt (to avoid any glitch)
     fe6:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <vtable for UartClass+0x7f6e6a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:159
      PORTB.OUTTGL = dot_pin_mask;  // Toggle the cathode bit responsible for our LED dot in the matrix
     fea:	49 b8       	out	0x09, r4	; 9
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:160
      VPORTC.OUT = PIN5_bm;         // Quickly set the pin to high with this spl method.
     fec:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:161
      sei();                        // Attach interrupt again
     fee:	a5 cf       	rjmp	.-182    	; 0xf3a <main+0x26e>
main():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/DisplayManager.h:154
      byte dot_pin_mask = 0b00010000; // mask to make the cathide bit, responsible for our led dot to toggle
      tog = !tog;
      if (tog) {
        dot_pin_mask = 0b00010000;
      } else {
        dot_pin_mask = 0b00000000;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	f6 cf       	rjmp	.-20     	; 0xfe0 <main+0x314>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:112
        // In the next remaining period [ (5000-1250)ms ] of the whole awake period, it continues to show the time.
        getAndShowTime();
      }

      // If voltage detected is OK! and above operational and safe threshold!
      if (currBattVolt >= safeLowVoltage) {
     ff4:	0f 31       	cpi	r16, 0x1F	; 31
     ff6:	11 05       	cpc	r17, r1
     ff8:	08 f4       	brcc	.+2      	; 0xffc <main+0x330>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:43

bool setNewTime;


void fillDataArray() {
  newDataArrived = false;
     ffa:	8d cf       	rjmp	.-230    	; 0xf16 <main+0x24a>
fillDataArray():
     ffc:	10 92 39 3c 	sts	0x3C39, r1	; 0x803c39 <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:44
  while (Serial.available() > 0) {
    1000:	88 e5       	ldi	r24, 0x58	; 88
    1002:	9c e3       	ldi	r25, 0x3C	; 60
    1004:	7a d9       	rcall	.-3340   	; 0x2fa <UartClass::available()>
    1006:	18 16       	cp	r1, r24
    1008:	19 06       	cpc	r1, r25
    100a:	ec f4       	brge	.+58     	; 0x1046 <main+0x37a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:45
    incomingChar = Serial.read();
    100c:	88 e5       	ldi	r24, 0x58	; 88
    100e:	9c e3       	ldi	r25, 0x3C	; 60
    1010:	52 d9       	rcall	.-3420   	; 0x2b6 <UartClass::read()>
    1012:	8a 30       	cpi	r24, 0x0A	; 10
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:46
    if (incomingChar == '\n') {
    1014:	39 f4       	brne	.+14     	; 0x1024 <main+0x358>
    1016:	20 92 39 3c 	sts	0x3C39, r2	; 0x803c39 <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:47
      newDataArrived = true;
    101a:	10 92 1e 3c 	sts	0x3C1E, r1	; 0x803c1e <idx>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:48
      idx = 0;
    101e:	10 92 1f 3c 	sts	0x3C1F, r1	; 0x803c1f <idx+0x1>
    1022:	ee cf       	rjmp	.-36     	; 0x1000 <main+0x334>
    1024:	10 92 39 3c 	sts	0x3C39, r1	; 0x803c39 <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:50
    } else {
      newDataArrived = false;
    1028:	20 91 1e 3c 	lds	r18, 0x3C1E	; 0x803c1e <idx>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:51
      dataArray[idx] = incomingChar;
    102c:	30 91 1f 3c 	lds	r19, 0x3C1F	; 0x803c1f <idx+0x1>
    1030:	f9 01       	movw	r30, r18
    1032:	e0 5e       	subi	r30, 0xE0	; 224
    1034:	f3 4c       	sbci	r31, 0xC3	; 195
    1036:	80 83       	st	Z, r24
    1038:	2f 5f       	subi	r18, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:52
      idx++;
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	20 93 1e 3c 	sts	0x3C1E, r18	; 0x803c1e <idx>
    1040:	30 93 1f 3c 	sts	0x3C1F, r19	; 0x803c1f <idx+0x1>
    1044:	dd cf       	rjmp	.-70     	; 0x1000 <main+0x334>
parseDataArray():
    1046:	80 91 39 3c 	lds	r24, 0x3C39	; 0x803c39 <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:59
  }
}


void parseDataArray() {
  if (newDataArrived) {
    104a:	88 23       	and	r24, r24
    104c:	09 f4       	brne	.+2      	; 0x1050 <main+0x384>
    104e:	fe c0       	rjmp	.+508    	; 0x124c <main+0x580>
    1050:	10 92 39 3c 	sts	0x3C39, r1	; 0x803c39 <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:60
    newDataArrived = false;
    1054:	e0 e2       	ldi	r30, 0x20	; 32
    1056:	fc e3       	ldi	r31, 0x3C	; 60
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	21 91       	ld	r18, Z+
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:65
    totalDelimators = 0;

    // Count how many delimators (in our case that is ':') are there
    for (int i = 0; i < sizeOfDataStructure; i++) {
      if (dataArray[i] == ':') {
    105e:	2a 33       	cpi	r18, 0x3A	; 58
    1060:	09 f4       	brne	.+2      	; 0x1064 <main+0x398>
    1062:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:66
        totalDelimators++;
    1064:	ae 16       	cp	r10, r30
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:64
  if (newDataArrived) {
    newDataArrived = false;
    totalDelimators = 0;

    // Count how many delimators (in our case that is ':') are there
    for (int i = 0; i < sizeOfDataStructure; i++) {
    1066:	bf 06       	cpc	r11, r31
    1068:	c9 f7       	brne	.-14     	; 0x105c <main+0x390>
    106a:	80 93 37 3c 	sts	0x3C37, r24	; 0x803c37 <totalDelimators>
    106e:	90 93 38 3c 	sts	0x3C38, r25	; 0x803c38 <totalDelimators+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:71
        totalDelimators++;
      }
    }

    // Check received data's format & integrity
    if (totalDelimators >= 6) {  // or 6/7/8 based on the stream ends with year value or with additional delay value or with enable tilt flag
    1072:	06 97       	sbiw	r24, 0x06	; 6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:73
      char * strtokIndx; // this is used by strtok() as an index
      strtokIndx = strtok(dataArray, ":"); // get the first part - the string
    1074:	0c f4       	brge	.+2      	; 0x1078 <main+0x3ac>
    1076:	77 c0       	rjmp	.+238    	; 0x1166 <main+0x49a>
    1078:	67 ed       	ldi	r22, 0xD7	; 215
    107a:	75 e9       	ldi	r23, 0x95	; 149
    107c:	80 e2       	ldi	r24, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:75

      hrToBeSet = atoi(strtokIndx);        // convert this part to an integer
    107e:	9c e3       	ldi	r25, 0x3C	; 60
    1080:	50 d1       	rcall	.+672    	; 0x1322 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:76
      strtokIndx = strtok(NULL, ":");      // this continues where the previous call left off
    1082:	27 d1       	rcall	.+590    	; 0x12d2 <atoi>
    1084:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <hrToBeSet>
    1088:	67 ed       	ldi	r22, 0xD7	; 215
    108a:	75 e9       	ldi	r23, 0x95	; 149
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:77
      minToBeSet = atoi(strtokIndx);       // convert this part to an integer
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	48 d1       	rcall	.+656    	; 0x1322 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:78
      strtokIndx = strtok(NULL, ":");
    1092:	1f d1       	rcall	.+574    	; 0x12d2 <atoi>
    1094:	80 93 3b 3c 	sts	0x3C3B, r24	; 0x803c3b <minToBeSet>
    1098:	67 ed       	ldi	r22, 0xD7	; 215
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:79
      secToBeSet = atoi(strtokIndx);
    109a:	75 e9       	ldi	r23, 0x95	; 149
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	40 d1       	rcall	.+640    	; 0x1322 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:80
      strtokIndx = strtok(NULL, ":");
    10a2:	17 d1       	rcall	.+558    	; 0x12d2 <atoi>
    10a4:	80 93 3a 3c 	sts	0x3C3A, r24	; 0x803c3a <secToBeSet>
    10a8:	67 ed       	ldi	r22, 0xD7	; 215
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:81
      weekdayToBeSet = atoi(strtokIndx);
    10aa:	75 e9       	ldi	r23, 0x95	; 149
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:82
      strtokIndx = strtok(NULL, ":");
    10b0:	38 d1       	rcall	.+624    	; 0x1322 <strtok>
    10b2:	0f d1       	rcall	.+542    	; 0x12d2 <atoi>
    10b4:	80 93 3d 3c 	sts	0x3C3D, r24	; 0x803c3d <weekdayToBeSet>
    10b8:	67 ed       	ldi	r22, 0xD7	; 215
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:83
      dateToBeSet = atoi(strtokIndx);
    10ba:	75 e9       	ldi	r23, 0x95	; 149
    10bc:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:84
      strtokIndx = strtok(NULL, ":");
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	30 d1       	rcall	.+608    	; 0x1322 <strtok>
    10c2:	07 d1       	rcall	.+526    	; 0x12d2 <atoi>
    10c4:	80 93 3e 3c 	sts	0x3C3E, r24	; 0x803c3e <dateToBeSet>
    10c8:	67 ed       	ldi	r22, 0xD7	; 215
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:85
      monthToBeSet = atoi(strtokIndx);
    10ca:	75 e9       	ldi	r23, 0x95	; 149
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	28 d1       	rcall	.+592    	; 0x1322 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:86
      strtokIndx = strtok(NULL, ":");
    10d2:	ff d0       	rcall	.+510    	; 0x12d2 <atoi>
    10d4:	80 93 3f 3c 	sts	0x3C3F, r24	; 0x803c3f <monthToBeSet>
    10d8:	67 ed       	ldi	r22, 0xD7	; 215
    10da:	75 e9       	ldi	r23, 0x95	; 149
    10dc:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:87
      yearToBeSet = atoi(strtokIndx);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	20 d1       	rcall	.+576    	; 0x1322 <strtok>
    10e2:	f7 d0       	rcall	.+494    	; 0x12d2 <atoi>
    10e4:	80 93 40 3c 	sts	0x3C40, r24	; 0x803c40 <yearToBeSet>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:88
      strtokIndx = strtok(NULL, ":");
    10e8:	67 ed       	ldi	r22, 0xD7	; 215
    10ea:	75 e9       	ldi	r23, 0x95	; 149
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	18 d1       	rcall	.+560    	; 0x1322 <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:89
      int new_val = (atoi(strtokIndx)) * 1000; // in millis
    10f2:	ef d0       	rcall	.+478    	; 0x12d2 <atoi>
    10f4:	28 ee       	ldi	r18, 0xE8	; 232
    10f6:	33 e0       	ldi	r19, 0x03	; 3
    10f8:	82 9f       	mul	r24, r18
    10fa:	a0 01       	movw	r20, r0
    10fc:	83 9f       	mul	r24, r19
    10fe:	50 0d       	add	r21, r0
    1100:	92 9f       	mul	r25, r18
    1102:	50 0d       	add	r21, r0
    1104:	11 24       	eor	r1, r1
    1106:	49 83       	std	Y+1, r20	; 0x01
    1108:	5a 83       	std	Y+2, r21	; 0x02
_ZN11EEPROMClass3putIiEERKT_hS3_.isra.5():
    110a:	84 2f       	mov	r24, r20
update():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:265

  template< typename T > const T &put(INDEXDATATYPE idx, const T &t) {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *) &t;
    for (uint8_t count = sizeof(T); count; --count, ++e) {
      (*e).update(*ptr++);
    110c:	90 91 01 14 	lds	r25, 0x1401	; 0x801401 <vtable for UartClass+0x7f7e44>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:149
  EERef &operator >>= (uint8_t in)    {
    return *this = **this >> in;
  }

  EERef &update(uint8_t in)          {
    return  in != *this ? *this = in : *this;
    1110:	94 17       	cp	r25, r20
    1112:	79 f0       	breq	.+30     	; 0x1132 <main+0x466>
operator=():
    1114:	a1 e0       	ldi	r26, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:95
      "ldi %0, 0x03"      "\n\t" // command loaded: page erase-write.
      "st Z, %0"          "\n\t" // write the page erase-write command to nvmctrl.ctrla
      "out 0x3f, r0"      "\n"   // restore SREG
      :"+d"(in)           // take the value we are writing in any upper register as read/write,
      : "x"(adr)          // and the address (not the index) in X
      : "r30", "r31", "r18");      // clobber Z and r18. We needed an upper register for the temporary value to andi it. I wonder if this will fix the eeprom bugs too?
    1116:	b4 e1       	ldi	r27, 0x14	; 20
    1118:	e0 e0       	ldi	r30, 0x00	; 0
    111a:	f0 e1       	ldi	r31, 0x10	; 16
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	22 81       	ldd	r18, Z+2	; 0x02
    1120:	23 70       	andi	r18, 0x03	; 3
    1122:	e9 f7       	brne	.-6      	; 0x111e <main+0x452>
    1124:	f8 94       	cli
    1126:	8c 93       	st	X, r24
    1128:	8d e9       	ldi	r24, 0x9D	; 157
    112a:	84 bf       	out	0x34, r24	; 52
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	80 83       	st	Z, r24
    1130:	0f be       	out	0x3f, r0	; 63
_ZN11EEPROMClass3putIiEERKT_hS3_.isra.5():
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
update():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:265

  template< typename T > const T &put(INDEXDATATYPE idx, const T &t) {
    EEPtr e = idx;
    const uint8_t *ptr = (const uint8_t *) &t;
    for (uint8_t count = sizeof(T); count; --count, ++e) {
      (*e).update(*ptr++);
    1134:	80 91 02 14 	lds	r24, 0x1402	; 0x801402 <vtable for UartClass+0x7f7e45>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:149
  EERef &operator >>= (uint8_t in)    {
    return *this = **this >> in;
  }

  EERef &update(uint8_t in)          {
    return  in != *this ? *this = in : *this;
    1138:	98 17       	cp	r25, r24
    113a:	79 f0       	breq	.+30     	; 0x115a <main+0x48e>
operator=():
    113c:	a2 e0       	ldi	r26, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/libraries/EEPROM/src/EEPROM.h:95
      "ldi %0, 0x03"      "\n\t" // command loaded: page erase-write.
      "st Z, %0"          "\n\t" // write the page erase-write command to nvmctrl.ctrla
      "out 0x3f, r0"      "\n"   // restore SREG
      :"+d"(in)           // take the value we are writing in any upper register as read/write,
      : "x"(adr)          // and the address (not the index) in X
      : "r30", "r31", "r18");      // clobber Z and r18. We needed an upper register for the temporary value to andi it. I wonder if this will fix the eeprom bugs too?
    113e:	b4 e1       	ldi	r27, 0x14	; 20
    1140:	e0 e0       	ldi	r30, 0x00	; 0
    1142:	f0 e1       	ldi	r31, 0x10	; 16
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	22 81       	ldd	r18, Z+2	; 0x02
    1148:	23 70       	andi	r18, 0x03	; 3
    114a:	e9 f7       	brne	.-6      	; 0x1146 <main+0x47a>
    114c:	f8 94       	cli
    114e:	9c 93       	st	X, r25
    1150:	9d e9       	ldi	r25, 0x9D	; 157
    1152:	94 bf       	out	0x34, r25	; 52
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	90 83       	st	Z, r25
    1158:	0f be       	out	0x3f, r0	; 63
parseDataArray():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:92
      // Also write this data (the watch's keep-awake time value) to the EEPROM's specified location
      EEPROM.put(eeprom_addr, new_val);
      new_stayAwakeFor = new_val;
    115a:	40 93 06 3c 	sts	0x3C06, r20	; 0x803c06 <new_stayAwakeFor>
    115e:	50 93 07 3c 	sts	0x3C07, r21	; 0x803c07 <new_stayAwakeFor+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:93
      setNewTime = true;
    1162:	20 92 41 3c 	sts	0x3C41, r2	; 0x803c41 <setNewTime>
setRTCToNewTime():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:104
}



void setRTCToNewTime() {
  if (setNewTime) {
    1166:	80 91 41 3c 	lds	r24, 0x3C41	; 0x803c41 <setNewTime>
    116a:	88 23       	and	r24, r24
    116c:	09 f4       	brne	.+2      	; 0x1170 <main+0x4a4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:105
    if (rtc.setTime(secToBeSet, minToBeSet, hrToBeSet, weekdayToBeSet, dateToBeSet, monthToBeSet, yearToBeSet) == false) {
    116e:	2b cf       	rjmp	.-426    	; 0xfc6 <main+0x2fa>
    1170:	30 91 40 3c 	lds	r19, 0x3C40	; 0x803c40 <yearToBeSet>
    1174:	40 91 3f 3c 	lds	r20, 0x3C3F	; 0x803c3f <monthToBeSet>
    1178:	e0 91 3e 3c 	lds	r30, 0x3C3E	; 0x803c3e <dateToBeSet>
    117c:	50 91 3d 3c 	lds	r21, 0x3C3D	; 0x803c3d <weekdayToBeSet>
    1180:	f0 91 3c 3c 	lds	r31, 0x3C3C	; 0x803c3c <hrToBeSet>
    1184:	a0 91 3b 3c 	lds	r26, 0x3C3B	; 0x803c3b <minToBeSet>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:294
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    1188:	80 91 3a 3c 	lds	r24, 0x3C3A	; 0x803c3a <secToBeSet>
DECtoBCD():
    118c:	2a e0       	ldi	r18, 0x0A	; 10
    118e:	62 2f       	mov	r22, r18
    1190:	88 d1       	rcall	.+784    	; 0x14a2 <__udivmodqi4>
    1192:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:213
    return writeMultipleRegisters(RV8803_SECONDS, time + 1, len - 1);
}

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    1194:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:294
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    1196:	98 0f       	add	r25, r24
setTime():
    1198:	90 93 d4 3c 	sts	0x3CD4, r25	; 0x803cd4 <rtc+0x7>
DECtoBCD():
    119c:	8a 2f       	mov	r24, r26
    119e:	81 d1       	rcall	.+770    	; 0x14a2 <__udivmodqi4>
    11a0:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:214
}

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    11a2:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:294
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    11a4:	98 0f       	add	r25, r24
setTime():
    11a6:	90 93 d5 3c 	sts	0x3CD5, r25	; 0x803cd5 <rtc+0x8>
DECtoBCD():
    11aa:	8f 2f       	mov	r24, r31
    11ac:	7a d1       	rcall	.+756    	; 0x14a2 <__udivmodqi4>
    11ae:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:215

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    11b0:	80 7f       	andi	r24, 0xF0	; 240
    11b2:	98 0f       	add	r25, r24
setTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:294
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    11b4:	90 93 d6 3c 	sts	0x3CD6, r25	; 0x803cd6 <rtc+0x9>
DECtoBCD():
    11b8:	8e 2f       	mov	r24, r30
    11ba:	73 d1       	rcall	.+742    	; 0x14a2 <__udivmodqi4>
    11bc:	82 95       	swap	r24
    11be:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:216
bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
    11c0:	98 0f       	add	r25, r24
setTime():
    11c2:	90 93 d8 3c 	sts	0x3CD8, r25	; 0x803cd8 <rtc+0xb>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:217
    _time[TIME_WEEKDAY] = 1 << weekday;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <main+0x500>
    11ca:	88 0f       	add	r24, r24
    11cc:	5a 95       	dec	r21
    11ce:	ea f7       	brpl	.-6      	; 0x11ca <main+0x4fe>
    11d0:	80 93 d7 3c 	sts	0x3CD7, r24	; 0x803cd7 <rtc+0xa>
DECtoBCD():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:294
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    11d4:	84 2f       	mov	r24, r20
    11d6:	65 d1       	rcall	.+714    	; 0x14a2 <__udivmodqi4>
    11d8:	82 95       	swap	r24
    11da:	80 7f       	andi	r24, 0xF0	; 240
    11dc:	98 0f       	add	r25, r24
setTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:218
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
    _time[TIME_WEEKDAY] = 1 << weekday;
    _time[TIME_MONTH] = DECtoBCD(month);
    11de:	90 93 d9 3c 	sts	0x3CD9, r25	; 0x803cd9 <rtc+0xc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:219
    _time[TIME_YEAR] = DECtoBCD(year - 2000);
    11e2:	80 e3       	ldi	r24, 0x30	; 48
    11e4:	83 0f       	add	r24, r19
DECtoBCD():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:294
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    11e6:	5d d1       	rcall	.+698    	; 0x14a2 <__udivmodqi4>
    11e8:	82 95       	swap	r24
    11ea:	80 7f       	andi	r24, 0xF0	; 240
    11ec:	98 0f       	add	r25, r24
setTime():
    11ee:	90 93 da 3c 	sts	0x3CDA, r25	; 0x803cda <rtc+0xd>
writeMultipleRegisters():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:219
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
    _time[TIME_WEEKDAY] = 1 << weekday;
    _time[TIME_MONTH] = DECtoBCD(month);
    _time[TIME_YEAR] = DECtoBCD(year - 2000);
    11f2:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:334
}

bool RV8803Tiny::writeMultipleRegisters(uint8_t addr, uint8_t *values, uint8_t len)
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 8f 00 	call	0x11e	; 0x11e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.19]>
    11fa:	88 23       	and	r24, r24
    11fc:	21 f1       	breq	.+72     	; 0x1246 <main+0x57a>
    11fe:	81 e1       	ldi	r24, 0x11	; 17
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:337
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803
        if (TinyMegaI2C.write(addr))
    1200:	0e 94 7f 00 	call	0xfe	; 0xfe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.22]>
    1204:	88 23       	and	r24, r24
    1206:	f9 f0       	breq	.+62     	; 0x1246 <main+0x57a>
    1208:	10 92 db 3c 	sts	0x3CDB, r1	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:340
        { //  if Acknowledged from RV-8803
            // Master sends out **multiple Data to write to the specified address
            dataSentCounter = 0;
    120c:	84 ed       	ldi	r24, 0xD4	; 212
    120e:	e8 2e       	mov	r14, r24
    1210:	8c e3       	ldi	r24, 0x3C	; 60
    1212:	f8 2e       	mov	r15, r24
    1214:	9b ed       	ldi	r25, 0xDB	; 219
    1216:	89 2e       	mov	r8, r25
    1218:	9c e3       	ldi	r25, 0x3C	; 60
    121a:	99 2e       	mov	r9, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:343
            for (uint8_t i = 0; i < len; i++)
            {
                if (TinyMegaI2C.write(values[i]))
    121c:	f7 01       	movw	r30, r14
    121e:	81 91       	ld	r24, Z+
    1220:	7f 01       	movw	r14, r30
    1222:	0e 94 7f 00 	call	0xfe	; 0xfe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.22]>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:345
                { // if Acknowledged from RV-8803
                    dataSentCounter++;
    1226:	88 23       	and	r24, r24
    1228:	29 f0       	breq	.+10     	; 0x1234 <main+0x568>
    122a:	80 91 db 3c 	lds	r24, 0x3CDB	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:341
        //  Master sends out the Register Address to RV-8803
        if (TinyMegaI2C.write(addr))
        { //  if Acknowledged from RV-8803
            // Master sends out **multiple Data to write to the specified address
            dataSentCounter = 0;
            for (uint8_t i = 0; i < len; i++)
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	80 93 db 3c 	sts	0x3CDB, r24	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:348
                if (TinyMegaI2C.write(values[i]))
                { // if Acknowledged from RV-8803
                    dataSentCounter++;
                }
            }
            if (dataSentCounter == len)
    1234:	8e 14       	cp	r8, r14
    1236:	9f 04       	cpc	r9, r15
    1238:	89 f7       	brne	.-30     	; 0x121c <main+0x550>
    123a:	80 91 db 3c 	lds	r24, 0x3CDB	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
    123e:	87 30       	cpi	r24, 0x07	; 7
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:111
      //#ifdef DEBUG
      //      Serial.println("Something went wrong setting the time");
      //      if (debug_log) Serial.println("Something went wrong setting the time");
      //#endif
    }
    setNewTime = false;
    1240:	41 f4       	brne	.+16     	; 0x1252 <main+0x586>
stop():
    1242:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f7257>
setRTCToNewTime():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/SerialReset.h:97
      new_stayAwakeFor = new_val;
      setNewTime = true;
    }
  }
  else {
    setNewTime = false;
    1246:	10 92 41 3c 	sts	0x3C41, r1	; 0x803c41 <setNewTime>
    124a:	bd ce       	rjmp	.-646    	; 0xfc6 <main+0x2fa>
parseDataArray():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
    124c:	10 92 41 3c 	sts	0x3C41, r1	; 0x803c41 <setNewTime>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:122
        getAndShowTime();
      }
    }

    // Reset Trigger for RTC delay
    showTimePeriodOver = 0;
    1250:	8a cf       	rjmp	.-236    	; 0x1166 <main+0x49a>
stop():
    1252:	87 e0       	ldi	r24, 0x07	; 7
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:125

    // Then go to sleep
    turnOffDisplay();
    1254:	f6 cf       	rjmp	.-20     	; 0x1242 <main+0x576>
loop():
    1256:	10 92 4a 3c 	sts	0x3C4A, r1	; 0x803c4a <showTimePeriodOver>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:126
    Serial.flush();                    // flush everything before going to sleep
    125a:	11 d9       	rcall	.-3550   	; 0x47e <turnOffDisplay()>
    125c:	88 e5       	ldi	r24, 0x58	; 88
    125e:	9c e3       	ldi	r25, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:127
    Serial.end();
    1260:	da d8       	rcall	.-3660   	; 0x416 <UartClass::flush()>
    1262:	88 e5       	ldi	r24, 0x58	; 88
    1264:	9c e3       	ldi	r25, 0x3C	; 60
    1266:	55 d8       	rcall	.-3926   	; 0x312 <UartClass::end()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:128
    disableSerialHWPins();
    1268:	fb d8       	rcall	.-3594   	; 0x460 <disableSerialHWPins()>
    126a:	eb d8       	rcall	.-3626   	; 0x442 <disableTWI()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/watch_firmware.ino:129
    disableTWI();
    126c:	88 95       	sleep
    126e:	d3 cd       	rjmp	.-1114   	; 0xe16 <main+0x14a>

00001270 <__prologue_saves__>:
__prologue_saves__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1270:	2f 92       	push	r2
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1272:	3f 92       	push	r3
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1274:	4f 92       	push	r4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1276:	5f 92       	push	r5
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1278:	6f 92       	push	r6
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    127a:	7f 92       	push	r7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    127c:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    127e:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1280:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1282:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1284:	cf 92       	push	r12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1286:	df 92       	push	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1288:	ef 92       	push	r14
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    128a:	ff 92       	push	r15
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    128c:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    128e:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1290:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1292:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    1294:	cd b7       	in	r28, 0x3d	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    1296:	de b7       	in	r29, 0x3e	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    1298:	ca 1b       	sub	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    129a:	db 0b       	sbc	r29, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    129c:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    129e:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    12a0:	09 94       	ijmp

000012a2 <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    12a2:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    12a4:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    12a6:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    12a8:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    12aa:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    12ac:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    12ae:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    12b0:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    12b2:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    12b4:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    12b6:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    12b8:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    12ba:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    12bc:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    12be:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    12c0:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    12c2:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    12c4:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    12c6:	ce 0f       	add	r28, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    12c8:	d1 1d       	adc	r29, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    12ca:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    12cc:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    12ce:	ed 01       	movw	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    12d0:	08 95       	ret

000012d2 <atoi>:
atoi():
    12d2:	fc 01       	movw	r30, r24
    12d4:	88 27       	eor	r24, r24
    12d6:	99 27       	eor	r25, r25
    12d8:	e8 94       	clt
    12da:	21 91       	ld	r18, Z+
    12dc:	20 32       	cpi	r18, 0x20	; 32
    12de:	e9 f3       	breq	.-6      	; 0x12da <atoi+0x8>
    12e0:	29 30       	cpi	r18, 0x09	; 9
    12e2:	10 f0       	brcs	.+4      	; 0x12e8 <atoi+0x16>
    12e4:	2e 30       	cpi	r18, 0x0E	; 14
    12e6:	c8 f3       	brcs	.-14     	; 0x12da <atoi+0x8>
    12e8:	2b 32       	cpi	r18, 0x2B	; 43
    12ea:	39 f0       	breq	.+14     	; 0x12fa <atoi+0x28>
    12ec:	2d 32       	cpi	r18, 0x2D	; 45
    12ee:	31 f4       	brne	.+12     	; 0x12fc <atoi+0x2a>
    12f0:	68 94       	set
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <atoi+0x28>
    12f4:	40 d0       	rcall	.+128    	; 0x1376 <__mulhi_const_10>
    12f6:	82 0f       	add	r24, r18
    12f8:	91 1d       	adc	r25, r1
    12fa:	21 91       	ld	r18, Z+
    12fc:	20 53       	subi	r18, 0x30	; 48
    12fe:	2a 30       	cpi	r18, 0x0A	; 10
    1300:	c8 f3       	brcs	.-14     	; 0x12f4 <atoi+0x22>
    1302:	1e f4       	brtc	.+6      	; 0x130a <atoi+0x38>
    1304:	90 95       	com	r25
    1306:	81 95       	neg	r24
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	08 95       	ret

0000130c <strchr_P>:
strchr_P():
    130c:	fc 01       	movw	r30, r24
    130e:	05 90       	lpm	r0, Z+
    1310:	06 16       	cp	r0, r22
    1312:	21 f0       	breq	.+8      	; 0x131c <strchr_P+0x10>
    1314:	00 20       	and	r0, r0
    1316:	d9 f7       	brne	.-10     	; 0x130e <strchr_P+0x2>
    1318:	c0 01       	movw	r24, r0
    131a:	08 95       	ret
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	cf 01       	movw	r24, r30
    1320:	08 95       	ret

00001322 <strtok>:
strtok():
    1322:	4c ed       	ldi	r20, 0xDC	; 220
    1324:	5c e3       	ldi	r21, 0x3C	; 60
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <strtok_r>

00001328 <strtok_r>:
strtok_r():
    1328:	fa 01       	movw	r30, r20
    132a:	a1 91       	ld	r26, Z+
    132c:	b0 81       	ld	r27, Z
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	19 f4       	brne	.+6      	; 0x1338 <strtok_r+0x10>
    1332:	10 97       	sbiw	r26, 0x00	; 0
    1334:	e1 f0       	breq	.+56     	; 0x136e <strtok_r+0x46>
    1336:	cd 01       	movw	r24, r26
    1338:	dc 01       	movw	r26, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0d 90       	ld	r0, X+
    133e:	00 20       	and	r0, r0
    1340:	11 f4       	brne	.+4      	; 0x1346 <strtok_r+0x1e>
    1342:	c0 01       	movw	r24, r0
    1344:	13 c0       	rjmp	.+38     	; 0x136c <strtok_r+0x44>
    1346:	fb 01       	movw	r30, r22
    1348:	21 91       	ld	r18, Z+
    134a:	22 23       	and	r18, r18
    134c:	19 f0       	breq	.+6      	; 0x1354 <strtok_r+0x2c>
    134e:	20 15       	cp	r18, r0
    1350:	d9 f7       	brne	.-10     	; 0x1348 <strtok_r+0x20>
    1352:	f3 cf       	rjmp	.-26     	; 0x133a <strtok_r+0x12>
    1354:	fb 01       	movw	r30, r22
    1356:	21 91       	ld	r18, Z+
    1358:	20 15       	cp	r18, r0
    135a:	19 f4       	brne	.+6      	; 0x1362 <strtok_r+0x3a>
    135c:	1e 92       	st	-X, r1
    135e:	11 96       	adiw	r26, 0x01	; 1
    1360:	06 c0       	rjmp	.+12     	; 0x136e <strtok_r+0x46>
    1362:	22 23       	and	r18, r18
    1364:	c1 f7       	brne	.-16     	; 0x1356 <strtok_r+0x2e>
    1366:	0d 90       	ld	r0, X+
    1368:	00 20       	and	r0, r0
    136a:	a1 f7       	brne	.-24     	; 0x1354 <strtok_r+0x2c>
    136c:	d0 01       	movw	r26, r0
    136e:	fa 01       	movw	r30, r20
    1370:	a1 93       	st	Z+, r26
    1372:	b0 83       	st	Z, r27
    1374:	08 95       	ret

00001376 <__mulhi_const_10>:
__mulhi_const_10():
    1376:	7a e0       	ldi	r23, 0x0A	; 10
    1378:	97 9f       	mul	r25, r23
    137a:	90 2d       	mov	r25, r0
    137c:	87 9f       	mul	r24, r23
    137e:	80 2d       	mov	r24, r0
    1380:	91 0d       	add	r25, r1
    1382:	11 24       	eor	r1, r1
    1384:	08 95       	ret

00001386 <fputc>:
fputc():
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	18 2f       	mov	r17, r24
    1390:	09 2f       	mov	r16, r25
    1392:	eb 01       	movw	r28, r22
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	81 fd       	sbrc	r24, 1
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <fputc+0x26>
    139a:	1f ef       	ldi	r17, 0xFF	; 255
    139c:	0f ef       	ldi	r16, 0xFF	; 255
    139e:	81 2f       	mov	r24, r17
    13a0:	90 2f       	mov	r25, r16
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret
    13ac:	82 ff       	sbrs	r24, 2
    13ae:	14 c0       	rjmp	.+40     	; 0x13d8 <fputc+0x52>
    13b0:	2e 81       	ldd	r18, Y+6	; 0x06
    13b2:	3f 81       	ldd	r19, Y+7	; 0x07
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	9d 81       	ldd	r25, Y+5	; 0x05
    13b8:	28 17       	cp	r18, r24
    13ba:	39 07       	cpc	r19, r25
    13bc:	3c f4       	brge	.+14     	; 0x13cc <fputc+0x46>
    13be:	e8 81       	ld	r30, Y
    13c0:	f9 81       	ldd	r31, Y+1	; 0x01
    13c2:	cf 01       	movw	r24, r30
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	88 83       	st	Y, r24
    13c8:	99 83       	std	Y+1, r25	; 0x01
    13ca:	10 83       	st	Z, r17
    13cc:	8e 81       	ldd	r24, Y+6	; 0x06
    13ce:	9f 81       	ldd	r25, Y+7	; 0x07
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	8e 83       	std	Y+6, r24	; 0x06
    13d4:	9f 83       	std	Y+7, r25	; 0x07
    13d6:	e3 cf       	rjmp	.-58     	; 0x139e <fputc+0x18>
    13d8:	e8 85       	ldd	r30, Y+8	; 0x08
    13da:	f9 85       	ldd	r31, Y+9	; 0x09
    13dc:	81 2f       	mov	r24, r17
    13de:	09 95       	icall
    13e0:	89 2b       	or	r24, r25
    13e2:	a1 f3       	breq	.-24     	; 0x13cc <fputc+0x46>
    13e4:	da cf       	rjmp	.-76     	; 0x139a <fputc+0x14>

000013e6 <__ultoa_invert>:
__ultoa_invert():
    13e6:	fa 01       	movw	r30, r20
    13e8:	aa 27       	eor	r26, r26
    13ea:	28 30       	cpi	r18, 0x08	; 8
    13ec:	51 f1       	breq	.+84     	; 0x1442 <__ultoa_invert+0x5c>
    13ee:	20 31       	cpi	r18, 0x10	; 16
    13f0:	81 f1       	breq	.+96     	; 0x1452 <__ultoa_invert+0x6c>
    13f2:	e8 94       	clt
    13f4:	6f 93       	push	r22
    13f6:	6e 7f       	andi	r22, 0xFE	; 254
    13f8:	6e 5f       	subi	r22, 0xFE	; 254
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	8f 4f       	sbci	r24, 0xFF	; 255
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	af 4f       	sbci	r26, 0xFF	; 255
    1402:	b1 e0       	ldi	r27, 0x01	; 1
    1404:	3e d0       	rcall	.+124    	; 0x1482 <__ultoa_invert+0x9c>
    1406:	b4 e0       	ldi	r27, 0x04	; 4
    1408:	3c d0       	rcall	.+120    	; 0x1482 <__ultoa_invert+0x9c>
    140a:	67 0f       	add	r22, r23
    140c:	78 1f       	adc	r23, r24
    140e:	89 1f       	adc	r24, r25
    1410:	9a 1f       	adc	r25, r26
    1412:	a1 1d       	adc	r26, r1
    1414:	68 0f       	add	r22, r24
    1416:	79 1f       	adc	r23, r25
    1418:	8a 1f       	adc	r24, r26
    141a:	91 1d       	adc	r25, r1
    141c:	a1 1d       	adc	r26, r1
    141e:	6a 0f       	add	r22, r26
    1420:	71 1d       	adc	r23, r1
    1422:	81 1d       	adc	r24, r1
    1424:	91 1d       	adc	r25, r1
    1426:	a1 1d       	adc	r26, r1
    1428:	20 d0       	rcall	.+64     	; 0x146a <__ultoa_invert+0x84>
    142a:	09 f4       	brne	.+2      	; 0x142e <__ultoa_invert+0x48>
    142c:	68 94       	set
    142e:	3f 91       	pop	r19
    1430:	2a e0       	ldi	r18, 0x0A	; 10
    1432:	26 9f       	mul	r18, r22
    1434:	11 24       	eor	r1, r1
    1436:	30 19       	sub	r19, r0
    1438:	30 5d       	subi	r19, 0xD0	; 208
    143a:	31 93       	st	Z+, r19
    143c:	de f6       	brtc	.-74     	; 0x13f4 <__ultoa_invert+0xe>
    143e:	cf 01       	movw	r24, r30
    1440:	08 95       	ret
    1442:	46 2f       	mov	r20, r22
    1444:	47 70       	andi	r20, 0x07	; 7
    1446:	40 5d       	subi	r20, 0xD0	; 208
    1448:	41 93       	st	Z+, r20
    144a:	b3 e0       	ldi	r27, 0x03	; 3
    144c:	0f d0       	rcall	.+30     	; 0x146c <__ultoa_invert+0x86>
    144e:	c9 f7       	brne	.-14     	; 0x1442 <__ultoa_invert+0x5c>
    1450:	f6 cf       	rjmp	.-20     	; 0x143e <__ultoa_invert+0x58>
    1452:	46 2f       	mov	r20, r22
    1454:	4f 70       	andi	r20, 0x0F	; 15
    1456:	40 5d       	subi	r20, 0xD0	; 208
    1458:	4a 33       	cpi	r20, 0x3A	; 58
    145a:	18 f0       	brcs	.+6      	; 0x1462 <__ultoa_invert+0x7c>
    145c:	49 5d       	subi	r20, 0xD9	; 217
    145e:	31 fd       	sbrc	r19, 1
    1460:	40 52       	subi	r20, 0x20	; 32
    1462:	41 93       	st	Z+, r20
    1464:	02 d0       	rcall	.+4      	; 0x146a <__ultoa_invert+0x84>
    1466:	a9 f7       	brne	.-22     	; 0x1452 <__ultoa_invert+0x6c>
    1468:	ea cf       	rjmp	.-44     	; 0x143e <__ultoa_invert+0x58>
    146a:	b4 e0       	ldi	r27, 0x04	; 4
    146c:	a6 95       	lsr	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	77 95       	ror	r23
    1474:	67 95       	ror	r22
    1476:	ba 95       	dec	r27
    1478:	c9 f7       	brne	.-14     	; 0x146c <__ultoa_invert+0x86>
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	61 05       	cpc	r22, r1
    147e:	71 05       	cpc	r23, r1
    1480:	08 95       	ret
    1482:	9b 01       	movw	r18, r22
    1484:	ac 01       	movw	r20, r24
    1486:	0a 2e       	mov	r0, r26
    1488:	06 94       	lsr	r0
    148a:	57 95       	ror	r21
    148c:	47 95       	ror	r20
    148e:	37 95       	ror	r19
    1490:	27 95       	ror	r18
    1492:	ba 95       	dec	r27
    1494:	c9 f7       	brne	.-14     	; 0x1488 <__ultoa_invert+0xa2>
    1496:	62 0f       	add	r22, r18
    1498:	73 1f       	adc	r23, r19
    149a:	84 1f       	adc	r24, r20
    149c:	95 1f       	adc	r25, r21
    149e:	a0 1d       	adc	r26, r0
    14a0:	08 95       	ret

000014a2 <__udivmodqi4>:
__udivmodqi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    14a2:	99 1b       	sub	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    14a4:	79 e0       	ldi	r23, 0x09	; 9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <__udivmodqi4_ep>

000014a8 <__udivmodqi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    14a8:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    14aa:	96 17       	cp	r25, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <__udivmodqi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    14ae:	96 1b       	sub	r25, r22

000014b0 <__udivmodqi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    14b0:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    14b2:	7a 95       	dec	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <__udivmodqi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    14b6:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    14b8:	08 95       	ret

000014ba <__udivmodhi4>:
__udivmodhi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    14ba:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    14bc:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    14be:	51 e1       	ldi	r21, 0x11	; 17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    14c0:	07 c0       	rjmp	.+14     	; 0x14d0 <__udivmodhi4_ep>

000014c2 <__udivmodhi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    14c2:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    14c4:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    14c6:	a6 17       	cp	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    14c8:	b7 07       	cpc	r27, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <__udivmodhi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    14cc:	a6 1b       	sub	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    14ce:	b7 0b       	sbc	r27, r23

000014d0 <__udivmodhi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    14d0:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    14d2:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    14d4:	5a 95       	dec	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    14d6:	a9 f7       	brne	.-22     	; 0x14c2 <__udivmodhi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    14d8:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    14da:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    14dc:	bc 01       	movw	r22, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    14de:	cd 01       	movw	r24, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    14e0:	08 95       	ret

000014e2 <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    14e2:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    14e4:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    14e6:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    14e8:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    14ea:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <__udivmodsi4_ep>

000014ee <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    14ee:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    14f0:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    14f2:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    14f4:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    14f6:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    14f8:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    14fa:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    14fc:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    14fe:	20 f0       	brcs	.+8      	; 0x1508 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1500:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1502:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1504:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1506:	f5 0b       	sbc	r31, r21

00001508 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1508:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    150a:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    150c:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    150e:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1510:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1512:	69 f7       	brne	.-38     	; 0x14ee <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1514:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1516:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1518:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    151a:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    151c:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    151e:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1520:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1522:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1524:	08 95       	ret

00001526 <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1526:	0f d0       	rcall	.+30     	; 0x1546 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1528:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    152a:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    152c:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    152e:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1530:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1532:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1534:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1536:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1538:	08 95       	ret

0000153a <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    153a:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    153c:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    153e:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1540:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1542:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1544:	09 94       	ijmp

00001546 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1546:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1548:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    154a:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    154c:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    154e:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1550:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1552:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1554:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1556:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1558:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    155a:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    155c:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    155e:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1560:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1562:	08 95       	ret

00001564 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1564:	f8 94       	cli

00001566 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1566:	ff cf       	rjmp	.-2      	; 0x1566 <__stop_program>
