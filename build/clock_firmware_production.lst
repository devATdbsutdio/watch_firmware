
/var/folders/yp/37w_03rx1qdbfsqckbyyk9t80000gn/T/arduino-sketch-57431938940A86EFDE130007D33B4A0A/clock_firmware_production.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	0d c5       	rjmp	.+2586   	; 0xa30 <__vector_5>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	fa c4       	rjmp	.+2548   	; 0xa0e <__vector_6>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	9e c4       	rjmp	.+2364   	; 0x962 <__vector_9>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	0d c4       	rjmp	.+2074   	; 0x888 <__vector_27>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	06 c4       	rjmp	.+2060   	; 0x87e <__vector_28>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	0e c4       	rjmp	.+2076   	; 0x892 <__vector_29>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
	...

0000007c <__trampolines_end>:
__trampolines_start():
      7c:	45 46       	sbci	r20, 0x65	; 101
      7e:	47 65       	ori	r20, 0x57	; 87
      80:	66 67       	ori	r22, 0x76	; 118
	...

00000083 <__c.2210>:
      83:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000094 <__ctors_start>:
__ctors_start():
      94:	3f 06       	cpc	r3, r31

00000096 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      96:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      98:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      9a:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      9c:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      9e:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      a0:	de bf       	out	0x3e, r29	; 62

000000a2 <_initThreeStuff()>:
_Z15_initThreeStuffv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/main.cpp:95
 * (many are available reasonably cheaply on aliexpress et al.) end up being very useful        *
 * for this sort of thing.                                                                      */

  void __attribute__((weak)) init_reset_flags();
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
      a2:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <vtable for UartClass+0x7f6b27>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/main.cpp:96
    RSTCTRL.RSTFR = flags;
      a6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <vtable for UartClass+0x7f6b27>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/main.cpp:97
    if (flags == 0) {
      aa:	81 11       	cpse	r24, r1
      ac:	05 c0       	rjmp	.+10     	; 0xb8 <_initThreeStuff()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/main.cpp:98
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
      ae:	98 ed       	ldi	r25, 0xD8	; 216
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	94 bf       	out	0x34, r25	; 52
      b4:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <vtable for UartClass+0x7f6b28>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/main.cpp:100
    }
    GPIOR0 = flags;
      b8:	8c bb       	out	0x1c, r24	; 28

000000ba <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      ba:	2c e3       	ldi	r18, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      bc:	aa e0       	ldi	r26, 0x0A	; 10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      be:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      c4:	ae 3d       	cpi	r26, 0xDE	; 222
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      c6:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      ca:	1c e3       	ldi	r17, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      cc:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      ce:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      d0:	e5 e3       	ldi	r30, 0x35	; 53
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      d2:	f5 e1       	ldi	r31, 0x15	; 21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      d6:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      d8:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      da:	aa 30       	cpi	r26, 0x0A	; 10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      dc:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      e0:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      e2:	cb e4       	ldi	r28, 0x4B	; 75
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      e4:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e8:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      ea:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ec:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      f0:	ca 34       	cpi	r28, 0x4A	; 74
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      f2:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
      f6:	da d5       	rcall	.+2996   	; 0xcac <main>
../../../../crt1/gcrt1.S:315
      f8:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <_exit>

000000fc <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>:
_ZN17TinyMegaI2CMaster5writeEh.constprop.20():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:55
  return TinyMegaI2CMaster::read();
}

bool TinyMegaI2CMaster::write(uint8_t data)
{
  while (!(TWI0.MSTATUS & TWI_WIF_bm))
      fe:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <vtable for UartClass+0x7f72fc>
     102:	96 ff       	sbrs	r25, 6
     104:	fc cf       	rjmp	.-8      	; 0xfe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:57
    ; // Wait for write interrupt flag
  TWI0.MDATA = data;
     106:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <vtable for UartClass+0x7f72ff>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:58
  TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;   // Do nothing
     10a:	82 e0       	ldi	r24, 0x02	; 2
     10c:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f72fb>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:59
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Returns true if slave gave an ACK
     110:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f72fc>
     114:	82 95       	swap	r24
     116:	81 70       	andi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:60
}
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	89 27       	eor	r24, r25
     11c:	08 95       	ret

0000011e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>:
_ZN17TinyMegaI2CMaster5startEhi.constprop.17():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:66

// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
     11e:	89 2b       	or	r24, r25
     120:	c9 f0       	breq	.+50     	; 0x154 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]+0x36>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:70
    read = 0; // Write
  else
  {
    I2Ccount = readcount;
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	9f ef       	ldi	r25, 0xFF	; 255
     126:	80 93 56 3c 	sts	0x3C56, r24	; 0x803c56 <TinyMegaI2C>
     12a:	90 93 57 3c 	sts	0x3C57, r25	; 0x803c57 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:71
    read = 1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:73
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
     130:	84 66       	ori	r24, 0x64	; 100
     132:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <vtable for UartClass+0x7f72fe>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:74
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
     136:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f72fc>
     13a:	80 7c       	andi	r24, 0xC0	; 192
     13c:	e1 f3       	breq	.-8      	; 0x136 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]+0x18>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:76
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
     13e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f72fc>
     142:	83 fd       	sbrc	r24, 3
     144:	09 c0       	rjmp	.+18     	; 0x158 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]+0x3a>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:78
    return false;                        // Return false if arbitration lost or bus error
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
     146:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f72fc>
     14a:	82 95       	swap	r24
     14c:	81 70       	andi	r24, 0x01	; 1
     14e:	91 e0       	ldi	r25, 0x01	; 1
     150:	89 27       	eor	r24, r25
     152:	08 95       	ret
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:67
// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
    read = 0; // Write
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	ec cf       	rjmp	.-40     	; 0x130 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]+0x12>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:77
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
    return false;                        // Return false if arbitration lost or bus error
     158:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:79
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}
     15a:	08 95       	ret

0000015c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]>:
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.4():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:402
    {
        return (false);
    }
}

bool RV8803Tiny::readMultipleRegisters(uint8_t addr, uint8_t *dest, uint8_t len)
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:405
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	db df       	rcall	.-74     	; 0x11e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>
     168:	81 11       	cpse	r24, r1
     16a:	02 c0       	rjmp	.+4      	; 0x170 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	32 c0       	rjmp	.+100    	; 0x1d4 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x78>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:408
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803-C7.
        if (TinyMegaI2C.write(addr))
     170:	80 e1       	ldi	r24, 0x10	; 16
     172:	c5 df       	rcall	.-118    	; 0xfe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>
     174:	88 23       	and	r24, r24
     176:	d1 f3       	breq	.-12     	; 0x16c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x10>
restart():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:83

bool TinyMegaI2CMaster::restart(uint8_t address, int readcount)
{
  return TinyMegaI2CMaster::start(address, readcount);
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	9f ef       	ldi	r25, 0xFF	; 255
     17c:	d0 df       	rcall	.-96     	; 0x11e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.4():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:412
        { //  if Acknowledged from RV-8803
            //  Master sends out the Repeated START condition (or STOP condition followed by START condition)
            //  Master sends out Slave Address, 65h for the RV-8803 [ R/W bit is -1 ] indicating unknown number of read operation
            if (TinyMegaI2C.restart(RV8803_ADDR, -1))
     17e:	88 23       	and	r24, r24
     180:	a9 f3       	breq	.-22     	; 0x16c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x10>
     182:	fe 01       	movw	r30, r28
     184:	9e 01       	movw	r18, r28
     186:	28 5f       	subi	r18, 0xF8	; 248
     188:	3f 4f       	sbci	r19, 0xFF	; 255
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     18a:	46 e0       	ldi	r20, 0x06	; 6
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     18c:	52 e0       	ldi	r21, 0x02	; 2
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:34
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
}

uint8_t TinyMegaI2CMaster::read(void)
{
  if (I2Ccount != 0)
     18e:	80 91 56 3c 	lds	r24, 0x3C56	; 0x803c56 <TinyMegaI2C>
     192:	90 91 57 3c 	lds	r25, 0x3C57	; 0x803c57 <TinyMegaI2C+0x1>
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	29 f0       	breq	.+10     	; 0x1a4 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x48>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:35
    I2Ccount--;
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	80 93 56 3c 	sts	0x3C56, r24	; 0x803c56 <TinyMegaI2C>
     1a0:	90 93 57 3c 	sts	0x3C57, r25	; 0x803c57 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:36
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
     1a4:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f72fc>
     1a8:	87 ff       	sbrs	r24, 7
     1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x48>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:38
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
     1ac:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <vtable for UartClass+0x7f72ff>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:40
  // Check slave sent ACK?
  if (I2Ccount != 0)
     1b0:	60 91 56 3c 	lds	r22, 0x3C56	; 0x803c56 <TinyMegaI2C>
     1b4:	70 91 57 3c 	lds	r23, 0x3C57	; 0x803c57 <TinyMegaI2C+0x1>
     1b8:	67 2b       	or	r22, r23
     1ba:	79 f0       	breq	.+30     	; 0x1da <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x7e>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     1bc:	50 93 14 08 	sts	0x0814, r21	; 0x800814 <vtable for UartClass+0x7f72fb>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.4():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:423
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
                {
                    dest[i] = TinyMegaI2C.read();
     1c0:	81 93       	st	Z+, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:421
                // 2. [NO NEED] The above Steps can be repeated if necessary and the address bit increments automatically.
                // 3. ** The Master, addressed as Receiver, can stop data transmission by not generating an acknowledge on the
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
     1c2:	2e 17       	cp	r18, r30
     1c4:	3f 07       	cpc	r19, r31
     1c6:	19 f7       	brne	.-58     	; 0x18e <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x32>
stop():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     1c8:	87 e0       	ldi	r24, 0x07	; 7
     1ca:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f72fb>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.4():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	cd 2b       	or	r28, r29
     1d2:	61 f2       	breq	.-104    	; 0x16c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:443
    }
    else
    {
        return (false);
    }
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     1da:	40 93 14 08 	sts	0x0814, r20	; 0x800814 <vtable for UartClass+0x7f72fb>
     1de:	f0 cf       	rjmp	.-32     	; 0x1c0 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]+0x64>

000001e0 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     1e0:	af 92       	push	r10
     1e2:	bf 92       	push	r11
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	6c 01       	movw	r12, r24
     1f6:	7b 01       	movw	r14, r22
     1f8:	8b 01       	movw	r16, r22
     1fa:	04 0f       	add	r16, r20
     1fc:	15 1f       	adc	r17, r21
     1fe:	eb 01       	movw	r28, r22
     200:	5e 01       	movw	r10, r28
     202:	ae 18       	sub	r10, r14
     204:	bf 08       	sbc	r11, r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     206:	c0 17       	cp	r28, r16
     208:	d1 07       	cpc	r29, r17
     20a:	59 f0       	breq	.+22     	; 0x222 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/api/Print.cpp:32
    if (write(*buffer++)) {
     20c:	69 91       	ld	r22, Y+
     20e:	d6 01       	movw	r26, r12
     210:	ed 91       	ld	r30, X+
     212:	fc 91       	ld	r31, X
     214:	01 90       	ld	r0, Z+
     216:	f0 81       	ld	r31, Z
     218:	e0 2d       	mov	r30, r0
     21a:	c6 01       	movw	r24, r12
     21c:	09 95       	icall
     21e:	89 2b       	or	r24, r25
     220:	79 f7       	brne	.-34     	; 0x200 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     222:	c5 01       	movw	r24, r10
     224:	df 91       	pop	r29
     226:	cf 91       	pop	r28
     228:	1f 91       	pop	r17
     22a:	0f 91       	pop	r16
     22c:	ff 90       	pop	r15
     22e:	ef 90       	pop	r14
     230:	df 90       	pop	r13
     232:	cf 90       	pop	r12
     234:	bf 90       	pop	r11
     236:	af 90       	pop	r10
     238:	08 95       	ret

0000023a <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:649
  int UartClass::availableForWrite(void) {
    tx_buffer_index_t head;
    tx_buffer_index_t tail;

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
     23a:	fc 01       	movw	r30, r24
     23c:	53 89       	ldd	r21, Z+19	; 0x13
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:650
      tail = _tx_buffer_tail;
     23e:	44 89       	ldd	r20, Z+20	; 0x14
     240:	25 2f       	mov	r18, r21
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	84 2f       	mov	r24, r20
     246:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:653
    }
    if (head >= tail) {
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     248:	82 1b       	sub	r24, r18
     24a:	93 0b       	sbc	r25, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:652

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
      tail = _tx_buffer_tail;
    }
    if (head >= tail) {
     24c:	54 17       	cp	r21, r20
     24e:	10 f0       	brcs	.+4      	; 0x254 <UartClass::availableForWrite()+0x1a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:653
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     250:	4f 96       	adiw	r24, 0x1f	; 31
     252:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:655
    }
    return tail - head - 1;
     254:	01 97       	sbiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:656
  }
     256:	08 95       	ret

00000258 <UartClass::read()>:
_ZN9UartClass4readEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:633
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }

  int UartClass::read(void) {
     258:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:635
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
     25a:	91 89       	ldd	r25, Z+17	; 0x11
     25c:	82 89       	ldd	r24, Z+18	; 0x12
     25e:	98 17       	cp	r25, r24
     260:	61 f0       	breq	.+24     	; 0x27a <UartClass::read()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:638
      return -1;
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
     262:	a2 89       	ldd	r26, Z+18	; 0x12
     264:	ae 0f       	add	r26, r30
     266:	bf 2f       	mov	r27, r31
     268:	b1 1d       	adc	r27, r1
     26a:	55 96       	adiw	r26, 0x15	; 21
     26c:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:639
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
     26e:	92 89       	ldd	r25, Z+18	; 0x12
     270:	9f 5f       	subi	r25, 0xFF	; 255
     272:	9f 73       	andi	r25, 0x3F	; 63
     274:	92 8b       	std	Z+18, r25	; 0x12
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:640
      return c;
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:636
  }

  int UartClass::read(void) {
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:642
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
      return c;
    }
  }
     27e:	08 95       	ret

00000280 <UartClass::peek()>:
_ZN9UartClass4peekEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:625
}
  int UartClass::available(void) {
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
     280:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:626
    if (_rx_buffer_head == _rx_buffer_tail) {
     282:	91 89       	ldd	r25, Z+17	; 0x11
     284:	82 89       	ldd	r24, Z+18	; 0x12
     286:	98 17       	cp	r25, r24
     288:	31 f0       	breq	.+12     	; 0x296 <UartClass::peek()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:629
      return -1;
    } else {
      return _rx_buffer[_rx_buffer_tail];
     28a:	82 89       	ldd	r24, Z+18	; 0x12
     28c:	e8 0f       	add	r30, r24
     28e:	f1 1d       	adc	r31, r1
     290:	85 89       	ldd	r24, Z+21	; 0x15
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:627
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:631
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }
     29a:	08 95       	ret

0000029c <UartClass::available()>:
_ZN9UartClass9availableEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:621

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}
  int UartClass::available(void) {
     29c:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:622
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
     29e:	91 89       	ldd	r25, Z+17	; 0x11
     2a0:	22 89       	ldd	r18, Z+18	; 0x12
     2a2:	89 2f       	mov	r24, r25
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	80 5c       	subi	r24, 0xC0	; 192
     2a8:	9f 4f       	sbci	r25, 0xFF	; 255
     2aa:	82 1b       	sub	r24, r18
     2ac:	91 09       	sbc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:623
  }
     2ae:	8f 73       	andi	r24, 0x3F	; 63
     2b0:	99 27       	eor	r25, r25
     2b2:	08 95       	ret

000002b4 <UartClass::end()>:
_ZN9UartClass3endEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:605
    pinMode(_usart_pins[muxrow][3], OUTPUT); // make XDIR output.
  }
  */
}

void UartClass::end() {
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
     2b8:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:607
  // wait for transmission of outgoing data
  flush();
     2ba:	e8 81       	ld	r30, Y
     2bc:	f9 81       	ldd	r31, Y+1	; 0x01
     2be:	06 80       	ldd	r0, Z+6	; 0x06
     2c0:	f7 81       	ldd	r31, Z+7	; 0x07
     2c2:	e0 2d       	mov	r30, r0
     2c4:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:610
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  // TXCIE only used in half duplex - we can just turn the damned thing off yo!
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     2c6:	ec 85       	ldd	r30, Y+12	; 0x0c
     2c8:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:611
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     2ca:	86 81       	ldd	r24, Z+6	; 0x06
     2cc:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:612
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     2ce:	85 81       	ldd	r24, Z+5	; 0x05
     2d0:	15 82       	std	Z+5, r1	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:613
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error.
     2d2:	80 e4       	ldi	r24, 0x40	; 64
     2d4:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:615
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     2d6:	8a 89       	ldd	r24, Y+18	; 0x12
     2d8:	89 8b       	std	Y+17, r24	; 0x11
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:619

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     2da:	18 8a       	std	Y+16, r1	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:620
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:358
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     2e2:	dc 01       	movw	r26, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:359
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	07 fe       	sbrs	r0, 7
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <UartClass::_poll_tx_data_empty()+0x10>
     2ea:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vtable for UartClass+0x7f6bf8>
     2ee:	88 23       	and	r24, r24
     2f0:	b1 f0       	breq	.+44     	; 0x31e <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:376
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     2f2:	1c 96       	adiw	r26, 0x0c	; 12
     2f4:	ed 91       	ld	r30, X+
     2f6:	fc 91       	ld	r31, X
     2f8:	1d 97       	sbiw	r26, 0x0d	; 13
     2fa:	84 81       	ldd	r24, Z+4	; 0x04
     2fc:	85 ff       	sbrs	r24, 5
     2fe:	0f c0       	rjmp	.+30     	; 0x31e <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:377
      if (_tx_buffer_head != _tx_buffer_tail) {
     300:	53 96       	adiw	r26, 0x13	; 19
     302:	9c 91       	ld	r25, X
     304:	53 97       	sbiw	r26, 0x13	; 19
     306:	54 96       	adiw	r26, 0x14	; 20
     308:	8c 91       	ld	r24, X
     30a:	98 17       	cp	r25, r24
     30c:	21 f0       	breq	.+8      	; 0x316 <UartClass::_poll_tx_data_empty()+0x34>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:379
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     30e:	85 81       	ldd	r24, Z+5	; 0x05
     310:	8f 7d       	andi	r24, 0xDF	; 223
     312:	85 83       	std	Z+5, r24	; 0x05
     314:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:404
#ifdef USART1
                ::"z"((uint16_t)thisSerial)
#else
                ::"z"(&Serial)
#endif
                : "r18","r19","r24","r25","r26","r27");
     316:	e8 e5       	ldi	r30, 0x58	; 88
     318:	fc e3       	ldi	r31, 0x3C	; 60
     31a:	e8 94       	clt
     31c:	c5 c2       	rjmp	.+1418   	; 0x8a8 <_poll_dre>

0000031e <_poll_dre_done>:
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:411
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
  // Note that this currently does not handle cases where the DRE interruopt becomes
  // disabled, yet you are actually attempting to send. I don't think it can happen.
}
     31e:	08 95       	ret

00000320 <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:689
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }


  size_t UartClass::write(uint8_t c) {
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:690
    _state |= 1; // Record that we have written to serial since it was begun.
     32a:	88 89       	ldd	r24, Y+16	; 0x10
     32c:	98 2f       	mov	r25, r24
     32e:	91 60       	ori	r25, 0x01	; 1
     330:	98 8b       	std	Y+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:695
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     332:	2b 89       	ldd	r18, Y+19	; 0x13
     334:	9c 89       	ldd	r25, Y+20	; 0x14
     336:	29 13       	cpse	r18, r25
     338:	0a c0       	rjmp	.+20     	; 0x34e <UartClass::write(unsigned char)+0x2e>
     33a:	ec 85       	ldd	r30, Y+12	; 0x0c
     33c:	fd 85       	ldd	r31, Y+13	; 0x0d
     33e:	94 81       	ldd	r25, Z+4	; 0x04
     340:	95 ff       	sbrs	r25, 5
     342:	05 c0       	rjmp	.+10     	; 0x34e <UartClass::write(unsigned char)+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:696
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     344:	81 fd       	sbrc	r24, 1
     346:	0d c0       	rjmp	.+26     	; 0x362 <UartClass::write(unsigned char)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:703
        ctrla &= ~USART_RXCIE_bm;
        ctrla |=  USART_TXCIE_bm;
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
        (*_hwserial_module).CTRLA = ctrla;
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     348:	80 e4       	ldi	r24, 0x40	; 64
     34a:	84 83       	std	Z+4, r24	; 0x04
     34c:	12 c0       	rjmp	.+36     	; 0x372 <UartClass::write(unsigned char)+0x52>
     34e:	06 2f       	mov	r16, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:721
       * // that the interrupt handler is called in this situation
       * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
       */
      return 1;
    }
    tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     350:	1b 89       	ldd	r17, Y+19	; 0x13
     352:	1f 5f       	subi	r17, 0xFF	; 255
     354:	1f 71       	andi	r17, 0x1F	; 31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:725

    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
     356:	8c 89       	ldd	r24, Y+20	; 0x14
     358:	81 13       	cpse	r24, r17
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:726
      _poll_tx_data_empty();
     35a:	15 c0       	rjmp	.+42     	; 0x386 <UartClass::write(unsigned char)+0x66>
     35c:	ce 01       	movw	r24, r28
     35e:	c1 df       	rcall	.-126    	; 0x2e2 <UartClass::_poll_tx_data_empty()>
     360:	fa cf       	rjmp	.-12     	; 0x356 <UartClass::write(unsigned char)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:697
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
        uint8_t ctrla = (*_hwserial_module).CTRLA;
     362:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:698
        ctrla &= ~USART_RXCIE_bm;
     364:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:699
        ctrla |=  USART_TXCIE_bm;
     366:	80 64       	ori	r24, 0x40	; 64
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:700
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     368:	90 e4       	ldi	r25, 0x40	; 64
     36a:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:701
        (*_hwserial_module).CTRLA = ctrla;
     36c:	ec 85       	ldd	r30, Y+12	; 0x0c
     36e:	fd 85       	ldd	r31, Y+13	; 0x0d
     370:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:706
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
      }
      // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
      (*_hwserial_module).TXDATAL = c;
     372:	ec 85       	ldd	r30, Y+12	; 0x0c
     374:	fd 85       	ldd	r31, Y+13	; 0x0d
     376:	62 83       	std	Z+2, r22	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:741
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    }
    return 1;
  }
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:728
    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
      _poll_tx_data_empty();
    }
    _tx_buffer[_tx_buffer_head] = c;
     386:	eb 89       	ldd	r30, Y+19	; 0x13
     388:	ec 0f       	add	r30, r28
     38a:	fd 2f       	mov	r31, r29
     38c:	f1 1d       	adc	r31, r1
     38e:	eb 5a       	subi	r30, 0xAB	; 171
     390:	ff 4f       	sbci	r31, 0xFF	; 255
     392:	00 83       	st	Z, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:729
    _tx_buffer_head = i;
     394:	1b 8b       	std	Y+19, r17	; 0x13
     396:	ec 85       	ldd	r30, Y+12	; 0x0c
     398:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:730
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     39a:	88 89       	ldd	r24, Y+16	; 0x10
     39c:	81 ff       	sbrs	r24, 1
     39e:	09 c0       	rjmp	.+18     	; 0x3b2 <UartClass::write(unsigned char)+0x92>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:731
      uint8_t ctrla = (*_hwserial_module).CTRLA;
     3a0:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:732
      ctrla &= ~USART_RXCIE_bm;
     3a2:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:733
      ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     3a4:	80 66       	ori	r24, 0x60	; 96
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:734
      (*_hwserial_module).STATUS = USART_TXCIF_bm;
     3a6:	90 e4       	ldi	r25, 0x40	; 64
     3a8:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:735
      (*_hwserial_module).CTRLA = ctrla;
     3aa:	ec 85       	ldd	r30, Y+12	; 0x0c
     3ac:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:738
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     3ae:	85 83       	std	Z+5, r24	; 0x05
     3b0:	e3 cf       	rjmp	.-58     	; 0x378 <UartClass::write(unsigned char)+0x58>
     3b2:	85 81       	ldd	r24, Z+5	; 0x05
     3b4:	80 62       	ori	r24, 0x20	; 32
     3b6:	fb cf       	rjmp	.-10     	; 0x3ae <UartClass::write(unsigned char)+0x8e>

000003b8 <UartClass::flush()>:
_ZN9UartClass5flushEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:658
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    }
    return tail - head - 1;
  }

  void UartClass::flush() {
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:662
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXCIF (transmit
    // complete) bit to 1 during initialization
    if (!_state & 1) {
     3be:	88 89       	ldd	r24, Y+16	; 0x10
     3c0:	88 23       	and	r24, r24
     3c2:	59 f0       	breq	.+22     	; 0x3da <UartClass::flush()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:677
    // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
    // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
    // and in that case flush(), and write() with full buffer would just straight up hang...

    // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
    while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     3c4:	ec 85       	ldd	r30, Y+12	; 0x0c
     3c6:	fd 85       	ldd	r31, Y+13	; 0x0d
     3c8:	85 81       	ldd	r24, Z+5	; 0x05
     3ca:	85 fd       	sbrc	r24, 5
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <UartClass::flush()+0x1c>
     3ce:	84 81       	ldd	r24, Z+4	; 0x04
     3d0:	86 fd       	sbrc	r24, 6
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:682

      // If interrupts are globally disabled or the and DR empty interrupt is disabled,
      // poll the "data register empty" interrupt flag to prevent deadlock

      _poll_tx_data_empty();
     3d2:	03 c0       	rjmp	.+6      	; 0x3da <UartClass::flush()+0x22>
     3d4:	ce 01       	movw	r24, r28
     3d6:	85 df       	rcall	.-246    	; 0x2e2 <UartClass::_poll_tx_data_empty()>
     3d8:	f5 cf       	rjmp	.-22     	; 0x3c4 <UartClass::flush()+0xc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:686
    }
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.h:274
    inline   size_t write(unsigned int n)   {return write((uint8_t)n);}
    inline   size_t write(int n)            {return write((uint8_t)n);}
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	08 95       	ret

000003e4 <micros>:
micros():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:271
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     3e4:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:272
    cli(); /* INTERRUPTS OFF */
     3e6:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:274
    #if defined(MILLIS_USE_TIMERA0)
      ticks = TCA0.SPLIT.HCNT;
     3e8:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <vtable for UartClass+0x7f7508>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:275
      flags = TCA0.SPLIT.INTFLAGS;
     3ec:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <vtable for UartClass+0x7f74f2>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:291
     * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
     * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1))
      overflows = timer_overflow_count;
     3f0:	20 91 17 3c 	lds	r18, 0x3C17	; 0x803c17 <timer_overflow_count>
     3f4:	30 91 18 3c 	lds	r19, 0x3C18	; 0x803c18 <timer_overflow_count+0x1>
     3f8:	40 91 19 3c 	lds	r20, 0x3C19	; 0x803c19 <timer_overflow_count+0x2>
     3fc:	50 91 1a 3c 	lds	r21, 0x3C1A	; 0x803c1a <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:296
    #else
      overflows = timer_millis;
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     400:	8f bf       	out	0x3f, r24	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:300
    #if defined(MILLIS_USE_TIMERD0)
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
     402:	8e ef       	ldi	r24, 0xFE	; 254
     404:	86 1b       	sub	r24, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:301
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
     406:	91 ff       	sbrs	r25, 1
     408:	06 c0       	rjmp	.+12     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	20 f4       	brcc	.+8      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:308
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
    #endif
      #if ((defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1)) && (F_CPU <= 1000000))
        overflows += 2;
      #else
        overflows++;
     40e:	2f 5f       	subi	r18, 0xFF	; 255
     410:	3f 4f       	sbci	r19, 0xFF	; 255
     412:	4f 4f       	sbci	r20, 0xFF	; 255
     414:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:646
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                     + (ticks * 3 + ((uint16_t)(ticks >> 2) - (ticks >> 4)));
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	89 9f       	mul	r24, r25
     41a:	f0 01       	movw	r30, r0
     41c:	11 24       	eor	r1, r1
     41e:	98 2f       	mov	r25, r24
     420:	92 95       	swap	r25
     422:	9f 70       	andi	r25, 0x0F	; 15
     424:	e9 1b       	sub	r30, r25
     426:	f1 09       	sbc	r31, r1
     428:	86 95       	lsr	r24
     42a:	86 95       	lsr	r24
     42c:	e8 0f       	add	r30, r24
     42e:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:645
            + (ticks * 5 + ((uint16_t)(ticks >> 2) + (ticks >> 4) + (ticks >> 5)));
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
     430:	a0 e3       	ldi	r26, 0x30	; 48
     432:	b3 e0       	ldi	r27, 0x03	; 3
     434:	0e 94 41 0a 	call	0x1482	; 0x1482 <__muluhisi3>
     438:	6e 0f       	add	r22, r30
     43a:	7f 1f       	adc	r23, r31
     43c:	81 1d       	adc	r24, r1
     43e:	91 1d       	adc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:656
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     440:	08 95       	ret

00000442 <disableTWI()>:
_Z10disableTWIv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:26
  sei();
}

void disableTWI() {
  //  TWI0.MCTRLA &= ~(TWI_ENABLE_bm);
  PORTB.DIRSET = PIN0_bm;
     442:	e0 e2       	ldi	r30, 0x20	; 32
     444:	f4 e0       	ldi	r31, 0x04	; 4
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:27
  PORTB.DIRSET = PIN1_bm;
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:28
  cli();
     44e:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:29
  PORTB.OUT &= ~PIN0_bm;
     450:	84 81       	ldd	r24, Z+4	; 0x04
     452:	8e 7f       	andi	r24, 0xFE	; 254
     454:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:30
  PORTB.OUT &= ~PIN1_bm;
     456:	84 81       	ldd	r24, Z+4	; 0x04
     458:	8d 7f       	andi	r24, 0xFD	; 253
     45a:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:31
  sei();
     45c:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:32
}
     45e:	08 95       	ret

00000460 <disableSerialHWPins()>:
_Z19disableSerialHWPinsv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:18
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
  PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
}

void disableSerialHWPins() {
  PORTB.DIRSET = PIN3_bm;
     460:	e0 e2       	ldi	r30, 0x20	; 32
     462:	f4 e0       	ldi	r31, 0x04	; 4
     464:	88 e0       	ldi	r24, 0x08	; 8
     466:	81 83       	std	Z+1, r24	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:19
  cli();
     468:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:20
  PORTB.OUT &= ~PIN3_bm;
     46a:	84 81       	ldd	r24, Z+4	; 0x04
     46c:	87 7f       	andi	r24, 0xF7	; 247
     46e:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:21
  sei();
     470:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:22
}
     472:	08 95       	ret

00000474 <turnOffDisplay()>:
_Z14turnOffDisplayv():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:100
}



void turnOffDisplay() {
  cli();
     474:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:101
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     476:	80 e2       	ldi	r24, 0x20	; 32
     478:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f6f2d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:102
  PORTA.OUTCLR = 0b11111110;  // turn OFF all the cathode pins of the LED sugemnt by setting them to HIGH bits (in common ANODE config)
     47c:	8e ef       	ldi	r24, 0xFE	; 254
     47e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f6eed>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:103
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH (in common ANODE config)
     482:	80 ef       	ldi	r24, 0xF0	; 240
     484:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f6f0c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:104
  sei();
     488:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:71
  0b00010000 //_
};


int c = 0;
void showOnDisplay(uint8_t * digits) {
     48a:	08 95       	ret

0000048c <showOnDisplay(unsigned char*)>:
_Z13showOnDisplayPh():
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:72
  currentMicros = micros();
     494:	ec 01       	movw	r28, r24
     496:	a6 df       	rcall	.-180    	; 0x3e4 <micros>
     498:	60 93 0c 3c 	sts	0x3C0C, r22	; 0x803c0c <currentMicros>
     49c:	70 93 0d 3c 	sts	0x3C0D, r23	; 0x803c0d <currentMicros+0x1>
     4a0:	80 93 0e 3c 	sts	0x3C0E, r24	; 0x803c0e <currentMicros+0x2>
     4a4:	90 93 0f 3c 	sts	0x3C0F, r25	; 0x803c0f <currentMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:74

  if (currentMicros - startMicros >= period) {
     4a8:	00 91 1b 3c 	lds	r16, 0x3C1B	; 0x803c1b <startMicros>
     4ac:	10 91 1c 3c 	lds	r17, 0x3C1C	; 0x803c1c <startMicros+0x1>
     4b0:	20 91 1d 3c 	lds	r18, 0x3C1D	; 0x803c1d <startMicros+0x2>
     4b4:	30 91 1e 3c 	lds	r19, 0x3C1E	; 0x803c1e <startMicros+0x3>
     4b8:	60 1b       	sub	r22, r16
     4ba:	71 0b       	sbc	r23, r17
     4bc:	82 0b       	sbc	r24, r18
     4be:	93 0b       	sbc	r25, r19
     4c0:	6a 30       	cpi	r22, 0x0A	; 10
     4c2:	71 05       	cpc	r23, r1
     4c4:	81 05       	cpc	r24, r1
     4c6:	91 05       	cpc	r25, r1
     4c8:	d0 f1       	brcs	.+116    	; 0x53e <showOnDisplay(unsigned char*)+0xb2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:77

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
     4ca:	8e ef       	ldi	r24, 0xFE	; 254
     4cc:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f6eed>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:79
    // ---- Deactivate all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
     4d0:	80 ef       	ldi	r24, 0xF0	; 240
     4d2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f6f0c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:82

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
     4d6:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:83
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
     4d8:	80 91 0a 3c 	lds	r24, 0x3C0A	; 0x803c0a <__data_end>
     4dc:	90 91 0b 3c 	lds	r25, 0x3C0B	; 0x803c0b <__data_end+0x1>
     4e0:	21 e1       	ldi	r18, 0x11	; 17
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	08 2e       	mov	r0, r24
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <showOnDisplay(unsigned char*)+0x5e>
     4e8:	22 0f       	add	r18, r18
     4ea:	0a 94       	dec	r0
     4ec:	ea f7       	brpl	.-6      	; 0x4e8 <showOnDisplay(unsigned char*)+0x5c>
     4ee:	20 7f       	andi	r18, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:84
    PORTB.OUTTGL = mask;                    // Toggle those bits
     4f0:	20 93 27 04 	sts	0x0427, r18	; 0x800427 <vtable for UartClass+0x7f6f0e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:86
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
     4f4:	c8 0f       	add	r28, r24
     4f6:	d9 1f       	adc	r29, r25
     4f8:	e8 81       	ld	r30, Y
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	ec 53       	subi	r30, 0x3C	; 60
     4fe:	fb 46       	sbci	r31, 0x6B	; 107
     500:	80 81       	ld	r24, Z
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:87
    VPORTA.OUT = this_digit;
     502:	81 b9       	out	0x01, r24	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:88
    sei(); // Interrupts back on
     504:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:90

    c++;
     506:	80 91 0a 3c 	lds	r24, 0x3C0A	; 0x803c0a <__data_end>
     50a:	90 91 0b 3c 	lds	r25, 0x3C0B	; 0x803c0b <__data_end+0x1>
     50e:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:91
    if (c > 3) c = 0;
     510:	84 30       	cpi	r24, 0x04	; 4
     512:	91 05       	cpc	r25, r1
     514:	cc f4       	brge	.+50     	; 0x548 <showOnDisplay(unsigned char*)+0xbc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:90
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
     516:	80 93 0a 3c 	sts	0x3C0A, r24	; 0x803c0a <__data_end>
     51a:	90 93 0b 3c 	sts	0x3C0B, r25	; 0x803c0b <__data_end+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:93
    if (c > 3) c = 0;

    startMicros = currentMicros;
     51e:	80 91 0c 3c 	lds	r24, 0x3C0C	; 0x803c0c <currentMicros>
     522:	90 91 0d 3c 	lds	r25, 0x3C0D	; 0x803c0d <currentMicros+0x1>
     526:	a0 91 0e 3c 	lds	r26, 0x3C0E	; 0x803c0e <currentMicros+0x2>
     52a:	b0 91 0f 3c 	lds	r27, 0x3C0F	; 0x803c0f <currentMicros+0x3>
     52e:	80 93 1b 3c 	sts	0x3C1B, r24	; 0x803c1b <startMicros>
     532:	90 93 1c 3c 	sts	0x3C1C, r25	; 0x803c1c <startMicros+0x1>
     536:	a0 93 1d 3c 	sts	0x3C1D, r26	; 0x803c1d <startMicros+0x2>
     53a:	b0 93 1e 3c 	sts	0x3C1E, r27	; 0x803c1e <startMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:95
  }
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:91
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    if (c > 3) c = 0;
     548:	10 92 0a 3c 	sts	0x3C0A, r1	; 0x803c0a <__data_end>
     54c:	10 92 0b 3c 	sts	0x3C0B, r1	; 0x803c0b <__data_end+0x1>
     550:	e6 cf       	rjmp	.-52     	; 0x51e <showOnDisplay(unsigned char*)+0x92>

00000552 <getAndShowTime()>:
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:29
  }
  rtcAvailable = true;
}


void getAndShowTime() {
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	28 97       	sbiw	r28, 0x08	; 8
     564:	cd bf       	out	0x3d, r28	; 61
     566:	de bf       	out	0x3e, r29	; 62
millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     568:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:227
  cli();
     56a:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     56c:	c0 90 48 3c 	lds	r12, 0x3C48	; 0x803c48 <timer_millis>
     570:	d0 90 49 3c 	lds	r13, 0x3C49	; 0x803c49 <timer_millis+0x1>
     574:	e0 90 4a 3c 	lds	r14, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     578:	f0 90 4b 3c 	lds	r15, 0x3C4B	; 0x803c4b <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     57c:	8f bf       	out	0x3f, r24	; 63
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:30
  currentCountMillis = millis();
     57e:	c0 92 11 3c 	sts	0x3C11, r12	; 0x803c11 <currentCountMillis>
     582:	d0 92 12 3c 	sts	0x3C12, r13	; 0x803c12 <currentCountMillis+0x1>
     586:	e0 92 13 3c 	sts	0x3C13, r14	; 0x803c13 <currentCountMillis+0x2>
     58a:	f0 92 14 3c 	sts	0x3C14, r15	; 0x803c14 <currentCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:31
  if (currentCountMillis - startCountMillis >= secPeriod) {
     58e:	80 91 1f 3c 	lds	r24, 0x3C1F	; 0x803c1f <startCountMillis>
     592:	90 91 20 3c 	lds	r25, 0x3C20	; 0x803c20 <startCountMillis+0x1>
     596:	a0 91 21 3c 	lds	r26, 0x3C21	; 0x803c21 <startCountMillis+0x2>
     59a:	b0 91 22 3c 	lds	r27, 0x3C22	; 0x803c22 <startCountMillis+0x3>
     59e:	a7 01       	movw	r20, r14
     5a0:	96 01       	movw	r18, r12
     5a2:	28 1b       	sub	r18, r24
     5a4:	39 0b       	sbc	r19, r25
     5a6:	4a 0b       	sbc	r20, r26
     5a8:	5b 0b       	sbc	r21, r27
     5aa:	da 01       	movw	r26, r20
     5ac:	c9 01       	movw	r24, r18
     5ae:	88 3e       	cpi	r24, 0xE8	; 232
     5b0:	93 40       	sbci	r25, 0x03	; 3
     5b2:	a1 05       	cpc	r26, r1
     5b4:	b1 05       	cpc	r27, r1
     5b6:	08 f4       	brcc	.+2      	; 0x5ba <getAndShowTime()+0x68>
     5b8:	3b c0       	rjmp	.+118    	; 0x630 <getAndShowTime()+0xde>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:32
    if (rtcAvailable) {
     5ba:	80 91 53 3c 	lds	r24, 0x3C53	; 0x803c53 <rtcAvailable>
     5be:	88 23       	and	r24, r24
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <getAndShowTime()+0x72>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:81
    }
}

bool RV8803Tiny::updateTime()
{
    if (!readMultipleRegisters(RV8803_HUNDREDTHS, _time, TIME_ARRAY_LENGTH))
     5c2:	7f c0       	rjmp	.+254    	; 0x6c2 <getAndShowTime()+0x170>
updateTime():
     5c4:	83 ed       	ldi	r24, 0xD3	; 211
     5c6:	9c e3       	ldi	r25, 0x3C	; 60
     5c8:	c9 dd       	rcall	.-1134   	; 0x15c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]>
     5ca:	88 23       	and	r24, r24
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <getAndShowTime()+0x7e>
     5ce:	79 c0       	rjmp	.+242    	; 0x6c2 <getAndShowTime()+0x170>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    // If seconds are at 59, read again to make sure we didn't accidentally skip a minute
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
     5d0:	80 91 d4 3c 	lds	r24, 0x3CD4	; 0x803cd4 <rtc+0x7>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     5d4:	28 2f       	mov	r18, r24
     5d6:	22 95       	swap	r18
     5d8:	2f 70       	andi	r18, 0x0F	; 15
     5da:	9a e0       	ldi	r25, 0x0A	; 10
     5dc:	8f 70       	andi	r24, 0x0F	; 15
     5de:	29 9f       	mul	r18, r25
     5e0:	80 0d       	add	r24, r0
     5e2:	11 24       	eor	r1, r1
updateTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    // If seconds are at 59, read again to make sure we didn't accidentally skip a minute
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
     5e4:	8b 33       	cpi	r24, 0x3B	; 59
     5e6:	c9 f4       	brne	.+50     	; 0x61a <getAndShowTime()+0xc8>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for seconds changed, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(tempTime[TIME_SECONDS]) == 0)
     5e8:	8a 81       	ldd	r24, Y+2	; 0x02
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     5ea:	28 2f       	mov	r18, r24
     5ec:	22 95       	swap	r18
     5ee:	2f 70       	andi	r18, 0x0F	; 15
     5f0:	8f 70       	andi	r24, 0x0F	; 15
     5f2:	29 9f       	mul	r18, r25
     5f4:	80 0d       	add	r24, r0
     5f6:	11 24       	eor	r1, r1
updateTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for seconds changed, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(tempTime[TIME_SECONDS]) == 0)
     5f8:	81 11       	cpse	r24, r1
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <getAndShowTime()+0xbc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:95
        {
            memcpy(_time, tempTime, TIME_ARRAY_LENGTH);
     5fc:	88 e0       	ldi	r24, 0x08	; 8
     5fe:	fe 01       	movw	r30, r28
     600:	31 96       	adiw	r30, 0x01	; 1
     602:	a3 ed       	ldi	r26, 0xD3	; 211
     604:	bc e3       	ldi	r27, 0x3C	; 60
     606:	01 90       	ld	r0, Z+
     608:	0d 92       	st	X+, r0
     60a:	8a 95       	dec	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:97
        }
        if (!readMultipleRegisters(RV8803_HUNDREDTHS, tempTime, TIME_ARRAY_LENGTH))
     60c:	e1 f7       	brne	.-8      	; 0x606 <getAndShowTime()+0xb4>
     60e:	ce 01       	movw	r24, r28
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	a4 dd       	rcall	.-1208   	; 0x15c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.4]>
     614:	88 23       	and	r24, r24
     616:	09 f4       	brne	.+2      	; 0x61a <getAndShowTime()+0xc8>
     618:	54 c0       	rjmp	.+168    	; 0x6c2 <getAndShowTime()+0x170>
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:34
      // updateTime i.e read registers, ** must for getting current time
      if (rtc.updateTime()) rtcReadable = true;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 10 3c 	sts	0x3C10, r24	; 0x803c10 <rtcReadable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:39
      else rtcReadable = false;
    } else {
      rtcReadable = false;
    }
    startCountMillis = currentCountMillis;
     620:	c0 92 1f 3c 	sts	0x3C1F, r12	; 0x803c1f <startCountMillis>
     624:	d0 92 20 3c 	sts	0x3C20, r13	; 0x803c20 <startCountMillis+0x1>
     628:	e0 92 21 3c 	sts	0x3C21, r14	; 0x803c21 <startCountMillis+0x2>
     62c:	f0 92 22 3c 	sts	0x3C22, r15	; 0x803c22 <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:44
  }

  // :: Display Time :: //
  // --- ** corner case handler (In case time retreival was unsuccessful) ** --- //
  if (rtcAvailable && rtcReadable) showOnDisplay(rtc.currTimeAsArray());
     630:	80 91 53 3c 	lds	r24, 0x3C53	; 0x803c53 <rtcAvailable>
     634:	88 23       	and	r24, r24
     636:	09 f4       	brne	.+2      	; 0x63a <getAndShowTime()+0xe8>
     638:	47 c0       	rjmp	.+142    	; 0x6c8 <getAndShowTime()+0x176>
     63a:	80 91 10 3c 	lds	r24, 0x3C10	; 0x803c10 <rtcReadable>
     63e:	88 23       	and	r24, r24
     640:	09 f4       	brne	.+2      	; 0x644 <getAndShowTime()+0xf2>
     642:	42 c0       	rjmp	.+132    	; 0x6c8 <getAndShowTime()+0x176>
getHours():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:134
    return BCDtoDEC(_time[TIME_MINUTES]);
}

uint8_t RV8803Tiny::getHours()
{
    return BCDtoDEC(_time[TIME_HOURS]);
     644:	80 91 d6 3c 	lds	r24, 0x3CD6	; 0x803cd6 <rtc+0x9>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     648:	98 2f       	mov	r25, r24
     64a:	92 95       	swap	r25
     64c:	9f 70       	andi	r25, 0x0F	; 15
     64e:	2a e0       	ldi	r18, 0x0A	; 10
     650:	8f 70       	andi	r24, 0x0F	; 15
     652:	92 9f       	mul	r25, r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     654:	80 0d       	add	r24, r0
     656:	11 24       	eor	r1, r1
nthdig():
     658:	62 2f       	mov	r22, r18
     65a:	d1 d6       	rcall	.+3490   	; 0x13fe <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     65c:	39 2f       	mov	r19, r25
     65e:	cf d6       	rcall	.+3486   	; 0x13fe <__udivmodqi4>
currTimeAsArray():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:179
// }

//-- NEW TEST ADDITION --//
uint8_t* RV8803Tiny::currTimeAsArray()
{
    currTimeArray[0] = nthdig(1, getHours());
     660:	90 93 cd 3c 	sts	0x3CCD, r25	; 0x803ccd <rtc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:180
    currTimeArray[1] = nthdig(0, getHours());
     664:	30 93 ce 3c 	sts	0x3CCE, r19	; 0x803cce <rtc+0x1>
getMinutes():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     668:	80 91 d5 3c 	lds	r24, 0x3CD5	; 0x803cd5 <rtc+0x8>
BCDtoDEC():
     66c:	98 2f       	mov	r25, r24
     66e:	92 95       	swap	r25
     670:	9f 70       	andi	r25, 0x0F	; 15
     672:	8f 70       	andi	r24, 0x0F	; 15
     674:	92 9f       	mul	r25, r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     676:	80 0d       	add	r24, r0
     678:	11 24       	eor	r1, r1
nthdig():
     67a:	c1 d6       	rcall	.+3458   	; 0x13fe <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     67c:	39 2f       	mov	r19, r25
     67e:	bf d6       	rcall	.+3454   	; 0x13fe <__udivmodqi4>
currTimeAsArray():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:181
//-- NEW TEST ADDITION --//
uint8_t* RV8803Tiny::currTimeAsArray()
{
    currTimeArray[0] = nthdig(1, getHours());
    currTimeArray[1] = nthdig(0, getHours());
    currTimeArray[2] = nthdig(1, getMinutes());
     680:	90 93 cf 3c 	sts	0x3CCF, r25	; 0x803ccf <rtc+0x2>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:124
    return (date);
}

uint8_t RV8803Tiny::getSeconds()
{
    return BCDtoDEC(_time[TIME_SECONDS]);
     684:	30 93 d0 3c 	sts	0x3CD0, r19	; 0x803cd0 <rtc+0x3>
getSeconds():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     688:	80 91 d4 3c 	lds	r24, 0x3CD4	; 0x803cd4 <rtc+0x7>
BCDtoDEC():
     68c:	98 2f       	mov	r25, r24
     68e:	92 95       	swap	r25
     690:	9f 70       	andi	r25, 0x0F	; 15
     692:	8f 70       	andi	r24, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     694:	92 9f       	mul	r25, r18
     696:	80 0d       	add	r24, r0
     698:	11 24       	eor	r1, r1
nthdig():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     69a:	b1 d6       	rcall	.+3426   	; 0x13fe <__udivmodqi4>
     69c:	39 2f       	mov	r19, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:183
{
    currTimeArray[0] = nthdig(1, getHours());
    currTimeArray[1] = nthdig(0, getHours());
    currTimeArray[2] = nthdig(1, getMinutes());
    currTimeArray[3] = nthdig(0, getMinutes());
    currTimeArray[4] = nthdig(1, getSeconds());
     69e:	af d6       	rcall	.+3422   	; 0x13fe <__udivmodqi4>
currTimeAsArray():
     6a0:	90 93 d1 3c 	sts	0x3CD1, r25	; 0x803cd1 <rtc+0x4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:184
    currTimeArray[5] = nthdig(0, getSeconds());
     6a4:	30 93 d2 3c 	sts	0x3CD2, r19	; 0x803cd2 <rtc+0x5>
_Z14getAndShowTimev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:44
     6a8:	8d ec       	ldi	r24, 0xCD	; 205
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:45
  else showOnDisplay(blankSignal);
     6aa:	9c e3       	ldi	r25, 0x3C	; 60
     6ac:	ef de       	rcall	.-546    	; 0x48c <showOnDisplay(unsigned char*)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:46
}
     6ae:	28 96       	adiw	r28, 0x08	; 8
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	08 95       	ret
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:35
  currentCountMillis = millis();
  if (currentCountMillis - startCountMillis >= secPeriod) {
    if (rtcAvailable) {
      // updateTime i.e read registers, ** must for getting current time
      if (rtc.updateTime()) rtcReadable = true;
      else rtcReadable = false;
     6c2:	10 92 10 3c 	sts	0x3C10, r1	; 0x803c10 <rtcReadable>
     6c6:	ac cf       	rjmp	.-168    	; 0x620 <getAndShowTime()+0xce>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:45
  }

  // :: Display Time :: //
  // --- ** corner case handler (In case time retreival was unsuccessful) ** --- //
  if (rtcAvailable && rtcReadable) showOnDisplay(rtc.currTimeAsArray());
  else showOnDisplay(blankSignal);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	9c e3       	ldi	r25, 0x3C	; 60
     6cc:	ef cf       	rjmp	.-34     	; 0x6ac <getAndShowTime()+0x15a>

000006ce <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.h:241

  public:
    inline UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t default_pinset);
    bool                    pins(uint8_t tx, uint8_t rx);
    bool                    swap(uint8_t mux_level = 1);
    void                   begin(uint32_t baud) {begin(baud, SERIAL_8N1);}
     6ce:	dc 01       	movw	r26, r24
     6d0:	ed 91       	ld	r30, X+
     6d2:	fc 91       	ld	r31, X
     6d4:	00 88       	ldd	r0, Z+16	; 0x10
     6d6:	f1 89       	ldd	r31, Z+17	; 0x11
     6d8:	e0 2d       	mov	r30, r0
     6da:	23 e0       	ldi	r18, 0x03	; 3
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	09 94       	ijmp

000006e0 <pinMode>:
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     6e0:	86 31       	cpi	r24, 0x16	; 22
     6e2:	f0 f4       	brcc	.+60     	; 0x720 <pinMode+0x40>
check_valid_digital_pin():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin))
     6e4:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     6e6:	fc 01       	movw	r30, r24
     6e8:	e5 50       	subi	r30, 0x05	; 5
     6ea:	fb 46       	sbci	r31, 0x6B	; 107
     6ec:	20 81       	ld	r18, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:137
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
     6ee:	2f 3f       	cpi	r18, 0xFF	; 255
     6f0:	b9 f0       	breq	.+46     	; 0x720 <pinMode+0x40>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:140
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     6f2:	fc 01       	movw	r30, r24
     6f4:	eb 51       	subi	r30, 0x1B	; 27
     6f6:	fb 46       	sbci	r31, 0x6B	; 107
portToPortBaseOffset():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:130
  SREG = oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
     6f8:	e0 81       	ld	r30, Z
     6fa:	e2 95       	swap	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:131
  return port << 1;
     6fc:	ee 0f       	add	r30, r30
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:140
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	f4 60       	ori	r31, 0x04	; 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:141
  if (mode & 0x01) {
     702:	61 30       	cpi	r22, 0x01	; 1
     704:	71 f4       	brne	.+28     	; 0x722 <pinMode+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:143
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     706:	21 83       	std	Z+1, r18	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:152
      *(port_base + 5) = bit_mask;
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
     708:	81 53       	subi	r24, 0x31	; 49
     70a:	9b 46       	sbci	r25, 0x6B	; 107
     70c:	dc 01       	movw	r26, r24
     70e:	8c 91       	ld	r24, X
     710:	80 61       	ori	r24, 0x10	; 16
     712:	e8 0f       	add	r30, r24
     714:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:153
  bit_mask = *port_base;
     716:	80 81       	ld	r24, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:154
  if (mode & 2) {
     718:	61 30       	cpi	r22, 0x01	; 1
     71a:	31 f0       	breq	.+12     	; 0x728 <pinMode+0x48>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:155
    bit_mask |= 0x08;
     71c:	88 60       	ori	r24, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:159
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
     71e:	80 83       	st	Z, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:160
}
     720:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:145
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
     722:	22 83       	std	Z+2, r18	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:147
    if (mode == 2) {
      *(port_base + 5) = bit_mask;
     724:	25 83       	std	Z+5, r18	; 0x05
     726:	f0 cf       	rjmp	.-32     	; 0x708 <pinMode+0x28>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring_digital.c:157
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     728:	87 7f       	andi	r24, 0xF7	; 247
     72a:	f9 cf       	rjmp	.-14     	; 0x71e <pinMode+0x3e>

0000072c <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:477
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     72c:	8f 92       	push	r8
     72e:	9f 92       	push	r9
     730:	af 92       	push	r10
     732:	bf 92       	push	r11
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	8c 01       	movw	r16, r24
     742:	4a 01       	movw	r8, r20
     744:	5b 01       	movw	r10, r22
     746:	e9 01       	movw	r28, r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:480
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     748:	dc 01       	movw	r26, r24
     74a:	50 96       	adiw	r26, 0x10	; 16
     74c:	8c 91       	ld	r24, X
     74e:	50 97       	sbiw	r26, 0x10	; 16
     750:	80 ff       	sbrs	r24, 0
     752:	07 c0       	rjmp	.+14     	; 0x762 <UartClass::begin(unsigned long, unsigned int)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:481
    this->end();
     754:	ed 91       	ld	r30, X+
     756:	fc 91       	ld	r31, X
     758:	02 88       	ldd	r0, Z+18	; 0x12
     75a:	f3 89       	ldd	r31, Z+19	; 0x13
     75c:	e0 2d       	mov	r30, r0
     75e:	c8 01       	movw	r24, r16
     760:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:485
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                         // see if they passed anything in low byte or SERIAL_CONFIG_VALID.
     762:	c1 11       	cpse	r28, r1
     764:	01 c0       	rjmp	.+2      	; 0x768 <UartClass::begin(unsigned long, unsigned int)+0x3c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:486
    ctrlc = (uint8_t)SERIAL_8N1;            // low byte of 0 could mean they want SERIAL_5N1. Or that they thought they'd
     766:	c3 e0       	ldi	r28, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:488
  }
  ctrlc &= ~0x04; // Now unset that 0x04 bit if it's set, because none of the values with it set are supported. We use that to smuggle in a "this constant was specified" for 5N1
     768:	ec 2e       	mov	r14, r28
     76a:	e8 94       	clt
     76c:	e2 f8       	bld	r14, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:489
  uint8_t ctrla = (uint8_t) (options >> 8);// CTRLA will get the remains of the options high byte.
     76e:	fd 2e       	mov	r15, r29
     770:	cd 2f       	mov	r28, r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:491
  uint16_t baud_setting = 0;                // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t   ctrlb = (~ctrla & 0xC0);        // Top two bits (TXEN RXEN), inverted so they match he sense in the registers.
     772:	d0 95       	com	r29
     774:	d0 7c       	andi	r29, 0xC0	; 192
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:492
  if (baud   > F_CPU / 16) {            // if this baud is too fast for non-U2X
     776:	b5 eb       	ldi	r27, 0xB5	; 181
     778:	8b 16       	cp	r8, r27
     77a:	b4 ec       	ldi	r27, 0xC4	; 196
     77c:	9b 06       	cpc	r9, r27
     77e:	b4 e0       	ldi	r27, 0x04	; 4
     780:	ab 06       	cpc	r10, r27
     782:	b1 04       	cpc	r11, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:493
        ctrlb   |= USART_RXMODE0_bm;        // set the U2X bit in what will become CTRLB
     784:	28 f0       	brcs	.+10     	; 0x790 <UartClass::begin(unsigned long, unsigned int)+0x64>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:494
        baud   >>= 1;                       // And lower the baud rate by haldf
     786:	d2 60       	ori	r29, 0x02	; 2
     788:	b6 94       	lsr	r11
     78a:	a7 94       	ror	r10
     78c:	97 94       	ror	r9
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:496
  }
  baud_setting = (((4 * F_CPU) / baud));  // And now the registers that baud was passed in are done.
     78e:	87 94       	ror	r8
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	7d e2       	ldi	r23, 0x2D	; 45
     794:	81 e3       	ldi	r24, 0x31	; 49
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	a5 01       	movw	r20, r10
     79a:	94 01       	movw	r18, r8
     79c:	50 d6       	rcall	.+3232   	; 0x143e <__udivmodsi4>
     79e:	20 34       	cpi	r18, 0x40	; 64
     7a0:	31 05       	cpc	r19, r1
     7a2:	10 f4       	brcc	.+4      	; 0x7a8 <UartClass::begin(unsigned long, unsigned int)+0x7c>
     7a4:	20 e4       	ldi	r18, 0x40	; 64
     7a6:	30 e0       	ldi	r19, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:502
  if (baud_setting < 64)                      // so set to the maximum baud rate setting.
    baud_setting= 64;       // set the U2X bit in what will become CTRLB
  //} else if (baud < (F_CPU / 16800)) {      // Baud rate is too low
  //  baud_setting = 65535;                   // minimum baud rate.'
                                            // Baud setting done now we do the other options not in CTRLC;
  if (ctrla & 0x04) {                       // is ODME option set?
     7a8:	f2 fc       	sbrc	r15, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:503
    ctrlb |= USART_ODME_bm;                 // set the bit in what will become CTRLB
     7aa:	d8 60       	ori	r29, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:505
  }
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     7ac:	8c 2f       	mov	r24, r28
     7ae:	8b 72       	andi	r24, 0x2B	; 43
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:506
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     7b0:	d7 fd       	sbrc	r29, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:507
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     7b2:	80 68       	ori	r24, 0x80	; 128
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:509
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     7b4:	cd 2f       	mov	r28, r29
     7b6:	c8 7c       	andi	r28, 0xC8	; 200
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:510
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback, need to set state bit 2.
     7b8:	83 ff       	sbrs	r24, 3
     7ba:	07 c0       	rjmp	.+14     	; 0x7ca <UartClass::begin(unsigned long, unsigned int)+0x9e>
     7bc:	c8 3c       	cpi	r28, 0xC8	; 200
     7be:	29 f4       	brne	.+10     	; 0x7ca <UartClass::begin(unsigned long, unsigned int)+0x9e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:511
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
     7c0:	f8 01       	movw	r30, r16
     7c2:	90 89       	ldd	r25, Z+16	; 0x10
     7c4:	92 60       	ori	r25, 0x02	; 2
     7c6:	90 8b       	std	Z+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:512
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
     7c8:	c8 ed       	ldi	r28, 0xD8	; 216
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:514
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     7ca:	80 fd       	sbrc	r24, 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:515
    setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
     7cc:	c1 60       	ori	r28, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:517
  }
  uint8_t oldSREG = SREG;
     7ce:	ff b6       	in	r15, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:518
  cli();
     7d0:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:519
  volatile USART_t* MyUSART = _hwserial_module;
     7d2:	d8 01       	movw	r26, r16
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	ed 91       	ld	r30, X+
     7d8:	fc 91       	ld	r31, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:520
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     7da:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:521
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     7dc:	e7 82       	std	Z+7, r14	; 0x07
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:522
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     7de:	20 87       	std	Z+8, r18	; 0x08
     7e0:	31 87       	std	Z+9, r19	; 0x09
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:523
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     7e2:	85 ff       	sbrs	r24, 5
     7e4:	3f c0       	rjmp	.+126    	; 0x864 <UartClass::begin(unsigned long, unsigned int)+0x138>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:524
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     7e6:	cf 77       	andi	r28, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:525
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	94 87       	std	Z+12, r25	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:526
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     7ec:	9f ef       	ldi	r25, 0xFF	; 255
     7ee:	95 87       	std	Z+13, r25	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:530
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     7f0:	8f 7d       	andi	r24, 0xDF	; 223
     7f2:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:531
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     7f4:	d6 83       	std	Z+6, r29	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:532
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
     7f6:	f8 01       	movw	r30, r16
     7f8:	27 85       	ldd	r18, Z+15	; 0x0f
     7fa:	86 85       	ldd	r24, Z+14	; 0x0e
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:545
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     7fc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vtable for UartClass+0x7f6ce8>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:544
    uint8_t muxregval    = PORTMUX.USARTROUTEA;
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
     800:	22 23       	and	r18, r18
     802:	91 f1       	breq	.+100    	; 0x868 <UartClass::begin(unsigned long, unsigned int)+0x13c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:545
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     804:	91 60       	ori	r25, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:547
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     806:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <vtable for UartClass+0x7f6ce8>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:555
  #if MEGATINYCORE_SERIES == 2
    if (mux_set == 3) { // not connected to pins...
      return;           // so we are done!
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
     80a:	82 0f       	add	r24, r18
     80c:	99 27       	eor	r25, r25
     80e:	99 1f       	adc	r25, r25
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	8c 01       	movw	r16, r24
     81a:	0f 5e       	subi	r16, 0xEF	; 239
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:556
  if ((enmask & 0x40 && !(enmask & 0x08))) {
     81c:	1a 46       	sbci	r17, 0x6A	; 106
     81e:	c6 ff       	sbrs	r28, 6
     820:	25 c0       	rjmp	.+74     	; 0x86c <UartClass::begin(unsigned long, unsigned int)+0x140>
     822:	c3 fd       	sbrc	r28, 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:557
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
     824:	23 c0       	rjmp	.+70     	; 0x86c <UartClass::begin(unsigned long, unsigned int)+0x140>
     826:	61 e0       	ldi	r22, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:560
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     828:	d8 01       	movw	r26, r16
     82a:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:562
  }
  if (enmask & 0x80 && !(enmask & 0x10)) {
     82c:	59 df       	rcall	.-334    	; 0x6e0 <pinMode>
     82e:	c7 ff       	sbrs	r28, 7
     830:	07 c0       	rjmp	.+14     	; 0x840 <UartClass::begin(unsigned long, unsigned int)+0x114>
     832:	c4 fd       	sbrc	r28, 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:564
    // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
    pinMode(muxrow[1], INPUT_PULLUP);
     834:	05 c0       	rjmp	.+10     	; 0x840 <UartClass::begin(unsigned long, unsigned int)+0x114>
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	d8 01       	movw	r26, r16
     83a:	11 96       	adiw	r26, 0x01	; 1
     83c:	8c 91       	ld	r24, X
     83e:	50 df       	rcall	.-352    	; 0x6e0 <pinMode>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:566
  }
  if (enmask & 0x01) { // finally if RS485 mode is enabled, we make XDIR output, otherwise it can't drive the pin.
     840:	c0 ff       	sbrs	r28, 0
     842:	04 c0       	rjmp	.+8      	; 0x84c <UartClass::begin(unsigned long, unsigned int)+0x120>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:567
    pinMode(muxrow[3], OUTPUT); // make XDIR output.
     844:	61 e0       	ldi	r22, 0x01	; 1
     846:	f8 01       	movw	r30, r16
     848:	83 81       	ldd	r24, Z+3	; 0x03
     84a:	4a df       	rcall	.-364    	; 0x6e0 <pinMode>
_ZN9UartClass5beginEmj():
     84c:	ff be       	out	0x3f, r15	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:533
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
  SREG = oldSREG;                             // re-enable interrupts, and we're done.
     84e:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:534
}
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	9f 90       	pop	r9
     860:	8f 90       	pop	r8
     862:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:528
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     864:	14 86       	std	Z+12, r1	; 0x0c
     866:	c4 cf       	rjmp	.-120    	; 0x7f0 <UartClass::begin(unsigned long, unsigned int)+0xc4>
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:547

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     868:	9e 7f       	andi	r25, 0xFE	; 254
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:558
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
  if ((enmask & 0x40 && !(enmask & 0x08))) {
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     86a:	cd cf       	rjmp	.-102    	; 0x806 <UartClass::begin(unsigned long, unsigned int)+0xda>
     86c:	2c 2f       	mov	r18, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:560
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     86e:	20 75       	andi	r18, 0x50	; 80
     870:	f1 f2       	breq	.-68     	; 0x82e <UartClass::begin(unsigned long, unsigned int)+0x102>
     872:	8f 5e       	subi	r24, 0xEF	; 239
     874:	9a 46       	sbci	r25, 0x6A	; 106
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART0.cpp:73
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     87a:	80 81       	ld	r24, Z
     87c:	d7 cf       	rjmp	.-82     	; 0x82c <UartClass::begin(unsigned long, unsigned int)+0x100>

0000087e <__vector_28>:
__vector_28():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART0.cpp:76
      __asm__ __volatile__(
                "jmp _do_dre"  "\n"
                ::"z"(&Serial));
     87e:	ef 93       	push	r30
     880:	ff 93       	push	r31
     882:	e8 e5       	ldi	r30, 0x58	; 88
     884:	fc e3       	ldi	r31, 0x3C	; 60
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART0.cpp:55
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     886:	08 c0       	rjmp	.+16     	; 0x898 <_do_dre()>

00000888 <__vector_27>:
__vector_27():
     888:	ef 93       	push	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART0.cpp:58
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
     88a:	ff 93       	push	r31
     88c:	e8 e5       	ldi	r30, 0x58	; 88
     88e:	fc e3       	ldi	r31, 0x3C	; 60
     890:	31 c0       	rjmp	.+98     	; 0x8f4 <_do_rxc()>

00000892 <__vector_29>:
__vector_29():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART0.cpp:31
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     892:	ef 93       	push	r30
     894:	e0 e0       	ldi	r30, 0x00	; 0
     896:	52 c0       	rjmp	.+164    	; 0x93c <_do_txc()>

00000898 <_do_dre()>:
_Z7_do_drev():
     898:	2f 93       	push	r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:313
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                        "\n"   // and RETI!
      ::);
     89a:	2f b7       	in	r18, 0x3f	; 63
     89c:	2f 93       	push	r18
     89e:	8f 93       	push	r24
     8a0:	9f 93       	push	r25
     8a2:	af 93       	push	r26
     8a4:	bf 93       	push	r27
     8a6:	68 94       	set

000008a8 <_poll_dre>:
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	c4 85       	ldd	r28, Z+12	; 0x0c
     8b0:	d5 85       	ldd	r29, Z+13	; 0x0d
     8b2:	94 89       	ldd	r25, Z+20	; 0x14
     8b4:	df 01       	movw	r26, r30
     8b6:	a9 0f       	add	r26, r25
     8b8:	b2 1f       	adc	r27, r18
     8ba:	ab 5a       	subi	r26, 0xAB	; 171
     8bc:	bf 4f       	sbci	r27, 0xFF	; 255
     8be:	8c 91       	ld	r24, X
     8c0:	20 e4       	ldi	r18, 0x40	; 64
     8c2:	2c 83       	std	Y+4, r18	; 0x04
     8c4:	8a 83       	std	Y+2, r24	; 0x02
     8c6:	9f 5f       	subi	r25, 0xFF	; 255
     8c8:	9f 71       	andi	r25, 0x1F	; 31
     8ca:	8d 81       	ldd	r24, Y+5	; 0x05
     8cc:	23 89       	ldd	r18, Z+19	; 0x13
     8ce:	29 13       	cpse	r18, r25
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <_done_dre_irq>
     8d2:	8f 7d       	andi	r24, 0xDF	; 223
     8d4:	8d 83       	std	Y+5, r24	; 0x05

000008d6 <_done_dre_irq>:
     8d6:	94 8b       	std	Z+20, r25	; 0x14
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	0e f0       	brts	.+2      	; 0x8e0 <_done_dre_irq+0xa>
     8de:	1f cd       	rjmp	.-1474   	; 0x31e <_poll_dre_done>
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	2f 91       	pop	r18
     8ea:	2f bf       	out	0x3f, r18	; 63
     8ec:	2f 91       	pop	r18
     8ee:	ff 91       	pop	r31
     8f0:	ef 91       	pop	r30
     8f2:	18 95       	reti

000008f4 <_do_rxc()>:
_Z7_do_rxcv():
     8f4:	2f 93       	push	r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:178
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     8f6:	2f b7       	in	r18, 0x3f	; 63
     8f8:	2f 93       	push	r18
     8fa:	8f 93       	push	r24
     8fc:	9f 93       	push	r25
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	c4 85       	ldd	r28, Z+12	; 0x0c
     904:	d5 85       	ldd	r29, Z+13	; 0x0d
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	98 81       	ld	r25, Y
     90a:	81 fd       	sbrc	r24, 1
     90c:	0d c0       	rjmp	.+26     	; 0x928 <_end_rxc>
     90e:	c1 89       	ldd	r28, Z+17	; 0x11
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	8c 0f       	add	r24, r28
     914:	8f 73       	andi	r24, 0x3F	; 63
     916:	22 89       	ldd	r18, Z+18	; 0x12
     918:	28 17       	cp	r18, r24
     91a:	31 f0       	breq	.+12     	; 0x928 <_end_rxc>
     91c:	ce 0f       	add	r28, r30
     91e:	df 2f       	mov	r29, r31
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	d2 1f       	adc	r29, r18
     924:	9d 8b       	std	Y+21, r25	; 0x15
     926:	81 8b       	std	Z+17, r24	; 0x11

00000928 <_end_rxc>:
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	2f 91       	pop	r18
     932:	2f bf       	out	0x3f, r18	; 63
     934:	2f 91       	pop	r18
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	18 95       	reti

0000093c <_do_txc()>:
_Z7_do_txcv():
     93c:	ff 93       	push	r31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/UART.cpp:106
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     93e:	8f 93       	push	r24
     940:	8f b7       	in	r24, 0x3f	; 63
     942:	8f 93       	push	r24
     944:	f8 e0       	ldi	r31, 0x08	; 8

00000946 <_txc_flush_rx>:
     946:	80 81       	ld	r24, Z
     948:	84 81       	ldd	r24, Z+4	; 0x04
     94a:	87 ff       	sbrs	r24, 7
     94c:	fc cf       	rjmp	.-8      	; 0x946 <_txc_flush_rx>
     94e:	85 81       	ldd	r24, Z+5	; 0x05
     950:	8f 7b       	andi	r24, 0xBF	; 191
     952:	80 68       	ori	r24, 0x80	; 128
     954:	85 83       	std	Z+5, r24	; 0x05
     956:	8f 91       	pop	r24
     958:	8f bf       	out	0x3f, r24	; 63
     95a:	8f 91       	pop	r24
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	18 95       	reti

00000962 <__vector_9>:
__vector_9():
     962:	1f 92       	push	r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:142
#elif defined(MILLIS_USE_TIMERB1)
  ISR(TCB1_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	2f 93       	push	r18
     96e:	3f 93       	push	r19
     970:	4f 93       	push	r20
     972:	5f 93       	push	r21
     974:	6f 93       	push	r22
     976:	8f 93       	push	r24
     978:	9f 93       	push	r25
     97a:	af 93       	push	r26
     97c:	bf 93       	push	r27
     97e:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:154
    #else
      timer_millis += 2;
    #endif
  #else
    #if !defined(MILLIS_USE_TIMERRTC) // TCA0 or TCD0
      uint32_t m = timer_millis;
     982:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <timer_millis+0x1>
     986:	a0 91 4a 3c 	lds	r26, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     98a:	b0 91 4b 3c 	lds	r27, 0x3C4B	; 0x803c4b <timer_millis+0x3>
     98e:	40 91 15 3c 	lds	r20, 0x3C15	; 0x803c15 <timer_fract>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:155
      uint16_t f = timer_fract;
     992:	50 91 16 3c 	lds	r21, 0x3C16	; 0x803c16 <timer_fract+0x1>
     996:	9a 01       	movw	r18, r20
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:157
      m += MILLIS_INC;
      f += FRACT_INC;
     998:	20 5d       	subi	r18, 0xD0	; 208
     99a:	3c 4f       	sbci	r19, 0xFC	; 252
     99c:	28 3e       	cpi	r18, 0xE8	; 232
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:158
      if (f >= FRACT_MAX) {
     99e:	63 e0       	ldi	r22, 0x03	; 3
     9a0:	36 07       	cpc	r19, r22
     9a2:	28 f0       	brcs	.+10     	; 0x9ae <__vector_9+0x4c>
     9a4:	28 5e       	subi	r18, 0xE8	; 232
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:160

        f -= FRACT_MAX;
     9a6:	33 40       	sbci	r19, 0x03	; 3
     9a8:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:161
        m += 1;
     9aa:	a1 1d       	adc	r26, r1
     9ac:	b1 1d       	adc	r27, r1
     9ae:	20 93 15 3c 	sts	0x3C15, r18	; 0x803c15 <timer_fract>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:163
      }
      timer_fract = f;
     9b2:	30 93 16 3c 	sts	0x3C16, r19	; 0x803c16 <timer_fract+0x1>
     9b6:	80 93 48 3c 	sts	0x3C48, r24	; 0x803c48 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:164
      timer_millis = m;
     9ba:	90 93 49 3c 	sts	0x3C49, r25	; 0x803c49 <timer_millis+0x1>
     9be:	a0 93 4a 3c 	sts	0x3C4A, r26	; 0x803c4a <timer_millis+0x2>
     9c2:	b0 93 4b 3c 	sts	0x3C4B, r27	; 0x803c4b <timer_millis+0x3>
     9c6:	80 91 17 3c 	lds	r24, 0x3C17	; 0x803c17 <timer_overflow_count>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:167
    #endif
    // if RTC is used as timer, we only increment the overflow count
    timer_overflow_count++;
     9ca:	90 91 18 3c 	lds	r25, 0x3C18	; 0x803c18 <timer_overflow_count+0x1>
     9ce:	a0 91 19 3c 	lds	r26, 0x3C19	; 0x803c19 <timer_overflow_count+0x2>
     9d2:	b0 91 1a 3c 	lds	r27, 0x3C1A	; 0x803c1a <timer_overflow_count+0x3>
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	a1 1d       	adc	r26, r1
     9da:	b1 1d       	adc	r27, r1
     9dc:	80 93 17 3c 	sts	0x3C17, r24	; 0x803c17 <timer_overflow_count>
     9e0:	90 93 18 3c 	sts	0x3C18, r25	; 0x803c18 <timer_overflow_count+0x1>
     9e4:	a0 93 19 3c 	sts	0x3C19, r26	; 0x803c19 <timer_overflow_count+0x2>
     9e8:	b0 93 1a 3c 	sts	0x3C1A, r27	; 0x803c1a <timer_overflow_count+0x3>
     9ec:	82 e0       	ldi	r24, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:171
  #endif
  /* Clear flag */
  #if defined(MILLIS_USE_TIMERA0)
    TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm;
     9ee:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <vtable for UartClass+0x7f74f2>
     9f2:	bf 91       	pop	r27
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:179
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
  #endif
}
     9f4:	af 91       	pop	r26
     9f6:	9f 91       	pop	r25
     9f8:	8f 91       	pop	r24
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_6>:
__vector_6():
     a0e:	1f 92       	push	r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:39
  RTC.CTRLA = RTC_PRESCALER_DIV32_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
              | RTC_RTCEN_bm                        // Enable: enabled
              | RTC_RUNSTDBY_bm;                    // Run In Standby: enabled
}

ISR(RTC_CNT_vect) {
     a10:	0f 92       	push	r0
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	0f 92       	push	r0
     a16:	11 24       	eor	r1, r1
     a18:	8f 93       	push	r24
     a1a:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:40
  RTC.INTFLAGS = RTC_OVF_bm;            // Clear flag by writing '1':
     a1c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <vtable for UartClass+0x7f6c2a>
     a20:	80 93 54 3c 	sts	0x3C54, r24	; 0x803c54 <showTimePeriodOver>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:41
  showTimePeriodOver = 1;
     a24:	8f 91       	pop	r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:42
}
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <__vector_5>:
__vector_5():
     a30:	1f 92       	push	r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:19
volatile byte showTimePeriodOver;



//--- ISR for waking up from sleep mode ---//
ISR(PORTC_PORT_vect) {
     a32:	0f 92       	push	r0
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	0f 92       	push	r0
     a38:	11 24       	eor	r1, r1
     a3a:	8f 93       	push	r24
     a3c:	ef 93       	push	r30
     a3e:	ff 93       	push	r31
     a40:	e0 e4       	ldi	r30, 0x40	; 64
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:20
  byte flags = PORTC.INTFLAGS; // slower a TID BIT 
     a42:	f4 e0       	ldi	r31, 0x04	; 4
     a44:	81 85       	ldd	r24, Z+9	; 0x09
     a46:	81 87       	std	Z+9, r24	; 0x09
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:23
  //  byte flags = VPORTC.INTFLAGS; // faster (TEST TBD)
  
  PORTC.INTFLAGS = flags; //clear flags
     a48:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:24
  wakeUpTriggered = 1;
     a4a:	80 93 23 3c 	sts	0x3C23, r24	; 0x803c23 <wakeUpTriggered>
     a4e:	ff 91       	pop	r31
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:25
}
     a50:	ef 91       	pop	r30
     a52:	8f 91       	pop	r24
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	0f 90       	pop	r0
     a5a:	1f 90       	pop	r1
     a5c:	18 95       	reti

00000a5e <vfprintf>:
vfprintf():
     a5e:	ab e0       	ldi	r26, 0x0B	; 11
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e4 e3       	ldi	r30, 0x34	; 52
     a64:	f5 e0       	ldi	r31, 0x05	; 5
     a66:	b6 c3       	rjmp	.+1900   	; 0x11d4 <__prologue_saves__+0x8>
     a68:	6c 01       	movw	r12, r24
     a6a:	7b 01       	movw	r14, r22
     a6c:	3a 01       	movw	r6, r20
     a6e:	fc 01       	movw	r30, r24
     a70:	16 82       	std	Z+6, r1	; 0x06
     a72:	17 82       	std	Z+7, r1	; 0x07
     a74:	83 81       	ldd	r24, Z+3	; 0x03
     a76:	81 ff       	sbrs	r24, 1
     a78:	ff c0       	rjmp	.+510    	; 0xc78 <vfprintf+0x21a>
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	4c 01       	movw	r8, r24
     a80:	f6 01       	movw	r30, r12
     a82:	b3 80       	ldd	r11, Z+3	; 0x03
     a84:	f7 01       	movw	r30, r14
     a86:	b3 fc       	sbrc	r11, 3
     a88:	05 91       	lpm	r16, Z+
     a8a:	b3 fe       	sbrs	r11, 3
     a8c:	01 91       	ld	r16, Z+
     a8e:	7f 01       	movw	r14, r30
     a90:	00 23       	and	r16, r16
     a92:	41 f1       	breq	.+80     	; 0xae4 <vfprintf+0x86>
     a94:	05 32       	cpi	r16, 0x25	; 37
     a96:	39 f4       	brne	.+14     	; 0xaa6 <vfprintf+0x48>
     a98:	b3 fc       	sbrc	r11, 3
     a9a:	05 91       	lpm	r16, Z+
     a9c:	b3 fe       	sbrs	r11, 3
     a9e:	01 91       	ld	r16, Z+
     aa0:	7f 01       	movw	r14, r30
     aa2:	05 32       	cpi	r16, 0x25	; 37
     aa4:	39 f5       	brne	.+78     	; 0xaf4 <vfprintf+0x96>
     aa6:	b6 01       	movw	r22, r12
     aa8:	80 2f       	mov	r24, r16
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	1a d4       	rcall	.+2100   	; 0x12e2 <fputc>
     aae:	53 01       	movw	r10, r6
     ab0:	35 01       	movw	r6, r10
     ab2:	e6 cf       	rjmp	.-52     	; 0xa80 <vfprintf+0x22>
     ab4:	10 68       	ori	r17, 0x80	; 128
     ab6:	f7 01       	movw	r30, r14
     ab8:	b3 fc       	sbrc	r11, 3
     aba:	05 91       	lpm	r16, Z+
     abc:	b3 fe       	sbrs	r11, 3
     abe:	01 91       	ld	r16, Z+
     ac0:	7f 01       	movw	r14, r30
     ac2:	17 fd       	sbrc	r17, 7
     ac4:	0d c0       	rjmp	.+26     	; 0xae0 <vfprintf+0x82>
     ac6:	00 23       	and	r16, r16
     ac8:	69 f0       	breq	.+26     	; 0xae4 <vfprintf+0x86>
     aca:	60 2f       	mov	r22, r16
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	83 e8       	ldi	r24, 0x83	; 131
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	ca d3       	rcall	.+1940   	; 0x1268 <strchr_P>
     ad4:	89 2b       	or	r24, r25
     ad6:	79 f7       	brne	.-34     	; 0xab6 <vfprintf+0x58>
     ad8:	03 32       	cpi	r16, 0x23	; 35
     ada:	51 f0       	breq	.+20     	; 0xaf0 <vfprintf+0x92>
     adc:	0c 36       	cpi	r16, 0x6C	; 108
     ade:	51 f3       	breq	.-44     	; 0xab4 <vfprintf+0x56>
     ae0:	01 11       	cpse	r16, r1
     ae2:	0a c0       	rjmp	.+20     	; 0xaf8 <vfprintf+0x9a>
     ae4:	f6 01       	movw	r30, r12
     ae6:	86 81       	ldd	r24, Z+6	; 0x06
     ae8:	97 81       	ldd	r25, Z+7	; 0x07
     aea:	2b 96       	adiw	r28, 0x0b	; 11
     aec:	ee e0       	ldi	r30, 0x0E	; 14
     aee:	8b c3       	rjmp	.+1814   	; 0x1206 <__epilogue_restores__+0x8>
     af0:	10 e1       	ldi	r17, 0x10	; 16
     af2:	e1 cf       	rjmp	.-62     	; 0xab6 <vfprintf+0x58>
     af4:	10 e0       	ldi	r17, 0x00	; 0
     af6:	e5 cf       	rjmp	.-54     	; 0xac2 <vfprintf+0x64>
     af8:	60 2f       	mov	r22, r16
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	8c e7       	ldi	r24, 0x7C	; 124
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	b3 d3       	rcall	.+1894   	; 0x1268 <strchr_P>
     b02:	89 2b       	or	r24, r25
     b04:	49 f0       	breq	.+18     	; 0xb18 <vfprintf+0xba>
     b06:	53 01       	movw	r10, r6
     b08:	f4 e0       	ldi	r31, 0x04	; 4
     b0a:	af 0e       	add	r10, r31
     b0c:	b1 1c       	adc	r11, r1
     b0e:	b6 01       	movw	r22, r12
     b10:	8f e3       	ldi	r24, 0x3F	; 63
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	e6 d3       	rcall	.+1996   	; 0x12e2 <fputc>
     b16:	cc cf       	rjmp	.-104    	; 0xab0 <vfprintf+0x52>
     b18:	03 36       	cpi	r16, 0x63	; 99
     b1a:	09 f4       	brne	.+2      	; 0xb1e <vfprintf+0xc0>
     b1c:	52 c0       	rjmp	.+164    	; 0xbc2 <vfprintf+0x164>
     b1e:	03 37       	cpi	r16, 0x73	; 115
     b20:	09 f4       	brne	.+2      	; 0xb24 <vfprintf+0xc6>
     b22:	59 c0       	rjmp	.+178    	; 0xbd6 <vfprintf+0x178>
     b24:	03 35       	cpi	r16, 0x53	; 83
     b26:	09 f4       	brne	.+2      	; 0xb2a <vfprintf+0xcc>
     b28:	55 c0       	rjmp	.+170    	; 0xbd4 <vfprintf+0x176>
     b2a:	04 36       	cpi	r16, 0x64	; 100
     b2c:	19 f0       	breq	.+6      	; 0xb34 <vfprintf+0xd6>
     b2e:	09 36       	cpi	r16, 0x69	; 105
     b30:	09 f0       	breq	.+2      	; 0xb34 <vfprintf+0xd6>
     b32:	70 c0       	rjmp	.+224    	; 0xc14 <vfprintf+0x1b6>
     b34:	53 01       	movw	r10, r6
     b36:	17 ff       	sbrs	r17, 7
     b38:	62 c0       	rjmp	.+196    	; 0xbfe <vfprintf+0x1a0>
     b3a:	f4 e0       	ldi	r31, 0x04	; 4
     b3c:	af 0e       	add	r10, r31
     b3e:	b1 1c       	adc	r11, r1
     b40:	f3 01       	movw	r30, r6
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	82 81       	ldd	r24, Z+2	; 0x02
     b48:	93 81       	ldd	r25, Z+3	; 0x03
     b4a:	1f 7e       	andi	r17, 0xEF	; 239
     b4c:	97 ff       	sbrs	r25, 7
     b4e:	08 c0       	rjmp	.+16     	; 0xb60 <vfprintf+0x102>
     b50:	90 95       	com	r25
     b52:	80 95       	com	r24
     b54:	70 95       	com	r23
     b56:	61 95       	neg	r22
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	8f 4f       	sbci	r24, 0xFF	; 255
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	10 64       	ori	r17, 0x40	; 64
     b60:	2a e0       	ldi	r18, 0x0A	; 10
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	a4 01       	movw	r20, r8
     b66:	ed d3       	rcall	.+2010   	; 0x1342 <__ultoa_invert>
     b68:	08 2f       	mov	r16, r24
     b6a:	08 19       	sub	r16, r8
     b6c:	16 ff       	sbrs	r17, 6
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <vfprintf+0x11a>
     b70:	b6 01       	movw	r22, r12
     b72:	8d e2       	ldi	r24, 0x2D	; 45
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	b5 d3       	rcall	.+1898   	; 0x12e2 <fputc>
     b78:	14 ff       	sbrs	r17, 4
     b7a:	13 c0       	rjmp	.+38     	; 0xba2 <vfprintf+0x144>
     b7c:	fe 01       	movw	r30, r28
     b7e:	e0 0f       	add	r30, r16
     b80:	f1 1d       	adc	r31, r1
     b82:	80 81       	ld	r24, Z
     b84:	80 33       	cpi	r24, 0x30	; 48
     b86:	69 f0       	breq	.+26     	; 0xba2 <vfprintf+0x144>
     b88:	b6 01       	movw	r22, r12
     b8a:	80 e3       	ldi	r24, 0x30	; 48
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a9 d3       	rcall	.+1874   	; 0x12e2 <fputc>
     b90:	12 ff       	sbrs	r17, 2
     b92:	07 c0       	rjmp	.+14     	; 0xba2 <vfprintf+0x144>
     b94:	10 72       	andi	r17, 0x20	; 32
     b96:	81 2f       	mov	r24, r17
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	b6 01       	movw	r22, r12
     b9c:	88 5a       	subi	r24, 0xA8	; 168
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	a0 d3       	rcall	.+1856   	; 0x12e2 <fputc>
     ba2:	01 50       	subi	r16, 0x01	; 1
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	0f 5f       	subi	r16, 0xFF	; 255
     ba8:	1f 4f       	sbci	r17, 0xFF	; 255
     baa:	08 0d       	add	r16, r8
     bac:	19 1d       	adc	r17, r9
     bae:	f8 01       	movw	r30, r16
     bb0:	82 91       	ld	r24, -Z
     bb2:	8f 01       	movw	r16, r30
     bb4:	b6 01       	movw	r22, r12
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	94 d3       	rcall	.+1832   	; 0x12e2 <fputc>
     bba:	08 15       	cp	r16, r8
     bbc:	19 05       	cpc	r17, r9
     bbe:	b9 f7       	brne	.-18     	; 0xbae <vfprintf+0x150>
     bc0:	77 cf       	rjmp	.-274    	; 0xab0 <vfprintf+0x52>
     bc2:	53 01       	movw	r10, r6
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	a8 0e       	add	r10, r24
     bc8:	b1 1c       	adc	r11, r1
     bca:	b6 01       	movw	r22, r12
     bcc:	f3 01       	movw	r30, r6
     bce:	80 81       	ld	r24, Z
     bd0:	91 81       	ldd	r25, Z+1	; 0x01
     bd2:	a0 cf       	rjmp	.-192    	; 0xb14 <vfprintf+0xb6>
     bd4:	11 60       	ori	r17, 0x01	; 1
     bd6:	53 01       	movw	r10, r6
     bd8:	f2 e0       	ldi	r31, 0x02	; 2
     bda:	af 0e       	add	r10, r31
     bdc:	b1 1c       	adc	r11, r1
     bde:	f3 01       	movw	r30, r6
     be0:	60 80       	ld	r6, Z
     be2:	71 80       	ldd	r7, Z+1	; 0x01
     be4:	f3 01       	movw	r30, r6
     be6:	10 fd       	sbrc	r17, 0
     be8:	85 91       	lpm	r24, Z+
     bea:	10 ff       	sbrs	r17, 0
     bec:	81 91       	ld	r24, Z+
     bee:	3f 01       	movw	r6, r30
     bf0:	88 23       	and	r24, r24
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <vfprintf+0x198>
     bf4:	5d cf       	rjmp	.-326    	; 0xab0 <vfprintf+0x52>
     bf6:	b6 01       	movw	r22, r12
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	73 d3       	rcall	.+1766   	; 0x12e2 <fputc>
     bfc:	f3 cf       	rjmp	.-26     	; 0xbe4 <vfprintf+0x186>
     bfe:	f2 e0       	ldi	r31, 0x02	; 2
     c00:	af 0e       	add	r10, r31
     c02:	b1 1c       	adc	r11, r1
     c04:	f3 01       	movw	r30, r6
     c06:	60 81       	ld	r22, Z
     c08:	71 81       	ldd	r23, Z+1	; 0x01
     c0a:	07 2e       	mov	r0, r23
     c0c:	00 0c       	add	r0, r0
     c0e:	88 0b       	sbc	r24, r24
     c10:	99 0b       	sbc	r25, r25
     c12:	9b cf       	rjmp	.-202    	; 0xb4a <vfprintf+0xec>
     c14:	00 37       	cpi	r16, 0x70	; 112
     c16:	09 f1       	breq	.+66     	; 0xc5a <vfprintf+0x1fc>
     c18:	40 f4       	brcc	.+16     	; 0xc2a <vfprintf+0x1cc>
     c1a:	08 35       	cpi	r16, 0x58	; 88
     c1c:	01 f1       	breq	.+64     	; 0xc5e <vfprintf+0x200>
     c1e:	0f 36       	cpi	r16, 0x6F	; 111
     c20:	09 f0       	breq	.+2      	; 0xc24 <vfprintf+0x1c6>
     c22:	60 cf       	rjmp	.-320    	; 0xae4 <vfprintf+0x86>
     c24:	28 e0       	ldi	r18, 0x08	; 8
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	0c c0       	rjmp	.+24     	; 0xc42 <vfprintf+0x1e4>
     c2a:	05 37       	cpi	r16, 0x75	; 117
     c2c:	39 f0       	breq	.+14     	; 0xc3c <vfprintf+0x1de>
     c2e:	08 37       	cpi	r16, 0x78	; 120
     c30:	09 f0       	breq	.+2      	; 0xc34 <vfprintf+0x1d6>
     c32:	58 cf       	rjmp	.-336    	; 0xae4 <vfprintf+0x86>
     c34:	14 62       	ori	r17, 0x24	; 36
     c36:	20 e1       	ldi	r18, 0x10	; 16
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <vfprintf+0x1e4>
     c3c:	1f 7e       	andi	r17, 0xEF	; 239
     c3e:	2a e0       	ldi	r18, 0x0A	; 10
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	53 01       	movw	r10, r6
     c44:	17 ff       	sbrs	r17, 7
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <vfprintf+0x208>
     c48:	f4 e0       	ldi	r31, 0x04	; 4
     c4a:	af 0e       	add	r10, r31
     c4c:	b1 1c       	adc	r11, r1
     c4e:	f3 01       	movw	r30, r6
     c50:	60 81       	ld	r22, Z
     c52:	71 81       	ldd	r23, Z+1	; 0x01
     c54:	82 81       	ldd	r24, Z+2	; 0x02
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	85 cf       	rjmp	.-246    	; 0xb64 <vfprintf+0x106>
     c5a:	10 61       	ori	r17, 0x10	; 16
     c5c:	eb cf       	rjmp	.-42     	; 0xc34 <vfprintf+0x1d6>
     c5e:	14 60       	ori	r17, 0x04	; 4
     c60:	20 e1       	ldi	r18, 0x10	; 16
     c62:	32 e0       	ldi	r19, 0x02	; 2
     c64:	ee cf       	rjmp	.-36     	; 0xc42 <vfprintf+0x1e4>
     c66:	f2 e0       	ldi	r31, 0x02	; 2
     c68:	af 0e       	add	r10, r31
     c6a:	b1 1c       	adc	r11, r1
     c6c:	f3 01       	movw	r30, r6
     c6e:	60 81       	ld	r22, Z
     c70:	71 81       	ldd	r23, Z+1	; 0x01
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	76 cf       	rjmp	.-276    	; 0xb64 <vfprintf+0x106>
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	9f ef       	ldi	r25, 0xFF	; 255
     c7c:	36 cf       	rjmp	.-404    	; 0xaea <vfprintf+0x8c>

00000c7e <global constructors keyed to 65535_0_clock_firmware_production.ino.cpp.o.2557>:
_GLOBAL__I_65535_0_clock_firmware_production.ino.cpp.o.2557():
     c7e:	e8 e5       	ldi	r30, 0x58	; 88
     c80:	fc e3       	ldi	r31, 0x3C	; 60
     c82:	12 82       	std	Z+2, r1	; 0x02
     c84:	13 82       	std	Z+3, r1	; 0x03
     c86:	88 ee       	ldi	r24, 0xE8	; 232
     c88:	93 e0       	ldi	r25, 0x03	; 3
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	84 83       	std	Z+4, r24	; 0x04
     c90:	95 83       	std	Z+5, r25	; 0x05
     c92:	a6 83       	std	Z+6, r26	; 0x06
     c94:	b7 83       	std	Z+7, r27	; 0x07
     c96:	8d e1       	ldi	r24, 0x1D	; 29
     c98:	95 e9       	ldi	r25, 0x95	; 149
     c9a:	80 83       	st	Z, r24
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	98 e0       	ldi	r25, 0x08	; 8
     ca2:	84 87       	std	Z+12, r24	; 0x0c
     ca4:	95 87       	std	Z+13, r25	; 0x0d
     ca6:	16 86       	std	Z+14, r1	; 0x0e
     ca8:	17 86       	std	Z+15, r1	; 0x0f
     caa:	08 95       	ret

00000cac <main>:
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <main+0x6>
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <main+0x8>
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
init_clock():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1287
      #elif (F_CPU == 8000000) // 16MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
      #elif (F_CPU == 5000000) // 20MHz prescaled by 4
        /* Clock DIV4 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));
     cb8:	88 ed       	ldi	r24, 0xD8	; 216
     cba:	93 e0       	ldi	r25, 0x03	; 3
     cbc:	84 bf       	out	0x34, r24	; 52
     cbe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f6b48>
init_ADC0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1383
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      ADC0.CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  3000000    //  4 MHz /  4 = 1.0 MHz,   5 MHz /  4 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
     cc2:	81 e5       	ldi	r24, 0x51	; 81
     cc4:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f70e9>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1390
      ADC0.CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #endif
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      ADC0.SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      ADC0.SAMPCTRL = (13);   // 15 ADC clock,s 12 us
     cc8:	8d e0       	ldi	r24, 0x0D	; 13
     cca:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <vtable for UartClass+0x7f70ec>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1394
    #else
      ADC0.SAMPCTRL = (10); // 12 ADC clocks, 12 us
    #endif
    ADC0.CTRLD    = ADC_INITDLY_DLY16_gc;
     cce:	50 e2       	ldi	r21, 0x20	; 32
     cd0:	85 2e       	mov	r8, r21
     cd2:	80 92 03 06 	sts	0x0603, r8	; 0x800603 <vtable for UartClass+0x7f70ea>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1395
    ADC0.CTRLA    = ADC_ENABLE_bm;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <vtable for UartClass+0x7f70e7>
init_TCA0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1487
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     cdc:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <vtable for UartClass+0x7f74ea>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1492

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     ce0:	6e ef       	ldi	r22, 0xFE	; 254
     ce2:	96 2e       	mov	r9, r22
     ce4:	90 92 26 0a 	sts	0x0A26, r9	; 0x800a26 <vtable for UartClass+0x7f750d>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1493
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     ce8:	90 92 27 0a 	sts	0x0A27, r9	; 0x800a27 <vtable for UartClass+0x7f750e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1513
  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 1000000) // and use 16...
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
     cec:	19 e0       	ldi	r17, 0x09	; 9
     cee:	10 93 00 0a 	sts	0x0A00, r17	; 0x800a00 <vtable for UartClass+0x7f74e7>
init_millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1181
{
  #if defined(MILLIS_USE_TIMERNONE)
    badCall("init_millis() is only valid with millis time keeping enabled.");
  #else
    #if defined(MILLIS_USE_TIMERA0)
      TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
     cf2:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <vtable for UartClass+0x7f74f1>
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <vtable for UartClass+0x7f74f1>
init():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:1257
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
     cfc:	78 94       	sei
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
     cfe:	78 94       	sei
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:27
uint16_t safeLowVoltage   = 31; //3.0V

uint8_t currTime[6];

void setup() {
  disableSerialHWPins();
     d00:	af db       	rcall	.-2210   	; 0x460 <disableSerialHWPins()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:28
  disableTWI();
     d02:	9f db       	rcall	.-2242   	; 0x442 <disableTWI()>
disableUnusedPins():
     d04:	88 e0       	ldi	r24, 0x08	; 8
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:11
  License: MIT
*/

void disableUnusedPins() {
  //  Set them to input pull and do not keep them floating
  PORTC.PIN0CTRL = PORT_PULLUPEN_bm;
     d06:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <vtable for UartClass+0x7f6f37>
     d0a:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <vtable for UartClass+0x7f6f38>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:12
  PORTC.PIN1CTRL = PORT_PULLUPEN_bm;
     d0e:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <vtable for UartClass+0x7f6f3a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:13
  PORTC.PIN3CTRL = PORT_PULLUPEN_bm;
     d12:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <vtable for UartClass+0x7f6f3b>
setupDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:14
  PORTC.PIN4CTRL = PORT_PULLUPEN_bm;
     d16:	80 92 41 04 	sts	0x0441, r8	; 0x800441 <vtable for UartClass+0x7f6f28>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:29
unsigned long currentWarningCountMillis;


void setupDisplay() {
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
     d1a:	80 92 46 04 	sts	0x0446, r8	; 0x800446 <vtable for UartClass+0x7f6f2d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:30
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off
     d1e:	90 92 01 04 	sts	0x0401, r9	; 0x800401 <vtable for UartClass+0x7f6ee8>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:33

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
     d22:	80 ef       	ldi	r24, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:36

  //  Anode Pins for LEDS
  PORTB.DIRSET = 0b11110000;
     d24:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <vtable for UartClass+0x7f6f08>
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:35
  //--- Disable unused pins (i.e do not keep them floating) | For efficient low power in sleep mode ---//
  disableUnusedPins();

  //--- Seven segment display initialization ---//
  setupDisplay();
  turnOffDisplay();
     d28:	a5 db       	rcall	.-2230   	; 0x474 <turnOffDisplay()>
setupButtons():
     d2a:	10 93 52 04 	sts	0x0452, r17	; 0x800452 <vtable for UartClass+0x7f6f39>
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:48



//--- Buttons initialization ---//
void setupButtons() {
  PORTC.PIN2CTRL = 0b00001001; // in INPUT pullup mode - will trigger an async ISR // for wakeup from sleep
     d2e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <vtable for UartClass+0x7f7307>
  //--- Enable ADC ---//
  // ADC0.CTRLA |= ADC_ENABLE_bm;


  //--- disable SPI ---//
  SPI0.CTRLA &= ~(SPI_ENABLE_bm);
     d32:	8e 7f       	andi	r24, 0xFE	; 254
     d34:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <vtable for UartClass+0x7f7307>
     d38:	78 94       	sei
millis():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:51

  // Enable interrupt
  sei();
     d3a:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     d3c:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:227
  cli();
     d3e:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     d42:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <timer_millis+0x1>
     d46:	a0 91 4a 3c 	lds	r26, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     d4a:	b0 91 4b 3c 	lds	r27, 0x3C4B	; 0x803c4b <timer_millis+0x3>
     d4e:	2f bf       	out	0x3f, r18	; 63
setup():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     d50:	80 93 1f 3c 	sts	0x3C1F, r24	; 0x803c1f <startCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:54

  // Setup some counters...
  startCountMillis = millis();        // For the ext rtc
     d54:	90 93 20 3c 	sts	0x3C20, r25	; 0x803c20 <startCountMillis+0x1>
     d58:	a0 93 21 3c 	sts	0x3C21, r26	; 0x803c21 <startCountMillis+0x2>
     d5c:	b0 93 22 3c 	sts	0x3C22, r27	; 0x803c22 <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:55
  startMicros = micros();             // For display fps
     d60:	41 db       	rcall	.-2430   	; 0x3e4 <micros>
     d62:	60 93 1b 3c 	sts	0x3C1B, r22	; 0x803c1b <startMicros>
     d66:	70 93 1c 3c 	sts	0x3C1C, r23	; 0x803c1c <startMicros+0x1>
     d6a:	80 93 1d 3c 	sts	0x3C1D, r24	; 0x803c1d <startMicros+0x2>
     d6e:	90 93 1e 3c 	sts	0x3C1E, r25	; 0x803c1e <startMicros+0x3>
millis():
     d72:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     d74:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:227
  cli();
     d76:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     d7a:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <timer_millis+0x1>
     d7e:	a0 91 4a 3c 	lds	r26, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     d82:	b0 91 4b 3c 	lds	r27, 0x3C4B	; 0x803c4b <timer_millis+0x3>
     d86:	2f bf       	out	0x3f, r18	; 63
setup():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     d88:	80 93 4f 3c 	sts	0x3C4F, r24	; 0x803c4f <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:56
  startWarningCountMillis = millis(); // For battery low voltage warning LED blinking
     d8c:	90 93 50 3c 	sts	0x3C50, r25	; 0x803c50 <startWarningCountMillis+0x1>
     d90:	a0 93 51 3c 	sts	0x3C51, r26	; 0x803c51 <startWarningCountMillis+0x2>
     d94:	b0 93 52 3c 	sts	0x3C52, r27	; 0x803c52 <startWarningCountMillis+0x3>
     d98:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <vtable for UartClass+0x7f6b37>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:59

  //--- Sleep mode enablers ---//
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     d9c:	89 7f       	andi	r24, 0xF9	; 249
     d9e:	84 60       	ori	r24, 0x04	; 4
     da0:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <vtable for UartClass+0x7f6b37>
     da4:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <vtable for UartClass+0x7f6b37>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:60
  sleep_enable();
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <vtable for UartClass+0x7f6b37>
ADCVoltRefSetup():
     dae:	70 e1       	ldi	r23, 0x10	; 16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:42
//----- LOW VOLTAGE CALCULATION -----//
//-----------------------------------//
// Courtesy: http://www.technoblogy.com/show?3K82 & http://www.technoblogy.com/list?3KKM

void ADCVoltRefSetup() {
  VREF.CTRLA = VREF_ADC0REFSEL_1V1_gc;
     db0:	57 2e       	mov	r5, r23
batteryWarningLED_OFF():
     db2:	e0 ef       	ldi	r30, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:120



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     db4:	7e 2e       	mov	r7, r30
loop():
     db6:	44 24       	eor	r4, r4
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:94
    //      Serial.println(" V");
    //    }

    batteryWarningLED_OFF();      // On wake up, initialize the warning led dot of the segment to be OFF
    turnOffDisplay();             // On wake up, initialize the whole display segment to be OFF
    do_blink = 1;                 // On wake up, initializing the variable for low voltage warning blinking action.
     db8:	43 94       	inc	r4
     dba:	31 2c       	mov	r3, r1
     dbc:	fb ed       	ldi	r31, 0xDB	; 219
     dbe:	ef 2e       	mov	r14, r31
     dc0:	fc e3       	ldi	r31, 0x3C	; 60
     dc2:	ff 2e       	mov	r15, r31
     dc4:	ad e3       	ldi	r26, 0x3D	; 61
     dc6:	ca 2e       	mov	r12, r26
     dc8:	ac e3       	ldi	r26, 0x3C	; 60
     dca:	da 2e       	mov	r13, r26
     dcc:	80 91 55 3c 	lds	r24, 0x3C55	; 0x803c55 <showCurrTimePressed>
watchButtons():
     dd0:	90 91 23 3c 	lds	r25, 0x3C23	; 0x803c23 <wakeUpTriggered>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:53
}


void watchButtons() {
  if (wakeUpTriggered == 1) {
     dd4:	91 30       	cpi	r25, 0x01	; 1
     dd6:	41 f4       	brne	.+16     	; 0xde8 <main+0x13c>
     dd8:	10 92 23 3c 	sts	0x3C23, r1	; 0x803c23 <wakeUpTriggered>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:54
    wakeUpTriggered = 0;
     ddc:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <vtable for UartClass+0x7f6f2f>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:59

    //    if (debug_log) Serial.println(F("Interrupt-1 fired. Awaking device & reading Pins.."));

    // Read PC2
    SW_OneState = PORTC.IN & PIN2_bm;
     de0:	82 ff       	sbrs	r24, 2
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:61

    if (SW_OneState) {
     de2:	04 c0       	rjmp	.+8      	; 0xdec <main+0x140>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	f4 cf       	rjmp	.-24     	; 0xdd0 <main+0x124>
loop():
     de8:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:69


void loop() {
  watchButtons();

  if (showCurrTimePressed) {
     dea:	e1 f3       	breq	.-8      	; 0xde4 <main+0x138>
     dec:	10 92 55 3c 	sts	0x3C55, r1	; 0x803c55 <showCurrTimePressed>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:70
    showCurrTimePressed = false;
     df0:	40 e0       	ldi	r20, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:73

    //--- Enable Serial for time setting over serial ---//
    Serial.begin(115200);
     df2:	52 ec       	ldi	r21, 0xC2	; 194
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	88 e5       	ldi	r24, 0x58	; 88
     dfa:	9c e3       	ldi	r25, 0x3C	; 60
     dfc:	68 dc       	rcall	.-1840   	; 0x6ce <UartClass::begin(unsigned long)>
init():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     dfe:	11 e0       	ldi	r17, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:19
{
}

void TinyMegaI2CMaster::init()
{
  pinMode(PIN_WIRE_SDA, INPUT_PULLUP);
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	8a e0       	ldi	r24, 0x0A	; 10
     e04:	6d dc       	rcall	.-1830   	; 0x6e0 <pinMode>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:20
  pinMode(PIN_WIRE_SCL, INPUT_PULLUP);
     e06:	62 e0       	ldi	r22, 0x02	; 2
     e08:	8b e0       	ldi	r24, 0x0B	; 11
     e0a:	6a dc       	rcall	.-1836   	; 0x6e0 <pinMode>
     e0c:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <vtable for UartClass+0x7f72fd>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     e10:	10 93 13 08 	sts	0x0813, r17	; 0x800813 <vtable for UartClass+0x7f72fa>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:29
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     e14:	10 93 15 08 	sts	0x0815, r17	; 0x800815 <vtable for UartClass+0x7f72fc>
begin():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	80 d9       	rcall	.-3328   	; 0x11e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>
     e1e:	88 23       	and	r24, r24
     e20:	09 f4       	brne	.+2      	; 0xe24 <main+0x178>
     e22:	54 c0       	rjmp	.+168    	; 0xecc <main+0x220>
setupRTC():
     e24:	10 93 53 3c 	sts	0x3C53, r17	; 0x803c53 <rtcAvailable>
ADCVoltRefSetup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:25

void setupRTC() {
  while (rtc.begin() == false) { // un-shifted default address for RV-8803 is 0x32. Check library!
    rtcAvailable = false;
  }
  rtcAvailable = true;
     e28:	50 92 a0 00 	sts	0x00A0, r5	; 0x8000a0 <vtable for UartClass+0x7f6b87>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:42
     e2c:	87 e1       	ldi	r24, 0x17	; 23
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:43
  ADC0.CTRLC = ADC_REFSEL_VDDREF_gc | ADC_PRESC_DIV256_gc; // 78kHz clock
     e2e:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f70e9>
     e32:	8d e1       	ldi	r24, 0x1D	; 29
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:44
  ADC0.MUXPOS = ADC_MUXPOS_INTREF_gc;                      // Measure INTREF
     e34:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <vtable for UartClass+0x7f70ed>
     e38:	10 93 00 06 	sts	0x0600, r17	; 0x800600 <vtable for UartClass+0x7f70e7>
measuredVoltage():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:45
  ADC0.CTRLA = ADC_ENABLE_bm;                              // Single, 10-bit
     e3c:	10 93 08 06 	sts	0x0608, r17	; 0x800608 <vtable for UartClass+0x7f70ef>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:50
}

uint16_t measuredVoltage() {
  uint16_t  v;
  ADC0.COMMAND = ADC_STCONV_bm;                            // Start conversion
     e40:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <vtable for UartClass+0x7f70ef>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:51
  while (ADC0.COMMAND & ADC_STCONV_bm);                    // Wait for completion
     e44:	80 fd       	sbrc	r24, 0
     e46:	fc cf       	rjmp	.-8      	; 0xe40 <main+0x194>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:52
  uint16_t adc_reading = ADC0.RES;                         // ADC conversion result
     e48:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <vtable for UartClass+0x7f70f7>
     e4c:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <vtable for UartClass+0x7f70f8>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/ExtraUtils.h:53
  v = 11264 / adc_reading;
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	9c e2       	ldi	r25, 0x2C	; 44
     e54:	e0 d2       	rcall	.+1472   	; 0x1416 <__udivmodhi4>
     e56:	8b 01       	movw	r16, r22
batteryWarningLED_OFF():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:119
}



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
     e58:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:120
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     e5a:	70 92 25 04 	sts	0x0425, r7	; 0x800425 <vtable for UartClass+0x7f6f0c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:121
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     e5e:	40 e2       	ldi	r20, 0x20	; 32
     e60:	a4 2e       	mov	r10, r20
     e62:	a0 92 46 04 	sts	0x0446, r10	; 0x800446 <vtable for UartClass+0x7f6f2d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:122
  sei();                      // Attach interrupt again
     e66:	78 94       	sei
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:93
    //      Serial.print(float(currBattVolt) / 10);
    //      Serial.println(" V");
    //    }

    batteryWarningLED_OFF();      // On wake up, initialize the warning led dot of the segment to be OFF
    turnOffDisplay();             // On wake up, initialize the whole display segment to be OFF
     e68:	05 db       	rcall	.-2550   	; 0x474 <turnOffDisplay()>
     e6a:	40 92 08 3c 	sts	0x3C08, r4	; 0x803c08 <do_blink>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:94
    do_blink = 1;                 // On wake up, initializing the variable for low voltage warning blinking action.
     e6e:	30 92 09 3c 	sts	0x3C09, r3	; 0x803c09 <do_blink+0x1>
     e72:	80 91 06 3c 	lds	r24, 0x3C06	; 0x803c06 <stayAwakeFor>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:97


    RTC_DELAY_init(stayAwakeFor); // Start the timer for keeping track of time for how long to keep the uC awake and do it's business (5000 ms)
     e76:	90 91 07 3c 	lds	r25, 0x3C07	; 0x803c07 <stayAwakeFor+0x1>
RTC_DELAY_init():
     e7a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <vtable for UartClass+0x7f6c2e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:30
}


//--- uC's internal RTC & interrupt based based delay method ---//
void RTC_DELAY_init(int RTCdelay) {
  RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;    // 32.768kHz Internal Crystal Oscillator (INT32K)
     e7e:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <vtable for UartClass+0x7f6c28>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:31
  while (RTC.STATUS > 0);               // Wait for all register to be synchronized
     e82:	21 11       	cpse	r18, r1
     e84:	fc cf       	rjmp	.-8      	; 0xe7e <main+0x1d2>
     e86:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <vtable for UartClass+0x7f6c31>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:32
  RTC.PER = RTCdelay;                   // Set period for delay
     e8a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <vtable for UartClass+0x7f6c32>
     e8e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <vtable for UartClass+0x7f6c29>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:33
  RTC.INTCTRL |= RTC_OVF_bm;            // Enable overflow Interrupt which will trigger ISR
     e92:	81 60       	ori	r24, 0x01	; 1
     e94:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <vtable for UartClass+0x7f6c29>
     e98:	89 ea       	ldi	r24, 0xA9	; 169
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Buttons.h:34
  RTC.CTRLA = RTC_PRESCALER_DIV32_gc    // 32768 / 32 = 1024 (sec) ~ 1 ms
     e9a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <vtable for UartClass+0x7f6c27>
fillDataArray():
     e9e:	66 24       	eor	r6, r6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:47
  newDataArrived = false;

  while (Serial.available() > 0) {
    incomingChar = Serial.read();
    if (incomingChar == '\n') {
      newDataArrived = true;
     ea0:	63 94       	inc	r6
stop():
     ea2:	37 e0       	ldi	r19, 0x07	; 7
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     ea4:	23 2e       	mov	r2, r19
loop():
     ea6:	80 91 54 3c 	lds	r24, 0x3C54	; 0x803c54 <showTimePeriodOver>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:99

    while (showTimePeriodOver == 0) {
     eaa:	81 11       	cpse	r24, r1
     eac:	70 c1       	rjmp	.+736    	; 0x118e <main+0x4e2>
     eae:	0f 31       	cpi	r16, 0x1F	; 31
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:101
      // If voltage detected is lower than the safe operational voltage threshold!
      if (currBattVolt < safeLowVoltage && currBattVolt <= unsafeLowVoltage) {
     eb0:	11 05       	cpc	r17, r1
     eb2:	08 f0       	brcs	.+2      	; 0xeb6 <main+0x20a>
     eb4:	88 c1       	rjmp	.+784    	; 0x11c6 <main+0x51a>
     eb6:	0d 31       	cpi	r16, 0x1D	; 29
     eb8:	11 05       	cpc	r17, r1
     eba:	e0 f4       	brcc	.+56     	; 0xef4 <main+0x248>
batteryWarningLED_ON():
     ebc:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:110
}



void batteryWarningLED_ON() {
  cli();                      // Detach interrupt (to avoid any glitch)
     ebe:	50 92 27 04 	sts	0x0427, r5	; 0x800427 <vtable for UartClass+0x7f6f0e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:111
  PORTB.OUTTGL = 0b00010000;  // Toggle the ANODE bit responsible for our LED dot in the matrix
     ec2:	20 e2       	ldi	r18, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:112
  VPORTC.OUT = PIN5_bm;       // Quickly set the pin PC5 to high with this spl method.
     ec4:	b2 2e       	mov	r11, r18
     ec6:	b9 b8       	out	0x09, r11	; 9
     ec8:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:113
  sei();                      // Attach interrupt again
     eca:	ed cf       	rjmp	.-38     	; 0xea6 <main+0x1fa>
setupRTC():
     ecc:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <rtcAvailable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/RTCManager.h:23



void setupRTC() {
  while (rtc.begin() == false) { // un-shifted default address for RV-8803 is 0x32. Check library!
    rtcAvailable = false;
     ed0:	97 cf       	rjmp	.-210    	; 0xe00 <main+0x154>
low_voltage_warn():
     ed2:	80 91 4c 3c 	lds	r24, 0x3C4C	; 0x803c4c <tog>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:151
        break;
      }

      //--- Toggle PC5 (Battery warning LED dot) output on and off mechanism ---//
      byte dot_pin_mask = 0b00010000; // mask to make the cathide bit, responsible for our led dot to toggle
      tog = !tog;
     ed6:	86 25       	eor	r24, r6
     ed8:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <tog>
     edc:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:152
      if (tog) {
     ede:	09 f4       	brne	.+2      	; 0xee2 <main+0x236>
     ee0:	55 c0       	rjmp	.+170    	; 0xf8c <main+0x2e0>
main():
     ee2:	80 e1       	ldi	r24, 0x10	; 16
low_voltage_warn():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:153
        dot_pin_mask = 0b00010000;
     ee4:	70 92 25 04 	sts	0x0425, r7	; 0x800425 <vtable for UartClass+0x7f6f0c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:159
      } else {
        dot_pin_mask = 0b00000000;
      }

      //      PORTC.OUTCLR = PIN5_bm;       // Set the pin LOW
      PORTB.OUTSET = 0b11110000;    // Deactivate all on PORTB bits to which the COMMON CATHODE pins of our LED segment are connected, which are  by setting them HIGH
     ee8:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:160
      cli();                        // Detach interrupt (to avoid any glitch)
     eea:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <vtable for UartClass+0x7f6f0e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:161
      PORTB.OUTTGL = dot_pin_mask;  // Toggle the cathode bit responsible for our LED dot in the matrix
     eee:	40 e2       	ldi	r20, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:162
      VPORTC.OUT = PIN5_bm;         // Quickly set the pin to high with this spl method.
     ef0:	49 b9       	out	0x09, r20	; 9
     ef2:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:163
      sei();                        // Attach interrupt again
     ef4:	80 91 08 3c 	lds	r24, 0x3C08	; 0x803c08 <do_blink>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:133
// This function show a warning LED for (total ON period)/2 seconds
// and then shows the time...
void low_voltage_warn() {
  // Block code to only blink warning LED
  // while (true) {
  while (do_blink == 1) {
     ef8:	90 91 09 3c 	lds	r25, 0x3C09	; 0x803c09 <do_blink+0x1>
     efc:	01 97       	sbiw	r24, 0x01	; 1
     efe:	09 f0       	breq	.+2      	; 0xf02 <main+0x256>
     f00:	43 c0       	rjmp	.+134    	; 0xf88 <main+0x2dc>
millis():
     f02:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     f04:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:227
  cli();
     f06:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     f0a:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <timer_millis+0x1>
     f0e:	a0 91 4a 3c 	lds	r26, 0x3C4A	; 0x803c4a <timer_millis+0x2>
     f12:	b0 91 4b 3c 	lds	r27, 0x3C4B	; 0x803c4b <timer_millis+0x3>
     f16:	2f bf       	out	0x3f, r18	; 63
low_voltage_warn():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.4/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     f18:	20 91 4f 3c 	lds	r18, 0x3C4F	; 0x803c4f <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:135
    currentWarningCountMillis = millis();
    if (currentWarningCountMillis - startWarningCountMillis >= warning_blink_gap) {
     f1c:	30 91 50 3c 	lds	r19, 0x3C50	; 0x803c50 <startWarningCountMillis+0x1>
     f20:	40 91 51 3c 	lds	r20, 0x3C51	; 0x803c51 <startWarningCountMillis+0x2>
     f24:	50 91 52 3c 	lds	r21, 0x3C52	; 0x803c52 <startWarningCountMillis+0x3>
     f28:	4c 01       	movw	r8, r24
     f2a:	5d 01       	movw	r10, r26
     f2c:	82 1a       	sub	r8, r18
     f2e:	93 0a       	sbc	r9, r19
     f30:	a4 0a       	sbc	r10, r20
     f32:	b5 0a       	sbc	r11, r21
     f34:	a5 01       	movw	r20, r10
     f36:	94 01       	movw	r18, r8
     f38:	2d 37       	cpi	r18, 0x7D	; 125
     f3a:	31 05       	cpc	r19, r1
     f3c:	41 05       	cpc	r20, r1
     f3e:	51 05       	cpc	r21, r1
     f40:	c8 f2       	brcs	.-78     	; 0xef4 <main+0x248>
     f42:	80 93 4f 3c 	sts	0x3C4F, r24	; 0x803c4f <startWarningCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:137

      startWarningCountMillis = currentWarningCountMillis;
     f46:	90 93 50 3c 	sts	0x3C50, r25	; 0x803c50 <startWarningCountMillis+0x1>
     f4a:	a0 93 51 3c 	sts	0x3C51, r26	; 0x803c51 <startWarningCountMillis+0x2>
     f4e:	b0 93 52 3c 	sts	0x3C52, r27	; 0x803c52 <startWarningCountMillis+0x3>
     f52:	80 91 4d 3c 	lds	r24, 0x3C4D	; 0x803c4d <blink_count>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:139

      blink_count++;
     f56:	90 91 4e 3c 	lds	r25, 0x3C4E	; 0x803c4e <blink_count+0x1>
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	80 93 4d 3c 	sts	0x3C4D, r24	; 0x803c4d <blink_count>
     f60:	90 93 4e 3c 	sts	0x3C4E, r25	; 0x803c4e <blink_count+0x1>
     f64:	05 97       	sbiw	r24, 0x05	; 5
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:141

      if (blink_count >= max_blinks) {
     f66:	0c f4       	brge	.+2      	; 0xf6a <main+0x2be>
     f68:	b4 cf       	rjmp	.-152    	; 0xed2 <main+0x226>
batteryWarningLED_OFF():
     f6a:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:119
}



void batteryWarningLED_OFF() {
  cli();                      // Detach interrupt (to avoid any glitch)
     f6c:	70 92 25 04 	sts	0x0425, r7	; 0x800425 <vtable for UartClass+0x7f6f0c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:120
  PORTB.OUTSET = 0b11110000;  // Deactivate all on PORTB bits to which the ANODE pins of our LED segment are connected, which are  by setting them HIGH
     f70:	30 e2       	ldi	r19, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:121
  PORTC.OUTCLR = PIN5_bm;     // Turn PC5 (our LED dot's CATHODE for batter warning LED) off
     f72:	30 93 46 04 	sts	0x0446, r19	; 0x800446 <vtable for UartClass+0x7f6f2d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:122
  sei();                      // Attach interrupt again
     f76:	78 94       	sei
low_voltage_warn():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:144
      blink_count++;

      if (blink_count >= max_blinks) {
        //--- Clear and Stop the blinking LED ---//
        batteryWarningLED_OFF();
        blink_count = 0;
     f78:	10 92 4d 3c 	sts	0x3C4D, r1	; 0x803c4d <blink_count>
     f7c:	10 92 4e 3c 	sts	0x3C4E, r1	; 0x803c4e <blink_count+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:145
        do_blink = 0;
     f80:	10 92 08 3c 	sts	0x3C08, r1	; 0x803c08 <do_blink>
     f84:	10 92 09 3c 	sts	0x3C09, r1	; 0x803c09 <do_blink+0x1>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:110
      // If voltage detected is low but not critically low and below safest threshold!
      if (currBattVolt < safeLowVoltage && currBattVolt > unsafeLowVoltage) {
        // Blocks and Blinks a dot LED, 2 times (in 1250 ms) as the warning to show that the battery voltage is falling.
        low_voltage_warn();
        // In the next remaining period [ (5000-1250)ms ] of the whole awake period, it continues to show the time.
        getAndShowTime();
     f88:	e4 da       	rcall	.-2616   	; 0x552 <getAndShowTime()>
     f8a:	8d cf       	rjmp	.-230    	; 0xea6 <main+0x1fa>
main():
     f8c:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/DisplayManager.h:155
      byte dot_pin_mask = 0b00010000; // mask to make the cathide bit, responsible for our led dot to toggle
      tog = !tog;
      if (tog) {
        dot_pin_mask = 0b00010000;
      } else {
        dot_pin_mask = 0b00000000;
     f8e:	aa cf       	rjmp	.-172    	; 0xee4 <main+0x238>
fillDataArray():
     f90:	10 92 3f 3c 	sts	0x3C3F, r1	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:50
      idx = 0;
    } else {
      newDataArrived = false;
     f94:	20 91 24 3c 	lds	r18, 0x3C24	; 0x803c24 <idx>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:51
      dataArray[idx] = incomingChar;
     f98:	30 91 25 3c 	lds	r19, 0x3C25	; 0x803c25 <idx+0x1>
     f9c:	f9 01       	movw	r30, r18
     f9e:	ea 5d       	subi	r30, 0xDA	; 218
     fa0:	f3 4c       	sbci	r31, 0xC3	; 195
     fa2:	80 83       	st	Z, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:52
      idx++;
     fa4:	2f 5f       	subi	r18, 0xFF	; 255
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	20 93 24 3c 	sts	0x3C24, r18	; 0x803c24 <idx>
     fac:	30 93 25 3c 	sts	0x3C25, r19	; 0x803c25 <idx+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:44


void fillDataArray() {
  newDataArrived = false;

  while (Serial.available() > 0) {
     fb0:	88 e5       	ldi	r24, 0x58	; 88
     fb2:	9c e3       	ldi	r25, 0x3C	; 60
     fb4:	73 d9       	rcall	.-3354   	; 0x29c <UartClass::available()>
     fb6:	18 16       	cp	r1, r24
     fb8:	19 06       	cpc	r1, r25
     fba:	64 f4       	brge	.+24     	; 0xfd4 <main+0x328>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:45
    incomingChar = Serial.read();
     fbc:	88 e5       	ldi	r24, 0x58	; 88
     fbe:	9c e3       	ldi	r25, 0x3C	; 60
     fc0:	4b d9       	rcall	.-3434   	; 0x258 <UartClass::read()>
     fc2:	8a 30       	cpi	r24, 0x0A	; 10
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:46
    if (incomingChar == '\n') {
     fc4:	29 f7       	brne	.-54     	; 0xf90 <main+0x2e4>
     fc6:	60 92 3f 3c 	sts	0x3C3F, r6	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:47
      newDataArrived = true;
     fca:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <idx>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:48
      idx = 0;
     fce:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <idx+0x1>
     fd2:	ee cf       	rjmp	.-36     	; 0xfb0 <main+0x304>
parseDataArray():
     fd4:	80 91 3f 3c 	lds	r24, 0x3C3F	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:61

// 02:18:19:6:25:06:2021    (totalDelimators == 6)
// 02:18:19:6:25:06:2021:5  (totalDelimators == 7)
// 02:18:19:6:25:06:2021:5:1(totalDelimators == 8)
void parseDataArray() {
  if (newDataArrived) {
     fd8:	88 23       	and	r24, r24
     fda:	09 f4       	brne	.+2      	; 0xfde <main+0x332>
     fdc:	d2 c0       	rjmp	.+420    	; 0x1182 <main+0x4d6>
     fde:	10 92 3f 3c 	sts	0x3C3F, r1	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:62
    newDataArrived = false;
     fe2:	e6 e2       	ldi	r30, 0x26	; 38
     fe4:	fc e3       	ldi	r31, 0x3C	; 60
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	21 91       	ld	r18, Z+
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:67
    totalDelimators = 0;

    // Count how many delimators (in our case that is ':') are there
    for (int i = 0; i < sizeOfDataStructure; i++) {
      if (dataArray[i] == ':') {
     fec:	2a 33       	cpi	r18, 0x3A	; 58
     fee:	09 f4       	brne	.+2      	; 0xff2 <main+0x346>
     ff0:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:68
        totalDelimators++;
     ff2:	ce 16       	cp	r12, r30
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:66
  if (newDataArrived) {
    newDataArrived = false;
    totalDelimators = 0;

    // Count how many delimators (in our case that is ':') are there
    for (int i = 0; i < sizeOfDataStructure; i++) {
     ff4:	df 06       	cpc	r13, r31
     ff6:	c9 f7       	brne	.-14     	; 0xfea <main+0x33e>
     ff8:	80 93 3d 3c 	sts	0x3C3D, r24	; 0x803c3d <totalDelimators>
     ffc:	90 93 3e 3c 	sts	0x3C3E, r25	; 0x803c3e <totalDelimators+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:73
        totalDelimators++;
      }
    }

    // Check received data's format & integrity
    if (totalDelimators >= 6) {  // or 6/7/8 based on the stream ends with year value or with additional delay value or with enable tilt flag
    1000:	06 97       	sbiw	r24, 0x06	; 6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:75
      char * strtokIndx; // this is used by strtok() as an index
      strtokIndx = strtok(dataArray, ":"); // get the first part - the string
    1002:	0c f4       	brge	.+2      	; 0x1006 <main+0x35a>
    1004:	50 c0       	rjmp	.+160    	; 0x10a6 <main+0x3fa>
    1006:	63 e3       	ldi	r22, 0x33	; 51
    1008:	75 e9       	ldi	r23, 0x95	; 149
    100a:	86 e2       	ldi	r24, 0x26	; 38
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:77

      hrToBeSet = atoi(strtokIndx);        // convert this part to an integer
    100c:	9c e3       	ldi	r25, 0x3C	; 60
    100e:	37 d1       	rcall	.+622    	; 0x127e <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:78
      strtokIndx = strtok(NULL, ":");      // this continues where the previous call left off
    1010:	0e d1       	rcall	.+540    	; 0x122e <atoi>
    1012:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <hrToBeSet>
    1016:	63 e3       	ldi	r22, 0x33	; 51
    1018:	75 e9       	ldi	r23, 0x95	; 149
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:79
      minToBeSet = atoi(strtokIndx);       // convert this part to an integer
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	2f d1       	rcall	.+606    	; 0x127e <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:80
      strtokIndx = strtok(NULL, ":");
    1020:	06 d1       	rcall	.+524    	; 0x122e <atoi>
    1022:	80 93 41 3c 	sts	0x3C41, r24	; 0x803c41 <minToBeSet>
    1026:	63 e3       	ldi	r22, 0x33	; 51
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:81
      secToBeSet = atoi(strtokIndx);
    1028:	75 e9       	ldi	r23, 0x95	; 149
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	27 d1       	rcall	.+590    	; 0x127e <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:82
      strtokIndx = strtok(NULL, ":");
    1030:	fe d0       	rcall	.+508    	; 0x122e <atoi>
    1032:	80 93 40 3c 	sts	0x3C40, r24	; 0x803c40 <secToBeSet>
    1036:	63 e3       	ldi	r22, 0x33	; 51
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:83
      weekdayToBeSet = atoi(strtokIndx);
    1038:	75 e9       	ldi	r23, 0x95	; 149
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:84
      strtokIndx = strtok(NULL, ":");
    103e:	1f d1       	rcall	.+574    	; 0x127e <strtok>
    1040:	f6 d0       	rcall	.+492    	; 0x122e <atoi>
    1042:	80 93 43 3c 	sts	0x3C43, r24	; 0x803c43 <weekdayToBeSet>
    1046:	63 e3       	ldi	r22, 0x33	; 51
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:85
      dateToBeSet = atoi(strtokIndx);
    1048:	75 e9       	ldi	r23, 0x95	; 149
    104a:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:86
      strtokIndx = strtok(NULL, ":");
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	17 d1       	rcall	.+558    	; 0x127e <strtok>
    1050:	ee d0       	rcall	.+476    	; 0x122e <atoi>
    1052:	80 93 44 3c 	sts	0x3C44, r24	; 0x803c44 <dateToBeSet>
    1056:	63 e3       	ldi	r22, 0x33	; 51
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:87
      monthToBeSet = atoi(strtokIndx);
    1058:	75 e9       	ldi	r23, 0x95	; 149
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0f d1       	rcall	.+542    	; 0x127e <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:88
      strtokIndx = strtok(NULL, ":");
    1060:	e6 d0       	rcall	.+460    	; 0x122e <atoi>
    1062:	80 93 45 3c 	sts	0x3C45, r24	; 0x803c45 <monthToBeSet>
    1066:	63 e3       	ldi	r22, 0x33	; 51
    1068:	75 e9       	ldi	r23, 0x95	; 149
    106a:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:89
      yearToBeSet = atoi(strtokIndx);
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	07 d1       	rcall	.+526    	; 0x127e <strtok>
    1070:	de d0       	rcall	.+444    	; 0x122e <atoi>
    1072:	80 93 46 3c 	sts	0x3C46, r24	; 0x803c46 <yearToBeSet>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:90
      strtokIndx = strtok(NULL, ":");
    1076:	63 e3       	ldi	r22, 0x33	; 51
    1078:	75 e9       	ldi	r23, 0x95	; 149
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	ff d0       	rcall	.+510    	; 0x127e <strtok>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:91
      new_stayAwakeFor = (atoi(strtokIndx)) * 1000; // data strcture: "...:x" where x is in sec which needs to be converted in milli seconds; hence *1000
    1080:	d6 d0       	rcall	.+428    	; 0x122e <atoi>
    1082:	fc 01       	movw	r30, r24
    1084:	98 ee       	ldi	r25, 0xE8	; 232
    1086:	89 2e       	mov	r8, r25
    1088:	93 e0       	ldi	r25, 0x03	; 3
    108a:	99 2e       	mov	r9, r25
    108c:	e8 9d       	mul	r30, r8
    108e:	c0 01       	movw	r24, r0
    1090:	e9 9d       	mul	r30, r9
    1092:	90 0d       	add	r25, r0
    1094:	f8 9d       	mul	r31, r8
    1096:	90 0d       	add	r25, r0
    1098:	11 24       	eor	r1, r1
    109a:	80 93 04 3c 	sts	0x3C04, r24	; 0x803c04 <new_stayAwakeFor>
    109e:	90 93 05 3c 	sts	0x3C05, r25	; 0x803c05 <new_stayAwakeFor+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:104
      //        Serial.print("DATE: "); Serial.print(dateToBeSet); Serial.print("-"); Serial.print(monthToBeSet); Serial.print("-"); Serial.println(yearToBeSet);
      //        Serial.print("MS operational delay: "); Serial.println(nd);
      //        Serial.print("Tilt SW enable Flag"); Serial.println(nd);
      //      }

      setNewTime = true;
    10a2:	60 92 47 3c 	sts	0x3C47, r6	; 0x803c47 <setNewTime>
setRTCToNewTime():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:114
}



void setRTCToNewTime() {
  if (setNewTime) {
    10a6:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <setNewTime>
    10aa:	88 23       	and	r24, r24
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <main+0x404>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:117
    //    if (debug_log) Serial.println(F("Setting custom time..."));

    if (rtc.setTime(secToBeSet, minToBeSet, hrToBeSet, weekdayToBeSet, dateToBeSet, monthToBeSet, yearToBeSet) == false) {
    10ae:	6c cf       	rjmp	.-296    	; 0xf88 <main+0x2dc>
    10b0:	20 91 46 3c 	lds	r18, 0x3C46	; 0x803c46 <yearToBeSet>
    10b4:	30 91 45 3c 	lds	r19, 0x3C45	; 0x803c45 <monthToBeSet>
    10b8:	50 91 44 3c 	lds	r21, 0x3C44	; 0x803c44 <dateToBeSet>
    10bc:	40 91 43 3c 	lds	r20, 0x3C43	; 0x803c43 <weekdayToBeSet>
    10c0:	e0 91 42 3c 	lds	r30, 0x3C42	; 0x803c42 <hrToBeSet>
    10c4:	f0 91 41 3c 	lds	r31, 0x3C41	; 0x803c41 <minToBeSet>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    10c8:	80 91 40 3c 	lds	r24, 0x3C40	; 0x803c40 <secToBeSet>
DECtoBCD():
    10cc:	6a e0       	ldi	r22, 0x0A	; 10
    10ce:	97 d1       	rcall	.+814    	; 0x13fe <__udivmodqi4>
    10d0:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:203
    return writeMultipleRegisters(RV8803_SECONDS, time + 1, len - 1);
}

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    10d2:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    10d4:	98 0f       	add	r25, r24
setTime():
    10d6:	90 93 d4 3c 	sts	0x3CD4, r25	; 0x803cd4 <rtc+0x7>
DECtoBCD():
    10da:	8f 2f       	mov	r24, r31
    10dc:	90 d1       	rcall	.+800    	; 0x13fe <__udivmodqi4>
    10de:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:204
}

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    10e0:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    10e2:	98 0f       	add	r25, r24
setTime():
    10e4:	90 93 d5 3c 	sts	0x3CD5, r25	; 0x803cd5 <rtc+0x8>
DECtoBCD():
    10e8:	8e 2f       	mov	r24, r30
    10ea:	89 d1       	rcall	.+786    	; 0x13fe <__udivmodqi4>
    10ec:	82 95       	swap	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:205

bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    10ee:	80 7f       	andi	r24, 0xF0	; 240
    10f0:	98 0f       	add	r25, r24
setTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    10f2:	90 93 d6 3c 	sts	0x3CD6, r25	; 0x803cd6 <rtc+0x9>
DECtoBCD():
    10f6:	85 2f       	mov	r24, r21
    10f8:	82 d1       	rcall	.+772    	; 0x13fe <__udivmodqi4>
    10fa:	82 95       	swap	r24
    10fc:	80 7f       	andi	r24, 0xF0	; 240
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:206
bool RV8803Tiny::setTime(uint8_t sec, uint8_t min, uint8_t hour, uint8_t weekday, uint8_t date, uint8_t month, uint16_t year)
{
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
    10fe:	98 0f       	add	r25, r24
setTime():
    1100:	90 93 d8 3c 	sts	0x3CD8, r25	; 0x803cd8 <rtc+0xb>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:207
    _time[TIME_WEEKDAY] = 1 << weekday;
    1104:	84 2d       	mov	r24, r4
    1106:	01 c0       	rjmp	.+2      	; 0x110a <main+0x45e>
    1108:	88 0f       	add	r24, r24
    110a:	4a 95       	dec	r20
    110c:	ea f7       	brpl	.-6      	; 0x1108 <main+0x45c>
    110e:	80 93 d7 3c 	sts	0x3CD7, r24	; 0x803cd7 <rtc+0xa>
DECtoBCD():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    1112:	83 2f       	mov	r24, r19
    1114:	74 d1       	rcall	.+744    	; 0x13fe <__udivmodqi4>
    1116:	82 95       	swap	r24
    1118:	80 7f       	andi	r24, 0xF0	; 240
    111a:	98 0f       	add	r25, r24
setTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:208
    _time[TIME_SECONDS] = DECtoBCD(sec);
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
    _time[TIME_WEEKDAY] = 1 << weekday;
    _time[TIME_MONTH] = DECtoBCD(month);
    111c:	90 93 d9 3c 	sts	0x3CD9, r25	; 0x803cd9 <rtc+0xc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:209
    _time[TIME_YEAR] = DECtoBCD(year - 2000);
    1120:	80 e3       	ldi	r24, 0x30	; 48
    1122:	82 0f       	add	r24, r18
DECtoBCD():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:284
}

//--- BCDtoDEC -- convert decimal to binary-coded decimal (BCD) ---//
uint8_t RV8803Tiny::DECtoBCD(uint8_t val)
{
    return ((val / 10) * 0x10) + (val % 10);
    1124:	6c d1       	rcall	.+728    	; 0x13fe <__udivmodqi4>
    1126:	82 95       	swap	r24
    1128:	80 7f       	andi	r24, 0xF0	; 240
    112a:	98 0f       	add	r25, r24
setTime():
    112c:	90 93 da 3c 	sts	0x3CDA, r25	; 0x803cda <rtc+0xd>
writeMultipleRegisters():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:209
    _time[TIME_MINUTES] = DECtoBCD(min);
    _time[TIME_HOURS] = DECtoBCD(hour);
    _time[TIME_DATE] = DECtoBCD(date);
    _time[TIME_WEEKDAY] = 1 << weekday;
    _time[TIME_MONTH] = DECtoBCD(month);
    _time[TIME_YEAR] = DECtoBCD(year - 2000);
    1130:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:324
}

bool RV8803Tiny::writeMultipleRegisters(uint8_t addr, uint8_t *values, uint8_t len)
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	0e 94 8f 00 	call	0x11e	; 0x11e <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.17]>
    1138:	88 23       	and	r24, r24
    113a:	01 f1       	breq	.+64     	; 0x117c <main+0x4d0>
    113c:	81 e1       	ldi	r24, 0x11	; 17
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:327
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803
        if (TinyMegaI2C.write(addr))
    113e:	0e 94 7f 00 	call	0xfe	; 0xfe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>
    1142:	88 23       	and	r24, r24
    1144:	d9 f0       	breq	.+54     	; 0x117c <main+0x4d0>
    1146:	10 92 db 3c 	sts	0x3CDB, r1	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:330
        { //  if Acknowledged from RV-8803
            // Master sends out **multiple Data to write to the specified address
            dataSentCounter = 0;
    114a:	84 ed       	ldi	r24, 0xD4	; 212
    114c:	88 2e       	mov	r8, r24
    114e:	8c e3       	ldi	r24, 0x3C	; 60
    1150:	98 2e       	mov	r9, r24
    1152:	f4 01       	movw	r30, r8
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:333
            for (uint8_t i = 0; i < len; i++)
            {
                if (TinyMegaI2C.write(values[i]))
    1154:	81 91       	ld	r24, Z+
    1156:	4f 01       	movw	r8, r30
    1158:	0e 94 7f 00 	call	0xfe	; 0xfe <TinyMegaI2CMaster::write(unsigned char) [clone .constprop.20]>
    115c:	88 23       	and	r24, r24
    115e:	29 f0       	breq	.+10     	; 0x116a <main+0x4be>
    1160:	80 91 db 3c 	lds	r24, 0x3CDB	; 0x803cdb <rtc+0xe>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:335
                { // if Acknowledged from RV-8803
                    dataSentCounter++;
    1164:	8f 5f       	subi	r24, 0xFF	; 255
    1166:	80 93 db 3c 	sts	0x3CDB, r24	; 0x803cdb <rtc+0xe>
    116a:	e8 14       	cp	r14, r8
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:331
        //  Master sends out the Register Address to RV-8803
        if (TinyMegaI2C.write(addr))
        { //  if Acknowledged from RV-8803
            // Master sends out **multiple Data to write to the specified address
            dataSentCounter = 0;
            for (uint8_t i = 0; i < len; i++)
    116c:	f9 04       	cpc	r15, r9
    116e:	89 f7       	brne	.-30     	; 0x1152 <main+0x4a6>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:338
                if (TinyMegaI2C.write(values[i]))
                { // if Acknowledged from RV-8803
                    dataSentCounter++;
                }
            }
            if (dataSentCounter == len)
    1170:	80 91 db 3c 	lds	r24, 0x3CDB	; 0x803cdb <rtc+0xe>
    1174:	87 30       	cpi	r24, 0x07	; 7
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
    1176:	41 f4       	brne	.+16     	; 0x1188 <main+0x4dc>
stop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:122
      //      if (debug_log) Serial.println("Something went wrong setting the time");
    }

    //    if (debug_log) Serial.println(F("Custom Time set!"));
    setNewTime = false;
    1178:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f72fb>
setRTCToNewTime():
    117c:	10 92 47 3c 	sts	0x3C47, r1	; 0x803c47 <setNewTime>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/SerialReset.h:107
      //      }

      setNewTime = true;
    }
  } else {
    setNewTime = false;
    1180:	03 cf       	rjmp	.-506    	; 0xf88 <main+0x2dc>
parseDataArray():
    1182:	10 92 47 3c 	sts	0x3C47, r1	; 0x803c47 <setNewTime>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
    1186:	8f cf       	rjmp	.-226    	; 0x10a6 <main+0x3fa>
stop():
    1188:	20 92 14 08 	sts	0x0814, r2	; 0x800814 <vtable for UartClass+0x7f72fb>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:124
        getAndShowTime();
      }
    }

    // Reset Trigger for RTC delay
    showTimePeriodOver = 0;
    118c:	f7 cf       	rjmp	.-18     	; 0x117c <main+0x4d0>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:127

    // Just before the next awake cycle begins, if the RTC_DELAY_init value has changed set it to new value.
    if (new_stayAwakeFor != stayAwakeFor) stayAwakeFor = new_stayAwakeFor;
    118e:	10 92 54 3c 	sts	0x3C54, r1	; 0x803c54 <showTimePeriodOver>
    1192:	80 91 04 3c 	lds	r24, 0x3C04	; 0x803c04 <new_stayAwakeFor>
    1196:	90 91 05 3c 	lds	r25, 0x3C05	; 0x803c05 <new_stayAwakeFor+0x1>
    119a:	20 91 06 3c 	lds	r18, 0x3C06	; 0x803c06 <stayAwakeFor>
    119e:	30 91 07 3c 	lds	r19, 0x3C07	; 0x803c07 <stayAwakeFor+0x1>
    11a2:	82 17       	cp	r24, r18
    11a4:	93 07       	cpc	r25, r19
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <main+0x504>
    11a8:	80 93 06 3c 	sts	0x3C06, r24	; 0x803c06 <stayAwakeFor>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:135
    // Serial.println(stayAwakeFor);
    // Serial.println(enableTiltFunc);

    // Then go to sleep
    //    if (debug_log) Serial.println(F("Sleeping..."));
    turnOffDisplay();
    11ac:	90 93 07 3c 	sts	0x3C07, r25	; 0x803c07 <stayAwakeFor+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:136
    Serial.flush();                    // flush everything before going to sleep
    11b0:	61 d9       	rcall	.-3390   	; 0x474 <turnOffDisplay()>
    11b2:	88 e5       	ldi	r24, 0x58	; 88
    11b4:	9c e3       	ldi	r25, 0x3C	; 60
    11b6:	00 d9       	rcall	.-3584   	; 0x3b8 <UartClass::flush()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:137
    Serial.end();
    11b8:	88 e5       	ldi	r24, 0x58	; 88
    11ba:	9c e3       	ldi	r25, 0x3C	; 60
    11bc:	7b d8       	rcall	.-3850   	; 0x2b4 <UartClass::end()>
    11be:	50 d9       	rcall	.-3424   	; 0x460 <disableSerialHWPins()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:138
    disableSerialHWPins();
    11c0:	40 d9       	rcall	.-3456   	; 0x442 <disableTWI()>
    11c2:	88 95       	sleep
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:139
    disableTWI();
    11c4:	03 ce       	rjmp	.-1018   	; 0xdcc <main+0x120>
fillDataArray():
    11c6:	10 92 3f 3c 	sts	0x3C3F, r1	; 0x803c3f <newDataArrived>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/clock_firmware_production.ino:140
    sleep_cpu();
    11ca:	f2 ce       	rjmp	.-540    	; 0xfb0 <main+0x304>

000011cc <__prologue_saves__>:
__prologue_saves__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    11cc:	2f 92       	push	r2
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    11ce:	3f 92       	push	r3
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    11d0:	4f 92       	push	r4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    11d2:	5f 92       	push	r5
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    11d4:	6f 92       	push	r6
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    11d6:	7f 92       	push	r7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    11d8:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    11da:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    11dc:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    11de:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    11e0:	cf 92       	push	r12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    11e2:	df 92       	push	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    11e4:	ef 92       	push	r14
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    11e6:	ff 92       	push	r15
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    11e8:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    11ea:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    11ec:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    11ee:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    11f0:	cd b7       	in	r28, 0x3d	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    11f2:	de b7       	in	r29, 0x3e	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    11f4:	ca 1b       	sub	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    11f6:	db 0b       	sbc	r29, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    11f8:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    11fa:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    11fc:	09 94       	ijmp

000011fe <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    11fe:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1200:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1202:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1204:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1206:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1208:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    120a:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    120c:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    120e:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1210:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1212:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1214:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1216:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1218:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    121a:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    121c:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    121e:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    1220:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    1222:	ce 0f       	add	r28, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    1224:	d1 1d       	adc	r29, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    1226:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    1228:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    122a:	ed 01       	movw	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    122c:	08 95       	ret

0000122e <atoi>:
atoi():
    122e:	fc 01       	movw	r30, r24
    1230:	88 27       	eor	r24, r24
    1232:	99 27       	eor	r25, r25
    1234:	e8 94       	clt
    1236:	21 91       	ld	r18, Z+
    1238:	20 32       	cpi	r18, 0x20	; 32
    123a:	e9 f3       	breq	.-6      	; 0x1236 <atoi+0x8>
    123c:	29 30       	cpi	r18, 0x09	; 9
    123e:	10 f0       	brcs	.+4      	; 0x1244 <atoi+0x16>
    1240:	2e 30       	cpi	r18, 0x0E	; 14
    1242:	c8 f3       	brcs	.-14     	; 0x1236 <atoi+0x8>
    1244:	2b 32       	cpi	r18, 0x2B	; 43
    1246:	39 f0       	breq	.+14     	; 0x1256 <atoi+0x28>
    1248:	2d 32       	cpi	r18, 0x2D	; 45
    124a:	31 f4       	brne	.+12     	; 0x1258 <atoi+0x2a>
    124c:	68 94       	set
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <atoi+0x28>
    1250:	40 d0       	rcall	.+128    	; 0x12d2 <__mulhi_const_10>
    1252:	82 0f       	add	r24, r18
    1254:	91 1d       	adc	r25, r1
    1256:	21 91       	ld	r18, Z+
    1258:	20 53       	subi	r18, 0x30	; 48
    125a:	2a 30       	cpi	r18, 0x0A	; 10
    125c:	c8 f3       	brcs	.-14     	; 0x1250 <atoi+0x22>
    125e:	1e f4       	brtc	.+6      	; 0x1266 <atoi+0x38>
    1260:	90 95       	com	r25
    1262:	81 95       	neg	r24
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	08 95       	ret

00001268 <strchr_P>:
strchr_P():
    1268:	fc 01       	movw	r30, r24
    126a:	05 90       	lpm	r0, Z+
    126c:	06 16       	cp	r0, r22
    126e:	21 f0       	breq	.+8      	; 0x1278 <strchr_P+0x10>
    1270:	00 20       	and	r0, r0
    1272:	d9 f7       	brne	.-10     	; 0x126a <strchr_P+0x2>
    1274:	c0 01       	movw	r24, r0
    1276:	08 95       	ret
    1278:	31 97       	sbiw	r30, 0x01	; 1
    127a:	cf 01       	movw	r24, r30
    127c:	08 95       	ret

0000127e <strtok>:
strtok():
    127e:	4c ed       	ldi	r20, 0xDC	; 220
    1280:	5c e3       	ldi	r21, 0x3C	; 60
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <strtok_r>

00001284 <strtok_r>:
strtok_r():
    1284:	fa 01       	movw	r30, r20
    1286:	a1 91       	ld	r26, Z+
    1288:	b0 81       	ld	r27, Z
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	19 f4       	brne	.+6      	; 0x1294 <strtok_r+0x10>
    128e:	10 97       	sbiw	r26, 0x00	; 0
    1290:	e1 f0       	breq	.+56     	; 0x12ca <strtok_r+0x46>
    1292:	cd 01       	movw	r24, r26
    1294:	dc 01       	movw	r26, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0d 90       	ld	r0, X+
    129a:	00 20       	and	r0, r0
    129c:	11 f4       	brne	.+4      	; 0x12a2 <strtok_r+0x1e>
    129e:	c0 01       	movw	r24, r0
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <strtok_r+0x44>
    12a2:	fb 01       	movw	r30, r22
    12a4:	21 91       	ld	r18, Z+
    12a6:	22 23       	and	r18, r18
    12a8:	19 f0       	breq	.+6      	; 0x12b0 <strtok_r+0x2c>
    12aa:	20 15       	cp	r18, r0
    12ac:	d9 f7       	brne	.-10     	; 0x12a4 <strtok_r+0x20>
    12ae:	f3 cf       	rjmp	.-26     	; 0x1296 <strtok_r+0x12>
    12b0:	fb 01       	movw	r30, r22
    12b2:	21 91       	ld	r18, Z+
    12b4:	20 15       	cp	r18, r0
    12b6:	19 f4       	brne	.+6      	; 0x12be <strtok_r+0x3a>
    12b8:	1e 92       	st	-X, r1
    12ba:	11 96       	adiw	r26, 0x01	; 1
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <strtok_r+0x46>
    12be:	22 23       	and	r18, r18
    12c0:	c1 f7       	brne	.-16     	; 0x12b2 <strtok_r+0x2e>
    12c2:	0d 90       	ld	r0, X+
    12c4:	00 20       	and	r0, r0
    12c6:	a1 f7       	brne	.-24     	; 0x12b0 <strtok_r+0x2c>
    12c8:	d0 01       	movw	r26, r0
    12ca:	fa 01       	movw	r30, r20
    12cc:	a1 93       	st	Z+, r26
    12ce:	b0 83       	st	Z, r27
    12d0:	08 95       	ret

000012d2 <__mulhi_const_10>:
__mulhi_const_10():
    12d2:	7a e0       	ldi	r23, 0x0A	; 10
    12d4:	97 9f       	mul	r25, r23
    12d6:	90 2d       	mov	r25, r0
    12d8:	87 9f       	mul	r24, r23
    12da:	80 2d       	mov	r24, r0
    12dc:	91 0d       	add	r25, r1
    12de:	11 24       	eor	r1, r1
    12e0:	08 95       	ret

000012e2 <fputc>:
fputc():
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	18 2f       	mov	r17, r24
    12ec:	09 2f       	mov	r16, r25
    12ee:	eb 01       	movw	r28, r22
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	81 fd       	sbrc	r24, 1
    12f4:	09 c0       	rjmp	.+18     	; 0x1308 <fputc+0x26>
    12f6:	1f ef       	ldi	r17, 0xFF	; 255
    12f8:	0f ef       	ldi	r16, 0xFF	; 255
    12fa:	81 2f       	mov	r24, r17
    12fc:	90 2f       	mov	r25, r16
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	08 95       	ret
    1308:	82 ff       	sbrs	r24, 2
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <fputc+0x52>
    130c:	2e 81       	ldd	r18, Y+6	; 0x06
    130e:	3f 81       	ldd	r19, Y+7	; 0x07
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 17       	cp	r18, r24
    1316:	39 07       	cpc	r19, r25
    1318:	3c f4       	brge	.+14     	; 0x1328 <fputc+0x46>
    131a:	e8 81       	ld	r30, Y
    131c:	f9 81       	ldd	r31, Y+1	; 0x01
    131e:	cf 01       	movw	r24, r30
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	88 83       	st	Y, r24
    1324:	99 83       	std	Y+1, r25	; 0x01
    1326:	10 83       	st	Z, r17
    1328:	8e 81       	ldd	r24, Y+6	; 0x06
    132a:	9f 81       	ldd	r25, Y+7	; 0x07
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	8e 83       	std	Y+6, r24	; 0x06
    1330:	9f 83       	std	Y+7, r25	; 0x07
    1332:	e3 cf       	rjmp	.-58     	; 0x12fa <fputc+0x18>
    1334:	e8 85       	ldd	r30, Y+8	; 0x08
    1336:	f9 85       	ldd	r31, Y+9	; 0x09
    1338:	81 2f       	mov	r24, r17
    133a:	09 95       	icall
    133c:	89 2b       	or	r24, r25
    133e:	a1 f3       	breq	.-24     	; 0x1328 <fputc+0x46>
    1340:	da cf       	rjmp	.-76     	; 0x12f6 <fputc+0x14>

00001342 <__ultoa_invert>:
__ultoa_invert():
    1342:	fa 01       	movw	r30, r20
    1344:	aa 27       	eor	r26, r26
    1346:	28 30       	cpi	r18, 0x08	; 8
    1348:	51 f1       	breq	.+84     	; 0x139e <__ultoa_invert+0x5c>
    134a:	20 31       	cpi	r18, 0x10	; 16
    134c:	81 f1       	breq	.+96     	; 0x13ae <__ultoa_invert+0x6c>
    134e:	e8 94       	clt
    1350:	6f 93       	push	r22
    1352:	6e 7f       	andi	r22, 0xFE	; 254
    1354:	6e 5f       	subi	r22, 0xFE	; 254
    1356:	7f 4f       	sbci	r23, 0xFF	; 255
    1358:	8f 4f       	sbci	r24, 0xFF	; 255
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	af 4f       	sbci	r26, 0xFF	; 255
    135e:	b1 e0       	ldi	r27, 0x01	; 1
    1360:	3e d0       	rcall	.+124    	; 0x13de <__ultoa_invert+0x9c>
    1362:	b4 e0       	ldi	r27, 0x04	; 4
    1364:	3c d0       	rcall	.+120    	; 0x13de <__ultoa_invert+0x9c>
    1366:	67 0f       	add	r22, r23
    1368:	78 1f       	adc	r23, r24
    136a:	89 1f       	adc	r24, r25
    136c:	9a 1f       	adc	r25, r26
    136e:	a1 1d       	adc	r26, r1
    1370:	68 0f       	add	r22, r24
    1372:	79 1f       	adc	r23, r25
    1374:	8a 1f       	adc	r24, r26
    1376:	91 1d       	adc	r25, r1
    1378:	a1 1d       	adc	r26, r1
    137a:	6a 0f       	add	r22, r26
    137c:	71 1d       	adc	r23, r1
    137e:	81 1d       	adc	r24, r1
    1380:	91 1d       	adc	r25, r1
    1382:	a1 1d       	adc	r26, r1
    1384:	20 d0       	rcall	.+64     	; 0x13c6 <__ultoa_invert+0x84>
    1386:	09 f4       	brne	.+2      	; 0x138a <__ultoa_invert+0x48>
    1388:	68 94       	set
    138a:	3f 91       	pop	r19
    138c:	2a e0       	ldi	r18, 0x0A	; 10
    138e:	26 9f       	mul	r18, r22
    1390:	11 24       	eor	r1, r1
    1392:	30 19       	sub	r19, r0
    1394:	30 5d       	subi	r19, 0xD0	; 208
    1396:	31 93       	st	Z+, r19
    1398:	de f6       	brtc	.-74     	; 0x1350 <__ultoa_invert+0xe>
    139a:	cf 01       	movw	r24, r30
    139c:	08 95       	ret
    139e:	46 2f       	mov	r20, r22
    13a0:	47 70       	andi	r20, 0x07	; 7
    13a2:	40 5d       	subi	r20, 0xD0	; 208
    13a4:	41 93       	st	Z+, r20
    13a6:	b3 e0       	ldi	r27, 0x03	; 3
    13a8:	0f d0       	rcall	.+30     	; 0x13c8 <__ultoa_invert+0x86>
    13aa:	c9 f7       	brne	.-14     	; 0x139e <__ultoa_invert+0x5c>
    13ac:	f6 cf       	rjmp	.-20     	; 0x139a <__ultoa_invert+0x58>
    13ae:	46 2f       	mov	r20, r22
    13b0:	4f 70       	andi	r20, 0x0F	; 15
    13b2:	40 5d       	subi	r20, 0xD0	; 208
    13b4:	4a 33       	cpi	r20, 0x3A	; 58
    13b6:	18 f0       	brcs	.+6      	; 0x13be <__ultoa_invert+0x7c>
    13b8:	49 5d       	subi	r20, 0xD9	; 217
    13ba:	31 fd       	sbrc	r19, 1
    13bc:	40 52       	subi	r20, 0x20	; 32
    13be:	41 93       	st	Z+, r20
    13c0:	02 d0       	rcall	.+4      	; 0x13c6 <__ultoa_invert+0x84>
    13c2:	a9 f7       	brne	.-22     	; 0x13ae <__ultoa_invert+0x6c>
    13c4:	ea cf       	rjmp	.-44     	; 0x139a <__ultoa_invert+0x58>
    13c6:	b4 e0       	ldi	r27, 0x04	; 4
    13c8:	a6 95       	lsr	r26
    13ca:	97 95       	ror	r25
    13cc:	87 95       	ror	r24
    13ce:	77 95       	ror	r23
    13d0:	67 95       	ror	r22
    13d2:	ba 95       	dec	r27
    13d4:	c9 f7       	brne	.-14     	; 0x13c8 <__ultoa_invert+0x86>
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	61 05       	cpc	r22, r1
    13da:	71 05       	cpc	r23, r1
    13dc:	08 95       	ret
    13de:	9b 01       	movw	r18, r22
    13e0:	ac 01       	movw	r20, r24
    13e2:	0a 2e       	mov	r0, r26
    13e4:	06 94       	lsr	r0
    13e6:	57 95       	ror	r21
    13e8:	47 95       	ror	r20
    13ea:	37 95       	ror	r19
    13ec:	27 95       	ror	r18
    13ee:	ba 95       	dec	r27
    13f0:	c9 f7       	brne	.-14     	; 0x13e4 <__ultoa_invert+0xa2>
    13f2:	62 0f       	add	r22, r18
    13f4:	73 1f       	adc	r23, r19
    13f6:	84 1f       	adc	r24, r20
    13f8:	95 1f       	adc	r25, r21
    13fa:	a0 1d       	adc	r26, r0
    13fc:	08 95       	ret

000013fe <__udivmodqi4>:
__udivmodqi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    13fe:	99 1b       	sub	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    1400:	79 e0       	ldi	r23, 0x09	; 9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    1402:	04 c0       	rjmp	.+8      	; 0x140c <__udivmodqi4_ep>

00001404 <__udivmodqi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    1404:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    1406:	96 17       	cp	r25, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    1408:	08 f0       	brcs	.+2      	; 0x140c <__udivmodqi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    140a:	96 1b       	sub	r25, r22

0000140c <__udivmodqi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    140c:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    140e:	7a 95       	dec	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    1410:	c9 f7       	brne	.-14     	; 0x1404 <__udivmodqi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    1412:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    1414:	08 95       	ret

00001416 <__udivmodhi4>:
__udivmodhi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1416:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1418:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    141a:	51 e1       	ldi	r21, 0x11	; 17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    141c:	07 c0       	rjmp	.+14     	; 0x142c <__udivmodhi4_ep>

0000141e <__udivmodhi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    141e:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1420:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    1422:	a6 17       	cp	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    1424:	b7 07       	cpc	r27, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1426:	10 f0       	brcs	.+4      	; 0x142c <__udivmodhi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1428:	a6 1b       	sub	r26, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    142a:	b7 0b       	sbc	r27, r23

0000142c <__udivmodhi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    142c:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    142e:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1430:	5a 95       	dec	r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    1432:	a9 f7       	brne	.-22     	; 0x141e <__udivmodhi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    1434:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1436:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1438:	bc 01       	movw	r22, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    143a:	cd 01       	movw	r24, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    143c:	08 95       	ret

0000143e <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    143e:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1440:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1442:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1444:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1446:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1448:	0d c0       	rjmp	.+26     	; 0x1464 <__udivmodsi4_ep>

0000144a <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    144a:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    144c:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    144e:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1450:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1452:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1454:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1456:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1458:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    145a:	20 f0       	brcs	.+8      	; 0x1464 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    145c:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    145e:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1460:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1462:	f5 0b       	sbc	r31, r21

00001464 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1464:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1466:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1468:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    146a:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    146c:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    146e:	69 f7       	brne	.-38     	; 0x144a <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1470:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1472:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1474:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1476:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1478:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    147a:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    147c:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    147e:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1480:	08 95       	ret

00001482 <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1482:	0f d0       	rcall	.+30     	; 0x14a2 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1484:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1486:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1488:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    148a:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    148c:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    148e:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1490:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1492:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1494:	08 95       	ret

00001496 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1496:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1498:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    149a:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    149c:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    149e:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    14a0:	09 94       	ijmp

000014a2 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    14a2:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    14a4:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    14a6:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    14a8:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    14aa:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    14ac:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    14ae:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    14b0:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    14b2:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    14b4:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    14b6:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    14b8:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    14ba:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    14bc:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    14be:	08 95       	ret

000014c0 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    14c0:	f8 94       	cli

000014c2 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    14c2:	ff cf       	rjmp	.-2      	; 0x14c2 <__stop_program>
