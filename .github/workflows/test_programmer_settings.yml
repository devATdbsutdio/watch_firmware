name: build test firmware


on:
  push:
    tags:        
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  build:
    name: Compile using arduino-cli
    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # download and install arduino-cli binary 
      - name: Update system and install build tool
        run: |
          sudo apt-get update -y
          wget -qO arduino-cli.tar.gz https://downloads.arduino.cc/arduino-cli/arduino-cli_latest_Linux_64bit.tar.gz
          sudo tar xf arduino-cli.tar.gz
          rm -rf arduino-cli.tar.gz
          sudo chmod u+x ./arduino-cli
          ./arduino-cli --help

      # 1. Create config file used by arduino-cli
      # 2. Add our board donwload uri in there
      # 3. Set a flag in that config file to download libs from git uris
      # 4. Update the core-index(which downloads automatically and updates arduino-cli's dependencies)
      # 5. Install our boards (i.e. uCs)
      - name: arduino-cli install boards [build dependencies]
        run: |
          ./arduino-cli core update-index
          ./arduino-cli config init
          ./arduino-cli config add board_manager.additional_urls http://drazzy.com/package_drazzy.com_index.json
          ./arduino-cli config set library.enable_unsafe_install true
          ./arduino-cli core update-index
          ./arduino-cli config dump
          ls -l
          ./arduino-cli core install megaTinyCore:megaavr
          ./arduino-cli core upgrade
          ./arduino-cli core update-index

      # Install the libraries 
      - name: arduino-cli install libraries [build dependencies]
        run: |
          ./arduino-cli lib install TinyMegaI2C
          ./arduino-cli lib install RV8803Tiny

      # Clean compile the code in build directory
      # Gotcha: The main Arduino ino file is named differently than the repo name. 
      # So we had to do some renaming as the compiler follows traditional arduino paradigm,
      # where the main ino file should have the same prefix name as the src root directory. 
      - name: Compile Test firmware binary [clean build ]
        run: |
          FQBN_ARG="-b megaTinyCore:megaavr:atxy7:chip=1607,clock=5internal,bodvoltage=1v8,bodmode=disabled,eesave=enable,millis=enabled,resetpin=UPDI,startuptime=0,wiremode=mors,printf=default,attach=allenabled"
          SKETCH_DIR="$(pwd)/Tests/components_check"
          OUTPUT_ARG="--output-dir $(pwd)/Tests/components_check/build"
          ./arduino-cli compile $FQBN_ARG $SKETCH_DIR $OUTPUT_ARG --clean
          cd Tests/components_check/build
          for f in components_check*; do mv "$f" "components_check${f#components_check.ino}"; done
          ls -l
          cd ../../..


      - name: Set test firmware's hex file name and path as env vars
        run: |
          echo Setting file name env vars
          echo "T_HEX_FILE_NAME=$(cd Tests/components_check/build && ls *.hex)" >> $GITHUB_ENV
          echo "T_HEX_FILE_PATH=./Tests/components_check/build/$(cd $(pwd)/Tests/components_check/build && ls *.hex)" >> $GITHUB_ENV
          echo "T_BUILD_DIR=./Tests/components_check/build/" >> $GITHUB_ENV


      - name: /[SANITY CHECK/] hex file's name and hex file's path as read from env vars for upload step
        run: |
          echo "${{ env.T_BUILD_DIR }}"
          echo "${{ env.T_HEX_FILE_NAME }}"
          echo "${{ env.T_HEX_FILE_PATH }}"