; [platformio]
; Default build target
; default_envs = 
;     upload_serialUPDI

[env:ATtiny1607]
; [env]
platform = atmelmegaavr
framework = arduino
board = ATtiny1607 ; chip is ATTINY-1607 

; monitor_speed = 115200
; monitor_port = ""


; ---------- BUILD PARAMS ---------- ;
lib_deps = https://github.com/dattasaurabh82/RV8803Tiny

; --- Fuse setting -- ;
; [-] clock=5internal
; [-] bodmode=disabled
; [-] bodvoltage=1v8   ; No need as it is disabled, right? 
; [-] eesave=enable
; [-] resetpin=UPDI
; millis=enabled
; [?] startuptime=0
; wiremode=mors
; printf=minimal
; attach=allenabled
board_hardware.oscillator = internal ; Oscillator type (internal or external)
board_build.f_cpu = 5000000L ; 5 MHz internal
board_hardware.bod = disabled ; 1.8v, 2.6v (default), 4.8v, disabled.
; In the above step, guessing if it is disabled, we do not need to mention the bod voltage level?
board_hardware.eesave = yes
board_hardware.rstpin = updi

; The question is now, how can we set the other params missing? 
; Do we have to manually adjust the fuses responsible for the other parameters?

; board_fuses.SYSCFG1 = 0x00  ; fuse:6  -> startup time, 0ms ?
;;;
; what are the fuses for these or how can they be setup? (I was looking in boards.txt)
; millis=enabled
; startuptime=0 [-]
; wiremode=mors
; printf=minimal
; attach=allenabled
;;;
; board_fuses.attachmode=-DCORE_ATTACH_ALL


; ---------- UPLOAD PARAMS ---------- ;
upload_protocol = custom ; to use serialUPDI
upload_speed = 115200 
upload_port = "/dev/tty.usbserial-1411240" ; for V0 explorer board with CH340 USB-Serial adapter for UPDI
; upload_port = "/dev/tty.usbserial-A10KHTR4" ; for testing jig with FTDI chip
; upload_port = "/dev/tty.usbserial-141140" ; for UPDI priogrammer with CH340N
upload_flags = 
  -t 
  uart
  -u
  $UPLOAD_PORT
  -c
  $UPLOAD_SPEED
  -d
  attiny1607
  -v
  info

;Write fuse byte 1 to 0xE0 on a kit:
;- pymcuprog write -m fuses -o 1 -l 0xE0

; ---- INSTALL GOOD PYMCUPROG for pio bfeore proceeding ----- ;
; execute: 'pio system info'
; get python path from 'Python Executable'
; install pymcuprog by: <python executable> -m pip install -i https://test.pypi.org/simple/ pymcuprog==3.10.4.136
upload_command = pymcuprog write $UPLOAD_FLAGS -f $SOURCE
; upload_command = pymcuprog write -t uart -u /dev/tty.usbserial-14220 -c 115200 -d attiny1607 -f $SOURCE

; Serial UPDI based programming setup
; core_loc = /Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore
; core_ver = 2.5.11
; core_python = $CORE_LOC/tools/python3
; python_programmer_script = $CORE_LOC/hardware/megaavr/$CORE_VER/tools/prog.py
; upload_command = python3 -u /Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/tools/prog.py -t uart -u /dev/tty.usbserial-14220 -b 921600 -d attiny1607 --fuses 2:0x02 6:0x00 8:0x00 -f $SOURCE -a write   




; [env:set_fuses]
; ; Fuse setting
; ; [x] clock=5internal
; ; [x]bodvoltage=1v8
; ; [x] bodmode=disabled
; ; [x] eesave=enable
; ; [x] resetpin=UPDI
; ; millis=enabled
; ; startuptime=0
; ; wiremode=mors
; ; printf=minimal
; ; attach=allenabled
; board_hardware.oscillator = internal ; Oscillator type (internal or external)
; board_build.f_cpu = 5000000L ; 5 MHz internal
; board_hardware.bod = disabled 
; board_hardware.eesave = yes
; board_hardware.rstpin = updi


; run the following command to set fuses
; pio run -e set_fuses -t fuses



; [env:upload_serialUPDI]
; ; upload_flags =
; ;   -PUSB
; ;   -v
; ; upload_protocol = xplainedmini_updi
; upload_protocol = custom
; upload_command = ${env:megaTinyCorePythonLoc} -u ${env:megaTinyCorePythonProg} -t uart -u ${env:upload_port} -b $[env:upload_speed] -d attiny1607 --fuses 2:0x02 6:0x00 8:0x00 -f ${SOURCE} -a write

; ; Run the following command to upload with this environment
; ; pio run -e upload_serialUPDI -t upload
