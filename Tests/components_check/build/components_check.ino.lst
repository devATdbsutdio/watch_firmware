
/private/var/folders/yp/37w_03rx1qdbfsqckbyyk9t80000gn/T/arduino-sketch-5881CB90D42ECC6070325818771F6501/components_check.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	9b c5       	rjmp	.+2870   	; 0xb5c <__vector_9>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	6f c5       	rjmp	.+2782   	; 0xb4c <__vector_27>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	68 c5       	rjmp	.+2768   	; 0xb42 <__vector_28>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	70 c5       	rjmp	.+2784   	; 0xb56 <__vector_29>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
	...

0000007c <__trampolines_end>:
__trampolines_start():
      7c:	45 46       	sbci	r20, 0x65	; 101
      7e:	47 65       	ori	r20, 0x57	; 87
      80:	66 67       	ori	r22, 0x76	; 118
	...

00000083 <__c.2210>:
      83:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000094 <__ctors_start>:
__ctors_start():
      94:	14 07       	cpc	r17, r20

00000096 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      96:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      98:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      9a:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      9c:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      9e:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      a0:	de bf       	out	0x3e, r29	; 62

000000a2 <_initThreeStuff()>:
_Z15_initThreeStuffv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:95
 * (many are available reasonably cheaply on aliexpress et al.) end up being very useful        *
 * for this sort of thing.                                                                      */

  void __attribute__((weak)) init_reset_flags();
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
      a2:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <vtable for UartClass+0x7f5f9f>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:96
    RSTCTRL.RSTFR = flags;
      a6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <vtable for UartClass+0x7f5f9f>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:97
    if (flags == 0) {
      aa:	81 11       	cpse	r24, r1
      ac:	05 c0       	rjmp	.+10     	; 0xb8 <_initThreeStuff()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:98
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
      ae:	98 ed       	ldi	r25, 0xD8	; 216
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	94 bf       	out	0x34, r25	; 52
      b4:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <vtable for UartClass+0x7f5fa0>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:100
    }
    GPIOR0 = flags;
      b8:	8c bb       	out	0x1c, r24	; 28

000000ba <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      ba:	2d e3       	ldi	r18, 0x3D	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      bc:	ac e0       	ldi	r26, 0x0C	; 12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      be:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      c4:	ab 31       	cpi	r26, 0x1B	; 27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      c6:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      ca:	1c e3       	ldi	r17, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      cc:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      ce:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      d0:	e1 e2       	ldi	r30, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      d2:	f4 e2       	ldi	r31, 0x24	; 36
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      d6:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      d8:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      da:	ac 30       	cpi	r26, 0x0C	; 12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      dc:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      e0:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      e2:	cb e4       	ldi	r28, 0x4B	; 75
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      e4:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e8:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      ea:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ec:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      f0:	ca 34       	cpi	r28, 0x4A	; 74
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      f2:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
      f6:	af d6       	rcall	.+3422   	; 0xe56 <main>
../../../../crt1/gcrt1.S:315
      f8:	0c 94 24 10 	jmp	0x2048	; 0x2048 <_exit>

000000fc <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>:
_ZN17TinyMegaI2CMaster5startEhi.constprop.18():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:66

// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
      fe:	89 2b       	or	r24, r25
     100:	c9 f0       	breq	.+50     	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:70
    read = 0; // Write
  else
  {
    I2Ccount = readcount;
     102:	8f ef       	ldi	r24, 0xFF	; 255
     104:	9f ef       	ldi	r25, 0xFF	; 255
     106:	80 93 91 3c 	sts	0x3C91, r24	; 0x803c91 <TinyMegaI2C>
     10a:	90 93 92 3c 	sts	0x3C92, r25	; 0x803c92 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:71
    read = 1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:73
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
     110:	84 66       	ori	r24, 0x64	; 100
     112:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <vtable for UartClass+0x7f6776>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:74
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
     116:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6774>
     11a:	80 7c       	andi	r24, 0xC0	; 192
     11c:	e1 f3       	breq	.-8      	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:76
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
     11e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6774>
     122:	83 fd       	sbrc	r24, 3
     124:	09 c0       	rjmp	.+18     	; 0x138 <__EEPROM_REGION_LENGTH__+0x38>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:78
    return false;                        // Return false if arbitration lost or bus error
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
     126:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6774>
     12a:	82 95       	swap	r24
     12c:	81 70       	andi	r24, 0x01	; 1
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	89 27       	eor	r24, r25
     132:	08 95       	ret
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:67
// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
    read = 0; // Write
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	ec cf       	rjmp	.-40     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:77
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
    return false;                        // Return false if arbitration lost or bus error
     138:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:79
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}
     13a:	08 95       	ret

0000013c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>:
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:402
    {
        return (false);
    }
}

bool RV8803Tiny::readMultipleRegisters(uint8_t addr, uint8_t *dest, uint8_t len)
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:405
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	db df       	rcall	.-74     	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
     148:	81 11       	cpse	r24, r1
     14a:	02 c0       	rjmp	.+4      	; 0x150 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	3c c0       	rjmp	.+120    	; 0x1c8 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x8c>
write():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:55
  return TinyMegaI2CMaster::read();
}

bool TinyMegaI2CMaster::write(uint8_t data)
{
  while (!(TWI0.MSTATUS & TWI_WIF_bm))
     150:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6774>
     154:	86 ff       	sbrs	r24, 6
     156:	fc cf       	rjmp	.-8      	; 0x150 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:57
    ; // Wait for write interrupt flag
  TWI0.MDATA = data;
     158:	80 e1       	ldi	r24, 0x10	; 16
     15a:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <vtable for UartClass+0x7f6777>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:58
  TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;   // Do nothing
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f6773>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:59
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Returns true if slave gave an ACK
     164:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6774>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:408
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803-C7.
        if (TinyMegaI2C.write(addr))
     168:	84 fd       	sbrc	r24, 4
     16a:	f0 cf       	rjmp	.-32     	; 0x14c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
restart():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:83
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}

bool TinyMegaI2CMaster::restart(uint8_t address, int readcount)
{
  return TinyMegaI2CMaster::start(address, readcount);
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
     170:	c6 df       	rcall	.-116    	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:412
        { //  if Acknowledged from RV-8803
            //  Master sends out the Repeated START condition (or STOP condition followed by START condition)
            //  Master sends out Slave Address, 65h for the RV-8803 [ R/W bit is -1 ] indicating unknown number of read operation
            if (TinyMegaI2C.restart(RV8803_ADDR, -1))
     172:	88 23       	and	r24, r24
     174:	59 f3       	breq	.-42     	; 0x14c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
     176:	fe 01       	movw	r30, r28
     178:	9e 01       	movw	r18, r28
     17a:	28 5f       	subi	r18, 0xF8	; 248
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     17e:	46 e0       	ldi	r20, 0x06	; 6
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     180:	52 e0       	ldi	r21, 0x02	; 2
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:34
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
}

uint8_t TinyMegaI2CMaster::read(void)
{
  if (I2Ccount != 0)
     182:	80 91 91 3c 	lds	r24, 0x3C91	; 0x803c91 <TinyMegaI2C>
     186:	90 91 92 3c 	lds	r25, 0x3C92	; 0x803c92 <TinyMegaI2C+0x1>
     18a:	00 97       	sbiw	r24, 0x00	; 0
     18c:	29 f0       	breq	.+10     	; 0x198 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x5c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:35
    I2Ccount--;
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	80 93 91 3c 	sts	0x3C91, r24	; 0x803c91 <TinyMegaI2C>
     194:	90 93 92 3c 	sts	0x3C92, r25	; 0x803c92 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:36
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
     198:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6774>
     19c:	87 ff       	sbrs	r24, 7
     19e:	fc cf       	rjmp	.-8      	; 0x198 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x5c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:38
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
     1a0:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <vtable for UartClass+0x7f6777>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:40
  // Check slave sent ACK?
  if (I2Ccount != 0)
     1a4:	60 91 91 3c 	lds	r22, 0x3C91	; 0x803c91 <TinyMegaI2C>
     1a8:	70 91 92 3c 	lds	r23, 0x3C92	; 0x803c92 <TinyMegaI2C+0x1>
     1ac:	67 2b       	or	r22, r23
     1ae:	79 f0       	breq	.+30     	; 0x1ce <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x92>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     1b0:	50 93 14 08 	sts	0x0814, r21	; 0x800814 <vtable for UartClass+0x7f6773>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:423
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
                {
                    dest[i] = TinyMegaI2C.read();
     1b4:	81 93       	st	Z+, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:421
                // 2. [NO NEED] The above Steps can be repeated if necessary and the address bit increments automatically.
                // 3. ** The Master, addressed as Receiver, can stop data transmission by not generating an acknowledge on the
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
     1b6:	e2 17       	cp	r30, r18
     1b8:	f3 07       	cpc	r31, r19
     1ba:	19 f7       	brne	.-58     	; 0x182 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x46>
stop():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     1bc:	87 e0       	ldi	r24, 0x07	; 7
     1be:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f6773>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	cd 2b       	or	r28, r29
     1c6:	11 f2       	breq	.-124    	; 0x14c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:443
    }
    else
    {
        return (false);
    }
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     1ce:	40 93 14 08 	sts	0x0814, r20	; 0x800814 <vtable for UartClass+0x7f6773>
     1d2:	f0 cf       	rjmp	.-32     	; 0x1b4 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x78>

000001d4 <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:642
  int UartClass::availableForWrite(void) {
    tx_buffer_index_t head;
    tx_buffer_index_t tail;

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
     1d4:	fc 01       	movw	r30, r24
     1d6:	53 89       	ldd	r21, Z+19	; 0x13
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:643
      tail = _tx_buffer_tail;
     1d8:	44 89       	ldd	r20, Z+20	; 0x14
     1da:	25 2f       	mov	r18, r21
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	84 2f       	mov	r24, r20
     1e0:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:646
    }
    if (head >= tail) {
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1e2:	82 1b       	sub	r24, r18
     1e4:	93 0b       	sbc	r25, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:645

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
      tail = _tx_buffer_tail;
    }
    if (head >= tail) {
     1e6:	54 17       	cp	r21, r20
     1e8:	10 f0       	brcs	.+4      	; 0x1ee <UartClass::availableForWrite()+0x1a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:646
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1ea:	4f 96       	adiw	r24, 0x1f	; 31
     1ec:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:648
    }
    return tail - head - 1;
     1ee:	01 97       	sbiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:649
  }
     1f0:	08 95       	ret

000001f2 <UartClass::read()>:
_ZN9UartClass4readEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:626
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }

  int UartClass::read(void) {
     1f2:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:628
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
     1f4:	91 89       	ldd	r25, Z+17	; 0x11
     1f6:	82 89       	ldd	r24, Z+18	; 0x12
     1f8:	98 17       	cp	r25, r24
     1fa:	61 f0       	breq	.+24     	; 0x214 <UartClass::read()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:631
      return -1;
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
     1fc:	a2 89       	ldd	r26, Z+18	; 0x12
     1fe:	ae 0f       	add	r26, r30
     200:	bf 2f       	mov	r27, r31
     202:	b1 1d       	adc	r27, r1
     204:	55 96       	adiw	r26, 0x15	; 21
     206:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:632
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
     208:	92 89       	ldd	r25, Z+18	; 0x12
     20a:	9f 5f       	subi	r25, 0xFF	; 255
     20c:	9f 73       	andi	r25, 0x3F	; 63
     20e:	92 8b       	std	Z+18, r25	; 0x12
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:633
      return c;
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:629
  }

  int UartClass::read(void) {
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:635
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
      return c;
    }
  }
     218:	08 95       	ret

0000021a <UartClass::peek()>:
_ZN9UartClass4peekEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:618
}
  int UartClass::available(void) {
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
     21a:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:619
    if (_rx_buffer_head == _rx_buffer_tail) {
     21c:	91 89       	ldd	r25, Z+17	; 0x11
     21e:	82 89       	ldd	r24, Z+18	; 0x12
     220:	98 17       	cp	r25, r24
     222:	31 f0       	breq	.+12     	; 0x230 <UartClass::peek()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:622
      return -1;
    } else {
      return _rx_buffer[_rx_buffer_tail];
     224:	82 89       	ldd	r24, Z+18	; 0x12
     226:	e8 0f       	add	r30, r24
     228:	f1 1d       	adc	r31, r1
     22a:	85 89       	ldd	r24, Z+21	; 0x15
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:620
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:624
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }
     234:	08 95       	ret

00000236 <UartClass::available()>:
_ZN9UartClass9availableEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:614

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}
  int UartClass::available(void) {
     236:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:615
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
     238:	91 89       	ldd	r25, Z+17	; 0x11
     23a:	22 89       	ldd	r18, Z+18	; 0x12
     23c:	89 2f       	mov	r24, r25
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	80 5c       	subi	r24, 0xC0	; 192
     242:	9f 4f       	sbci	r25, 0xFF	; 255
     244:	82 1b       	sub	r24, r18
     246:	91 09       	sbc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:616
  }
     248:	8f 73       	andi	r24, 0x3F	; 63
     24a:	99 27       	eor	r25, r25
     24c:	08 95       	ret

0000024e <UartClass::end()>:
_ZN9UartClass3endEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:598
    pinMode(_usart_pins[muxrow][3], OUTPUT); // make XDIR output.
  }
  */
}

void UartClass::end() {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:600
  // wait for transmission of outgoing data
  flush();
     254:	e8 81       	ld	r30, Y
     256:	f9 81       	ldd	r31, Y+1	; 0x01
     258:	06 80       	ldd	r0, Z+6	; 0x06
     25a:	f7 81       	ldd	r31, Z+7	; 0x07
     25c:	e0 2d       	mov	r30, r0
     25e:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:603
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  // TXCIE only used in half duplex - we can just turn the damned thing off yo!
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     260:	ec 85       	ldd	r30, Y+12	; 0x0c
     262:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:604
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     264:	86 81       	ldd	r24, Z+6	; 0x06
     266:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:605
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     268:	85 81       	ldd	r24, Z+5	; 0x05
     26a:	15 82       	std	Z+5, r1	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:606
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error.
     26c:	80 e4       	ldi	r24, 0x40	; 64
     26e:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:608
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     270:	8a 89       	ldd	r24, Y+18	; 0x12
     272:	89 8b       	std	Y+17, r24	; 0x11
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:612

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     274:	18 8a       	std	Y+16, r1	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:613
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:352
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     27c:	dc 01       	movw	r26, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:353
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	07 fe       	sbrs	r0, 7
     282:	04 c0       	rjmp	.+8      	; 0x28c <UartClass::_poll_tx_data_empty()+0x10>
     284:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vtable for UartClass+0x7f6070>
     288:	88 23       	and	r24, r24
     28a:	b1 f0       	breq	.+44     	; 0x2b8 <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:370
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     28c:	1c 96       	adiw	r26, 0x0c	; 12
     28e:	ed 91       	ld	r30, X+
     290:	fc 91       	ld	r31, X
     292:	1d 97       	sbiw	r26, 0x0d	; 13
     294:	84 81       	ldd	r24, Z+4	; 0x04
     296:	85 ff       	sbrs	r24, 5
     298:	0f c0       	rjmp	.+30     	; 0x2b8 <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:371
      if (_tx_buffer_head != _tx_buffer_tail) {
     29a:	53 96       	adiw	r26, 0x13	; 19
     29c:	9c 91       	ld	r25, X
     29e:	53 97       	sbiw	r26, 0x13	; 19
     2a0:	54 96       	adiw	r26, 0x14	; 20
     2a2:	8c 91       	ld	r24, X
     2a4:	98 17       	cp	r25, r24
     2a6:	21 f0       	breq	.+8      	; 0x2b0 <UartClass::_poll_tx_data_empty()+0x34>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:373
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     2a8:	85 81       	ldd	r24, Z+5	; 0x05
     2aa:	8f 7d       	andi	r24, 0xDF	; 223
     2ac:	85 83       	std	Z+5, r24	; 0x05
     2ae:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:397
#ifdef USART1
                ::"z"((uint16_t)thisSerial)
#else
                ::"z"(&Serial)
#endif
                : "r18","r19","r24","r25","r26","r27");
     2b0:	e3 e9       	ldi	r30, 0x93	; 147
     2b2:	fc e3       	ldi	r31, 0x3C	; 60
     2b4:	e8 94       	clt
     2b6:	e8 c3       	rjmp	.+2000   	; 0xa88 <_poll_dre>

000002b8 <_poll_dre_done>:
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:404
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
  // Note that this currently does not handle cases where the DRE interruopt becomes
  // disabled, yet you are actually attempting to send. I don't think it can happen.
}
     2b8:	08 95       	ret

000002ba <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:682
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }


  size_t UartClass::write(uint8_t c) {
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:683
    _state |= 1; // Record that we have written to serial since it was begun.
     2c4:	88 89       	ldd	r24, Y+16	; 0x10
     2c6:	98 2f       	mov	r25, r24
     2c8:	91 60       	ori	r25, 0x01	; 1
     2ca:	98 8b       	std	Y+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:688
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     2cc:	2b 89       	ldd	r18, Y+19	; 0x13
     2ce:	9c 89       	ldd	r25, Y+20	; 0x14
     2d0:	29 13       	cpse	r18, r25
     2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <UartClass::write(unsigned char)+0x2e>
     2d4:	ec 85       	ldd	r30, Y+12	; 0x0c
     2d6:	fd 85       	ldd	r31, Y+13	; 0x0d
     2d8:	94 81       	ldd	r25, Z+4	; 0x04
     2da:	95 ff       	sbrs	r25, 5
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <UartClass::write(unsigned char)+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:689
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     2de:	81 fd       	sbrc	r24, 1
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <UartClass::write(unsigned char)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:696
        ctrla &= ~USART_RXCIE_bm;
        ctrla |=  USART_TXCIE_bm;
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
        (*_hwserial_module).CTRLA = ctrla;
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2e2:	80 e4       	ldi	r24, 0x40	; 64
     2e4:	84 83       	std	Z+4, r24	; 0x04
     2e6:	12 c0       	rjmp	.+36     	; 0x30c <UartClass::write(unsigned char)+0x52>
     2e8:	06 2f       	mov	r16, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:714
       * // that the interrupt handler is called in this situation
       * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
       */
      return 1;
    }
    tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     2ea:	1b 89       	ldd	r17, Y+19	; 0x13
     2ec:	1f 5f       	subi	r17, 0xFF	; 255
     2ee:	1f 71       	andi	r17, 0x1F	; 31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:718

    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
     2f0:	8c 89       	ldd	r24, Y+20	; 0x14
     2f2:	81 13       	cpse	r24, r17
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:719
      _poll_tx_data_empty();
     2f4:	15 c0       	rjmp	.+42     	; 0x320 <UartClass::write(unsigned char)+0x66>
     2f6:	ce 01       	movw	r24, r28
     2f8:	c1 df       	rcall	.-126    	; 0x27c <UartClass::_poll_tx_data_empty()>
     2fa:	fa cf       	rjmp	.-12     	; 0x2f0 <UartClass::write(unsigned char)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:690
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
        uint8_t ctrla = (*_hwserial_module).CTRLA;
     2fc:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:691
        ctrla &= ~USART_RXCIE_bm;
     2fe:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:692
        ctrla |=  USART_TXCIE_bm;
     300:	80 64       	ori	r24, 0x40	; 64
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:693
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     302:	90 e4       	ldi	r25, 0x40	; 64
     304:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:694
        (*_hwserial_module).CTRLA = ctrla;
     306:	ec 85       	ldd	r30, Y+12	; 0x0c
     308:	fd 85       	ldd	r31, Y+13	; 0x0d
     30a:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:699
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
      }
      // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
      (*_hwserial_module).TXDATAL = c;
     30c:	ec 85       	ldd	r30, Y+12	; 0x0c
     30e:	fd 85       	ldd	r31, Y+13	; 0x0d
     310:	62 83       	std	Z+2, r22	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:734
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    }
    return 1;
  }
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:721
    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
      _poll_tx_data_empty();
    }
    _tx_buffer[_tx_buffer_head] = c;
     320:	eb 89       	ldd	r30, Y+19	; 0x13
     322:	ec 0f       	add	r30, r28
     324:	fd 2f       	mov	r31, r29
     326:	f1 1d       	adc	r31, r1
     328:	eb 5a       	subi	r30, 0xAB	; 171
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	00 83       	st	Z, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:722
    _tx_buffer_head = i;
     32e:	1b 8b       	std	Y+19, r17	; 0x13
     330:	ec 85       	ldd	r30, Y+12	; 0x0c
     332:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:723
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     334:	88 89       	ldd	r24, Y+16	; 0x10
     336:	81 ff       	sbrs	r24, 1
     338:	09 c0       	rjmp	.+18     	; 0x34c <UartClass::write(unsigned char)+0x92>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:724
      uint8_t ctrla = (*_hwserial_module).CTRLA;
     33a:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:725
      ctrla &= ~USART_RXCIE_bm;
     33c:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:726
      ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     33e:	80 66       	ori	r24, 0x60	; 96
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:727
      (*_hwserial_module).STATUS = USART_TXCIF_bm;
     340:	90 e4       	ldi	r25, 0x40	; 64
     342:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:728
      (*_hwserial_module).CTRLA = ctrla;
     344:	ec 85       	ldd	r30, Y+12	; 0x0c
     346:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:731
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     348:	85 83       	std	Z+5, r24	; 0x05
     34a:	e3 cf       	rjmp	.-58     	; 0x312 <UartClass::write(unsigned char)+0x58>
     34c:	85 81       	ldd	r24, Z+5	; 0x05
     34e:	80 62       	ori	r24, 0x20	; 32
     350:	fb cf       	rjmp	.-10     	; 0x348 <UartClass::write(unsigned char)+0x8e>

00000352 <UartClass::flush()>:
_ZN9UartClass5flushEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:651
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    }
    return tail - head - 1;
  }

  void UartClass::flush() {
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:655
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXCIF (transmit
    // complete) bit to 1 during initialization
    if (!_state & 1) {
     358:	88 89       	ldd	r24, Y+16	; 0x10
     35a:	88 23       	and	r24, r24
     35c:	59 f0       	breq	.+22     	; 0x374 <UartClass::flush()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:670
    // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
    // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
    // and in that case flush(), and write() with full buffer would just straight up hang...

    // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
    while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     35e:	ec 85       	ldd	r30, Y+12	; 0x0c
     360:	fd 85       	ldd	r31, Y+13	; 0x0d
     362:	85 81       	ldd	r24, Z+5	; 0x05
     364:	85 fd       	sbrc	r24, 5
     366:	03 c0       	rjmp	.+6      	; 0x36e <UartClass::flush()+0x1c>
     368:	84 81       	ldd	r24, Z+4	; 0x04
     36a:	86 fd       	sbrc	r24, 6
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:675

      // If interrupts are globally disabled or the and DR empty interrupt is disabled,
      // poll the "data register empty" interrupt flag to prevent deadlock

      _poll_tx_data_empty();
     36c:	03 c0       	rjmp	.+6      	; 0x374 <UartClass::flush()+0x22>
     36e:	ce 01       	movw	r24, r28
     370:	85 df       	rcall	.-246    	; 0x27c <UartClass::_poll_tx_data_empty()>
     372:	f5 cf       	rjmp	.-22     	; 0x35e <UartClass::flush()+0xc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:679
    }
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     37a:	af 92       	push	r10
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	6c 01       	movw	r12, r24
     390:	7b 01       	movw	r14, r22
     392:	8b 01       	movw	r16, r22
     394:	04 0f       	add	r16, r20
     396:	15 1f       	adc	r17, r21
     398:	eb 01       	movw	r28, r22
     39a:	5e 01       	movw	r10, r28
     39c:	ae 18       	sub	r10, r14
     39e:	bf 08       	sbc	r11, r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	59 f0       	breq	.+22     	; 0x3bc <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:32
    if (write(*buffer++)) {
     3a6:	69 91       	ld	r22, Y+
     3a8:	d6 01       	movw	r26, r12
     3aa:	ed 91       	ld	r30, X+
     3ac:	fc 91       	ld	r31, X
     3ae:	01 90       	ld	r0, Z+
     3b0:	f0 81       	ld	r31, Z
     3b2:	e0 2d       	mov	r30, r0
     3b4:	c6 01       	movw	r24, r12
     3b6:	09 95       	icall
     3b8:	89 2b       	or	r24, r25
     3ba:	79 f7       	brne	.-34     	; 0x39a <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     3bc:	c5 01       	movw	r24, r10
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	bf 90       	pop	r11
     3d0:	af 90       	pop	r10
     3d2:	08 95       	ret

000003d4 <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.h:293
    inline   size_t write(unsigned int n)   {return write((uint8_t)n);}
    inline   size_t write(int n)            {return write((uint8_t)n);}
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	08 95       	ret

000003d8 <micros>:
micros():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:316
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     3d8:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:317
    cli(); /* INTERRUPTS OFF */
     3da:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:319
    #if defined(MILLIS_USE_TIMERA0)
      ticks = TCA0.SPLIT.HCNT;
     3dc:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <vtable for UartClass+0x7f6980>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:320
      flags = TCA0.SPLIT.INTFLAGS;
     3e0:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <vtable for UartClass+0x7f696a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:336
     * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
     * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4))
      overflows = timer_overflow_count;
     3e4:	20 91 12 3c 	lds	r18, 0x3C12	; 0x803c12 <timer_overflow_count>
     3e8:	30 91 13 3c 	lds	r19, 0x3C13	; 0x803c13 <timer_overflow_count+0x1>
     3ec:	40 91 14 3c 	lds	r20, 0x3C14	; 0x803c14 <timer_overflow_count+0x2>
     3f0:	50 91 15 3c 	lds	r21, 0x3C15	; 0x803c15 <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:341
    #else
      overflows = timer_millis;
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     3f4:	8f bf       	out	0x3f, r24	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:345
    #if defined(MILLIS_USE_TIMERD0)
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
     3f6:	8e ef       	ldi	r24, 0xFE	; 254
     3f8:	86 1b       	sub	r24, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:346
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
     3fa:	91 ff       	sbrs	r25, 1
     3fc:	06 c0       	rjmp	.+12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
     3fe:	84 30       	cpi	r24, 0x04	; 4
     400:	20 f4       	brcc	.+8      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:353
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
    #endif
        #if (defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4)) && !(F_CPU > 2000000UL)
          overflows +=2;
        #else
          overflows++;
     402:	2f 5f       	subi	r18, 0xFF	; 255
     404:	3f 4f       	sbci	r19, 0xFF	; 255
     406:	4f 4f       	sbci	r20, 0xFF	; 255
     408:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:692
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                     + (ticks * 3 + ((uint16_t)(ticks >> 2) - (ticks >> 4)));
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	89 9f       	mul	r24, r25
     40e:	f0 01       	movw	r30, r0
     410:	11 24       	eor	r1, r1
     412:	98 2f       	mov	r25, r24
     414:	92 95       	swap	r25
     416:	9f 70       	andi	r25, 0x0F	; 15
     418:	e9 1b       	sub	r30, r25
     41a:	f1 09       	sbc	r31, r1
     41c:	86 95       	lsr	r24
     41e:	86 95       	lsr	r24
     420:	e8 0f       	add	r30, r24
     422:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:691
            + (ticks * 5 + ((uint16_t)(ticks >> 2) + (ticks >> 4) + (ticks >> 5)));
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
     424:	a0 e3       	ldi	r26, 0x30	; 48
     426:	b3 e0       	ldi	r27, 0x03	; 3
     428:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__muluhisi3>
     42c:	6e 0f       	add	r22, r30
     42e:	7f 1f       	adc	r23, r31
     430:	81 1d       	adc	r24, r1
     432:	91 1d       	adc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:702
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     434:	08 95       	ret

00000436 <delay>:
delay():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:770
        _delay_ms(1);
      }
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
     436:	cf 92       	push	r12
     438:	df 92       	push	r13
     43a:	ef 92       	push	r14
     43c:	ff 92       	push	r15
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	6b 01       	movw	r12, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:771
    uint16_t start = (uint16_t) micros();
     444:	7c 01       	movw	r14, r24
     446:	c8 df       	rcall	.-112    	; 0x3d8 <micros>
     448:	eb 01       	movw	r28, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:772
    while (ms > 0) {
     44a:	c1 14       	cp	r12, r1
     44c:	d1 04       	cpc	r13, r1
     44e:	e1 04       	cpc	r14, r1
     450:	f1 04       	cpc	r15, r1
     452:	41 f4       	brne	.+16     	; 0x464 <delay+0x2e>
     454:	12 c0       	rjmp	.+36     	; 0x47a <delay+0x44>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:774
      while (((uint16_t) micros() - start) >= 1000 && ms) {
        ms-- ;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	c8 1a       	sub	r12, r24
     45a:	d1 08       	sbc	r13, r1
     45c:	e1 08       	sbc	r14, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:775
        start += 1000;
     45e:	f1 08       	sbc	r15, r1
     460:	c8 51       	subi	r28, 0x18	; 24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:773
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
    uint16_t start = (uint16_t) micros();
    while (ms > 0) {
      while (((uint16_t) micros() - start) >= 1000 && ms) {
     462:	dc 4f       	sbci	r29, 0xFC	; 252
     464:	b9 df       	rcall	.-142    	; 0x3d8 <micros>
     466:	6c 1b       	sub	r22, r28
     468:	7d 0b       	sbc	r23, r29
     46a:	68 3e       	cpi	r22, 0xE8	; 232
     46c:	73 40       	sbci	r23, 0x03	; 3
     46e:	68 f3       	brcs	.-38     	; 0x44a <delay+0x14>
     470:	c1 14       	cp	r12, r1
     472:	d1 04       	cpc	r13, r1
     474:	e1 04       	cpc	r14, r1
     476:	f1 04       	cpc	r15, r1
     478:	71 f7       	brne	.-36     	; 0x456 <delay+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:778
        ms-- ;
        start += 1000;
      }
    }
  }
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	08 95       	ret

00000488 <millis>:
millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:248


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     488:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:249
  cli();
     48a:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:300
      "adc %D0, %D1"    "\n\t"
      : "+r" (m), "+r" (temp), "+d" (cnt)
      );
    */
  #else
    m = timer_millis;
     48c:	60 91 0e 3c 	lds	r22, 0x3C0E	; 0x803c0e <timer_millis>
     490:	70 91 0f 3c 	lds	r23, 0x3C0F	; 0x803c0f <timer_millis+0x1>
     494:	80 91 10 3c 	lds	r24, 0x3C10	; 0x803c10 <timer_millis+0x2>
     498:	90 91 11 3c 	lds	r25, 0x3C11	; 0x803c11 <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:301
    SREG = oldSREG;
     49c:	2f bf       	out	0x3f, r18	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:304
  #endif
  return m;
}
     49e:	08 95       	ret

000004a0 <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.h:257

  public:
    inline             UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t default_pinset);
    bool                    pins(uint8_t tx, uint8_t rx);
    bool                    swap(uint8_t mux_level = 1);
    void                   begin(uint32_t baud) {begin(baud, SERIAL_8N1);}
     4a0:	dc 01       	movw	r26, r24
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	00 88       	ldd	r0, Z+16	; 0x10
     4a8:	f1 89       	ldd	r31, Z+17	; 0x11
     4aa:	e0 2d       	mov	r30, r0
     4ac:	23 e0       	ldi	r18, 0x03	; 3
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	09 94       	ijmp

000004b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>:
_ZN5Print5writeEPKc.part.2.constprop.35():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:56
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
     4b2:	fc 01       	movw	r30, r24
     4b4:	01 90       	ld	r0, Z+
     4b6:	00 20       	and	r0, r0
     4b8:	e9 f7       	brne	.-6      	; 0x4b4 <Print::write(char const*) [clone .part.2] [clone .constprop.35]+0x2>
     4ba:	31 97       	sbiw	r30, 0x01	; 1
     4bc:	af 01       	movw	r20, r30
     4be:	48 1b       	sub	r20, r24
     4c0:	59 0b       	sbc	r21, r25
     4c2:	bc 01       	movw	r22, r24
     4c4:	83 e9       	ldi	r24, 0x93	; 147
     4c6:	9c e3       	ldi	r25, 0x3C	; 60
     4c8:	58 cf       	rjmp	.-336    	; 0x37a <Print::write(unsigned char const*, unsigned int)>

000004ca <Print::println(String const&) [clone .constprop.27]>:
_ZN5Print7printlnERK6String.constprop.27():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:127

size_t Print::println(void) {
  return write("\r\n");
}

size_t Print::println(const String &s) {
     4ca:	cf 93       	push	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:60
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     4cc:	df 93       	push	r29
write():
     4ce:	fc 01       	movw	r30, r24
     4d0:	44 81       	ldd	r20, Z+4	; 0x04
     4d2:	55 81       	ldd	r21, Z+5	; 0x05
     4d4:	60 81       	ld	r22, Z
     4d6:	71 81       	ldd	r23, Z+1	; 0x01
     4d8:	83 e9       	ldi	r24, 0x93	; 147
     4da:	9c e3       	ldi	r25, 0x3C	; 60
     4dc:	4e df       	rcall	.-356    	; 0x37a <Print::write(unsigned char const*, unsigned int)>
     4de:	ec 01       	movw	r28, r24
     4e0:	8b eb       	ldi	r24, 0xBB	; 187
     4e2:	90 ea       	ldi	r25, 0xA0	; 160
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:131
  size_t n = print(s);
  n += println();
  return n;
}
     4e4:	e6 df       	rcall	.-52     	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
_ZN5Print7printlnERK6String.constprop.27():
     4e6:	8c 0f       	add	r24, r28
     4e8:	9d 1f       	adc	r25, r29
     4ea:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:133

size_t Print::println(const char c[]) {
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <Print::println(char const*) [clone .constprop.32]>:
_ZN5Print7printlnEPKc.constprop.32():
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
write():
     4f4:	de df       	rcall	.-68     	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
     4f6:	ec 01       	movw	r28, r24
     4f8:	8b eb       	ldi	r24, 0xBB	; 187
     4fa:	90 ea       	ldi	r25, 0xA0	; 160
     4fc:	da df       	rcall	.-76     	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
_ZN5Print7printlnEPKc.constprop.32():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:137
  size_t n = print(c);
  n += println();
  return n;
}
     4fe:	8c 0f       	add	r24, r28
     500:	9d 1f       	adc	r25, r29
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <Print::print(int, int) [clone .constprop.20]>:
_ZN5Print5printEii.constprop.20():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:78

size_t Print::print(unsigned char b, int base) {
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base) {
     508:	8f 92       	push	r8
     50a:	9f 92       	push	r9
     50c:	af 92       	push	r10
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	cd b7       	in	r28, 0x3d	; 61
     522:	de b7       	in	r29, 0x3e	; 62
     524:	a1 97       	sbiw	r28, 0x21	; 33
     526:	cd bf       	out	0x3d, r28	; 61
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:79
  return print((long) n, base);
     528:	de bf       	out	0x3e, r29	; 62
     52a:	6c 01       	movw	r12, r24
     52c:	99 0f       	add	r25, r25
     52e:	ee 08       	sbc	r14, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:90

size_t Print::print(long n, int base) {
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     530:	ff 08       	sbc	r15, r15
print():
     532:	f7 fe       	sbrs	r15, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:71
size_t Print::print(const char str[]) {
  return write(str);
}

size_t Print::print(char c) {
  return write(c);
     534:	3c c0       	rjmp	.+120    	; 0x5ae <Print::print(int, int) [clone .constprop.20]+0xa6>
     536:	6d e2       	ldi	r22, 0x2D	; 45
     538:	83 e9       	ldi	r24, 0x93	; 147
     53a:	9c e3       	ldi	r25, 0x3C	; 60
     53c:	be de       	rcall	.-644    	; 0x2ba <UartClass::write(unsigned char)>
     53e:	8c 01       	movw	r16, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:92
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     540:	22 27       	eor	r18, r18
     542:	33 27       	eor	r19, r19
     544:	a9 01       	movw	r20, r18
     546:	2c 19       	sub	r18, r12
     548:	3d 09       	sbc	r19, r13
     54a:	4e 09       	sbc	r20, r14
     54c:	5f 09       	sbc	r21, r15
printNumber():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:219

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     54e:	19 a2       	std	Y+33, r1	; 0x21
     550:	ce 01       	movw	r24, r28
     552:	81 96       	adiw	r24, 0x21	; 33
     554:	7c 01       	movw	r14, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:227
  if (base < 2) {
    base = 10;
  }

  do {
    char c = n % base;
     556:	9a e0       	ldi	r25, 0x0A	; 10
     558:	89 2e       	mov	r8, r25
     55a:	91 2c       	mov	r9, r1
     55c:	a1 2c       	mov	r10, r1
     55e:	b1 2c       	mov	r11, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:228
    n /= base;
     560:	ca 01       	movw	r24, r20
     562:	b9 01       	movw	r22, r18
     564:	a5 01       	movw	r20, r10
     566:	94 01       	movw	r18, r8
     568:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__udivmodsi4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     56c:	60 5d       	subi	r22, 0xD0	; 208
     56e:	f7 01       	movw	r30, r14
     570:	62 93       	st	-Z, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:231
  } while (n);
     572:	7f 01       	movw	r14, r30
     574:	21 15       	cp	r18, r1
     576:	31 05       	cpc	r19, r1
     578:	41 05       	cpc	r20, r1
     57a:	51 05       	cpc	r21, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:54
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
     57c:	89 f7       	brne	.-30     	; 0x560 <Print::print(int, int) [clone .constprop.20]+0x58>
_ZN5Print5printEii.constprop.20():
     57e:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
     580:	80 e0       	ldi	r24, 0x00	; 0
write():
     582:	30 97       	sbiw	r30, 0x00	; 0
     584:	11 f0       	breq	.+4      	; 0x58a <Print::print(int, int) [clone .constprop.20]+0x82>
     586:	cf 01       	movw	r24, r30
     588:	94 df       	rcall	.-216    	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
print():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:93
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
     58a:	80 0f       	add	r24, r16
     58c:	91 1f       	adc	r25, r17
_ZN5Print5printEii.constprop.20():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:80
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base) {
  return print((long) n, base);
}
     58e:	a1 96       	adiw	r28, 0x21	; 33
     590:	cd bf       	out	0x3d, r28	; 61
     592:	de bf       	out	0x3e, r29	; 62
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	bf 90       	pop	r11
     5a6:	af 90       	pop	r10
     5a8:	9f 90       	pop	r9
     5aa:	8f 90       	pop	r8
     5ac:	08 95       	ret
print():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:95
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     5ae:	a7 01       	movw	r20, r14
     5b0:	96 01       	movw	r18, r12
printNumber():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:219

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     5b2:	19 a2       	std	Y+33, r1	; 0x21
     5b4:	8e 01       	movw	r16, r28
     5b6:	0f 5d       	subi	r16, 0xDF	; 223
     5b8:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:227
  if (base < 2) {
    base = 10;
  }

  do {
    char c = n % base;
     5ba:	8a e0       	ldi	r24, 0x0A	; 10
     5bc:	c8 2e       	mov	r12, r24
     5be:	d1 2c       	mov	r13, r1
     5c0:	e1 2c       	mov	r14, r1
     5c2:	f1 2c       	mov	r15, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:228
    n /= base;
     5c4:	ca 01       	movw	r24, r20
     5c6:	b9 01       	movw	r22, r18
     5c8:	a7 01       	movw	r20, r14
     5ca:	96 01       	movw	r18, r12
     5cc:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__udivmodsi4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     5d0:	60 5d       	subi	r22, 0xD0	; 208
     5d2:	f8 01       	movw	r30, r16
     5d4:	62 93       	st	-Z, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:231
  } while (n);
     5d6:	8f 01       	movw	r16, r30
     5d8:	21 15       	cp	r18, r1
     5da:	31 05       	cpc	r19, r1
     5dc:	41 05       	cpc	r20, r1
     5de:	51 05       	cpc	r21, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:54
        return 0;
     5e0:	89 f7       	brne	.-30     	; 0x5c4 <Print::print(int, int) [clone .constprop.20]+0xbc>
_ZN5Print5printEii.constprop.20():
     5e2:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
     5e4:	80 e0       	ldi	r24, 0x00	; 0
write():
     5e6:	30 97       	sbiw	r30, 0x00	; 0
     5e8:	91 f2       	breq	.-92     	; 0x58e <Print::print(int, int) [clone .constprop.20]+0x86>
     5ea:	cf 01       	movw	r24, r30
     5ec:	62 df       	rcall	.-316    	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
     5ee:	cf cf       	rjmp	.-98     	; 0x58e <Print::print(int, int) [clone .constprop.20]+0x86>

000005f0 <String::invalidate()>:
_ZN6String10invalidateEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:127
  buffer = NULL;
  capacity = 0;
  len = 0;
}

void String::invalidate(void) {
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:128
  if (buffer) {
     5f6:	88 81       	ld	r24, Y
     5f8:	99 81       	ldd	r25, Y+1	; 0x01
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	11 f0       	breq	.+4      	; 0x602 <String::invalidate()+0x12>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:129
    free(buffer);
     5fe:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <free>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:131
  }
  buffer = NULL;
     602:	18 82       	st	Y, r1
     604:	19 82       	std	Y+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:132
  capacity = len = 0;
     606:	1c 82       	std	Y+4, r1	; 0x04
     608:	1d 82       	std	Y+5, r1	; 0x05
     60a:	1a 82       	std	Y+2, r1	; 0x02
     60c:	1b 82       	std	Y+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:133
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <String::~String()>:
_ZN6StringD2Ev():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:114
  char buf[33];
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String() {
  free(buffer);
     614:	fc 01       	movw	r30, r24
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <free>

0000061e <pinMode>:
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     61e:	86 31       	cpi	r24, 0x16	; 22
     620:	f0 f4       	brcc	.+60     	; 0x65e <pinMode+0x40>
check_valid_digital_pin():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin))
     622:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     624:	fc 01       	movw	r30, r24
     626:	e8 58       	subi	r30, 0x88	; 136
     628:	ff 45       	sbci	r31, 0x5F	; 95
     62a:	20 81       	ld	r18, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:137
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
     62c:	2f 3f       	cpi	r18, 0xFF	; 255
     62e:	b9 f0       	breq	.+46     	; 0x65e <pinMode+0x40>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:140
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     630:	fc 01       	movw	r30, r24
     632:	ee 59       	subi	r30, 0x9E	; 158
     634:	ff 45       	sbci	r31, 0x5F	; 95
portToPortBaseOffset():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:130
  SREG = oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
     636:	e0 81       	ld	r30, Z
     638:	e2 95       	swap	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:131
  return port << 1;
     63a:	ee 0f       	add	r30, r30
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:140
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	f4 60       	ori	r31, 0x04	; 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:141
  if (mode & 0x01) {
     640:	61 30       	cpi	r22, 0x01	; 1
     642:	71 f4       	brne	.+28     	; 0x660 <pinMode+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:143
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     644:	21 83       	std	Z+1, r18	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:154
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
    */
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
     646:	84 5b       	subi	r24, 0xB4	; 180
     648:	9f 45       	sbci	r25, 0x5F	; 95
     64a:	dc 01       	movw	r26, r24
     64c:	8c 91       	ld	r24, X
     64e:	80 61       	ori	r24, 0x10	; 16
     650:	e8 0f       	add	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:156
  bit_mask = *port_base;
  if (mode & 2) {
     652:	f1 1d       	adc	r31, r1
     654:	80 81       	ld	r24, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:157
    bit_mask |= 0x08;
     656:	61 30       	cpi	r22, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:161
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
     658:	29 f0       	breq	.+10     	; 0x664 <pinMode+0x46>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:162
}
     65a:	88 60       	ori	r24, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:145
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
     65c:	80 83       	st	Z, r24
     65e:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:159
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     660:	22 83       	std	Z+2, r18	; 0x02
     662:	f1 cf       	rjmp	.-30     	; 0x646 <pinMode+0x28>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:19
{
}

void TinyMegaI2CMaster::init()
{
  pinMode(PIN_WIRE_SDA, INPUT_PULLUP);
     664:	87 7f       	andi	r24, 0xF7	; 247
     666:	fa cf       	rjmp	.-12     	; 0x65c <pinMode+0x3e>

00000668 <TinyMegaI2CMaster::init() [clone .constprop.17]>:
_ZN17TinyMegaI2CMaster4initEv.constprop.17():
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	8a e0       	ldi	r24, 0x0A	; 10
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:20
  pinMode(PIN_WIRE_SCL, INPUT_PULLUP);
     66c:	d8 df       	rcall	.-80     	; 0x61e <pinMode>
     66e:	62 e0       	ldi	r22, 0x02	; 2
     670:	8b e0       	ldi	r24, 0x0B	; 11
     672:	d5 df       	rcall	.-86     	; 0x61e <pinMode>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:27
  // For ATTINY-1607-MFR, Setting SDA SCL pins with DPM would be
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
     674:	e0 e1       	ldi	r30, 0x10	; 16
     676:	f8 e0       	ldi	r31, 0x08	; 8
     678:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	83 83       	std	Z+3, r24	; 0x03
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:29
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     67e:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:30
}
     680:	08 95       	ret

00000682 <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:470
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     682:	8f 92       	push	r8
     684:	9f 92       	push	r9
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	8c 01       	movw	r16, r24
     698:	4a 01       	movw	r8, r20
     69a:	5b 01       	movw	r10, r22
     69c:	e9 01       	movw	r28, r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:473
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     69e:	dc 01       	movw	r26, r24
     6a0:	50 96       	adiw	r26, 0x10	; 16
     6a2:	8c 91       	ld	r24, X
     6a4:	50 97       	sbiw	r26, 0x10	; 16
     6a6:	80 ff       	sbrs	r24, 0
     6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <UartClass::begin(unsigned long, unsigned int)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:474
    this->end();
     6aa:	ed 91       	ld	r30, X+
     6ac:	fc 91       	ld	r31, X
     6ae:	02 88       	ldd	r0, Z+18	; 0x12
     6b0:	f3 89       	ldd	r31, Z+19	; 0x13
     6b2:	e0 2d       	mov	r30, r0
     6b4:	c8 01       	movw	r24, r16
     6b6:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:478
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                         // see if they passed anything in low byte or SERIAL_CONFIG_VALID.
     6b8:	c1 11       	cpse	r28, r1
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <UartClass::begin(unsigned long, unsigned int)+0x3c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:479
    ctrlc = (uint8_t)SERIAL_8N1;            // low byte of 0 could mean they want SERIAL_5N1. Or that they thought they'd
     6bc:	c3 e0       	ldi	r28, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:481
  }
  ctrlc &= ~0x04; // Now unset that 0x04 bit if it's set, because none of the values with it set are supported. We use that to smuggle in a "this constant was specified" for 5N1
     6be:	ec 2e       	mov	r14, r28
     6c0:	e8 94       	clt
     6c2:	e2 f8       	bld	r14, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:482
  uint8_t ctrla = (uint8_t) (options >> 8);// CTRLA will get the remains of the options high byte.
     6c4:	fd 2e       	mov	r15, r29
     6c6:	cd 2f       	mov	r28, r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:484
  uint16_t baud_setting = 0;                // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t   ctrlb = (~ctrla & 0xC0);        // Top two bits (TXEN RXEN), inverted so they match he sense in the registers.
     6c8:	d0 95       	com	r29
     6ca:	d0 7c       	andi	r29, 0xC0	; 192
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:485
  if (baud   > F_CPU / 16) {            // if this baud is too fast for non-U2X
     6cc:	b5 eb       	ldi	r27, 0xB5	; 181
     6ce:	8b 16       	cp	r8, r27
     6d0:	b4 ec       	ldi	r27, 0xC4	; 196
     6d2:	9b 06       	cpc	r9, r27
     6d4:	b4 e0       	ldi	r27, 0x04	; 4
     6d6:	ab 06       	cpc	r10, r27
     6d8:	b1 04       	cpc	r11, r1
     6da:	28 f0       	brcs	.+10     	; 0x6e6 <UartClass::begin(unsigned long, unsigned int)+0x64>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:486
        ctrlb   |= USART_RXMODE0_bm;        // set the U2X bit in what will become CTRLB
     6dc:	d2 60       	ori	r29, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:487
        baud   >>= 1;                       // And lower the baud rate by haldf
     6de:	b6 94       	lsr	r11
     6e0:	a7 94       	ror	r10
     6e2:	97 94       	ror	r9
     6e4:	87 94       	ror	r8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:489
  }
  baud_setting = (((4 * F_CPU) / baud));  // And now the registers that baud was passed in are done.
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	7d e2       	ldi	r23, 0x2D	; 45
     6ea:	81 e3       	ldi	r24, 0x31	; 49
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	a5 01       	movw	r20, r10
     6f0:	94 01       	movw	r18, r8
     6f2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__udivmodsi4>
     6f6:	20 34       	cpi	r18, 0x40	; 64
     6f8:	31 05       	cpc	r19, r1
     6fa:	10 f4       	brcc	.+4      	; 0x700 <UartClass::begin(unsigned long, unsigned int)+0x7e>
     6fc:	20 e4       	ldi	r18, 0x40	; 64
     6fe:	30 e0       	ldi	r19, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:495
  if (baud_setting < 64)                      // so set to the maximum baud rate setting.
    baud_setting= 64;       // set the U2X bit in what will become CTRLB
  //} else if (baud < (F_CPU / 16800)) {      // Baud rate is too low
  //  baud_setting = 65535;                   // minimum baud rate.'
                                            // Baud setting done now we do the other options not in CTRLC;
  if (ctrla & 0x04) {                       // is ODME option set?
     700:	f2 fc       	sbrc	r15, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:496
    ctrlb |= USART_ODME_bm;                 // set the bit in what will become CTRLB
     702:	d8 60       	ori	r29, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:498
  }
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     704:	8c 2f       	mov	r24, r28
     706:	8b 72       	andi	r24, 0x2B	; 43
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:499
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     708:	d7 fd       	sbrc	r29, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:500
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     70a:	80 68       	ori	r24, 0x80	; 128
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:502
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     70c:	cd 2f       	mov	r28, r29
     70e:	c8 7c       	andi	r28, 0xC8	; 200
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:503
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback, need to set state bit 2.
     710:	83 ff       	sbrs	r24, 3
     712:	07 c0       	rjmp	.+14     	; 0x722 <UartClass::begin(unsigned long, unsigned int)+0xa0>
     714:	c8 3c       	cpi	r28, 0xC8	; 200
     716:	29 f4       	brne	.+10     	; 0x722 <UartClass::begin(unsigned long, unsigned int)+0xa0>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:504
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
     718:	f8 01       	movw	r30, r16
     71a:	90 89       	ldd	r25, Z+16	; 0x10
     71c:	92 60       	ori	r25, 0x02	; 2
     71e:	90 8b       	std	Z+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:505
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
     720:	c8 ed       	ldi	r28, 0xD8	; 216
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:507
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     722:	80 fd       	sbrc	r24, 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:508
    setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
     724:	c1 60       	ori	r28, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:510
  }
  uint8_t oldSREG = SREG;
     726:	ff b6       	in	r15, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:511
  cli();
     728:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:512
  volatile USART_t* MyUSART = _hwserial_module;
     72a:	d8 01       	movw	r26, r16
     72c:	1c 96       	adiw	r26, 0x0c	; 12
     72e:	ed 91       	ld	r30, X+
     730:	fc 91       	ld	r31, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:513
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     732:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:514
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     734:	e7 82       	std	Z+7, r14	; 0x07
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:515
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     736:	20 87       	std	Z+8, r18	; 0x08
     738:	31 87       	std	Z+9, r19	; 0x09
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:516
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     73a:	85 ff       	sbrs	r24, 5
     73c:	3f c0       	rjmp	.+126    	; 0x7bc <UartClass::begin(unsigned long, unsigned int)+0x13a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:517
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     73e:	cf 77       	andi	r28, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:518
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	94 87       	std	Z+12, r25	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:519
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     744:	9f ef       	ldi	r25, 0xFF	; 255
     746:	95 87       	std	Z+13, r25	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:523
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     748:	8f 7d       	andi	r24, 0xDF	; 223
     74a:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:524
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     74c:	d6 83       	std	Z+6, r29	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:525
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
     74e:	f8 01       	movw	r30, r16
     750:	27 85       	ldd	r18, Z+15	; 0x0f
     752:	86 85       	ldd	r24, Z+14	; 0x0e
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:538
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     754:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vtable for UartClass+0x7f6160>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:537
    uint8_t muxregval    = PORTMUX.USARTROUTEA;
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
     758:	22 23       	and	r18, r18
     75a:	91 f1       	breq	.+100    	; 0x7c0 <UartClass::begin(unsigned long, unsigned int)+0x13e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:538
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     75c:	91 60       	ori	r25, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:540
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     75e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <vtable for UartClass+0x7f6160>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:548
  #if MEGATINYCORE_SERIES == 2
    if (mux_set == 3) { // not connected to pins...
      return;           // so we are done!
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
     762:	82 0f       	add	r24, r18
     764:	99 27       	eor	r25, r25
     766:	99 1f       	adc	r25, r25
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	8c 01       	movw	r16, r24
     772:	07 56       	subi	r16, 0x67	; 103
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:549
  if ((enmask & 0x40 && !(enmask & 0x08))) {
     774:	1f 45       	sbci	r17, 0x5F	; 95
     776:	c6 ff       	sbrs	r28, 6
     778:	25 c0       	rjmp	.+74     	; 0x7c4 <UartClass::begin(unsigned long, unsigned int)+0x142>
     77a:	c3 fd       	sbrc	r28, 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:550
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
     77c:	23 c0       	rjmp	.+70     	; 0x7c4 <UartClass::begin(unsigned long, unsigned int)+0x142>
     77e:	61 e0       	ldi	r22, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:553
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     780:	d8 01       	movw	r26, r16
     782:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:555
  }
  if (enmask & 0x80 && !(enmask & 0x10)) {
     784:	4c df       	rcall	.-360    	; 0x61e <pinMode>
     786:	c7 ff       	sbrs	r28, 7
     788:	07 c0       	rjmp	.+14     	; 0x798 <UartClass::begin(unsigned long, unsigned int)+0x116>
     78a:	c4 fd       	sbrc	r28, 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:557
    // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
    pinMode(muxrow[1], INPUT_PULLUP);
     78c:	05 c0       	rjmp	.+10     	; 0x798 <UartClass::begin(unsigned long, unsigned int)+0x116>
     78e:	62 e0       	ldi	r22, 0x02	; 2
     790:	d8 01       	movw	r26, r16
     792:	11 96       	adiw	r26, 0x01	; 1
     794:	8c 91       	ld	r24, X
     796:	43 df       	rcall	.-378    	; 0x61e <pinMode>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:559
  }
  if (enmask & 0x01) { // finally if RS485 mode is enabled, we make XDIR output, otherwise it can't drive the pin.
     798:	c0 ff       	sbrs	r28, 0
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <UartClass::begin(unsigned long, unsigned int)+0x122>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:560
    pinMode(muxrow[3], OUTPUT); // make XDIR output.
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	f8 01       	movw	r30, r16
     7a0:	83 81       	ldd	r24, Z+3	; 0x03
     7a2:	3d df       	rcall	.-390    	; 0x61e <pinMode>
_ZN9UartClass5beginEmj():
     7a4:	ff be       	out	0x3f, r15	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:526
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
  SREG = oldSREG;                             // re-enable interrupts, and we're done.
     7a6:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:527
}
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	08 95       	ret
     7bc:	14 86       	std	Z+12, r1	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:521
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     7be:	c4 cf       	rjmp	.-120    	; 0x748 <UartClass::begin(unsigned long, unsigned int)+0xc6>
_set_pins():
     7c0:	9e 7f       	andi	r25, 0xFE	; 254
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:540

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     7c2:	cd cf       	rjmp	.-102    	; 0x75e <UartClass::begin(unsigned long, unsigned int)+0xdc>
     7c4:	2c 2f       	mov	r18, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:551
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
  if ((enmask & 0x40 && !(enmask & 0x08))) {
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     7c6:	20 75       	andi	r18, 0x50	; 80
     7c8:	f1 f2       	breq	.-68     	; 0x786 <UartClass::begin(unsigned long, unsigned int)+0x104>
     7ca:	87 56       	subi	r24, 0x67	; 103
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:553
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     7cc:	9f 45       	sbci	r25, 0x5F	; 95
     7ce:	62 e0       	ldi	r22, 0x02	; 2
     7d0:	fc 01       	movw	r30, r24
     7d2:	80 81       	ld	r24, Z
     7d4:	d7 cf       	rjmp	.-82     	; 0x784 <UartClass::begin(unsigned long, unsigned int)+0x102>

000007d6 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
     7d6:	0f 93       	push	r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:135
  }
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size) {
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	ec 01       	movw	r28, r24
     7e0:	88 81       	ld	r24, Y
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:136
  if (buffer && capacity >= size) {
     7e2:	99 81       	ldd	r25, Y+1	; 0x01
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	59 f0       	breq	.+22     	; 0x7fe <String::reserve(unsigned int)+0x28>
     7e8:	2a 81       	ldd	r18, Y+2	; 0x02
     7ea:	3b 81       	ldd	r19, Y+3	; 0x03
     7ec:	26 17       	cp	r18, r22
     7ee:	37 07       	cpc	r19, r23
     7f0:	30 f0       	brcs	.+12     	; 0x7fe <String::reserve(unsigned int)+0x28>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:141
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
      buffer[0] = 0;
     7f4:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:146
    }
    return 1;
  }
  return 0;
}
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret
     7fe:	8b 01       	movw	r16, r22
changeBuffer():
     800:	6f 5f       	subi	r22, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:149

unsigned char String::changeBuffer(unsigned int maxStrLen) {
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <realloc>
     808:	00 97       	sbiw	r24, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:150
  if (newbuffer) {
     80a:	59 f0       	breq	.+22     	; 0x822 <String::reserve(unsigned int)+0x4c>
     80c:	88 83       	st	Y, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:151
    buffer = newbuffer;
     80e:	99 83       	std	Y+1, r25	; 0x01
     810:	0a 83       	std	Y+2, r16	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:152
    capacity = maxStrLen;
     812:	1b 83       	std	Y+3, r17	; 0x03
_ZN6String7reserveEj():
     814:	2c 81       	ldd	r18, Y+4	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:140
unsigned char String::reserve(unsigned int size) {
  if (buffer && capacity >= size) {
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
     816:	3d 81       	ldd	r19, Y+5	; 0x05
     818:	23 2b       	or	r18, r19
     81a:	59 f7       	brne	.-42     	; 0x7f2 <String::reserve(unsigned int)+0x1c>
     81c:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:141
      buffer[0] = 0;
     81e:	10 82       	st	Z, r1
     820:	e8 cf       	rjmp	.-48     	; 0x7f2 <String::reserve(unsigned int)+0x1c>
     822:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:145
    }
    return 1;
  }
  return 0;
     824:	e7 cf       	rjmp	.-50     	; 0x7f4 <String::reserve(unsigned int)+0x1e>

00000826 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
     826:	ef 92       	push	r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:261

unsigned char String::concat(const String &s) {
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length) {
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	61 15       	cp	r22, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:263
  unsigned int newlen = len + length;
  if (!cstr) {
     834:	71 05       	cpc	r23, r1
     836:	41 f4       	brne	.+16     	; 0x848 <String::concat(char const*, unsigned int)+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:264
    return 0;
     838:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:275
    return 0;
  }
  strcpy(buffer + len, cstr);
  len = newlen;
  return 1;
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:266
unsigned char String::concat(const char *cstr, unsigned int length) {
  unsigned int newlen = len + length;
  if (!cstr) {
    return 0;
  }
  if (length == 0) {
     848:	41 15       	cp	r20, r1
     84a:	51 05       	cpc	r21, r1
     84c:	a9 f0       	breq	.+42     	; 0x878 <String::concat(char const*, unsigned int)+0x52>
     84e:	7b 01       	movw	r14, r22
     850:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:262
unsigned char String::concat(const String &s) {
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length) {
  unsigned int newlen = len + length;
     852:	0c 81       	ldd	r16, Y+4	; 0x04
     854:	1d 81       	ldd	r17, Y+5	; 0x05
     856:	04 0f       	add	r16, r20
     858:	15 1f       	adc	r17, r21
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:269
    return 0;
  }
  if (length == 0) {
    return 1;
  }
  if (!reserve(newlen)) {
     85a:	b8 01       	movw	r22, r16
     85c:	bc df       	rcall	.-136    	; 0x7d6 <String::reserve(unsigned int)>
     85e:	88 23       	and	r24, r24
     860:	59 f3       	breq	.-42     	; 0x838 <String::concat(char const*, unsigned int)+0x12>
     862:	28 81       	ld	r18, Y
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:272
    return 0;
  }
  strcpy(buffer + len, cstr);
     864:	39 81       	ldd	r19, Y+1	; 0x01
     866:	8c 81       	ldd	r24, Y+4	; 0x04
     868:	9d 81       	ldd	r25, Y+5	; 0x05
     86a:	b7 01       	movw	r22, r14
     86c:	82 0f       	add	r24, r18
     86e:	93 1f       	adc	r25, r19
     870:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <strcpy>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:273
  len = newlen;
     874:	0c 83       	std	Y+4, r16	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:267
  unsigned int newlen = len + length;
  if (!cstr) {
    return 0;
  }
  if (length == 0) {
    return 1;
     876:	1d 83       	std	Y+5, r17	; 0x05
     878:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:362
    a.invalidate();
  }
  return a;
}

StringSumHelper &operator + (const StringSumHelper &lhs, const char *cstr) {
     87a:	df cf       	rjmp	.-66     	; 0x83a <String::concat(char const*, unsigned int)+0x14>

0000087c <operator+(StringSumHelper const&, char const*)>:
_ZplRK15StringSumHelperPKc():
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:364
  StringSumHelper &a = const_cast<StringSumHelper &>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) {
     880:	ec 01       	movw	r28, r24
     882:	fb 01       	movw	r30, r22
     884:	01 90       	ld	r0, Z+
     886:	00 20       	and	r0, r0
     888:	e9 f7       	brne	.-6      	; 0x884 <operator+(StringSumHelper const&, char const*)+0x8>
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	af 01       	movw	r20, r30
     88e:	46 1b       	sub	r20, r22
     890:	57 0b       	sbc	r21, r23
     892:	c9 df       	rcall	.-110    	; 0x826 <String::concat(char const*, unsigned int)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:365
    a.invalidate();
     894:	81 11       	cpse	r24, r1
     896:	02 c0       	rjmp	.+4      	; 0x89c <operator+(StringSumHelper const&, char const*)+0x20>
     898:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:368
  }
  return a;
}
     89a:	aa de       	rcall	.-684    	; 0x5f0 <String::invalidate()>
     89c:	ce 01       	movw	r24, r28
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:354

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper &operator + (const StringSumHelper &lhs, const String &rhs) {
     8a2:	08 95       	ret

000008a4 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper &>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) {
     8a8:	ec 01       	movw	r28, r24
     8aa:	fb 01       	movw	r30, r22
     8ac:	44 81       	ldd	r20, Z+4	; 0x04
     8ae:	55 81       	ldd	r21, Z+5	; 0x05
     8b0:	60 81       	ld	r22, Z
     8b2:	71 81       	ldd	r23, Z+1	; 0x01
     8b4:	b8 df       	rcall	.-144    	; 0x826 <String::concat(char const*, unsigned int)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:357
    a.invalidate();
     8b6:	81 11       	cpse	r24, r1
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <operator+(StringSumHelper const&, String const&)+0x1a>
     8ba:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:360
  }
  return a;
}
     8bc:	99 de       	rcall	.-718    	; 0x5f0 <String::invalidate()>
     8be:	ce 01       	movw	r24, r28
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:162

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String &String::copy(const char *cstr, unsigned int length) {
     8c4:	08 95       	ret

000008c6 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	ec 01       	movw	r28, r24
     8d4:	7b 01       	movw	r14, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:163
  if (!reserve(length)) {
     8d6:	8a 01       	movw	r16, r20
     8d8:	ba 01       	movw	r22, r20
     8da:	7d df       	rcall	.-262    	; 0x7d6 <String::reserve(unsigned int)>
     8dc:	81 11       	cpse	r24, r1
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <String::copy(char const*, unsigned int)+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:164
    invalidate();
     8e0:	ce 01       	movw	r24, r28
     8e2:	86 de       	rcall	.-756    	; 0x5f0 <String::invalidate()>
     8e4:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:170
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	08 95       	ret
     8f4:	0c 83       	std	Y+4, r16	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:167
String &String::copy(const char *cstr, unsigned int length) {
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     8f6:	1d 83       	std	Y+5, r17	; 0x05
     8f8:	b7 01       	movw	r22, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:168
  strcpy(buffer, cstr);
     8fa:	88 81       	ld	r24, Y
     8fc:	99 81       	ldd	r25, Y+1	; 0x01
     8fe:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <strcpy>
     902:	f0 cf       	rjmp	.-32     	; 0x8e4 <String::copy(char const*, unsigned int)+0x1e>

00000904 <String::String(int, unsigned char) [clone .constprop.25]>:
_ZN6StringC2Eih.constprop.25():
     904:	ef 92       	push	r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:73
  char buf[1 + 8 * sizeof(unsigned char)];
  utoa(value, buf, base);
  *this = buf;
}

String::String(int value, unsigned char base) {
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	62 97       	sbiw	r28, 0x12	; 18
     916:	cd bf       	out	0x3d, r28	; 61
     918:	de bf       	out	0x3e, r29	; 62
     91a:	8c 01       	movw	r16, r24
     91c:	cb 01       	movw	r24, r22
_ZN6String4initEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     91e:	f8 01       	movw	r30, r16
     920:	10 82       	st	Z, r1
     922:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     924:	12 82       	std	Z+2, r1	; 0x02
     926:	13 82       	std	Z+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:124
  len = 0;
     928:	14 82       	std	Z+4, r1	; 0x04
     92a:	15 82       	std	Z+5, r1	; 0x05
itoa():
/Users/saurabhdatta/Library/Arduino15/packages/DxCore/tools/avr-gcc/7.3.0-atmel3.6.1-azduino4b/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     92c:	4a e0       	ldi	r20, 0x0A	; 10
     92e:	9e 01       	movw	r18, r28
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	79 01       	movw	r14, r18
     936:	b9 01       	movw	r22, r18
     938:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__itoa_ncheck>
operator=():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:235
}
#endif

String &String::operator = (const char *cstr) {
  if (cstr) {
    copy(cstr, strlen(cstr));
     93c:	f7 01       	movw	r30, r14
     93e:	01 90       	ld	r0, Z+
     940:	00 20       	and	r0, r0
     942:	e9 f7       	brne	.-6      	; 0x93e <String::String(int, unsigned char) [clone .constprop.25]+0x3a>
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	af 01       	movw	r20, r30
     948:	4e 19       	sub	r20, r14
     94a:	5f 09       	sbc	r21, r15
     94c:	b7 01       	movw	r22, r14
     94e:	c8 01       	movw	r24, r16
     950:	ba df       	rcall	.-140    	; 0x8c6 <String::copy(char const*, unsigned int)>
_ZN6StringC2Eih.constprop.25():
     952:	62 96       	adiw	r28, 0x12	; 18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:78
String::String(int value, unsigned char base) {
  init();
  char buf[2 + 8 * sizeof(int)];
  itoa(value, buf, base);
  *this = buf;
}
     954:	cd bf       	out	0x3d, r28	; 61
     956:	de bf       	out	0x3e, r29	; 62
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	08 95       	ret

00000966 <String::String(char const*)>:
_ZN6String4initEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     966:	fc 01       	movw	r30, r24
     968:	10 82       	st	Z, r1
     96a:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     96c:	12 82       	std	Z+2, r1	; 0x02
     96e:	13 82       	std	Z+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:124
  len = 0;
     970:	14 82       	std	Z+4, r1	; 0x04
     972:	15 82       	std	Z+5, r1	; 0x05
_ZN6StringC2EPKc():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:32
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr) {
  init();
  if (cstr) {
     974:	61 15       	cp	r22, r1
     976:	71 05       	cpc	r23, r1
     978:	49 f0       	breq	.+18     	; 0x98c <String::String(char const*)+0x26>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:33
    copy(cstr, strlen(cstr));
     97a:	fb 01       	movw	r30, r22
     97c:	01 90       	ld	r0, Z+
     97e:	00 20       	and	r0, r0
     980:	e9 f7       	brne	.-6      	; 0x97c <String::String(char const*)+0x16>
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	af 01       	movw	r20, r30
     986:	46 1b       	sub	r20, r22
     988:	57 0b       	sbc	r21, r23
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:35
  }
}
     98a:	9d cf       	rjmp	.-198    	; 0x8c6 <String::copy(char const*, unsigned int)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:20
  btnWatchTimerStart = millis();
  startDisplayFPSMicros = micros();
  startCountMillis = millis();
}

void printStepTitle(String Title, int holdDelay) {
     98c:	08 95       	ret

0000098e <printStepTitle(String, int) [clone .constprop.2]>:
_Z14printStepTitle6Stringi.constprop.2():
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	cd b7       	in	r28, 0x3d	; 61
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:21
  if (!printHeader) {
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	2c 97       	sbiw	r28, 0x0c	; 12
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	20 91 90 3c 	lds	r18, 0x3C90	; 0x803c90 <printHeader>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
};

class StringSumHelper : public String {
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
     9ac:	21 11       	cpse	r18, r1
     9ae:	58 c0       	rjmp	.+176    	; 0xa60 <printStepTitle(String, int) [clone .constprop.2]+0xd2>
     9b0:	7c 01       	movw	r14, r24
_ZN15StringSumHelperC2EPKc():
     9b2:	6e eb       	ldi	r22, 0xBE	; 190
     9b4:	70 ea       	ldi	r23, 0xA0	; 160
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:22
    Serial.println("\n[H]" + Title + ":");
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	d5 df       	rcall	.-86     	; 0x966 <String::String(char const*)>
_Z14printStepTitle6Stringi.constprop.2():
     9bc:	b7 01       	movw	r22, r14
     9be:	ce 01       	movw	r24, r28
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	70 df       	rcall	.-288    	; 0x8a4 <operator+(StringSumHelper const&, String const&)>
     9c4:	66 eb       	ldi	r22, 0xB6	; 182
     9c6:	73 ea       	ldi	r23, 0xA3	; 163
     9c8:	59 df       	rcall	.-334    	; 0x87c <operator+(StringSumHelper const&, char const*)>
     9ca:	7f dd       	rcall	.-1282   	; 0x4ca <Print::println(String const&) [clone .constprop.27]>
_ZN15StringSumHelperD2Ev():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
     9cc:	ce 01       	movw	r24, r28
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	21 de       	rcall	.-958    	; 0x614 <String::~String()>
_Z14printStepTitle6Stringi.constprop.2():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:23
    String underline = "-";
     9d2:	8e 01       	movw	r16, r28
     9d4:	09 5f       	subi	r16, 0xF9	; 249
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	63 ec       	ldi	r22, 0xC3	; 195
     9da:	70 ea       	ldi	r23, 0xA0	; 160
     9dc:	c8 01       	movw	r24, r16
     9de:	c3 df       	rcall	.-122    	; 0x966 <String::String(char const*)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:24
    for (int i = 0; i < int(Title.length()); i++) {
     9e0:	d1 2c       	mov	r13, r1
     9e2:	c1 2c       	mov	r12, r1
     9e4:	f7 01       	movw	r30, r14
     9e6:	84 81       	ldd	r24, Z+4	; 0x04
     9e8:	95 81       	ldd	r25, Z+5	; 0x05
     9ea:	c8 16       	cp	r12, r24
     9ec:	d9 06       	cpc	r13, r25
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     9ee:	64 f5       	brge	.+88     	; 0xa48 <printStepTitle(String, int) [clone .constprop.2]+0xba>
_ZN6String4initEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     9f0:	19 82       	std	Y+1, r1	; 0x01
     9f2:	1a 82       	std	Y+2, r1	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:124
  len = 0;
     9f4:	1b 82       	std	Y+3, r1	; 0x03
     9f6:	1c 82       	std	Y+4, r1	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:208
String &String::operator = (const String &rhs) {
  if (this == &rhs) {
    return *this;
  }

  if (rhs.buffer) {
     9f8:	1d 82       	std	Y+5, r1	; 0x05
     9fa:	1e 82       	std	Y+6, r1	; 0x06
operator=():
     9fc:	6f 81       	ldd	r22, Y+7	; 0x07
     9fe:	78 85       	ldd	r23, Y+8	; 0x08
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:209
    copy(rhs.buffer, rhs.len);
     a00:	61 15       	cp	r22, r1
     a02:	71 05       	cpc	r23, r1
     a04:	29 f0       	breq	.+10     	; 0xa10 <printStepTitle(String, int) [clone .constprop.2]+0x82>
     a06:	4b 85       	ldd	r20, Y+11	; 0x0b
     a08:	5c 85       	ldd	r21, Y+12	; 0x0c
     a0a:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:25
      underline = underline + "-";
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	5b df       	rcall	.-330    	; 0x8c6 <String::copy(char const*, unsigned int)>
_Z14printStepTitle6Stringi.constprop.2():
     a10:	63 ec       	ldi	r22, 0xC3	; 195
     a12:	70 ea       	ldi	r23, 0xA0	; 160
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:204
  rhs.len = 0;
}
#endif

String &String::operator = (const String &rhs) {
  if (this == &rhs) {
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	31 df       	rcall	.-414    	; 0x87c <operator+(StringSumHelper const&, char const*)>
operator=():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:208
    return *this;
  }

  if (rhs.buffer) {
     a1a:	80 17       	cp	r24, r16
     a1c:	91 07       	cpc	r25, r17
     a1e:	51 f0       	breq	.+20     	; 0xa34 <printStepTitle(String, int) [clone .constprop.2]+0xa6>
     a20:	fc 01       	movw	r30, r24
     a22:	60 81       	ld	r22, Z
     a24:	71 81       	ldd	r23, Z+1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:209
    copy(rhs.buffer, rhs.len);
     a26:	61 15       	cp	r22, r1
     a28:	71 05       	cpc	r23, r1
     a2a:	59 f0       	breq	.+22     	; 0xa42 <printStepTitle(String, int) [clone .constprop.2]+0xb4>
     a2c:	44 81       	ldd	r20, Z+4	; 0x04
     a2e:	55 81       	ldd	r21, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
     a30:	c8 01       	movw	r24, r16
     a32:	49 df       	rcall	.-366    	; 0x8c6 <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperD2Ev():
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:24

void printStepTitle(String Title, int holdDelay) {
  if (!printHeader) {
    Serial.println("\n[H]" + Title + ":");
    String underline = "-";
    for (int i = 0; i < int(Title.length()); i++) {
     a38:	ed dd       	rcall	.-1062   	; 0x614 <String::~String()>
_Z14printStepTitle6Stringi.constprop.2():
     a3a:	ff ef       	ldi	r31, 0xFF	; 255
     a3c:	cf 1a       	sub	r12, r31
     a3e:	df 0a       	sbc	r13, r31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:211
  } else {
    invalidate();
     a40:	d1 cf       	rjmp	.-94     	; 0x9e4 <printStepTitle(String, int) [clone .constprop.2]+0x56>
operator=():
     a42:	c8 01       	movw	r24, r16
     a44:	d5 dd       	rcall	.-1110   	; 0x5f0 <String::invalidate()>
     a46:	f6 cf       	rjmp	.-20     	; 0xa34 <printStepTitle(String, int) [clone .constprop.2]+0xa6>
_Z14printStepTitle6Stringi.constprop.2():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:27
      underline = underline + "-";
    }
    Serial.println(underline);
     a48:	c8 01       	movw	r24, r16
     a4a:	3f dd       	rcall	.-1410   	; 0x4ca <Print::println(String const&) [clone .constprop.27]>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:28
    printHeader = true;
     a4e:	80 93 90 3c 	sts	0x3C90, r24	; 0x803c90 <printHeader>
     a52:	60 ed       	ldi	r22, 0xD0	; 208
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:29
    delay(holdDelay);
     a54:	77 e0       	ldi	r23, 0x07	; 7
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	ed dc       	rcall	.-1574   	; 0x436 <delay>
     a5c:	c8 01       	movw	r24, r16
     a5e:	da dd       	rcall	.-1100   	; 0x614 <String::~String()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:23
}

void printStepTitle(String Title, int holdDelay) {
  if (!printHeader) {
    Serial.println("\n[H]" + Title + ":");
    String underline = "-";
     a60:	2c 96       	adiw	r28, 0x0c	; 12
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	de bf       	out	0x3e, r29	; 62
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:31
    }
    Serial.println(underline);
    printHeader = true;
    delay(holdDelay);
  }
}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	08 95       	ret

00000a78 <_do_dre()>:
_Z7_do_drev():
     a78:	2f 93       	push	r18
     a7a:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:307
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                        "\n"   // and RETI!
      ::);
     a7c:	2f 93       	push	r18
     a7e:	8f 93       	push	r24
     a80:	9f 93       	push	r25
     a82:	af 93       	push	r26
     a84:	bf 93       	push	r27
     a86:	68 94       	set

00000a88 <_poll_dre>:
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	c4 85       	ldd	r28, Z+12	; 0x0c
     a90:	d8 e0       	ldi	r29, 0x08	; 8
     a92:	94 89       	ldd	r25, Z+20	; 0x14
     a94:	df 01       	movw	r26, r30
     a96:	a9 0f       	add	r26, r25
     a98:	b2 1f       	adc	r27, r18
     a9a:	ab 5a       	subi	r26, 0xAB	; 171
     a9c:	bf 4f       	sbci	r27, 0xFF	; 255
     a9e:	8c 91       	ld	r24, X
     aa0:	20 e4       	ldi	r18, 0x40	; 64
     aa2:	2c 83       	std	Y+4, r18	; 0x04
     aa4:	8a 83       	std	Y+2, r24	; 0x02
     aa6:	9f 5f       	subi	r25, 0xFF	; 255
     aa8:	9f 71       	andi	r25, 0x1F	; 31
     aaa:	8d 81       	ldd	r24, Y+5	; 0x05
     aac:	23 89       	ldd	r18, Z+19	; 0x13
     aae:	29 13       	cpse	r18, r25
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <_done_dre_irq>
     ab2:	8f 7d       	andi	r24, 0xDF	; 223
     ab4:	8d 83       	std	Y+5, r24	; 0x05

00000ab6 <_done_dre_irq>:
     ab6:	94 8b       	std	Z+20, r25	; 0x14
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	0e f0       	brts	.+2      	; 0xac0 <_done_dre_irq+0xa>
     abe:	fc cb       	rjmp	.-2056   	; 0x2b8 <_poll_dre_done>
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	2f 91       	pop	r18
     aca:	2f bf       	out	0x3f, r18	; 63
     acc:	2f 91       	pop	r18
     ace:	ff 91       	pop	r31
     ad0:	ef 91       	pop	r30
     ad2:	18 95       	reti

00000ad4 <_do_rxc()>:
_Z7_do_rxcv():
     ad4:	2f 93       	push	r18
     ad6:	2f b7       	in	r18, 0x3f	; 63
     ad8:	2f 93       	push	r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:175
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	c4 85       	ldd	r28, Z+12	; 0x0c
     ae4:	d8 e0       	ldi	r29, 0x08	; 8
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	98 81       	ld	r25, Y
     aea:	81 fd       	sbrc	r24, 1
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <_end_rxc>
     aee:	c1 89       	ldd	r28, Z+17	; 0x11
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	8c 0f       	add	r24, r28
     af4:	8f 73       	andi	r24, 0x3F	; 63
     af6:	22 89       	ldd	r18, Z+18	; 0x12
     af8:	28 17       	cp	r18, r24
     afa:	31 f0       	breq	.+12     	; 0xb08 <_end_rxc>
     afc:	ce 0f       	add	r28, r30
     afe:	df 2f       	mov	r29, r31
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	d2 1f       	adc	r29, r18
     b04:	9d 8b       	std	Y+21, r25	; 0x15
     b06:	81 8b       	std	Z+17, r24	; 0x11

00000b08 <_end_rxc>:
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	9f 91       	pop	r25
     b0e:	8f 91       	pop	r24
     b10:	2f 91       	pop	r18
     b12:	2f bf       	out	0x3f, r18	; 63
     b14:	2f 91       	pop	r18
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	18 95       	reti

00000b1c <_do_txc()>:
_Z7_do_txcv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:105
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     b1c:	ff 93       	push	r31
     b1e:	8f 93       	push	r24
     b20:	8f b7       	in	r24, 0x3f	; 63
     b22:	8f 93       	push	r24
     b24:	f8 e0       	ldi	r31, 0x08	; 8

00000b26 <_txc_flush_rx>:
     b26:	80 81       	ld	r24, Z
     b28:	84 81       	ldd	r24, Z+4	; 0x04
     b2a:	87 ff       	sbrs	r24, 7
     b2c:	fc cf       	rjmp	.-8      	; 0xb26 <_txc_flush_rx>
     b2e:	85 81       	ldd	r24, Z+5	; 0x05
     b30:	8f 7b       	andi	r24, 0xBF	; 191
     b32:	80 68       	ori	r24, 0x80	; 128
     b34:	85 83       	std	Z+5, r24	; 0x05
     b36:	8f 91       	pop	r24
     b38:	8f bf       	out	0x3f, r24	; 63
     b3a:	8f 91       	pop	r24
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	18 95       	reti

00000b42 <__vector_28>:
__vector_28():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:73
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:76
      __asm__ __volatile__(
                "jmp _do_dre"  "\n"
                ::"z"(&Serial));
     b46:	e3 e9       	ldi	r30, 0x93	; 147
     b48:	fc e3       	ldi	r31, 0x3C	; 60
     b4a:	96 cf       	rjmp	.-212    	; 0xa78 <_do_dre()>

00000b4c <__vector_27>:
__vector_27():
     b4c:	ef 93       	push	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:55
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     b4e:	ff 93       	push	r31
     b50:	e3 e9       	ldi	r30, 0x93	; 147
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:58
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
     b52:	fc e3       	ldi	r31, 0x3C	; 60
     b54:	bf cf       	rjmp	.-130    	; 0xad4 <_do_rxc()>

00000b56 <__vector_29>:
__vector_29():
     b56:	ef 93       	push	r30
     b58:	e0 e0       	ldi	r30, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:31
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     b5a:	e0 cf       	rjmp	.-64     	; 0xb1c <_do_txc()>

00000b5c <__vector_9>:
__vector_9():
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:163
#elif defined(MILLIS_USE_TIMERB4)
  ISR(TCB4_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	8f 93       	push	r24
     b72:	9f 93       	push	r25
     b74:	af 93       	push	r26
     b76:	bf 93       	push	r27
     b78:	80 91 0e 3c 	lds	r24, 0x3C0E	; 0x803c0e <timer_millis>
     b7c:	90 91 0f 3c 	lds	r25, 0x3C0F	; 0x803c0f <timer_millis+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:175
    #else
      timer_millis += 2;
    #endif
  #else
    #if !defined(MILLIS_USE_TIMERRTC) // TCA0 or TCD0
      uint32_t m = timer_millis;
     b80:	a0 91 10 3c 	lds	r26, 0x3C10	; 0x803c10 <timer_millis+0x2>
     b84:	b0 91 11 3c 	lds	r27, 0x3C11	; 0x803c11 <timer_millis+0x3>
     b88:	40 91 0c 3c 	lds	r20, 0x3C0C	; 0x803c0c <__data_end>
     b8c:	50 91 0d 3c 	lds	r21, 0x3C0D	; 0x803c0d <__data_end+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:176
      uint16_t f = timer_fract;
     b90:	9a 01       	movw	r18, r20
     b92:	20 5d       	subi	r18, 0xD0	; 208
     b94:	3c 4f       	sbci	r19, 0xFC	; 252
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:178
      m += MILLIS_INC;
      f += FRACT_INC;
     b96:	28 3e       	cpi	r18, 0xE8	; 232
     b98:	63 e0       	ldi	r22, 0x03	; 3
     b9a:	36 07       	cpc	r19, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:179
      if (f >= FRACT_MAX) {
     b9c:	28 f0       	brcs	.+10     	; 0xba8 <__vector_9+0x4c>
     b9e:	28 5e       	subi	r18, 0xE8	; 232
     ba0:	33 40       	sbci	r19, 0x03	; 3
     ba2:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:181

        f -= FRACT_MAX;
     ba4:	a1 1d       	adc	r26, r1
     ba6:	b1 1d       	adc	r27, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:182
        m += 1;
     ba8:	20 93 0c 3c 	sts	0x3C0C, r18	; 0x803c0c <__data_end>
     bac:	30 93 0d 3c 	sts	0x3C0D, r19	; 0x803c0d <__data_end+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:184
      }
      timer_fract = f;
     bb0:	80 93 0e 3c 	sts	0x3C0E, r24	; 0x803c0e <timer_millis>
     bb4:	90 93 0f 3c 	sts	0x3C0F, r25	; 0x803c0f <timer_millis+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:185
      timer_millis = m;
     bb8:	a0 93 10 3c 	sts	0x3C10, r26	; 0x803c10 <timer_millis+0x2>
     bbc:	b0 93 11 3c 	sts	0x3C11, r27	; 0x803c11 <timer_millis+0x3>
     bc0:	80 91 12 3c 	lds	r24, 0x3C12	; 0x803c12 <timer_overflow_count>
     bc4:	90 91 13 3c 	lds	r25, 0x3C13	; 0x803c13 <timer_overflow_count+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:189
    #endif
    // if RTC is used as timer, we only increment the overflow count
    // Overflow count isn't used for TCB's
    timer_overflow_count++;
     bc8:	a0 91 14 3c 	lds	r26, 0x3C14	; 0x803c14 <timer_overflow_count+0x2>
     bcc:	b0 91 15 3c 	lds	r27, 0x3C15	; 0x803c15 <timer_overflow_count+0x3>
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	a1 1d       	adc	r26, r1
     bd4:	b1 1d       	adc	r27, r1
     bd6:	80 93 12 3c 	sts	0x3C12, r24	; 0x803c12 <timer_overflow_count>
     bda:	90 93 13 3c 	sts	0x3C13, r25	; 0x803c13 <timer_overflow_count+0x1>
     bde:	a0 93 14 3c 	sts	0x3C14, r26	; 0x803c14 <timer_overflow_count+0x2>
     be2:	b0 93 15 3c 	sts	0x3C15, r27	; 0x803c15 <timer_overflow_count+0x3>
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <vtable for UartClass+0x7f696a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:193
  #endif
  /* Clear flag */
  #if defined(MILLIS_USE_TIMERA0)
    TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm;
     bec:	bf 91       	pop	r27
     bee:	af 91       	pop	r26
     bf0:	9f 91       	pop	r25
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:201
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
  #endif
}
     bf2:	8f 91       	pop	r24
     bf4:	6f 91       	pop	r22
     bf6:	5f 91       	pop	r21
     bf8:	4f 91       	pop	r20
     bfa:	3f 91       	pop	r19
     bfc:	2f 91       	pop	r18
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	0f 90       	pop	r0
     c04:	1f 90       	pop	r1
     c06:	18 95       	reti

00000c08 <vfprintf>:
vfprintf():
     c08:	ab e0       	ldi	r26, 0x0B	; 11
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e9 e0       	ldi	r30, 0x09	; 9
     c0e:	f6 e0       	ldi	r31, 0x06	; 6
     c10:	d5 c6       	rjmp	.+3498   	; 0x19bc <__prologue_saves__+0x8>
     c12:	6c 01       	movw	r12, r24
     c14:	7b 01       	movw	r14, r22
     c16:	3a 01       	movw	r6, r20
     c18:	fc 01       	movw	r30, r24
     c1a:	16 82       	std	Z+6, r1	; 0x06
     c1c:	17 82       	std	Z+7, r1	; 0x07
     c1e:	83 81       	ldd	r24, Z+3	; 0x03
     c20:	81 ff       	sbrs	r24, 1
     c22:	ff c0       	rjmp	.+510    	; 0xe22 <vfprintf+0x21a>
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	4c 01       	movw	r8, r24
     c2a:	f6 01       	movw	r30, r12
     c2c:	b3 80       	ldd	r11, Z+3	; 0x03
     c2e:	f7 01       	movw	r30, r14
     c30:	b3 fc       	sbrc	r11, 3
     c32:	05 91       	lpm	r16, Z+
     c34:	b3 fe       	sbrs	r11, 3
     c36:	01 91       	ld	r16, Z+
     c38:	7f 01       	movw	r14, r30
     c3a:	00 23       	and	r16, r16
     c3c:	41 f1       	breq	.+80     	; 0xc8e <vfprintf+0x86>
     c3e:	05 32       	cpi	r16, 0x25	; 37
     c40:	39 f4       	brne	.+14     	; 0xc50 <vfprintf+0x48>
     c42:	b3 fc       	sbrc	r11, 3
     c44:	05 91       	lpm	r16, Z+
     c46:	b3 fe       	sbrs	r11, 3
     c48:	01 91       	ld	r16, Z+
     c4a:	7f 01       	movw	r14, r30
     c4c:	05 32       	cpi	r16, 0x25	; 37
     c4e:	39 f5       	brne	.+78     	; 0xc9e <vfprintf+0x96>
     c50:	b6 01       	movw	r22, r12
     c52:	80 2f       	mov	r24, r16
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0d d7       	rcall	.+3610   	; 0x1a72 <fputc>
     c58:	53 01       	movw	r10, r6
     c5a:	35 01       	movw	r6, r10
     c5c:	e6 cf       	rjmp	.-52     	; 0xc2a <vfprintf+0x22>
     c5e:	10 68       	ori	r17, 0x80	; 128
     c60:	f7 01       	movw	r30, r14
     c62:	b3 fc       	sbrc	r11, 3
     c64:	05 91       	lpm	r16, Z+
     c66:	b3 fe       	sbrs	r11, 3
     c68:	01 91       	ld	r16, Z+
     c6a:	7f 01       	movw	r14, r30
     c6c:	17 fd       	sbrc	r17, 7
     c6e:	0d c0       	rjmp	.+26     	; 0xc8a <vfprintf+0x82>
     c70:	00 23       	and	r16, r16
     c72:	69 f0       	breq	.+26     	; 0xc8e <vfprintf+0x86>
     c74:	60 2f       	mov	r22, r16
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	83 e8       	ldi	r24, 0x83	; 131
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	cc d6       	rcall	.+3480   	; 0x1a16 <strchr_P>
     c7e:	89 2b       	or	r24, r25
     c80:	79 f7       	brne	.-34     	; 0xc60 <vfprintf+0x58>
     c82:	03 32       	cpi	r16, 0x23	; 35
     c84:	51 f0       	breq	.+20     	; 0xc9a <vfprintf+0x92>
     c86:	0c 36       	cpi	r16, 0x6C	; 108
     c88:	51 f3       	breq	.-44     	; 0xc5e <vfprintf+0x56>
     c8a:	01 11       	cpse	r16, r1
     c8c:	0a c0       	rjmp	.+20     	; 0xca2 <vfprintf+0x9a>
     c8e:	f6 01       	movw	r30, r12
     c90:	86 81       	ldd	r24, Z+6	; 0x06
     c92:	97 81       	ldd	r25, Z+7	; 0x07
     c94:	2b 96       	adiw	r28, 0x0b	; 11
     c96:	ee e0       	ldi	r30, 0x0E	; 14
     c98:	aa c6       	rjmp	.+3412   	; 0x19ee <__epilogue_restores__+0x8>
     c9a:	10 e1       	ldi	r17, 0x10	; 16
     c9c:	e1 cf       	rjmp	.-62     	; 0xc60 <vfprintf+0x58>
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	e5 cf       	rjmp	.-54     	; 0xc6c <vfprintf+0x64>
     ca2:	60 2f       	mov	r22, r16
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	8c e7       	ldi	r24, 0x7C	; 124
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	b5 d6       	rcall	.+3434   	; 0x1a16 <strchr_P>
     cac:	89 2b       	or	r24, r25
     cae:	49 f0       	breq	.+18     	; 0xcc2 <vfprintf+0xba>
     cb0:	53 01       	movw	r10, r6
     cb2:	f4 e0       	ldi	r31, 0x04	; 4
     cb4:	af 0e       	add	r10, r31
     cb6:	b1 1c       	adc	r11, r1
     cb8:	b6 01       	movw	r22, r12
     cba:	8f e3       	ldi	r24, 0x3F	; 63
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	d9 d6       	rcall	.+3506   	; 0x1a72 <fputc>
     cc0:	cc cf       	rjmp	.-104    	; 0xc5a <vfprintf+0x52>
     cc2:	03 36       	cpi	r16, 0x63	; 99
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <vfprintf+0xc0>
     cc6:	52 c0       	rjmp	.+164    	; 0xd6c <vfprintf+0x164>
     cc8:	03 37       	cpi	r16, 0x73	; 115
     cca:	09 f4       	brne	.+2      	; 0xcce <vfprintf+0xc6>
     ccc:	59 c0       	rjmp	.+178    	; 0xd80 <vfprintf+0x178>
     cce:	03 35       	cpi	r16, 0x53	; 83
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <vfprintf+0xcc>
     cd2:	55 c0       	rjmp	.+170    	; 0xd7e <vfprintf+0x176>
     cd4:	04 36       	cpi	r16, 0x64	; 100
     cd6:	19 f0       	breq	.+6      	; 0xcde <vfprintf+0xd6>
     cd8:	09 36       	cpi	r16, 0x69	; 105
     cda:	09 f0       	breq	.+2      	; 0xcde <vfprintf+0xd6>
     cdc:	70 c0       	rjmp	.+224    	; 0xdbe <vfprintf+0x1b6>
     cde:	53 01       	movw	r10, r6
     ce0:	17 ff       	sbrs	r17, 7
     ce2:	62 c0       	rjmp	.+196    	; 0xda8 <vfprintf+0x1a0>
     ce4:	f4 e0       	ldi	r31, 0x04	; 4
     ce6:	af 0e       	add	r10, r31
     ce8:	b1 1c       	adc	r11, r1
     cea:	f3 01       	movw	r30, r6
     cec:	60 81       	ld	r22, Z
     cee:	71 81       	ldd	r23, Z+1	; 0x01
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	93 81       	ldd	r25, Z+3	; 0x03
     cf4:	1f 7e       	andi	r17, 0xEF	; 239
     cf6:	97 ff       	sbrs	r25, 7
     cf8:	08 c0       	rjmp	.+16     	; 0xd0a <vfprintf+0x102>
     cfa:	90 95       	com	r25
     cfc:	80 95       	com	r24
     cfe:	70 95       	com	r23
     d00:	61 95       	neg	r22
     d02:	7f 4f       	sbci	r23, 0xFF	; 255
     d04:	8f 4f       	sbci	r24, 0xFF	; 255
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	10 64       	ori	r17, 0x40	; 64
     d0a:	2a e0       	ldi	r18, 0x0A	; 10
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	a4 01       	movw	r20, r8
     d10:	e0 d6       	rcall	.+3520   	; 0x1ad2 <__ultoa_invert>
     d12:	08 2f       	mov	r16, r24
     d14:	08 19       	sub	r16, r8
     d16:	16 ff       	sbrs	r17, 6
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <vfprintf+0x11a>
     d1a:	b6 01       	movw	r22, r12
     d1c:	8d e2       	ldi	r24, 0x2D	; 45
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a8 d6       	rcall	.+3408   	; 0x1a72 <fputc>
     d22:	14 ff       	sbrs	r17, 4
     d24:	13 c0       	rjmp	.+38     	; 0xd4c <vfprintf+0x144>
     d26:	fe 01       	movw	r30, r28
     d28:	e0 0f       	add	r30, r16
     d2a:	f1 1d       	adc	r31, r1
     d2c:	80 81       	ld	r24, Z
     d2e:	80 33       	cpi	r24, 0x30	; 48
     d30:	69 f0       	breq	.+26     	; 0xd4c <vfprintf+0x144>
     d32:	b6 01       	movw	r22, r12
     d34:	80 e3       	ldi	r24, 0x30	; 48
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9c d6       	rcall	.+3384   	; 0x1a72 <fputc>
     d3a:	12 ff       	sbrs	r17, 2
     d3c:	07 c0       	rjmp	.+14     	; 0xd4c <vfprintf+0x144>
     d3e:	10 72       	andi	r17, 0x20	; 32
     d40:	81 2f       	mov	r24, r17
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	b6 01       	movw	r22, r12
     d46:	88 5a       	subi	r24, 0xA8	; 168
     d48:	9f 4f       	sbci	r25, 0xFF	; 255
     d4a:	93 d6       	rcall	.+3366   	; 0x1a72 <fputc>
     d4c:	01 50       	subi	r16, 0x01	; 1
     d4e:	10 e0       	ldi	r17, 0x00	; 0
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	08 0d       	add	r16, r8
     d56:	19 1d       	adc	r17, r9
     d58:	f8 01       	movw	r30, r16
     d5a:	82 91       	ld	r24, -Z
     d5c:	8f 01       	movw	r16, r30
     d5e:	b6 01       	movw	r22, r12
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	87 d6       	rcall	.+3342   	; 0x1a72 <fputc>
     d64:	08 15       	cp	r16, r8
     d66:	19 05       	cpc	r17, r9
     d68:	b9 f7       	brne	.-18     	; 0xd58 <vfprintf+0x150>
     d6a:	77 cf       	rjmp	.-274    	; 0xc5a <vfprintf+0x52>
     d6c:	53 01       	movw	r10, r6
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	a8 0e       	add	r10, r24
     d72:	b1 1c       	adc	r11, r1
     d74:	b6 01       	movw	r22, r12
     d76:	f3 01       	movw	r30, r6
     d78:	80 81       	ld	r24, Z
     d7a:	91 81       	ldd	r25, Z+1	; 0x01
     d7c:	a0 cf       	rjmp	.-192    	; 0xcbe <vfprintf+0xb6>
     d7e:	11 60       	ori	r17, 0x01	; 1
     d80:	53 01       	movw	r10, r6
     d82:	f2 e0       	ldi	r31, 0x02	; 2
     d84:	af 0e       	add	r10, r31
     d86:	b1 1c       	adc	r11, r1
     d88:	f3 01       	movw	r30, r6
     d8a:	60 80       	ld	r6, Z
     d8c:	71 80       	ldd	r7, Z+1	; 0x01
     d8e:	f3 01       	movw	r30, r6
     d90:	10 fd       	sbrc	r17, 0
     d92:	85 91       	lpm	r24, Z+
     d94:	10 ff       	sbrs	r17, 0
     d96:	81 91       	ld	r24, Z+
     d98:	3f 01       	movw	r6, r30
     d9a:	88 23       	and	r24, r24
     d9c:	09 f4       	brne	.+2      	; 0xda0 <vfprintf+0x198>
     d9e:	5d cf       	rjmp	.-326    	; 0xc5a <vfprintf+0x52>
     da0:	b6 01       	movw	r22, r12
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	66 d6       	rcall	.+3276   	; 0x1a72 <fputc>
     da6:	f3 cf       	rjmp	.-26     	; 0xd8e <vfprintf+0x186>
     da8:	f2 e0       	ldi	r31, 0x02	; 2
     daa:	af 0e       	add	r10, r31
     dac:	b1 1c       	adc	r11, r1
     dae:	f3 01       	movw	r30, r6
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	07 2e       	mov	r0, r23
     db6:	00 0c       	add	r0, r0
     db8:	88 0b       	sbc	r24, r24
     dba:	99 0b       	sbc	r25, r25
     dbc:	9b cf       	rjmp	.-202    	; 0xcf4 <vfprintf+0xec>
     dbe:	00 37       	cpi	r16, 0x70	; 112
     dc0:	09 f1       	breq	.+66     	; 0xe04 <vfprintf+0x1fc>
     dc2:	40 f4       	brcc	.+16     	; 0xdd4 <vfprintf+0x1cc>
     dc4:	08 35       	cpi	r16, 0x58	; 88
     dc6:	01 f1       	breq	.+64     	; 0xe08 <vfprintf+0x200>
     dc8:	0f 36       	cpi	r16, 0x6F	; 111
     dca:	09 f0       	breq	.+2      	; 0xdce <vfprintf+0x1c6>
     dcc:	60 cf       	rjmp	.-320    	; 0xc8e <vfprintf+0x86>
     dce:	28 e0       	ldi	r18, 0x08	; 8
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	0c c0       	rjmp	.+24     	; 0xdec <vfprintf+0x1e4>
     dd4:	05 37       	cpi	r16, 0x75	; 117
     dd6:	39 f0       	breq	.+14     	; 0xde6 <vfprintf+0x1de>
     dd8:	08 37       	cpi	r16, 0x78	; 120
     dda:	09 f0       	breq	.+2      	; 0xdde <vfprintf+0x1d6>
     ddc:	58 cf       	rjmp	.-336    	; 0xc8e <vfprintf+0x86>
     dde:	14 62       	ori	r17, 0x24	; 36
     de0:	20 e1       	ldi	r18, 0x10	; 16
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	03 c0       	rjmp	.+6      	; 0xdec <vfprintf+0x1e4>
     de6:	1f 7e       	andi	r17, 0xEF	; 239
     de8:	2a e0       	ldi	r18, 0x0A	; 10
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	53 01       	movw	r10, r6
     dee:	17 ff       	sbrs	r17, 7
     df0:	0f c0       	rjmp	.+30     	; 0xe10 <vfprintf+0x208>
     df2:	f4 e0       	ldi	r31, 0x04	; 4
     df4:	af 0e       	add	r10, r31
     df6:	b1 1c       	adc	r11, r1
     df8:	f3 01       	movw	r30, r6
     dfa:	60 81       	ld	r22, Z
     dfc:	71 81       	ldd	r23, Z+1	; 0x01
     dfe:	82 81       	ldd	r24, Z+2	; 0x02
     e00:	93 81       	ldd	r25, Z+3	; 0x03
     e02:	85 cf       	rjmp	.-246    	; 0xd0e <vfprintf+0x106>
     e04:	10 61       	ori	r17, 0x10	; 16
     e06:	eb cf       	rjmp	.-42     	; 0xdde <vfprintf+0x1d6>
     e08:	14 60       	ori	r17, 0x04	; 4
     e0a:	20 e1       	ldi	r18, 0x10	; 16
     e0c:	32 e0       	ldi	r19, 0x02	; 2
     e0e:	ee cf       	rjmp	.-36     	; 0xdec <vfprintf+0x1e4>
     e10:	f2 e0       	ldi	r31, 0x02	; 2
     e12:	af 0e       	add	r10, r31
     e14:	b1 1c       	adc	r11, r1
     e16:	f3 01       	movw	r30, r6
     e18:	60 81       	ld	r22, Z
     e1a:	71 81       	ldd	r23, Z+1	; 0x01
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	76 cf       	rjmp	.-276    	; 0xd0e <vfprintf+0x106>
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	9f ef       	ldi	r25, 0xFF	; 255
     e26:	36 cf       	rjmp	.-404    	; 0xc94 <vfprintf+0x8c>

00000e28 <global constructors keyed to 65535_0_components_check.ino.cpp.o.2653>:
_GLOBAL__I_65535_0_components_check.ino.cpp.o.2653():
     e28:	e3 e9       	ldi	r30, 0x93	; 147
     e2a:	fc e3       	ldi	r31, 0x3C	; 60
     e2c:	12 82       	std	Z+2, r1	; 0x02
     e2e:	13 82       	std	Z+3, r1	; 0x03
     e30:	88 ee       	ldi	r24, 0xE8	; 232
     e32:	93 e0       	ldi	r25, 0x03	; 3
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	84 83       	std	Z+4, r24	; 0x04
     e3a:	95 83       	std	Z+5, r25	; 0x05
     e3c:	a6 83       	std	Z+6, r26	; 0x06
     e3e:	b7 83       	std	Z+7, r27	; 0x07
     e40:	85 ea       	ldi	r24, 0xA5	; 165
     e42:	90 ea       	ldi	r25, 0xA0	; 160
     e44:	80 83       	st	Z, r24
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	98 e0       	ldi	r25, 0x08	; 8
     e4c:	84 87       	std	Z+12, r24	; 0x0c
     e4e:	95 87       	std	Z+13, r25	; 0x0d
     e50:	16 86       	std	Z+14, r1	; 0x0e
     e52:	17 86       	std	Z+15, r1	; 0x0f
     e54:	08 95       	ret

00000e56 <main>:
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	2e 97       	sbiw	r28, 0x0e	; 14
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	de bf       	out	0x3e, r29	; 62
init_clock():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1333
      #elif (F_CPU == 8000000) // 16MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
      #elif (F_CPU == 5000000) // 20MHz prescaled by 4
        /* Clock DIV4 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));
     e64:	88 ed       	ldi	r24, 0xD8	; 216
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	84 bf       	out	0x34, r24	; 52
     e6a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f5fc0>
init_ADC0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1429
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      ADC0.CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  3000000    //  4 MHz /  4 = 1.0 MHz,   5 MHz /  4 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
     e6e:	81 e5       	ldi	r24, 0x51	; 81
     e70:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f6561>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1436
      ADC0.CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #endif
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      ADC0.SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      ADC0.SAMPCTRL = (13);   // 15 ADC clock,s 12 us
     e74:	8d e0       	ldi	r24, 0x0D	; 13
     e76:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <vtable for UartClass+0x7f6564>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1440
    #else
      ADC0.SAMPCTRL = (10); // 12 ADC clocks, 12 us
    #endif
    ADC0.CTRLD    = ADC_INITDLY_DLY16_gc;
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <vtable for UartClass+0x7f6562>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1441
    ADC0.CTRLA    = ADC_ENABLE_bm;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <vtable for UartClass+0x7f655f>
init_TCA0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1533
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     e86:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <vtable for UartClass+0x7f6962>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1538

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     e8a:	8e ef       	ldi	r24, 0xFE	; 254
     e8c:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <vtable for UartClass+0x7f6985>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1539
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     e90:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <vtable for UartClass+0x7f6986>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1559
  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 1000000) // and use 16...
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <vtable for UartClass+0x7f695f>
init_millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1227
{
  #if defined(MILLIS_USE_TIMERNONE)
    badCall("init_millis() is only valid with millis time keeping enabled.");
  #else
    #if defined(MILLIS_USE_TIMERA0)
      TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
     e9a:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <vtable for UartClass+0x7f6969>
     e9e:	82 60       	ori	r24, 0x02	; 2
     ea0:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <vtable for UartClass+0x7f6969>
init():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1303
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
     ea4:	78 94       	sei
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
     ea6:	78 94       	sei
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:28

bool sentSerialcheckFlag;


void setup() {
  Serial.begin(115200);
     ea8:	40 e0       	ldi	r20, 0x00	; 0
     eaa:	52 ec       	ldi	r21, 0xC2	; 194
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	83 e9       	ldi	r24, 0x93	; 147
     eb2:	9c e3       	ldi	r25, 0x3C	; 60
     eb4:	f5 da       	rcall	.-2582   	; 0x4a0 <UartClass::begin(unsigned long)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:32
  while (!Serial) {
    // trying to connect to serial...
  }
  delay(5000);
     eb6:	68 e8       	ldi	r22, 0x88	; 136
     eb8:	73 e1       	ldi	r23, 0x13	; 19
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:14

bool printHeader;

//-- Init functions **
void initAllTheTimeTrackers() {
  pinTestModeStartMillis = millis();
     ebe:	bb da       	rcall	.-2698   	; 0x436 <delay>
initAllTheTimeTrackers():
     ec0:	e3 da       	rcall	.-2618   	; 0x488 <millis>
     ec2:	60 93 4a 3c 	sts	0x3C4A, r22	; 0x803c4a <pinTestModeStartMillis>
     ec6:	70 93 4b 3c 	sts	0x3C4B, r23	; 0x803c4b <pinTestModeStartMillis+0x1>
     eca:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <pinTestModeStartMillis+0x2>
     ece:	90 93 4d 3c 	sts	0x3C4D, r25	; 0x803c4d <pinTestModeStartMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:15
  btnWatchTimerStart = millis();
     ed2:	da da       	rcall	.-2636   	; 0x488 <millis>
     ed4:	60 93 6e 3c 	sts	0x3C6E, r22	; 0x803c6e <btnWatchTimerStart>
     ed8:	70 93 6f 3c 	sts	0x3C6F, r23	; 0x803c6f <btnWatchTimerStart+0x1>
     edc:	80 93 70 3c 	sts	0x3C70, r24	; 0x803c70 <btnWatchTimerStart+0x2>
     ee0:	90 93 71 3c 	sts	0x3C71, r25	; 0x803c71 <btnWatchTimerStart+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:16
  startDisplayFPSMicros = micros();
     ee4:	79 da       	rcall	.-2830   	; 0x3d8 <micros>
     ee6:	60 93 7a 3c 	sts	0x3C7A, r22	; 0x803c7a <startDisplayFPSMicros>
     eea:	70 93 7b 3c 	sts	0x3C7B, r23	; 0x803c7b <startDisplayFPSMicros+0x1>
     eee:	80 93 7c 3c 	sts	0x3C7C, r24	; 0x803c7c <startDisplayFPSMicros+0x2>
     ef2:	90 93 7d 3c 	sts	0x3C7D, r25	; 0x803c7d <startDisplayFPSMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:17
  startCountMillis = millis();
     ef6:	c8 da       	rcall	.-2672   	; 0x488 <millis>
     ef8:	60 93 82 3c 	sts	0x3C82, r22	; 0x803c82 <startCountMillis>
     efc:	70 93 83 3c 	sts	0x3C83, r23	; 0x803c83 <startCountMillis+0x1>
     f00:	80 93 84 3c 	sts	0x3C84, r24	; 0x803c84 <startCountMillis+0x2>
     f04:	90 93 85 3c 	sts	0x3C85, r25	; 0x803c85 <startCountMillis+0x3>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:238

      //  For Port C (After Port A & Port B)
      if (PORTA_checked && PORTB_checked && !PORTC_checked) {

        byte portAddrMask = 0b00000001;
        portAddrMask <<= pcc;
     f08:	01 e0       	ldi	r16, 0x01	; 1
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	44 24       	eor	r4, r4
     f0e:	43 94       	inc	r4
     f10:	51 2c       	mov	r5, r1
setupDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:51
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
     f12:	8e ef       	ldi	r24, 0xFE	; 254
     f14:	d8 2e       	mov	r13, r24
showOnDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:96
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
     f16:	91 e1       	ldi	r25, 0x11	; 17
     f18:	69 2e       	mov	r6, r25
     f1a:	71 2c       	mov	r7, r1
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:39
}


void loop() {
  /* --- 0. Send Serial check flag = 1 ---*/
  if (!sentSerialcheckFlag) {
     f1c:	80 91 8f 3c 	lds	r24, 0x3C8F	; 0x803c8f <sentSerialcheckFlag>
     f20:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:40
    Serial.println("SERIAL:1");
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <main+0xda>
     f24:	85 ec       	ldi	r24, 0xC5	; 197
     f26:	90 ea       	ldi	r25, 0xA0	; 160
     f28:	e3 da       	rcall	.-2618   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:41
    sentSerialcheckFlag = true;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 8f 3c 	sts	0x3C8F, r24	; 0x803c8f <sentSerialcheckFlag>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:45
  }

  /* ----  1. Check ATTINY's Internal digital IO Pin Status. ---- */
  printStepTitle("CHECKING ATTINY's INT IOs", HOLD_DELAY);
     f30:	6e ec       	ldi	r22, 0xCE	; 206
     f32:	70 ea       	ldi	r23, 0xA0	; 160
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	16 dd       	rcall	.-1492   	; 0x966 <String::String(char const*)>
     f3a:	ce 01       	movw	r24, r28
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	27 dd       	rcall	.-1458   	; 0x98e <printStepTitle(String, int) [clone .constprop.2]>
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:47

  if (!pinExaminationFinished) {
     f44:	67 db       	rcall	.-2354   	; 0x614 <String::~String()>
     f46:	80 91 8e 3c 	lds	r24, 0x3C8E	; 0x803c8e <pinExaminationFinished>
     f4a:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:247
        cli();
        PORTC.DIRSET = portAddrMask;
        PORTC.OUTSET = portAddrMask;
        // Set as INPUT and read STATE
        PORTC.DIRCLR = portAddrMask;
        firstState = PORTC.IN & portAddrMask;
     f4c:	39 c1       	rjmp	.+626    	; 0x11c0 <main+0x36a>
examinePins():
     f4e:	cc 24       	eor	r12, r12
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:69
boolean isSerialPin;


void examinePins() {
  while (true) {
    pinTestModeCurrMillis = millis();
     f50:	c3 94       	inc	r12
     f52:	9a da       	rcall	.-2764   	; 0x488 <millis>
     f54:	60 93 4e 3c 	sts	0x3C4E, r22	; 0x803c4e <pinTestModeCurrMillis>
     f58:	70 93 4f 3c 	sts	0x3C4F, r23	; 0x803c4f <pinTestModeCurrMillis+0x1>
     f5c:	80 93 50 3c 	sts	0x3C50, r24	; 0x803c50 <pinTestModeCurrMillis+0x2>
     f60:	90 93 51 3c 	sts	0x3C51, r25	; 0x803c51 <pinTestModeCurrMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:71

    if (pinTestModeCurrMillis - pinTestModeStartMillis >= testModeProgressPeriod) {
     f64:	80 90 4a 3c 	lds	r8, 0x3C4A	; 0x803c4a <pinTestModeStartMillis>
     f68:	90 90 4b 3c 	lds	r9, 0x3C4B	; 0x803c4b <pinTestModeStartMillis+0x1>
     f6c:	a0 90 4c 3c 	lds	r10, 0x3C4C	; 0x803c4c <pinTestModeStartMillis+0x2>
     f70:	b0 90 4d 3c 	lds	r11, 0x3C4D	; 0x803c4d <pinTestModeStartMillis+0x3>
     f74:	68 19       	sub	r22, r8
     f76:	79 09       	sbc	r23, r9
     f78:	8a 09       	sbc	r24, r10
     f7a:	9b 09       	sbc	r25, r11
     f7c:	64 36       	cpi	r22, 0x64	; 100
     f7e:	71 05       	cpc	r23, r1
     f80:	81 05       	cpc	r24, r1
     f82:	91 05       	cpc	r25, r1
     f84:	30 f3       	brcs	.-52     	; 0xf52 <main+0xfc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:74

      //---  For Port A (Before Port B & C) ---//
      if (!PORTA_checked && !PORTB_checked && !PORTC_checked) {
     f86:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <PORTA_checked>
     f8a:	81 11       	cpse	r24, r1
     f8c:	50 c0       	rjmp	.+160    	; 0x102e <main+0x1d8>
     f8e:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <PORTB_checked>
     f92:	81 11       	cpse	r24, r1
     f94:	47 c0       	rjmp	.+142    	; 0x1024 <main+0x1ce>
     f96:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <PORTC_checked>
     f9a:	81 11       	cpse	r24, r1
     f9c:	43 c0       	rjmp	.+134    	; 0x1024 <main+0x1ce>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:81
        //      Serial.print(pac);
        //      Serial.print(" : ");

        // byte portAddrMask = (0b00000001 << pac);
        byte portAddrMask = 0b00000001;
        portAddrMask <<= pac;
     f9e:	c8 01       	movw	r24, r16
     fa0:	00 90 00 3c 	lds	r0, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <main+0x154>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <main+0x150>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:85
        // printBinary(portAddrMask);

        // Set as OUTPUT & HIGH
        cli();
     fae:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:86
        PORTA.DIRSET = portAddrMask;
     fb0:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <vtable for UartClass+0x7f6360>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:87
        PORTA.OUTSET = portAddrMask;
     fb4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <vtable for UartClass+0x7f6364>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:89
        // Set as INPUT and read STATE
        PORTA.DIRCLR = portAddrMask;
     fb8:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <vtable for UartClass+0x7f6361>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:90
        firstState = PORTA.IN & portAddrMask;
     fbc:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <vtable for UartClass+0x7f6367>
     fc0:	28 23       	and	r18, r24
     fc2:	31 e0       	ldi	r19, 0x01	; 1
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <main+0x172>
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	30 93 46 3c 	sts	0x3C46, r19	; 0x803c46 <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:93
        //      Serial.println(firstState);
        // Set as OUTPUT & LOW
        PORTA.DIRSET = portAddrMask;
     fcc:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <vtable for UartClass+0x7f6360>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:94
        PORTA.OUTCLR = portAddrMask;
     fd0:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f6365>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:96
        // Set as INPUT and read STATE, again
        PORTA.DIRCLR = portAddrMask;
     fd4:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <vtable for UartClass+0x7f6361>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:97
        secondState = PORTA.IN & portAddrMask;
     fd8:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <vtable for UartClass+0x7f6367>
     fdc:	89 23       	and	r24, r25
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <main+0x18e>
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	90 93 45 3c 	sts	0x3C45, r25	; 0x803c45 <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:105
        // [DEBUG] [TEST] **Simulation for non-working pins
        //        if (pac == 4 || pac == 6) {
        //          secondState = HIGH;
        //        }
        //------------------------------------------------//
        sei();
     fe8:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:110

        //      Serial.print(String(firstState) + " " + String(secondState));

        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
     fea:	20 91 46 3c 	lds	r18, 0x3C46	; 0x803c46 <firstState>
     fee:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
     ff2:	90 91 01 3c 	lds	r25, 0x3C01	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
     ff6:	fc 01       	movw	r30, r24
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	eb 5c       	subi	r30, 0xCB	; 203
     ffe:	f3 4c       	sbci	r31, 0xC3	; 195
    1000:	22 23       	and	r18, r18
    1002:	09 f4       	brne	.+2      	; 0x1006 <main+0x1b0>
    1004:	06 c1       	rjmp	.+524    	; 0x1212 <main+0x3bc>
    1006:	20 91 45 3c 	lds	r18, 0x3C45	; 0x803c45 <secondState>
    100a:	21 11       	cpse	r18, r1
    100c:	02 c1       	rjmp	.+516    	; 0x1212 <main+0x3bc>
    100e:	00 83       	st	Z, r16
    1010:	11 83       	std	Z+1, r17	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:114
        else portAStatus[pac - 1] = 0;


        pac++;
    1012:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:115
        if (pac > int(sizeof(portAStatus) / 2)) {
    1014:	88 30       	cpi	r24, 0x08	; 8
    1016:	91 05       	cpc	r25, r1
    1018:	0c f0       	brlt	.+2      	; 0x101c <main+0x1c6>
    101a:	fe c0       	rjmp	.+508    	; 0x1218 <main+0x3c2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:114
        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
        else portAStatus[pac - 1] = 0;


        pac++;
    101c:	80 93 00 3c 	sts	0x3C00, r24	; 0x803c00 <__DATA_REGION_ORIGIN__>
    1020:	90 93 01 3c 	sts	0x3C01, r25	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:152
          }
        }
      }

      //---  For Port B (After Port A) ---//
      if (PORTA_checked && !PORTB_checked && !PORTC_checked) {
    1024:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <PORTA_checked>
    1028:	88 23       	and	r24, r24
    102a:	09 f4       	brne	.+2      	; 0x102e <main+0x1d8>
    102c:	61 c0       	rjmp	.+194    	; 0x10f0 <main+0x29a>
    102e:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <PORTB_checked>
    1032:	81 11       	cpse	r24, r1
    1034:	62 c0       	rjmp	.+196    	; 0x10fa <main+0x2a4>
    1036:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <PORTC_checked>
    103a:	81 11       	cpse	r24, r1
    103c:	5e c0       	rjmp	.+188    	; 0x10fa <main+0x2a4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:157
        byte portAddrMask = 0b00000001; // pbc staring at 4

        // PB2 and PB3 are serial, assuming they are working

        if (pbc == 2 || pbc == 3) {
    103e:	80 91 35 3c 	lds	r24, 0x3C35	; 0x803c35 <pbc>
    1042:	90 91 36 3c 	lds	r25, 0x3C36	; 0x803c36 <pbc+0x1>
    1046:	9c 01       	movw	r18, r24
    1048:	22 50       	subi	r18, 0x02	; 2
    104a:	31 09       	sbc	r19, r1
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	08 f0       	brcs	.+2      	; 0x1054 <main+0x1fe>
    1052:	34 c1       	rjmp	.+616    	; 0x12bc <main+0x466>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:158
          isSerialPin = true;
    1054:	c0 92 34 3c 	sts	0x3C34, r12	; 0x803c34 <isSerialPin>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:162
          //  Serial.println("Not bitshifting, it is serial pin!");

          // Just for filling in hardcoded data for later
          firstState = LOW;
    1058:	10 92 46 3c 	sts	0x3C46, r1	; 0x803c46 <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:163
          secondState = LOW;
    105c:	10 92 45 3c 	sts	0x3C45, r1	; 0x803c45 <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:168
        } else {
          isSerialPin = false;
        }

        if (!isSerialPin) {
    1060:	20 91 34 3c 	lds	r18, 0x3C34	; 0x803c34 <isSerialPin>
    1064:	21 11       	cpse	r18, r1
    1066:	25 c0       	rjmp	.+74     	; 0x10b2 <main+0x25c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:170
          // bit shift and iterate through PORT
          portAddrMask <<= pbc;
    1068:	a8 01       	movw	r20, r16
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <main+0x21a>
    106c:	44 0f       	add	r20, r20
    106e:	55 1f       	adc	r21, r21
    1070:	8a 95       	dec	r24
    1072:	e2 f7       	brpl	.-8      	; 0x106c <main+0x216>
    1074:	ca 01       	movw	r24, r20
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:174
          //        printBinary(portAddrMask);

          // Set as OUTPUT & HIGH
          cli();
    1076:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:175
          PORTB.DIRSET = portAddrMask;
    1078:	40 93 21 04 	sts	0x0421, r20	; 0x800421 <vtable for UartClass+0x7f6380>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:176
          PORTB.OUTSET = portAddrMask;
    107c:	40 93 25 04 	sts	0x0425, r20	; 0x800425 <vtable for UartClass+0x7f6384>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:178
          // Set as INPUT and read STATE
          PORTB.DIRCLR = portAddrMask;
    1080:	40 93 22 04 	sts	0x0422, r20	; 0x800422 <vtable for UartClass+0x7f6381>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:179
          firstState = PORTB.IN & portAddrMask;
    1084:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <vtable for UartClass+0x7f6387>
    1088:	24 23       	and	r18, r20
    108a:	31 e0       	ldi	r19, 0x01	; 1
    108c:	09 f4       	brne	.+2      	; 0x1090 <main+0x23a>
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	30 93 46 3c 	sts	0x3C46, r19	; 0x803c46 <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:182
          //        Serial.println(firstState);
          // Set as OUTPUT & LOW
          PORTB.DIRSET = portAddrMask;
    1094:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <vtable for UartClass+0x7f6380>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:183
          PORTB.OUTCLR = portAddrMask;
    1098:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <vtable for UartClass+0x7f6385>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:185
          // Set as INPUT and read STATE, again!
          PORTB.DIRCLR = portAddrMask;
    109c:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <vtable for UartClass+0x7f6381>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:186
          secondState = PORTB.IN & portAddrMask;
    10a0:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <vtable for UartClass+0x7f6387>
    10a4:	89 23       	and	r24, r25
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <main+0x256>
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	90 93 45 3c 	sts	0x3C45, r25	; 0x803c45 <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:194
          // [DEBUG] [TEST] **Simulation for non-working pins
          //          if (pbc == 5) {
          //            secondState = HIGH;
          //          }
          //------------------------------------------------//
          sei();
    10b0:	78 94       	sei
    10b2:	20 91 35 3c 	lds	r18, 0x3C35	; 0x803c35 <pbc>
    10b6:	30 91 36 3c 	lds	r19, 0x3C36	; 0x803c36 <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:199
        }


        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
    10ba:	40 91 46 3c 	lds	r20, 0x3C46	; 0x803c46 <firstState>
    10be:	c9 01       	movw	r24, r18
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	8c 5d       	subi	r24, 0xDC	; 220
    10c6:	93 4c       	sbci	r25, 0xC3	; 195
    10c8:	44 23       	and	r20, r20
    10ca:	09 f4       	brne	.+2      	; 0x10ce <main+0x278>
    10cc:	fa c0       	rjmp	.+500    	; 0x12c2 <main+0x46c>
    10ce:	40 91 45 3c 	lds	r20, 0x3C45	; 0x803c45 <secondState>
    10d2:	41 11       	cpse	r20, r1
    10d4:	f6 c0       	rjmp	.+492    	; 0x12c2 <main+0x46c>
    10d6:	dc 01       	movw	r26, r24
    10d8:	0d 93       	st	X+, r16
    10da:	1c 93       	st	X, r17
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:203
        else portBStatus[pbc] = 0;


        pbc++;
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:204
        if (pbc > int(sizeof(portBStatus) / 2)) {
    10e0:	29 30       	cpi	r18, 0x09	; 9
    10e2:	31 05       	cpc	r19, r1
    10e4:	0c f0       	brlt	.+2      	; 0x10e8 <main+0x292>
    10e6:	f1 c0       	rjmp	.+482    	; 0x12ca <main+0x474>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:203
        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
        else portBStatus[pbc] = 0;


        pbc++;
    10e8:	20 93 35 3c 	sts	0x3C35, r18	; 0x803c35 <pbc>
    10ec:	30 93 36 3c 	sts	0x3C36, r19	; 0x803c36 <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:235
          }
        }
      }

      //  For Port C (After Port A & Port B)
      if (PORTA_checked && PORTB_checked && !PORTC_checked) {
    10f0:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <PORTA_checked>
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <main+0x2a4>
    10f8:	93 c1       	rjmp	.+806    	; 0x1420 <main+0x5ca>
    10fa:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <PORTB_checked>
    10fe:	88 23       	and	r24, r24
    1100:	09 f4       	brne	.+2      	; 0x1104 <main+0x2ae>
    1102:	4c c0       	rjmp	.+152    	; 0x119c <main+0x346>
    1104:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <PORTC_checked>
    1108:	81 11       	cpse	r24, r1
    110a:	48 c0       	rjmp	.+144    	; 0x119c <main+0x346>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:238

        byte portAddrMask = 0b00000001;
        portAddrMask <<= pcc;
    110c:	c8 01       	movw	r24, r16
    110e:	00 90 22 3c 	lds	r0, 0x3C22	; 0x803c22 <pcc>
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <main+0x2c2>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <main+0x2be>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:242
        //      printBinary(portAddrMask);

        // Set as OUTPUT & HIGH
        cli();
    111c:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:243
        PORTC.DIRSET = portAddrMask;
    111e:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f63a0>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:244
        PORTC.OUTSET = portAddrMask;
    1122:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <vtable for UartClass+0x7f63a4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:246
        // Set as INPUT and read STATE
        PORTC.DIRCLR = portAddrMask;
    1126:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <vtable for UartClass+0x7f63a1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:247
        firstState = PORTC.IN & portAddrMask;
    112a:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <vtable for UartClass+0x7f63a7>
    112e:	28 23       	and	r18, r24
    1130:	31 e0       	ldi	r19, 0x01	; 1
    1132:	09 f4       	brne	.+2      	; 0x1136 <main+0x2e0>
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	30 93 46 3c 	sts	0x3C46, r19	; 0x803c46 <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:250
        //      Serial.println(firstState);
        // Set as OUTPUT & LOW
        PORTC.DIRSET = portAddrMask;
    113a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f63a0>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:251
        PORTC.OUTCLR = portAddrMask;
    113e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f63a5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:253
        // Set as INPUT and read STATE, again
        PORTC.DIRCLR = portAddrMask;
    1142:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <vtable for UartClass+0x7f63a1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:254
        secondState = PORTC.IN & portAddrMask;
    1146:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <vtable for UartClass+0x7f63a7>
    114a:	89 23       	and	r24, r25
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	09 f4       	brne	.+2      	; 0x1152 <main+0x2fc>
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	90 93 45 3c 	sts	0x3C45, r25	; 0x803c45 <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:262
        // [DEBUG] [TEST] **Simulation for non-working pins
        //        if (pcc == 4) {
        //          secondState = HIGH;
        //        }
        //------------------------------------------------//
        sei();
    1156:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:265


        if (firstState == HIGH && secondState == LOW) {
    1158:	20 91 46 3c 	lds	r18, 0x3C46	; 0x803c46 <firstState>
    115c:	80 91 22 3c 	lds	r24, 0x3C22	; 0x803c22 <pcc>
    1160:	90 91 23 3c 	lds	r25, 0x3C23	; 0x803c23 <pcc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:269
          //  Means that particular pin state is changing and working
          //  Mark that pin as "working: 1"
          //  Serial.println("Working!");
          portCStatus[pcc] = 1;
    1164:	fc 01       	movw	r30, r24
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	ea 5e       	subi	r30, 0xEA	; 234
    116c:	f3 4c       	sbci	r31, 0xC3	; 195
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:265
        //        }
        //------------------------------------------------//
        sei();


        if (firstState == HIGH && secondState == LOW) {
    116e:	22 23       	and	r18, r18
    1170:	09 f4       	brne	.+2      	; 0x1174 <main+0x31e>
    1172:	01 c1       	rjmp	.+514    	; 0x1376 <main+0x520>
    1174:	20 91 45 3c 	lds	r18, 0x3C45	; 0x803c45 <secondState>
    1178:	21 11       	cpse	r18, r1
    117a:	fd c0       	rjmp	.+506    	; 0x1376 <main+0x520>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:269
          //  Means that particular pin state is changing and working
          //  Mark that pin as "working: 1"
          //  Serial.println("Working!");
          portCStatus[pcc] = 1;
    117c:	00 83       	st	Z, r16
    117e:	11 83       	std	Z+1, r17	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:276
          //  Mark that pin as "not-working: 0"
          //  Serial.println("Not Working!");
          portCStatus[pcc] = 0;
        }

        pcc++;
    1180:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:277
        if (pcc > 5) {
    1182:	86 30       	cpi	r24, 0x06	; 6
    1184:	91 05       	cpc	r25, r1
    1186:	0c f0       	brlt	.+2      	; 0x118a <main+0x334>
    1188:	f9 c0       	rjmp	.+498    	; 0x137c <main+0x526>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:276
          //  Mark that pin as "not-working: 0"
          //  Serial.println("Not Working!");
          portCStatus[pcc] = 0;
        }

        pcc++;
    118a:	80 93 22 3c 	sts	0x3C22, r24	; 0x803c22 <pcc>
    118e:	90 93 23 3c 	sts	0x3C23, r25	; 0x803c23 <pcc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:306
        }
      }



      if (PORTA_checked && PORTB_checked && PORTC_checked) {
    1192:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <PORTA_checked>
    1196:	88 23       	and	r24, r24
    1198:	09 f4       	brne	.+2      	; 0x119c <main+0x346>
    119a:	42 c1       	rjmp	.+644    	; 0x1420 <main+0x5ca>
    119c:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <PORTB_checked>
    11a0:	88 23       	and	r24, r24
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <main+0x350>
    11a4:	3d c1       	rjmp	.+634    	; 0x1420 <main+0x5ca>
    11a6:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <PORTC_checked>
    11aa:	88 23       	and	r24, r24
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <main+0x35a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:307
        Serial.println("\nATTINY Digital IO Test finished!\n");
    11ae:	38 c1       	rjmp	.+624    	; 0x1420 <main+0x5ca>
    11b0:	85 e6       	ldi	r24, 0x65	; 101
    11b2:	92 ea       	ldi	r25, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:50
    examinePins();

    pinExaminationFinished = true;
    11b4:	9d d9       	rcall	.-3270   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
loop():
    11b6:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:51
    printHeader = false;
    11b8:	80 93 8e 3c 	sts	0x3C8E, r24	; 0x803c8e <pinExaminationFinished>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:56
  }


  /* ----  2. Check rtc clock addr. ---- */
  printStepTitle("CHECKING RTC's AVAILABILITY", HOLD_DELAY);
    11bc:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
    11c0:	68 e8       	ldi	r22, 0x88	; 136
    11c2:	72 ea       	ldi	r23, 0xA2	; 162
    11c4:	ce 01       	movw	r24, r28
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	ce db       	rcall	.-2148   	; 0x966 <String::String(char const*)>
    11ca:	ce 01       	movw	r24, r28
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	df db       	rcall	.-2114   	; 0x98e <printStepTitle(String, int) [clone .constprop.2]>
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:58

  if (pinExaminationFinished && !rtcAvailabilityChecked) {
    11d4:	1f da       	rcall	.-3010   	; 0x614 <String::~String()>
    11d6:	80 91 8e 3c 	lds	r24, 0x3C8E	; 0x803c8e <pinExaminationFinished>
    11da:	88 23       	and	r24, r24
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <main+0x38a>
    11de:	46 c1       	rjmp	.+652    	; 0x146c <main+0x616>
    11e0:	80 91 8d 3c 	lds	r24, 0x3C8D	; 0x803c8d <rtcAvailabilityChecked>
    11e4:	81 11       	cpse	r24, r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:67
{
}

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();
    11e6:	42 c1       	rjmp	.+644    	; 0x146c <main+0x616>
begin():
    11e8:	3f da       	rcall	.-2946   	; 0x668 <TinyMegaI2CMaster::init() [clone .constprop.17]>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	0e 94 7f 00 	call	0xfe	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
    11f2:	81 11       	cpse	r24, r1
    11f4:	2a c1       	rjmp	.+596    	; 0x144a <main+0x5f4>
reportRTCAvailability():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:22
bool rtcAvailabilityChecked;
bool rtcReadabilityChecked;

void reportRTCAvailability() {
  while (!rtc.begin()) {
    if (checking_rtc_counter < 20) {
    11f6:	80 91 52 3c 	lds	r24, 0x3C52	; 0x803c52 <checking_rtc_counter>
    11fa:	90 91 53 3c 	lds	r25, 0x3C53	; 0x803c53 <checking_rtc_counter+0x1>
    11fe:	84 31       	cpi	r24, 0x14	; 20
    1200:	91 05       	cpc	r25, r1
    1202:	0c f0       	brlt	.+2      	; 0x1206 <main+0x3b0>
    1204:	1e c1       	rjmp	.+572    	; 0x1442 <main+0x5ec>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:23
      checking_rtc_counter += 1;
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	80 93 52 3c 	sts	0x3C52, r24	; 0x803c52 <checking_rtc_counter>
    120c:	90 93 53 3c 	sts	0x3C53, r25	; 0x803c53 <checking_rtc_counter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:111

        //      Serial.print(String(firstState) + " " + String(secondState));

        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
        else portAStatus[pac - 1] = 0;
    1210:	eb cf       	rjmp	.-42     	; 0x11e8 <main+0x392>
examinePins():
    1212:	10 82       	st	Z, r1
    1214:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:116


        pac++;
        if (pac > int(sizeof(portAStatus) / 2)) {
          pac = 1;
    1216:	fd ce       	rjmp	.-518    	; 0x1012 <main+0x1bc>
    1218:	40 92 00 3c 	sts	0x3C00, r4	; 0x803c00 <__DATA_REGION_ORIGIN__>
    121c:	50 92 01 3c 	sts	0x3C01, r5	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:117
          PORTA_checked = true;
    1220:	c0 92 49 3c 	sts	0x3C49, r12	; 0x803c49 <PORTA_checked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:118
          Serial.println("PORT-A IO check finished!");
    1224:	88 ee       	ldi	r24, 0xE8	; 232
    1226:	90 ea       	ldi	r25, 0xA0	; 160
    1228:	63 d9       	rcall	.-3386   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    122a:	f7 e3       	ldi	r31, 0x37	; 55
    122c:	8f 2e       	mov	r8, r31
    122e:	fc e3       	ldi	r31, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:120

          int total_working_pins = 0;
    1230:	9f 2e       	mov	r9, r31
main():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:126

          // ** [BUG] [TBD] - size fo array is 14 , should be 7 ??
          //    Serial.print("Size of array: ");
          //    Serial.println(sizeof(portAStatus));
          // ** Duct tape solution
          for (int i = 0; i < int(sizeof(portAStatus) / 2); i++) {
    1232:	f1 2c       	mov	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:132
            //          Serial.print("PA");
            //          Serial.print(i + 1);
            //          Serial.print(": ");
            //          Serial.println(portAStatus[i]);

            if (portAStatus[i] == 0) {
    1234:	e1 2c       	mov	r14, r1
    1236:	b1 2c       	mov	r11, r1
    1238:	a1 2c       	mov	r10, r1
examinePins():
    123a:	d4 01       	movw	r26, r8
    123c:	8d 91       	ld	r24, X+
    123e:	9d 91       	ld	r25, X+
    1240:	4d 01       	movw	r8, r26
    1242:	bf ef       	ldi	r27, 0xFF	; 255
    1244:	ab 1a       	sub	r10, r27
    1246:	bb 0a       	sbc	r11, r27
    1248:	89 2b       	or	r24, r25
    124a:	b9 f4       	brne	.+46     	; 0x127a <main+0x424>
write():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:134
              Serial.print("[ERR] Internally, PA");
              Serial.print(i + 1);
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	91 ea       	ldi	r25, 0xA1	; 161
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:135
              Serial.println(" not working!");
    1250:	30 d9       	rcall	.-3488   	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
examinePins():
    1252:	c5 01       	movw	r24, r10
    1254:	59 d9       	rcall	.-3406   	; 0x508 <Print::print(int, int) [clone .constprop.20]>
    1256:	87 e1       	ldi	r24, 0x17	; 23
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:126

          // ** [BUG] [TBD] - size fo array is 14 , should be 7 ??
          //    Serial.print("Size of array: ");
          //    Serial.println(sizeof(portAStatus));
          // ** Duct tape solution
          for (int i = 0; i < int(sizeof(portAStatus) / 2); i++) {
    1258:	91 ea       	ldi	r25, 0xA1	; 161
    125a:	4a d9       	rcall	.-3436   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    125c:	f7 e0       	ldi	r31, 0x07	; 7
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:141
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portAStatus) / 2) {
    125e:	af 16       	cp	r10, r31
    1260:	b1 04       	cpc	r11, r1
    1262:	59 f7       	brne	.-42     	; 0x123a <main+0x3e4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:142
            Serial.println("[/] In PORT A (PA1-PA7),");
    1264:	27 e0       	ldi	r18, 0x07	; 7
    1266:	e2 16       	cp	r14, r18
    1268:	f1 04       	cpc	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:143
            Serial.println("All pins are working!\n");
    126a:	59 f4       	brne	.+22     	; 0x1282 <main+0x42c>
    126c:	85 e2       	ldi	r24, 0x25	; 37
    126e:	91 ea       	ldi	r25, 0xA1	; 161
    1270:	3f d9       	rcall	.-3458   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:137
            if (portAStatus[i] == 0) {
              Serial.print("[ERR] Internally, PA");
              Serial.print(i + 1);
              Serial.println(" not working!");
            } else {
              total_working_pins += 1;
    1272:	8e e3       	ldi	r24, 0x3E	; 62
    1274:	91 ea       	ldi	r25, 0xA1	; 161
    1276:	3c d9       	rcall	.-3464   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:145

          if (total_working_pins == sizeof(portAStatus) / 2) {
            Serial.println("[/] In PORT A (PA1-PA7),");
            Serial.println("All pins are working!\n");
          } else {
            Serial.println("[X] In PORT A (PA1-PA7), a total");
    1278:	d5 ce       	rjmp	.-598    	; 0x1024 <main+0x1ce>
    127a:	ef ef       	ldi	r30, 0xFF	; 255
    127c:	ee 1a       	sub	r14, r30
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:146
            Serial.println("of only " + String(total_working_pins) + " pins are working!\n");
    127e:	fe 0a       	sbc	r15, r30
    1280:	ed cf       	rjmp	.-38     	; 0x125c <main+0x406>
    1282:	85 e5       	ldi	r24, 0x55	; 85
    1284:	91 ea       	ldi	r25, 0xA1	; 161
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    1286:	34 d9       	rcall	.-3480   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1288:	b7 01       	movw	r22, r14
    128a:	ce 01       	movw	r24, r28
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	3a db       	rcall	.-2444   	; 0x904 <String::String(int, unsigned char) [clone .constprop.25]>
_ZN15StringSumHelperC2EPKc():
    1290:	66 e7       	ldi	r22, 0x76	; 118
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:146
    1292:	71 ea       	ldi	r23, 0xA1	; 161
    1294:	ce 01       	movw	r24, r28
    1296:	09 96       	adiw	r24, 0x09	; 9
    1298:	66 db       	rcall	.-2356   	; 0x966 <String::String(char const*)>
examinePins():
    129a:	be 01       	movw	r22, r28
    129c:	6f 5f       	subi	r22, 0xFF	; 255
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	ce 01       	movw	r24, r28
    12a2:	09 96       	adiw	r24, 0x09	; 9
    12a4:	ff da       	rcall	.-2562   	; 0x8a4 <operator+(StringSumHelper const&, String const&)>
    12a6:	61 e4       	ldi	r22, 0x41	; 65
    12a8:	71 ea       	ldi	r23, 0xA1	; 161
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    12aa:	e8 da       	rcall	.-2608   	; 0x87c <operator+(StringSumHelper const&, char const*)>
    12ac:	0e d9       	rcall	.-3556   	; 0x4ca <Print::println(String const&) [clone .constprop.27]>
_ZN15StringSumHelperD2Ev():
    12ae:	ce 01       	movw	r24, r28
    12b0:	09 96       	adiw	r24, 0x09	; 9
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:146
    12b2:	b0 d9       	rcall	.-3232   	; 0x614 <String::~String()>
examinePins():
    12b4:	ce 01       	movw	r24, r28
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	ad d9       	rcall	.-3238   	; 0x614 <String::~String()>
    12ba:	b4 ce       	rjmp	.-664    	; 0x1024 <main+0x1ce>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:165

          // Just for filling in hardcoded data for later
          firstState = LOW;
          secondState = LOW;
        } else {
          isSerialPin = false;
    12bc:	10 92 34 3c 	sts	0x3C34, r1	; 0x803c34 <isSerialPin>
    12c0:	cf ce       	rjmp	.-610    	; 0x1060 <main+0x20a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:200
        }


        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
        else portBStatus[pbc] = 0;
    12c2:	fc 01       	movw	r30, r24
    12c4:	10 82       	st	Z, r1
    12c6:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:205


        pbc++;
        if (pbc > int(sizeof(portBStatus) / 2)) {
          pbc = 0;
    12c8:	09 cf       	rjmp	.-494    	; 0x10dc <main+0x286>
    12ca:	10 92 35 3c 	sts	0x3C35, r1	; 0x803c35 <pbc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:206
          PORTB_checked = true;
    12ce:	10 92 36 3c 	sts	0x3C36, r1	; 0x803c36 <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:207
          Serial.println("PORT-B IO check finished!");
    12d2:	c0 92 48 3c 	sts	0x3C48, r12	; 0x803c48 <PORTB_checked>
    12d6:	8f e7       	ldi	r24, 0x7F	; 127
    12d8:	91 ea       	ldi	r25, 0xA1	; 161
    12da:	0a d9       	rcall	.-3564   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    12dc:	74 e2       	ldi	r23, 0x24	; 36
    12de:	87 2e       	mov	r8, r23
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:209

          int total_working_pins = 0;
    12e0:	7c e3       	ldi	r23, 0x3C	; 60
    12e2:	97 2e       	mov	r9, r23
main():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:211

          for (int i = 0; i < int(sizeof(portBStatus) / 2); i++) { // ignoring RX TX pin's registered states
    12e4:	b1 2c       	mov	r11, r1
    12e6:	a1 2c       	mov	r10, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:213
            //  Serial.println(i);
            if ((portBStatus[i] == 0) && i != 2 && i != 3) {
    12e8:	f1 2c       	mov	r15, r1
    12ea:	e1 2c       	mov	r14, r1
examinePins():
    12ec:	d4 01       	movw	r26, r8
    12ee:	8d 91       	ld	r24, X+
    12f0:	9d 91       	ld	r25, X+
    12f2:	4d 01       	movw	r8, r26
    12f4:	89 2b       	or	r24, r25
    12f6:	f1 f4       	brne	.+60     	; 0x1334 <main+0x4de>
    12f8:	c7 01       	movw	r24, r14
    12fa:	02 97       	sbiw	r24, 0x02	; 2
    12fc:	02 97       	sbiw	r24, 0x02	; 2
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:215
              Serial.print("[ERR] Internally, PB");
              Serial.print(i);
    12fe:	40 f0       	brcs	.+16     	; 0x1310 <main+0x4ba>
write():
    1300:	89 e9       	ldi	r24, 0x99	; 153
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:216
              Serial.println(" not working!");
    1302:	91 ea       	ldi	r25, 0xA1	; 161
    1304:	d6 d8       	rcall	.-3668   	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
examinePins():
    1306:	c7 01       	movw	r24, r14
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:211
          PORTB_checked = true;
          Serial.println("PORT-B IO check finished!");

          int total_working_pins = 0;

          for (int i = 0; i < int(sizeof(portBStatus) / 2); i++) { // ignoring RX TX pin's registered states
    1308:	ff d8       	rcall	.-3586   	; 0x508 <Print::print(int, int) [clone .constprop.20]>
    130a:	87 e1       	ldi	r24, 0x17	; 23
    130c:	91 ea       	ldi	r25, 0xA1	; 161
    130e:	f0 d8       	rcall	.-3616   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1310:	ef ef       	ldi	r30, 0xFF	; 255
    1312:	ee 1a       	sub	r14, r30
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:224
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portBStatus) / 2 - 2) { // ignoring RX TX pins
    1314:	fe 0a       	sbc	r15, r30
    1316:	f8 e0       	ldi	r31, 0x08	; 8
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:225
            Serial.println("[/] In PORT B (PB0-PB1 & PB4-PB7),");
    1318:	ef 16       	cp	r14, r31
    131a:	f1 04       	cpc	r15, r1
    131c:	39 f7       	brne	.-50     	; 0x12ec <main+0x496>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:226
            Serial.println("All pins are working!\n");
    131e:	26 e0       	ldi	r18, 0x06	; 6
    1320:	a2 16       	cp	r10, r18
    1322:	b1 04       	cpc	r11, r1
    1324:	59 f4       	brne	.+22     	; 0x133c <main+0x4e6>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:220
              Serial.print(i);
              Serial.println(" not working!");
            } else if ((portBStatus[i] == 0) && (i == 2 || i == 3)) {
              //  Serial.println("Ignoring Hardcoded values for Serial Pins!");
            } else {
              total_working_pins += 1;
    1326:	8e ea       	ldi	r24, 0xAE	; 174
    1328:	91 ea       	ldi	r25, 0xA1	; 161
    132a:	e2 d8       	rcall	.-3644   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    132c:	8e e3       	ldi	r24, 0x3E	; 62
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:228

          if (total_working_pins == sizeof(portBStatus) / 2 - 2) { // ignoring RX TX pins
            Serial.println("[/] In PORT B (PB0-PB1 & PB4-PB7),");
            Serial.println("All pins are working!\n");
          } else {
            Serial.println("[X] In PORT B (PB0-PB1 & PB4-PB7), a total");
    132e:	91 ea       	ldi	r25, 0xA1	; 161
    1330:	df d8       	rcall	.-3650   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1332:	de ce       	rjmp	.-580    	; 0x10f0 <main+0x29a>
    1334:	bf ef       	ldi	r27, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:229
            Serial.println("of only " + String(total_working_pins) + " pins are working!\n");
    1336:	ab 1a       	sub	r10, r27
    1338:	bb 0a       	sbc	r11, r27
    133a:	ea cf       	rjmp	.-44     	; 0x1310 <main+0x4ba>
    133c:	81 ed       	ldi	r24, 0xD1	; 209
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    133e:	91 ea       	ldi	r25, 0xA1	; 161
    1340:	d7 d8       	rcall	.-3666   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1342:	b5 01       	movw	r22, r10
    1344:	ce 01       	movw	r24, r28
    1346:	01 96       	adiw	r24, 0x01	; 1
    1348:	dd da       	rcall	.-2630   	; 0x904 <String::String(int, unsigned char) [clone .constprop.25]>
_ZN15StringSumHelperC2EPKc():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:229
    134a:	66 e7       	ldi	r22, 0x76	; 118
    134c:	71 ea       	ldi	r23, 0xA1	; 161
    134e:	ce 01       	movw	r24, r28
    1350:	09 96       	adiw	r24, 0x09	; 9
    1352:	09 db       	rcall	.-2542   	; 0x966 <String::String(char const*)>
examinePins():
    1354:	be 01       	movw	r22, r28
    1356:	6f 5f       	subi	r22, 0xFF	; 255
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	ce 01       	movw	r24, r28
    135c:	09 96       	adiw	r24, 0x09	; 9
    135e:	a2 da       	rcall	.-2748   	; 0x8a4 <operator+(StringSumHelper const&, String const&)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    1360:	61 e4       	ldi	r22, 0x41	; 65
    1362:	71 ea       	ldi	r23, 0xA1	; 161
    1364:	8b da       	rcall	.-2794   	; 0x87c <operator+(StringSumHelper const&, char const*)>
    1366:	b1 d8       	rcall	.-3742   	; 0x4ca <Print::println(String const&) [clone .constprop.27]>
_ZN15StringSumHelperD2Ev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:229
    1368:	ce 01       	movw	r24, r28
    136a:	09 96       	adiw	r24, 0x09	; 9
    136c:	53 d9       	rcall	.-3418   	; 0x614 <String::~String()>
examinePins():
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:273
          //  Serial.println("Working!");
          portCStatus[pcc] = 1;
        } else {
          //  Mark that pin as "not-working: 0"
          //  Serial.println("Not Working!");
          portCStatus[pcc] = 0;
    1372:	50 d9       	rcall	.-3424   	; 0x614 <String::~String()>
    1374:	bd ce       	rjmp	.-646    	; 0x10f0 <main+0x29a>
    1376:	10 82       	st	Z, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:278
        }

        pcc++;
        if (pcc > 5) {
          pcc = 0;
    1378:	11 82       	std	Z+1, r1	; 0x01
    137a:	02 cf       	rjmp	.-508    	; 0x1180 <main+0x32a>
    137c:	10 92 22 3c 	sts	0x3C22, r1	; 0x803c22 <pcc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:279
          PORTC_checked = true;
    1380:	10 92 23 3c 	sts	0x3C23, r1	; 0x803c23 <pcc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:280
          Serial.println("PORT-C IO check finished!");
    1384:	c0 92 47 3c 	sts	0x3C47, r12	; 0x803c47 <PORTC_checked>
    1388:	8c ef       	ldi	r24, 0xFC	; 252
    138a:	91 ea       	ldi	r25, 0xA1	; 161
    138c:	b1 d8       	rcall	.-3742   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    138e:	56 e1       	ldi	r21, 0x16	; 22
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:282

          int total_working_pins = 0;
    1390:	85 2e       	mov	r8, r21
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:284

          for (int i = 0; i < int(sizeof(portCStatus) / 2); i++) {
    1392:	5c e3       	ldi	r21, 0x3C	; 60
    1394:	95 2e       	mov	r9, r21
main():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:285
            if (portCStatus[i] == 0) {
    1396:	f1 2c       	mov	r15, r1
    1398:	e1 2c       	mov	r14, r1
    139a:	b1 2c       	mov	r11, r1
    139c:	a1 2c       	mov	r10, r1
examinePins():
    139e:	d4 01       	movw	r26, r8
    13a0:	8d 91       	ld	r24, X+
    13a2:	9d 91       	ld	r25, X+
    13a4:	4d 01       	movw	r8, r26
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:287
              Serial.print("[ERR] Internally, PC");
              Serial.print(i);
    13a6:	89 2b       	or	r24, r25
    13a8:	d1 f4       	brne	.+52     	; 0x13de <main+0x588>
write():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:288
              Serial.println(" not working!");
    13aa:	86 e1       	ldi	r24, 0x16	; 22
    13ac:	92 ea       	ldi	r25, 0xA2	; 162
    13ae:	81 d8       	rcall	.-3838   	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:284
          PORTC_checked = true;
          Serial.println("PORT-C IO check finished!");

          int total_working_pins = 0;

          for (int i = 0; i < int(sizeof(portCStatus) / 2); i++) {
    13b0:	c5 01       	movw	r24, r10
    13b2:	aa d8       	rcall	.-3756   	; 0x508 <Print::print(int, int) [clone .constprop.20]>
    13b4:	87 e1       	ldi	r24, 0x17	; 23
    13b6:	91 ea       	ldi	r25, 0xA1	; 161
    13b8:	9b d8       	rcall	.-3786   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    13ba:	ef ef       	ldi	r30, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:294
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portCStatus) / 2) {
    13bc:	ae 1a       	sub	r10, r30
    13be:	be 0a       	sbc	r11, r30
    13c0:	f6 e0       	ldi	r31, 0x06	; 6
    13c2:	af 16       	cp	r10, r31
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:295
            Serial.println("[/] In PORT C (PC0-PC5),");
    13c4:	b1 04       	cpc	r11, r1
    13c6:	59 f7       	brne	.-42     	; 0x139e <main+0x548>
    13c8:	26 e0       	ldi	r18, 0x06	; 6
    13ca:	e2 16       	cp	r14, r18
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:296
            Serial.println("All pins are working!\n");
    13cc:	f1 04       	cpc	r15, r1
    13ce:	59 f4       	brne	.+22     	; 0x13e6 <main+0x590>
    13d0:	8b e2       	ldi	r24, 0x2B	; 43
    13d2:	92 ea       	ldi	r25, 0xA2	; 162
    13d4:	8d d8       	rcall	.-3814   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:290
            if (portCStatus[i] == 0) {
              Serial.print("[ERR] Internally, PC");
              Serial.print(i);
              Serial.println(" not working!");
            } else {
              total_working_pins += 1;
    13d6:	8e e3       	ldi	r24, 0x3E	; 62
    13d8:	91 ea       	ldi	r25, 0xA1	; 161
    13da:	8a d8       	rcall	.-3820   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    13dc:	da ce       	rjmp	.-588    	; 0x1192 <main+0x33c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:298

          if (total_working_pins == sizeof(portCStatus) / 2) {
            Serial.println("[/] In PORT C (PC0-PC5),");
            Serial.println("All pins are working!\n");
          } else {
            Serial.println("[X] In PORT C (PC0-PC5), a total");
    13de:	bf ef       	ldi	r27, 0xFF	; 255
    13e0:	eb 1a       	sub	r14, r27
    13e2:	fb 0a       	sbc	r15, r27
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:299
            Serial.println("of only " + String(total_working_pins) + " pins are working!\n");
    13e4:	ea cf       	rjmp	.-44     	; 0x13ba <main+0x564>
    13e6:	84 e4       	ldi	r24, 0x44	; 68
    13e8:	92 ea       	ldi	r25, 0xA2	; 162
    13ea:	82 d8       	rcall	.-3836   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    13ec:	b7 01       	movw	r22, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    13ee:	ce 01       	movw	r24, r28
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	88 da       	rcall	.-2800   	; 0x904 <String::String(int, unsigned char) [clone .constprop.25]>
_ZN15StringSumHelperC2EPKc():
    13f4:	66 e7       	ldi	r22, 0x76	; 118
    13f6:	71 ea       	ldi	r23, 0xA1	; 161
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:299
    13f8:	ce 01       	movw	r24, r28
    13fa:	09 96       	adiw	r24, 0x09	; 9
    13fc:	b4 da       	rcall	.-2712   	; 0x966 <String::String(char const*)>
examinePins():
    13fe:	be 01       	movw	r22, r28
    1400:	6f 5f       	subi	r22, 0xFF	; 255
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	ce 01       	movw	r24, r28
    1406:	09 96       	adiw	r24, 0x09	; 9
    1408:	4d da       	rcall	.-2918   	; 0x8a4 <operator+(StringSumHelper const&, String const&)>
    140a:	61 e4       	ldi	r22, 0x41	; 65
    140c:	71 ea       	ldi	r23, 0xA1	; 161
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    140e:	36 da       	rcall	.-2964   	; 0x87c <operator+(StringSumHelper const&, char const*)>
    1410:	5c d8       	rcall	.-3912   	; 0x4ca <Print::println(String const&) [clone .constprop.27]>
_ZN15StringSumHelperD2Ev():
    1412:	ce 01       	movw	r24, r28
    1414:	09 96       	adiw	r24, 0x09	; 9
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:299
    1416:	fe d8       	rcall	.-3588   	; 0x614 <String::~String()>
examinePins():
    1418:	ce 01       	movw	r24, r28
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	fb d8       	rcall	.-3594   	; 0x614 <String::~String()>
    141e:	b9 ce       	rjmp	.-654    	; 0x1192 <main+0x33c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:311
      if (PORTA_checked && PORTB_checked && PORTC_checked) {
        Serial.println("\nATTINY Digital IO Test finished!\n");
        break;
      }

      pinTestModeStartMillis = pinTestModeCurrMillis;
    1420:	80 91 4e 3c 	lds	r24, 0x3C4E	; 0x803c4e <pinTestModeCurrMillis>
    1424:	90 91 4f 3c 	lds	r25, 0x3C4F	; 0x803c4f <pinTestModeCurrMillis+0x1>
    1428:	a0 91 50 3c 	lds	r26, 0x3C50	; 0x803c50 <pinTestModeCurrMillis+0x2>
    142c:	b0 91 51 3c 	lds	r27, 0x3C51	; 0x803c51 <pinTestModeCurrMillis+0x3>
    1430:	80 93 4a 3c 	sts	0x3C4A, r24	; 0x803c4a <pinTestModeStartMillis>
    1434:	90 93 4b 3c 	sts	0x3C4B, r25	; 0x803c4b <pinTestModeStartMillis+0x1>
    1438:	a0 93 4c 3c 	sts	0x3C4C, r26	; 0x803c4c <pinTestModeStartMillis+0x2>
    143c:	b0 93 4d 3c 	sts	0x3C4D, r27	; 0x803c4d <pinTestModeStartMillis+0x3>
    1440:	88 cd       	rjmp	.-1264   	; 0xf52 <main+0xfc>
reportRTCAvailability():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:25
    } else {
      checking_rtc_counter = 0;
    1442:	10 92 52 3c 	sts	0x3C52, r1	; 0x803c52 <checking_rtc_counter>
    1446:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <checking_rtc_counter+0x1>
begin():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:67
{
}

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();
    144a:	0e d9       	rcall	.-3556   	; 0x668 <TinyMegaI2CMaster::init() [clone .constprop.17]>
    144c:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 7f 00 	call	0xfe	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
    1454:	81 11       	cpse	r24, r1
    1456:	65 c2       	rjmp	.+1226   	; 0x1922 <main+0xacc>
reportRTCAvailability():
    1458:	10 92 69 3c 	sts	0x3C69, r1	; 0x803c69 <rtcAvailable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:31
      break;
    }
  }

  if (!rtc.begin()) {
    rtcAvailable = false;
    145c:	84 ea       	ldi	r24, 0xA4	; 164
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:32
    Serial.println("RTC_ADDR_FOUND:0");
    145e:	92 ea       	ldi	r25, 0xA2	; 162
    1460:	47 d8       	rcall	.-3954   	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:35
  } else {
    rtcAvailable = true;
    Serial.println("RTC_ADDR_FOUND:1");
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 93 8d 3c 	sts	0x3C8D, r24	; 0x803c8d <rtcAvailabilityChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:61
    reportRTCAvailability();

    rtcAvailabilityChecked = true;
    1468:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:62
    printHeader = false;
    146c:	66 ec       	ldi	r22, 0xC6	; 198
    146e:	72 ea       	ldi	r23, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:67
  }


  /* ---- 3. Check curr. factory default time ---- */
  printStepTitle("CHECKING RTC's R/W FUNC", HOLD_DELAY);
    1470:	ce 01       	movw	r24, r28
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	78 da       	rcall	.-2832   	; 0x966 <String::String(char const*)>
    1476:	ce 01       	movw	r24, r28
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	89 da       	rcall	.-2798   	; 0x98e <printStepTitle(String, int) [clone .constprop.2]>
    147c:	ce 01       	movw	r24, r28
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	c9 d8       	rcall	.-3694   	; 0x614 <String::~String()>
    1482:	80 91 8d 3c 	lds	r24, 0x3C8D	; 0x803c8d <rtcAvailabilityChecked>
    1486:	88 23       	and	r24, r24
    1488:	09 f4       	brne	.+2      	; 0x148c <main+0x636>
    148a:	c9 c0       	rjmp	.+402    	; 0x161e <main+0x7c8>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:69

  if (rtcAvailabilityChecked && !rtcReadabilityChecked) {
    148c:	80 91 8c 3c 	lds	r24, 0x3C8C	; 0x803c8c <rtcReadabilityChecked>
    1490:	81 11       	cpse	r24, r1
    1492:	c5 c0       	rjmp	.+394    	; 0x161e <main+0x7c8>
rtcReadWriteChecker():
    1494:	80 91 69 3c 	lds	r24, 0x3C69	; 0x803c69 <rtcAvailable>
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <main+0x648>
    149c:	b2 c0       	rjmp	.+356    	; 0x1602 <main+0x7ac>
updateTime():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:40
  }
}

void rtcReadWriteChecker() {
  while (rtcAvailable) {
    149e:	8e e0       	ldi	r24, 0x0E	; 14
    14a0:	9d e3       	ldi	r25, 0x3D	; 61
    14a2:	0e 94 9e 00 	call	0x13c	; 0x13c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>
    14a6:	88 23       	and	r24, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:81
    }
}

bool RV8803Tiny::updateTime()
{
    if (!readMultipleRegisters(RV8803_HUNDREDTHS, _time, TIME_ARRAY_LENGTH))
    14a8:	09 f4       	brne	.+2      	; 0x14ac <main+0x656>
    14aa:	41 c2       	rjmp	.+1154   	; 0x192e <main+0xad8>
    14ac:	80 91 0e 3d 	lds	r24, 0x3D0E	; 0x803d0e <rtc+0x6>
BCDtoDEC():
    14b0:	98 2f       	mov	r25, r24
    14b2:	92 95       	swap	r25
    14b4:	9f 70       	andi	r25, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    //If hundredths are at 99 or seconds are at 59, read again to make sure we didn't accidentally skip a second/minute
    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 || BCDtoDEC(_time[TIME_SECONDS]) == 59)
    14b6:	2a e0       	ldi	r18, 0x0A	; 10
    14b8:	8f 70       	andi	r24, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    14ba:	92 9f       	mul	r25, r18
    14bc:	80 0d       	add	r24, r0
    14be:	11 24       	eor	r1, r1
updateTime():
    14c0:	83 36       	cpi	r24, 0x63	; 99
    14c2:	59 f0       	breq	.+22     	; 0x14da <main+0x684>
    14c4:	90 91 0f 3d 	lds	r25, 0x3D0F	; 0x803d0f <rtc+0x7>
BCDtoDEC():
    14c8:	39 2f       	mov	r19, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    //If hundredths are at 99 or seconds are at 59, read again to make sure we didn't accidentally skip a second/minute
    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 || BCDtoDEC(_time[TIME_SECONDS]) == 59)
    14ca:	32 95       	swap	r19
    14cc:	3f 70       	andi	r19, 0x0F	; 15
    14ce:	9f 70       	andi	r25, 0x0F	; 15
    14d0:	32 9f       	mul	r19, r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    14d2:	90 0d       	add	r25, r0
    14d4:	11 24       	eor	r1, r1
updateTime():
    14d6:	9b 33       	cpi	r25, 0x3B	; 59
    14d8:	d9 f4       	brne	.+54     	; 0x1510 <main+0x6ba>
    14da:	99 81       	ldd	r25, Y+1	; 0x01
BCDtoDEC():
    14dc:	29 2f       	mov	r18, r25
    14de:	22 95       	swap	r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    //If hundredths are at 99 or seconds are at 59, read again to make sure we didn't accidentally skip a second/minute
    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 || BCDtoDEC(_time[TIME_SECONDS]) == 59)
    14e0:	2f 70       	andi	r18, 0x0F	; 15
    14e2:	9f 70       	andi	r25, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        //If the reading for hundredths has rolled over, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(_time[TIME_HUNDREDTHS]) > BCDtoDEC(tempTime[TIME_HUNDREDTHS])) 
    14e4:	3a e0       	ldi	r19, 0x0A	; 10
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    14e6:	23 9f       	mul	r18, r19
    14e8:	90 0d       	add	r25, r0
    14ea:	11 24       	eor	r1, r1
updateTime():
    14ec:	98 17       	cp	r25, r24
    14ee:	48 f4       	brcc	.+18     	; 0x1502 <main+0x6ac>
    14f0:	88 e0       	ldi	r24, 0x08	; 8
    14f2:	fe 01       	movw	r30, r28
    14f4:	31 96       	adiw	r30, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 || BCDtoDEC(_time[TIME_SECONDS]) == 59)
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        //If the reading for hundredths has rolled over, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(_time[TIME_HUNDREDTHS]) > BCDtoDEC(tempTime[TIME_HUNDREDTHS])) 
    14f6:	ae e0       	ldi	r26, 0x0E	; 14
    14f8:	bd e3       	ldi	r27, 0x3D	; 61
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:95
        {
            memcpy(_time, tempTime, TIME_ARRAY_LENGTH);
    14fa:	01 90       	ld	r0, Z+
    14fc:	0d 92       	st	X+, r0
    14fe:	8a 95       	dec	r24
    1500:	e1 f7       	brne	.-8      	; 0x14fa <main+0x6a4>
    1502:	ce 01       	movw	r24, r28
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	0e 94 9e 00 	call	0x13c	; 0x13c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:97
        }
        if (!readMultipleRegisters(RV8803_HUNDREDTHS, tempTime, TIME_ARRAY_LENGTH))
    150a:	88 23       	and	r24, r24
    150c:	09 f4       	brne	.+2      	; 0x1510 <main+0x6ba>
    150e:	0f c2       	rjmp	.+1054   	; 0x192e <main+0xad8>
rtcReadWriteChecker():
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	80 93 68 3c 	sts	0x3C68, r24	; 0x803c68 <rtcReadable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:42
    if (rtc.updateTime()) {
      rtcReadable = true;
    1516:	64 e6       	ldi	r22, 0x64	; 100
    1518:	70 e0       	ldi	r23, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:47
      // --- ** No need for this section according to a new method [ currTimeAsArray() ] in rtc lib ** --- //
      //      delay(100);
      //      rtc.updateTimeArray(); // "updateTimeArray()" function has been dissolved in the RTClibrary
      //-------------------------------------------------------------------------------------------- ------//
      delay(100);
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 1b 02 	call	0x436	; 0x436 <delay>
stringTime():
    1522:	20 91 0f 3d 	lds	r18, 0x3D0F	; 0x803d0f <rtc+0x7>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    1526:	90 91 10 3d 	lds	r25, 0x3D10	; 0x803d10 <rtc+0x8>
    152a:	80 91 11 3d 	lds	r24, 0x3D11	; 0x803d11 <rtc+0x9>
BCDtoDEC():
    152e:	32 2f       	mov	r19, r18
    1530:	32 95       	swap	r19
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1532:	3f 70       	andi	r19, 0x0F	; 15
    1534:	4a e0       	ldi	r20, 0x0A	; 10
    1536:	f4 2e       	mov	r15, r20
    1538:	2f 70       	andi	r18, 0x0F	; 15
    153a:	3f 9d       	mul	r19, r15
    153c:	20 0d       	add	r18, r0
    153e:	11 24       	eor	r1, r1
stringTime():
    1540:	1f 92       	push	r1
    1542:	2f 93       	push	r18
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    1544:	29 2f       	mov	r18, r25
    1546:	22 95       	swap	r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1548:	2f 70       	andi	r18, 0x0F	; 15
    154a:	9f 70       	andi	r25, 0x0F	; 15
    154c:	2f 9d       	mul	r18, r15
    154e:	90 0d       	add	r25, r0
    1550:	11 24       	eor	r1, r1
stringTime():
    1552:	1f 92       	push	r1
    1554:	9f 93       	push	r25
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    1556:	98 2f       	mov	r25, r24
    1558:	92 95       	swap	r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    155a:	9f 70       	andi	r25, 0x0F	; 15
    155c:	8f 70       	andi	r24, 0x0F	; 15
    155e:	9f 9d       	mul	r25, r15
    1560:	80 0d       	add	r24, r0
    1562:	11 24       	eor	r1, r1
stringTime():
    1564:	1f 92       	push	r1
    1566:	8f 93       	push	r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    1568:	8e ed       	ldi	r24, 0xDE	; 222
    156a:	92 ea       	ldi	r25, 0xA2	; 162
    156c:	9f 93       	push	r25
    156e:	8f 93       	push	r24
    1570:	84 e5       	ldi	r24, 0x54	; 84
    1572:	9c e3       	ldi	r25, 0x3C	; 60
    1574:	9f 93       	push	r25
    1576:	8f 93       	push	r24
    1578:	46 d5       	rcall	.+2700   	; 0x2006 <sprintf>
rtcReadWriteChecker():
    157a:	64 e5       	ldi	r22, 0x54	; 84
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:49
      // Send string date & time
      Serial.println(String(rtc.stringTime()));
    157c:	7c e3       	ldi	r23, 0x3C	; 60
    157e:	ce 01       	movw	r24, r28
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	f1 d9       	rcall	.-3102   	; 0x966 <String::String(char const*)>
    1584:	ce 01       	movw	r24, r28
    1586:	01 96       	adiw	r24, 0x01	; 1
    1588:	0e 94 65 02 	call	0x4ca	; 0x4ca <Print::println(String const&) [clone .constprop.27]>
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	41 d8       	rcall	.-3966   	; 0x614 <String::~String()>
stringDate():
    1592:	20 91 15 3d 	lds	r18, 0x3D15	; 0x803d15 <rtc+0xd>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    1596:	90 91 14 3d 	lds	r25, 0x3D14	; 0x803d14 <rtc+0xc>
    159a:	80 91 13 3d 	lds	r24, 0x3D13	; 0x803d13 <rtc+0xb>
BCDtoDEC():
    159e:	32 2f       	mov	r19, r18
    15a0:	32 95       	swap	r19
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    15a2:	3f 70       	andi	r19, 0x0F	; 15
    15a4:	2f 70       	andi	r18, 0x0F	; 15
    15a6:	3f 9d       	mul	r19, r15
    15a8:	20 0d       	add	r18, r0
    15aa:	11 24       	eor	r1, r1
stringDate():
    15ac:	1f 92       	push	r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    15ae:	2f 93       	push	r18
BCDtoDEC():
    15b0:	29 2f       	mov	r18, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    15b2:	22 95       	swap	r18
    15b4:	2f 70       	andi	r18, 0x0F	; 15
    15b6:	9f 70       	andi	r25, 0x0F	; 15
    15b8:	2f 9d       	mul	r18, r15
    15ba:	90 0d       	add	r25, r0
    15bc:	11 24       	eor	r1, r1
stringDate():
    15be:	1f 92       	push	r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    15c0:	9f 93       	push	r25
BCDtoDEC():
    15c2:	98 2f       	mov	r25, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    15c4:	92 95       	swap	r25
    15c6:	9f 70       	andi	r25, 0x0F	; 15
    15c8:	8f 70       	andi	r24, 0x0F	; 15
    15ca:	9f 9d       	mul	r25, r15
    15cc:	80 0d       	add	r24, r0
    15ce:	11 24       	eor	r1, r1
stringDate():
    15d0:	1f 92       	push	r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    15d2:	8f 93       	push	r24
    15d4:	8d ee       	ldi	r24, 0xED	; 237
    15d6:	92 ea       	ldi	r25, 0xA2	; 162
    15d8:	9f 93       	push	r25
    15da:	8f 93       	push	r24
    15dc:	8d e5       	ldi	r24, 0x5D	; 93
    15de:	9c e3       	ldi	r25, 0x3C	; 60
    15e0:	9f 93       	push	r25
    15e2:	8f 93       	push	r24
    15e4:	10 d5       	rcall	.+2592   	; 0x2006 <sprintf>
rtcReadWriteChecker():
    15e6:	6d e5       	ldi	r22, 0x5D	; 93
    15e8:	7c e3       	ldi	r23, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:50
      Serial.println(String(rtc.stringDate()));
    15ea:	ce 01       	movw	r24, r28
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	bb d9       	rcall	.-3210   	; 0x966 <String::String(char const*)>
    15f0:	ce 01       	movw	r24, r28
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	0e 94 65 02 	call	0x4ca	; 0x4ca <Print::println(String const&) [clone .constprop.27]>
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	0b d8       	rcall	.-4074   	; 0x614 <String::~String()>
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	80 91 68 3c 	lds	r24, 0x3C68	; 0x803c68 <rtcReadable>
    1606:	88 23       	and	r24, r24
    1608:	09 f4       	brne	.+2      	; 0x160c <main+0x7b6>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:57
      rtcReadable = false;
      Serial.println("RTC_READABLE:0");
    }
    break;
  }
  if (rtcReadable) {
    160a:	98 c1       	rjmp	.+816    	; 0x193c <main+0xae6>
    160c:	8d e0       	ldi	r24, 0x0D	; 13
    160e:	93 ea       	ldi	r25, 0xA3	; 163
    1610:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:58
    Serial.println("RTC_READABLE:1");
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 8c 3c 	sts	0x3C8C, r24	; 0x803c8c <rtcReadabilityChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:60
  } else {
    Serial.println("RTC_READABLE:0");
    161a:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:72
    rtcReadWriteChecker();

    rtcReadabilityChecked = true;
    161e:	6c e1       	ldi	r22, 0x1C	; 28
    1620:	73 ea       	ldi	r23, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:73
    printHeader = false;
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:78
  }


  /* ---- 4. check button for presses ---- */
  printStepTitle("CHECKING BUTTON COND [Press]", HOLD_DELAY);
    1626:	9f d9       	rcall	.-3266   	; 0x966 <String::String(char const*)>
    1628:	ce 01       	movw	r24, r28
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	b0 d9       	rcall	.-3232   	; 0x98e <printStepTitle(String, int) [clone .constprop.2]>
    162e:	ce 01       	movw	r24, r28
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	0e 94 0a 03 	call	0x614	; 0x614 <String::~String()>
initBtnPin():
    1636:	80 91 6a 3c 	lds	r24, 0x3C6A	; 0x803c6a <btnInitialized>
    163a:	81 11       	cpse	r24, r1
    163c:	07 c0       	rjmp	.+14     	; 0x164c <main+0x7f6>
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	8e e0       	ldi	r24, 0x0E	; 14
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:22

boolean btnInitialized;
bool btnConnChecked;

void initBtnPin(int Pin) {
  if (!btnInitialized) {
    1642:	0e 94 0f 03 	call	0x61e	; 0x61e <pinMode>
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	80 93 6a 3c 	sts	0x3C6A, r24	; 0x803c6a <btnInitialized>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:25
    //--- Buttons initialization ---//
    //  PORTC.PIN2CTRL = 0b00001001;
    pinMode(Pin, INPUT_PULLUP);
    164c:	80 91 8c 3c 	lds	r24, 0x3C8C	; 0x803c8c <rtcReadabilityChecked>
    1650:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:26
    btnInitialized = true;
    1652:	09 f4       	brne	.+2      	; 0x1656 <main+0x800>
    1654:	5f c0       	rjmp	.+190    	; 0x1714 <main+0x8be>
    1656:	80 91 8b 3c 	lds	r24, 0x3C8B	; 0x803c8b <btnConnChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:81
  initBtnPin(BTN_PIN);

  if (rtcReadabilityChecked && !btnConnChecked) {
    165a:	81 11       	cpse	r24, r1
    165c:	5b c0       	rjmp	.+182    	; 0x1714 <main+0x8be>
btnChecker():
    165e:	cc 24       	eor	r12, r12
    1660:	c3 94       	inc	r12
    1662:	9a e0       	ldi	r25, 0x0A	; 10
    1664:	e9 2e       	mov	r14, r25
    1666:	f1 2c       	mov	r15, r1
    1668:	0e 94 44 02 	call	0x488	; 0x488 <millis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:39

      btnWatcherFlag++;
      SW_OneState = digitalRead(14);

      Serial.print("SW_STATE: ");
      Serial.print(!SW_OneState);
    166c:	60 93 72 3c 	sts	0x3C72, r22	; 0x803c72 <btnWatchTimerCurr>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:41
      Serial.print(" [");
      Serial.print(10 - btnWatcherFlag);
    1670:	70 93 73 3c 	sts	0x3C73, r23	; 0x803c73 <btnWatchTimerCurr+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:32
  }
}

void btnChecker() {
  while (true) {
    btnWatchTimerCurr = millis();
    1674:	80 93 74 3c 	sts	0x3C74, r24	; 0x803c74 <btnWatchTimerCurr+0x2>
    1678:	90 93 75 3c 	sts	0x3C75, r25	; 0x803c75 <btnWatchTimerCurr+0x3>
    167c:	80 90 6e 3c 	lds	r8, 0x3C6E	; 0x803c6e <btnWatchTimerStart>
    1680:	90 90 6f 3c 	lds	r9, 0x3C6F	; 0x803c6f <btnWatchTimerStart+0x1>
    1684:	a0 90 70 3c 	lds	r10, 0x3C70	; 0x803c70 <btnWatchTimerStart+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:33
    if ( btnWatchTimerCurr - btnWatchTimerStart >= 1000) {
    1688:	b0 90 71 3c 	lds	r11, 0x3C71	; 0x803c71 <btnWatchTimerStart+0x3>
    168c:	68 19       	sub	r22, r8
    168e:	79 09       	sbc	r23, r9
    1690:	8a 09       	sbc	r24, r10
    1692:	9b 09       	sbc	r25, r11
    1694:	68 3e       	cpi	r22, 0xE8	; 232
    1696:	73 40       	sbci	r23, 0x03	; 3
    1698:	81 05       	cpc	r24, r1
    169a:	91 05       	cpc	r25, r1
    169c:	28 f3       	brcs	.-54     	; 0x1668 <main+0x812>
    169e:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <btnWatcherFlag>
    16a2:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <btnWatcherFlag+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:35

      btnWatcherFlag++;
    16a6:	01 96       	adiw	r24, 0x01	; 1
    16a8:	80 93 6c 3c 	sts	0x3C6C, r24	; 0x803c6c <btnWatcherFlag>
    16ac:	90 93 6d 3c 	sts	0x3C6D, r25	; 0x803c6d <btnWatcherFlag+0x1>
digitalRead():
    16b0:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <vtable for UartClass+0x7f63a7>
    16b4:	82 fb       	bst	r24, 2
    16b6:	88 27       	eor	r24, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:387

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask) {
    16b8:	80 f9       	bld	r24, 0
btnChecker():
    16ba:	80 93 6b 3c 	sts	0x3C6B, r24	; 0x803c6b <SW_OneState>
write():
    16be:	89 e3       	ldi	r24, 0x39	; 57
    16c0:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:36
      SW_OneState = digitalRead(14);
    16c2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
btnChecker():
    16c6:	80 91 6b 3c 	lds	r24, 0x3C6B	; 0x803c6b <SW_OneState>
    16ca:	8c 25       	eor	r24, r12
    16cc:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:39

      Serial.print("SW_STATE: ");
      Serial.print(!SW_OneState);
    16ce:	0e 94 84 02 	call	0x508	; 0x508 <Print::print(int, int) [clone .constprop.20]>
write():
    16d2:	84 e4       	ldi	r24, 0x44	; 68
    16d4:	93 ea       	ldi	r25, 0xA3	; 163
    16d6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
btnChecker():
    16da:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <btnWatcherFlag>
    16de:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <btnWatcherFlag+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:41
      Serial.print(" [");
      Serial.print(10 - btnWatcherFlag);
    16e2:	d7 01       	movw	r26, r14
    16e4:	a8 1b       	sub	r26, r24
    16e6:	b9 0b       	sbc	r27, r25
    16e8:	cd 01       	movw	r24, r26
    16ea:	0e 94 84 02 	call	0x508	; 0x508 <Print::print(int, int) [clone .constprop.20]>
    16ee:	87 e4       	ldi	r24, 0x47	; 71
    16f0:	93 ea       	ldi	r25, 0xA3	; 163
    16f2:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:42
      Serial.println(" sec left]");
    16f6:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <btnWatcherFlag>
    16fa:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <btnWatcherFlag+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:44

      if (btnWatcherFlag >= watchBtnFor) {
    16fe:	0a 97       	sbiw	r24, 0x0a	; 10
    1700:	0c f4       	brge	.+2      	; 0x1704 <main+0x8ae>
    1702:	1f c1       	rjmp	.+574    	; 0x1942 <main+0xaec>
    1704:	10 92 6c 3c 	sts	0x3C6C, r1	; 0x803c6c <btnWatcherFlag>
    1708:	10 92 6d 3c 	sts	0x3C6D, r1	; 0x803c6d <btnWatcherFlag+0x1>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:45
        btnWatcherFlag = 0;
    170c:	c0 92 8b 3c 	sts	0x3C8B, r12	; 0x803c8b <btnConnChecked>
    1710:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:84
    btnChecker();

    btnConnChecked = true;
    1714:	62 e5       	ldi	r22, 0x52	; 82
    1716:	73 ea       	ldi	r23, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:85
    printHeader = false;
    1718:	ce 01       	movw	r24, r28
    171a:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:90
  }


  /* ---- 5. check display routine ---- */
  printStepTitle("CHECKING DISPLAY's CONDITION", HOLD_DELAY);
    171c:	24 d9       	rcall	.-3512   	; 0x966 <String::String(char const*)>
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	35 d9       	rcall	.-3478   	; 0x98e <printStepTitle(String, int) [clone .constprop.2]>
    1724:	ce 01       	movw	r24, r28
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	0e 94 0a 03 	call	0x614	; 0x614 <String::~String()>
printDisplayObservingInstructions():
    172c:	80 91 76 3c 	lds	r24, 0x3C76	; 0x803c76 <showdisplayobservinginstructions>
    1730:	81 11       	cpse	r24, r1
    1732:	35 c0       	rjmp	.+106    	; 0x179e <main+0x948>
    1734:	8f e6       	ldi	r24, 0x6F	; 111
    1736:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:25
bool displayChecked;

bool showdisplayobservinginstructions;

void printDisplayObservingInstructions() {
  if (!showdisplayobservinginstructions) {
    1738:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    173c:	88 eb       	ldi	r24, 0xB8	; 184
    173e:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:26
    Serial.println("Watch if you see the below pattern \nin the segments\n(Starting in 5 sec):");
    1740:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1744:	8d eb       	ldi	r24, 0xBD	; 189
    1746:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:27
    Serial.println("0, 1");
    1748:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    174c:	82 ec       	ldi	r24, 0xC2	; 194
    174e:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:28
    Serial.println("2, 3");
    1750:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1754:	8f ec       	ldi	r24, 0xCF	; 207
    1756:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:29
    Serial.println("delay(4000);");
    1758:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    175c:	84 ed       	ldi	r24, 0xD4	; 212
    175e:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:30
    Serial.println("4, 5");
    1760:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1764:	82 ec       	ldi	r24, 0xC2	; 194
    1766:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:31
    Serial.println("6, 7");
    1768:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    176c:	89 ed       	ldi	r24, 0xD9	; 217
    176e:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:32
    Serial.println("delay(4000);");
    1770:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1774:	8e ed       	ldi	r24, 0xDE	; 222
    1776:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:33
    Serial.println("8, 9");
    1778:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    177c:	82 ec       	ldi	r24, 0xC2	; 194
    177e:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:34
    Serial.println("0, 0");
    1780:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    1784:	83 ee       	ldi	r24, 0xE3	; 227
    1786:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:35
    Serial.println("delay(4000);");
    1788:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    178c:	68 e8       	ldi	r22, 0x88	; 136
    178e:	73 e1       	ldi	r23, 0x13	; 19
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:36
    Serial.println("Finally display will Turn OFF");
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 1b 02 	call	0x436	; 0x436 <delay>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:38

    delay(5000);
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	80 93 76 3c 	sts	0x3C76, r24	; 0x803c76 <showdisplayobservinginstructions>
initSegmentDisplay():
    179e:	80 91 77 3c 	lds	r24, 0x3C77	; 0x803c77 <displayPinsInitialized>
    17a2:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:40

    showdisplayobservinginstructions = true;
    17a4:	13 c0       	rjmp	.+38     	; 0x17cc <main+0x976>
setupDisplay():
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f63a0>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:133



bool displayPinsInitialized;
void initSegmentDisplay() {
  if (!displayPinsInitialized) {
    17ac:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f63a5>
    17b0:	d0 92 01 04 	sts	0x0401, r13	; 0x800401 <vtable for UartClass+0x7f6360>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:47
}


void setupDisplay() {
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
    17b4:	90 ef       	ldi	r25, 0xF0	; 240
    17b6:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <vtable for UartClass+0x7f6380>
turnOffDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:48
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off
    17ba:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f63a5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:51

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
    17be:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f6365>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:53
  //  Anode Pins for LEDS
  PORTB.DIRSET = 0b11110000;
    17c2:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <vtable for UartClass+0x7f6384>
initSegmentDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:58
}


void turnOffDisplay() {
  PORTC.OUTCLR = PIN5_bm; // toggle PC5 OFF
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	80 93 77 3c 	sts	0x3C77, r24	; 0x803c77 <displayPinsInitialized>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:61

  // ---- Clear all leds of a segment ---- //
  PORTA.OUTCLR = 0b11111110;
    17cc:	80 91 8b 3c 	lds	r24, 0x3C8B	; 0x803c8b <btnConnChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:63
  // ---- Deactivatec all segments by setting them HIGH (My segments are in common Anode config) ---- //
  PORTB.OUTSET = 0b11110000;
    17d0:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:137
void initSegmentDisplay() {
  if (!displayPinsInitialized) {
    setupDisplay();
    turnOffDisplay();

    displayPinsInitialized = true;
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <main+0x980>
    17d4:	a3 cb       	rjmp	.-2234   	; 0xf1c <main+0xc6>
    17d6:	80 91 8a 3c 	lds	r24, 0x3C8A	; 0x803c8a <displayChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:94
  printDisplayObservingInstructions();
  initSegmentDisplay();

  if (btnConnChecked && !displayChecked) {
    17da:	81 11       	cpse	r24, r1
    17dc:	9f cb       	rjmp	.-2242   	; 0xf1c <main+0xc6>
showOnDisplay():
    17de:	80 ef       	ldi	r24, 0xF0	; 240
    17e0:	c8 2e       	mov	r12, r24
    17e2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <micros>
    17e6:	60 93 7e 3c 	sts	0x3C7E, r22	; 0x803c7e <currDisplayFPSMicros>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:92
  if (currDisplayFPSMicros - startDisplayFPSMicros >= period) {

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
    17ea:	70 93 7f 3c 	sts	0x3C7F, r23	; 0x803c7f <currDisplayFPSMicros+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:85
};


int c = 0;
void showOnDisplay(uint8_t * digits) {
  currDisplayFPSMicros = micros();
    17ee:	80 93 80 3c 	sts	0x3C80, r24	; 0x803c80 <currDisplayFPSMicros+0x2>
    17f2:	90 93 81 3c 	sts	0x3C81, r25	; 0x803c81 <currDisplayFPSMicros+0x3>
    17f6:	80 90 7a 3c 	lds	r8, 0x3C7A	; 0x803c7a <startDisplayFPSMicros>
    17fa:	90 90 7b 3c 	lds	r9, 0x3C7B	; 0x803c7b <startDisplayFPSMicros+0x1>
    17fe:	a0 90 7c 3c 	lds	r10, 0x3C7C	; 0x803c7c <startDisplayFPSMicros+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:87

  if (currDisplayFPSMicros - startDisplayFPSMicros >= period) {
    1802:	b0 90 7d 3c 	lds	r11, 0x3C7D	; 0x803c7d <startDisplayFPSMicros+0x3>
    1806:	68 19       	sub	r22, r8
    1808:	79 09       	sbc	r23, r9
    180a:	8a 09       	sbc	r24, r10
    180c:	9b 09       	sbc	r25, r11
    180e:	6a 30       	cpi	r22, 0x0A	; 10
    1810:	71 05       	cpc	r23, r1
    1812:	81 05       	cpc	r24, r1
    1814:	91 05       	cpc	r25, r1
    1816:	c8 f1       	brcs	.+114    	; 0x188a <main+0xa34>
    1818:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f6365>
    181c:	c0 92 25 04 	sts	0x0425, r12	; 0x800425 <vtable for UartClass+0x7f6384>
    1820:	f8 94       	cli
    1822:	80 91 78 3c 	lds	r24, 0x3C78	; 0x803c78 <c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:90

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
    1826:	90 91 79 3c 	lds	r25, 0x3C79	; 0x803c79 <c+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:92
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
    182a:	93 01       	movw	r18, r6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:95

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
    182c:	08 2e       	mov	r0, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:96
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <main+0x9dc>
    1830:	22 0f       	add	r18, r18
    1832:	0a 94       	dec	r0
    1834:	ea f7       	brpl	.-6      	; 0x1830 <main+0x9da>
    1836:	20 7f       	andi	r18, 0xF0	; 240
    1838:	20 93 27 04 	sts	0x0427, r18	; 0x800427 <vtable for UartClass+0x7f6386>
    183c:	8e 5f       	subi	r24, 0xFE	; 254
    183e:	93 4c       	sbci	r25, 0xC3	; 195
    1840:	dc 01       	movw	r26, r24
    1842:	ec 91       	ld	r30, X
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:97
    PORTB.OUTTGL = mask;                    // Toggle those bits
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	e2 57       	subi	r30, 0x72	; 114
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:99
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    1848:	ff 45       	sbci	r31, 0x5F	; 95
    184a:	80 81       	ld	r24, Z
    184c:	81 b9       	out	0x01, r24	; 1
    184e:	78 94       	sei
    1850:	80 91 78 3c 	lds	r24, 0x3C78	; 0x803c78 <c>
    1854:	90 91 79 3c 	lds	r25, 0x3C79	; 0x803c79 <c+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:100
    VPORTA.OUT = this_digit;
    1858:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:101
    sei(); // Interrupts back on
    185a:	84 30       	cpi	r24, 0x04	; 4
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:103

    c++;
    185c:	91 05       	cpc	r25, r1
    185e:	0c f0       	brlt	.+2      	; 0x1862 <main+0xa0c>
    1860:	81 c0       	rjmp	.+258    	; 0x1964 <main+0xb0e>
    1862:	80 93 78 3c 	sts	0x3C78, r24	; 0x803c78 <c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:104
    if (c > 3) c = 0;
    1866:	90 93 79 3c 	sts	0x3C79, r25	; 0x803c79 <c+0x1>
    186a:	80 91 7e 3c 	lds	r24, 0x3C7E	; 0x803c7e <currDisplayFPSMicros>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:103
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    186e:	90 91 7f 3c 	lds	r25, 0x3C7F	; 0x803c7f <currDisplayFPSMicros+0x1>
    1872:	a0 91 80 3c 	lds	r26, 0x3C80	; 0x803c80 <currDisplayFPSMicros+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:106
    if (c > 3) c = 0;

    startDisplayFPSMicros = currDisplayFPSMicros;
    1876:	b0 91 81 3c 	lds	r27, 0x3C81	; 0x803c81 <currDisplayFPSMicros+0x3>
    187a:	80 93 7a 3c 	sts	0x3C7A, r24	; 0x803c7a <startDisplayFPSMicros>
    187e:	90 93 7b 3c 	sts	0x3C7B, r25	; 0x803c7b <startDisplayFPSMicros+0x1>
    1882:	a0 93 7c 3c 	sts	0x3C7C, r26	; 0x803c7c <startDisplayFPSMicros+0x2>
    1886:	b0 93 7d 3c 	sts	0x3C7D, r27	; 0x803c7d <startDisplayFPSMicros+0x3>
operateDisplay():
    188a:	e0 90 88 3c 	lds	r14, 0x3C88	; 0x803c88 <displayCycleCounter>
    188e:	f0 90 89 3c 	lds	r15, 0x3C89	; 0x803c89 <displayCycleCounter+0x1>
    1892:	80 91 86 3c 	lds	r24, 0x3C86	; 0x803c86 <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:145

void operateDisplay() {
  while (true) {
    showOnDisplay(digits_);

    if (displayCycleCounter != prevCounter) {
    1896:	90 91 87 3c 	lds	r25, 0x3C87	; 0x803c87 <prevCounter+0x1>
    189a:	e8 16       	cp	r14, r24
    189c:	f9 06       	cpc	r15, r25
    189e:	b9 f0       	breq	.+46     	; 0x18ce <main+0xa78>
    18a0:	c7 01       	movw	r24, r14
    18a2:	02 97       	sbiw	r24, 0x02	; 2
    18a4:	02 97       	sbiw	r24, 0x02	; 2
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <main+0xa54>
    18a8:	64 c0       	rjmp	.+200    	; 0x1972 <main+0xb1c>
    18aa:	e2 e0       	ldi	r30, 0x02	; 2
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:147
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
    18ac:	fc e3       	ldi	r31, 0x3C	; 60
    18ae:	81 91       	ld	r24, Z+
    18b0:	8c 5f       	subi	r24, 0xFC	; 252
    18b2:	df 01       	movw	r26, r30
    18b4:	11 97       	sbiw	r26, 0x01	; 1
    18b6:	8a 30       	cpi	r24, 0x0A	; 10
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <main+0xa66>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:149
        for (int i = 0; i < int(sizeof(digits_)); i++) {
          digits_[i] += 4;
    18ba:	59 c0       	rjmp	.+178    	; 0x196e <main+0xb18>
    18bc:	8c 93       	st	X, r24
    18be:	bc e3       	ldi	r27, 0x3C	; 60
    18c0:	e6 30       	cpi	r30, 0x06	; 6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:150
          if (digits_[i] > 9) digits_[i] = 0;
    18c2:	fb 07       	cpc	r31, r27
    18c4:	a1 f7       	brne	.-24     	; 0x18ae <main+0xa58>
    18c6:	e0 92 86 3c 	sts	0x3C86, r14	; 0x803c86 <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:148
    showOnDisplay(digits_);

    if (displayCycleCounter != prevCounter) {
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < int(sizeof(digits_)); i++) {
    18ca:	f0 92 87 3c 	sts	0x3C87, r15	; 0x803c87 <prevCounter+0x1>
    18ce:	0e 94 44 02 	call	0x488	; 0x488 <millis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:163

        break;
        //--
      }

      prevCounter = displayCycleCounter;
    18d2:	80 90 82 3c 	lds	r8, 0x3C82	; 0x803c82 <startCountMillis>
    18d6:	90 90 83 3c 	lds	r9, 0x3C83	; 0x803c83 <startCountMillis+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:166
    }

    currentCountMillis = millis();
    18da:	a0 90 84 3c 	lds	r10, 0x3C84	; 0x803c84 <startCountMillis+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:167
    if (currentCountMillis - startCountMillis >= countdownPeriod) {
    18de:	b0 90 85 3c 	lds	r11, 0x3C85	; 0x803c85 <startCountMillis+0x3>
    18e2:	9b 01       	movw	r18, r22
    18e4:	ac 01       	movw	r20, r24
    18e6:	28 19       	sub	r18, r8
    18e8:	39 09       	sbc	r19, r9
    18ea:	4a 09       	sbc	r20, r10
    18ec:	5b 09       	sbc	r21, r11
    18ee:	49 01       	movw	r8, r18
    18f0:	5a 01       	movw	r10, r20
    18f2:	30 ea       	ldi	r19, 0xA0	; 160
    18f4:	83 16       	cp	r8, r19
    18f6:	3f e0       	ldi	r19, 0x0F	; 15
    18f8:	93 06       	cpc	r9, r19
    18fa:	a1 04       	cpc	r10, r1
    18fc:	b1 04       	cpc	r11, r1
    18fe:	08 f4       	brcc	.+2      	; 0x1902 <main+0xaac>
    1900:	70 cf       	rjmp	.-288    	; 0x17e2 <main+0x98c>
    1902:	4f ef       	ldi	r20, 0xFF	; 255
    1904:	e4 1a       	sub	r14, r20
    1906:	f4 0a       	sbc	r15, r20
    1908:	e0 92 88 3c 	sts	0x3C88, r14	; 0x803c88 <displayCycleCounter>
    190c:	f0 92 89 3c 	sts	0x3C89, r15	; 0x803c89 <displayCycleCounter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:168
      displayCycleCounter++;
    1910:	60 93 82 3c 	sts	0x3C82, r22	; 0x803c82 <startCountMillis>
    1914:	70 93 83 3c 	sts	0x3C83, r23	; 0x803c83 <startCountMillis+0x1>
    1918:	80 93 84 3c 	sts	0x3C84, r24	; 0x803c84 <startCountMillis+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:169
      startCountMillis = currentCountMillis;
    191c:	90 93 85 3c 	sts	0x3C85, r25	; 0x803c85 <startCountMillis+0x3>
    1920:	60 cf       	rjmp	.-320    	; 0x17e2 <main+0x98c>
reportRTCAvailability():
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	80 93 69 3c 	sts	0x3C69, r24	; 0x803c69 <rtcAvailable>
    1928:	85 eb       	ldi	r24, 0xB5	; 181
    192a:	92 ea       	ldi	r25, 0xA2	; 162
    192c:	99 cd       	rjmp	.-1230   	; 0x1460 <main+0x60a>
rtcReadWriteChecker():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:34

  if (!rtc.begin()) {
    rtcAvailable = false;
    Serial.println("RTC_ADDR_FOUND:0");
  } else {
    rtcAvailable = true;
    192e:	10 92 68 3c 	sts	0x3C68, r1	; 0x803c68 <rtcReadable>
    1932:	8e ef       	ldi	r24, 0xFE	; 254
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:35
    Serial.println("RTC_ADDR_FOUND:1");
    1934:	92 ea       	ldi	r25, 0xA2	; 162
    1936:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:52
      delay(100);
      // Send string date & time
      Serial.println(String(rtc.stringTime()));
      Serial.println(String(rtc.stringDate()));
    } else {
      rtcReadable = false;
    193a:	63 ce       	rjmp	.-826    	; 0x1602 <main+0x7ac>
    193c:	8e ef       	ldi	r24, 0xFE	; 254
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:53
      Serial.println("RTC_READABLE:0");
    193e:	92 ea       	ldi	r25, 0xA2	; 162
    1940:	67 ce       	rjmp	.-818    	; 0x1610 <main+0x7ba>
btnChecker():
    1942:	80 91 72 3c 	lds	r24, 0x3C72	; 0x803c72 <btnWatchTimerCurr>
    1946:	90 91 73 3c 	lds	r25, 0x3C73	; 0x803c73 <btnWatchTimerCurr+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:60
    break;
  }
  if (rtcReadable) {
    Serial.println("RTC_READABLE:1");
  } else {
    Serial.println("RTC_READABLE:0");
    194a:	a0 91 74 3c 	lds	r26, 0x3C74	; 0x803c74 <btnWatchTimerCurr+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:51
        //        btnConnChecked = true;
        //        printHeader = false;
        break;
      }

      btnWatchTimerStart = btnWatchTimerCurr;
    194e:	b0 91 75 3c 	lds	r27, 0x3C75	; 0x803c75 <btnWatchTimerCurr+0x3>
    1952:	80 93 6e 3c 	sts	0x3C6E, r24	; 0x803c6e <btnWatchTimerStart>
    1956:	90 93 6f 3c 	sts	0x3C6F, r25	; 0x803c6f <btnWatchTimerStart+0x1>
    195a:	a0 93 70 3c 	sts	0x3C70, r26	; 0x803c70 <btnWatchTimerStart+0x2>
    195e:	b0 93 71 3c 	sts	0x3C71, r27	; 0x803c71 <btnWatchTimerStart+0x3>
    1962:	82 ce       	rjmp	.-764    	; 0x1668 <main+0x812>
showOnDisplay():
    1964:	10 92 78 3c 	sts	0x3C78, r1	; 0x803c78 <c>
    1968:	10 92 79 3c 	sts	0x3C79, r1	; 0x803c79 <c+0x1>
    196c:	7e cf       	rjmp	.-260    	; 0x186a <main+0xa14>
operateDisplay():
    196e:	1c 92       	st	X, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:104
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    if (c > 3) c = 0;
    1970:	a6 cf       	rjmp	.-180    	; 0x18be <main+0xa68>
    1972:	e4 e0       	ldi	r30, 0x04	; 4
    1974:	ee 16       	cp	r14, r30
    1976:	f1 04       	cpc	r15, r1
    1978:	0c f4       	brge	.+2      	; 0x197c <main+0xb26>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:150
    if (displayCycleCounter != prevCounter) {
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < int(sizeof(digits_)); i++) {
          digits_[i] += 4;
          if (digits_[i] > 9) digits_[i] = 0;
    197a:	a5 cf       	rjmp	.-182    	; 0x18c6 <main+0xa70>
turnOffDisplay():
    197c:	80 e2       	ldi	r24, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:154
        }
      }

      if (displayCycleCounter > 3) {
    197e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f63a5>
    1982:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f6365>
    1986:	80 ef       	ldi	r24, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:58
  PORTB.DIRSET = 0b11110000;
}


void turnOffDisplay() {
  PORTC.OUTCLR = PIN5_bm; // toggle PC5 OFF
    1988:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f6384>
operateDisplay():
    198c:	10 92 88 3c 	sts	0x3C88, r1	; 0x803c88 <displayCycleCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:61

  // ---- Clear all leds of a segment ---- //
  PORTA.OUTCLR = 0b11111110;
    1990:	10 92 89 3c 	sts	0x3C89, r1	; 0x803c89 <displayCycleCounter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:63
  // ---- Deactivatec all segments by setting them HIGH (My segments are in common Anode config) ---- //
  PORTB.OUTSET = 0b11110000;
    1994:	10 92 86 3c 	sts	0x3C86, r1	; 0x803c86 <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:156
        }
      }

      if (displayCycleCounter > 3) {
        turnOffDisplay();
        displayCycleCounter = 0;
    1998:	10 92 87 3c 	sts	0x3C87, r1	; 0x803c87 <prevCounter+0x1>
loop():
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	94 ea       	ldi	r25, 0xA4	; 164
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:157
        prevCounter = 0;
    19a0:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	91 ea       	ldi	r25, 0xA1	; 161
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:97
    operateDisplay();

    Serial.println("\nDISPLAY WORKING? (write below)");
    19a8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <Print::println(char const*) [clone .constprop.32]>
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	80 93 8a 3c 	sts	0x3C8A, r24	; 0x803c8a <displayChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:98
    Serial.println("!");
    19b2:	b4 ca       	rjmp	.-2712   	; 0xf1c <main+0xc6>

000019b4 <__prologue_saves__>:
__prologue_saves__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    19b4:	2f 92       	push	r2
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    19b6:	3f 92       	push	r3
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    19b8:	4f 92       	push	r4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    19ba:	5f 92       	push	r5
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    19bc:	6f 92       	push	r6
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    19be:	7f 92       	push	r7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    19c0:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    19c2:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    19c4:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    19c6:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    19c8:	cf 92       	push	r12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    19ca:	df 92       	push	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    19cc:	ef 92       	push	r14
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    19ce:	ff 92       	push	r15
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    19d0:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    19d2:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    19d4:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    19d6:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    19d8:	cd b7       	in	r28, 0x3d	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    19da:	de b7       	in	r29, 0x3e	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    19dc:	ca 1b       	sub	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    19de:	db 0b       	sbc	r29, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    19e0:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    19e2:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    19e4:	09 94       	ijmp

000019e6 <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    19e6:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    19e8:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    19ea:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    19ec:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    19ee:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    19f0:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    19f2:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    19f4:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    19f6:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    19f8:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    19fa:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    19fc:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    19fe:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1a00:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1a02:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1a04:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1a06:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    1a08:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    1a0a:	ce 0f       	add	r28, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    1a0c:	d1 1d       	adc	r29, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    1a0e:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    1a10:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    1a12:	ed 01       	movw	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1a14:	08 95       	ret

00001a16 <strchr_P>:
strchr_P():
    1a16:	fc 01       	movw	r30, r24
    1a18:	05 90       	lpm	r0, Z+
    1a1a:	06 16       	cp	r0, r22
    1a1c:	21 f0       	breq	.+8      	; 0x1a26 <strchr_P+0x10>
    1a1e:	00 20       	and	r0, r0
    1a20:	d9 f7       	brne	.-10     	; 0x1a18 <strchr_P+0x2>
    1a22:	c0 01       	movw	r24, r0
    1a24:	08 95       	ret
    1a26:	31 97       	sbiw	r30, 0x01	; 1
    1a28:	cf 01       	movw	r24, r30
    1a2a:	08 95       	ret

00001a2c <__itoa_ncheck>:
__itoa_ncheck():
    1a2c:	bb 27       	eor	r27, r27
    1a2e:	4a 30       	cpi	r20, 0x0A	; 10
    1a30:	31 f4       	brne	.+12     	; 0x1a3e <__itoa_ncheck+0x12>
    1a32:	99 23       	and	r25, r25
    1a34:	22 f4       	brpl	.+8      	; 0x1a3e <__itoa_ncheck+0x12>
    1a36:	bd e2       	ldi	r27, 0x2D	; 45
    1a38:	90 95       	com	r25
    1a3a:	81 95       	neg	r24
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <__utoa_common>

00001a40 <__utoa_ncheck>:
__utoa_ncheck():
    1a40:	bb 27       	eor	r27, r27

00001a42 <__utoa_common>:
    1a42:	fb 01       	movw	r30, r22
    1a44:	55 27       	eor	r21, r21
    1a46:	aa 27       	eor	r26, r26
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	aa 1f       	adc	r26, r26
    1a4e:	a4 17       	cp	r26, r20
    1a50:	10 f0       	brcs	.+4      	; 0x1a56 <__utoa_common+0x14>
    1a52:	a4 1b       	sub	r26, r20
    1a54:	83 95       	inc	r24
    1a56:	50 51       	subi	r21, 0x10	; 16
    1a58:	b9 f7       	brne	.-18     	; 0x1a48 <__utoa_common+0x6>
    1a5a:	a0 5d       	subi	r26, 0xD0	; 208
    1a5c:	aa 33       	cpi	r26, 0x3A	; 58
    1a5e:	08 f0       	brcs	.+2      	; 0x1a62 <__utoa_common+0x20>
    1a60:	a9 5d       	subi	r26, 0xD9	; 217
    1a62:	a1 93       	st	Z+, r26
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	79 f7       	brne	.-34     	; 0x1a46 <__utoa_common+0x4>
    1a68:	b1 11       	cpse	r27, r1
    1a6a:	b1 93       	st	Z+, r27
    1a6c:	11 92       	st	Z+, r1
    1a6e:	cb 01       	movw	r24, r22
    1a70:	8e c0       	rjmp	.+284    	; 0x1b8e <strrev>

00001a72 <fputc>:
fputc():
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	18 2f       	mov	r17, r24
    1a7c:	09 2f       	mov	r16, r25
    1a7e:	eb 01       	movw	r28, r22
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	81 fd       	sbrc	r24, 1
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <fputc+0x26>
    1a86:	1f ef       	ldi	r17, 0xFF	; 255
    1a88:	0f ef       	ldi	r16, 0xFF	; 255
    1a8a:	81 2f       	mov	r24, r17
    1a8c:	90 2f       	mov	r25, r16
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	08 95       	ret
    1a98:	82 ff       	sbrs	r24, 2
    1a9a:	14 c0       	rjmp	.+40     	; 0x1ac4 <fputc+0x52>
    1a9c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a9e:	3f 81       	ldd	r19, Y+7	; 0x07
    1aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa4:	28 17       	cp	r18, r24
    1aa6:	39 07       	cpc	r19, r25
    1aa8:	3c f4       	brge	.+14     	; 0x1ab8 <fputc+0x46>
    1aaa:	e8 81       	ld	r30, Y
    1aac:	f9 81       	ldd	r31, Y+1	; 0x01
    1aae:	cf 01       	movw	r24, r30
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	88 83       	st	Y, r24
    1ab4:	99 83       	std	Y+1, r25	; 0x01
    1ab6:	10 83       	st	Z, r17
    1ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aba:	9f 81       	ldd	r25, Y+7	; 0x07
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	8e 83       	std	Y+6, r24	; 0x06
    1ac0:	9f 83       	std	Y+7, r25	; 0x07
    1ac2:	e3 cf       	rjmp	.-58     	; 0x1a8a <fputc+0x18>
    1ac4:	e8 85       	ldd	r30, Y+8	; 0x08
    1ac6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ac8:	81 2f       	mov	r24, r17
    1aca:	09 95       	icall
    1acc:	89 2b       	or	r24, r25
    1ace:	a1 f3       	breq	.-24     	; 0x1ab8 <fputc+0x46>
    1ad0:	da cf       	rjmp	.-76     	; 0x1a86 <fputc+0x14>

00001ad2 <__ultoa_invert>:
__ultoa_invert():
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	aa 27       	eor	r26, r26
    1ad6:	28 30       	cpi	r18, 0x08	; 8
    1ad8:	51 f1       	breq	.+84     	; 0x1b2e <__ultoa_invert+0x5c>
    1ada:	20 31       	cpi	r18, 0x10	; 16
    1adc:	81 f1       	breq	.+96     	; 0x1b3e <__ultoa_invert+0x6c>
    1ade:	e8 94       	clt
    1ae0:	6f 93       	push	r22
    1ae2:	6e 7f       	andi	r22, 0xFE	; 254
    1ae4:	6e 5f       	subi	r22, 0xFE	; 254
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aea:	9f 4f       	sbci	r25, 0xFF	; 255
    1aec:	af 4f       	sbci	r26, 0xFF	; 255
    1aee:	b1 e0       	ldi	r27, 0x01	; 1
    1af0:	3e d0       	rcall	.+124    	; 0x1b6e <__ultoa_invert+0x9c>
    1af2:	b4 e0       	ldi	r27, 0x04	; 4
    1af4:	3c d0       	rcall	.+120    	; 0x1b6e <__ultoa_invert+0x9c>
    1af6:	67 0f       	add	r22, r23
    1af8:	78 1f       	adc	r23, r24
    1afa:	89 1f       	adc	r24, r25
    1afc:	9a 1f       	adc	r25, r26
    1afe:	a1 1d       	adc	r26, r1
    1b00:	68 0f       	add	r22, r24
    1b02:	79 1f       	adc	r23, r25
    1b04:	8a 1f       	adc	r24, r26
    1b06:	91 1d       	adc	r25, r1
    1b08:	a1 1d       	adc	r26, r1
    1b0a:	6a 0f       	add	r22, r26
    1b0c:	71 1d       	adc	r23, r1
    1b0e:	81 1d       	adc	r24, r1
    1b10:	91 1d       	adc	r25, r1
    1b12:	a1 1d       	adc	r26, r1
    1b14:	20 d0       	rcall	.+64     	; 0x1b56 <__ultoa_invert+0x84>
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <__ultoa_invert+0x48>
    1b18:	68 94       	set
    1b1a:	3f 91       	pop	r19
    1b1c:	2a e0       	ldi	r18, 0x0A	; 10
    1b1e:	26 9f       	mul	r18, r22
    1b20:	11 24       	eor	r1, r1
    1b22:	30 19       	sub	r19, r0
    1b24:	30 5d       	subi	r19, 0xD0	; 208
    1b26:	31 93       	st	Z+, r19
    1b28:	de f6       	brtc	.-74     	; 0x1ae0 <__ultoa_invert+0xe>
    1b2a:	cf 01       	movw	r24, r30
    1b2c:	08 95       	ret
    1b2e:	46 2f       	mov	r20, r22
    1b30:	47 70       	andi	r20, 0x07	; 7
    1b32:	40 5d       	subi	r20, 0xD0	; 208
    1b34:	41 93       	st	Z+, r20
    1b36:	b3 e0       	ldi	r27, 0x03	; 3
    1b38:	0f d0       	rcall	.+30     	; 0x1b58 <__ultoa_invert+0x86>
    1b3a:	c9 f7       	brne	.-14     	; 0x1b2e <__ultoa_invert+0x5c>
    1b3c:	f6 cf       	rjmp	.-20     	; 0x1b2a <__ultoa_invert+0x58>
    1b3e:	46 2f       	mov	r20, r22
    1b40:	4f 70       	andi	r20, 0x0F	; 15
    1b42:	40 5d       	subi	r20, 0xD0	; 208
    1b44:	4a 33       	cpi	r20, 0x3A	; 58
    1b46:	18 f0       	brcs	.+6      	; 0x1b4e <__ultoa_invert+0x7c>
    1b48:	49 5d       	subi	r20, 0xD9	; 217
    1b4a:	31 fd       	sbrc	r19, 1
    1b4c:	40 52       	subi	r20, 0x20	; 32
    1b4e:	41 93       	st	Z+, r20
    1b50:	02 d0       	rcall	.+4      	; 0x1b56 <__ultoa_invert+0x84>
    1b52:	a9 f7       	brne	.-22     	; 0x1b3e <__ultoa_invert+0x6c>
    1b54:	ea cf       	rjmp	.-44     	; 0x1b2a <__ultoa_invert+0x58>
    1b56:	b4 e0       	ldi	r27, 0x04	; 4
    1b58:	a6 95       	lsr	r26
    1b5a:	97 95       	ror	r25
    1b5c:	87 95       	ror	r24
    1b5e:	77 95       	ror	r23
    1b60:	67 95       	ror	r22
    1b62:	ba 95       	dec	r27
    1b64:	c9 f7       	brne	.-14     	; 0x1b58 <__ultoa_invert+0x86>
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	61 05       	cpc	r22, r1
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	08 95       	ret
    1b6e:	9b 01       	movw	r18, r22
    1b70:	ac 01       	movw	r20, r24
    1b72:	0a 2e       	mov	r0, r26
    1b74:	06 94       	lsr	r0
    1b76:	57 95       	ror	r21
    1b78:	47 95       	ror	r20
    1b7a:	37 95       	ror	r19
    1b7c:	27 95       	ror	r18
    1b7e:	ba 95       	dec	r27
    1b80:	c9 f7       	brne	.-14     	; 0x1b74 <__ultoa_invert+0xa2>
    1b82:	62 0f       	add	r22, r18
    1b84:	73 1f       	adc	r23, r19
    1b86:	84 1f       	adc	r24, r20
    1b88:	95 1f       	adc	r25, r21
    1b8a:	a0 1d       	adc	r26, r0
    1b8c:	08 95       	ret

00001b8e <strrev>:
strrev():
    1b8e:	dc 01       	movw	r26, r24
    1b90:	fc 01       	movw	r30, r24
    1b92:	67 2f       	mov	r22, r23
    1b94:	71 91       	ld	r23, Z+
    1b96:	77 23       	and	r23, r23
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <strrev+0x4>
    1b9a:	32 97       	sbiw	r30, 0x02	; 2
    1b9c:	04 c0       	rjmp	.+8      	; 0x1ba6 <strrev+0x18>
    1b9e:	7c 91       	ld	r23, X
    1ba0:	6d 93       	st	X+, r22
    1ba2:	70 83       	st	Z, r23
    1ba4:	62 91       	ld	r22, -Z
    1ba6:	ae 17       	cp	r26, r30
    1ba8:	bf 07       	cpc	r27, r31
    1baa:	c8 f3       	brcs	.-14     	; 0x1b9e <strrev+0x10>
    1bac:	08 95       	ret

00001bae <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1bae:	09 d0       	rcall	.+18     	; 0x1bc2 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1bb0:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1bb2:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1bb4:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1bb6:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1bb8:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1bba:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1bbc:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1bbe:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1bc0:	08 95       	ret

00001bc2 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1bc2:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1bc4:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1bc6:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1bc8:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1bca:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1bcc:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1bce:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1bd0:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1bd2:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1bd4:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1bd6:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1bd8:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1bda:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1bdc:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1bde:	08 95       	ret

00001be0 <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1be0:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1be2:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1be4:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1be6:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1be8:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1bea:	0d c0       	rjmp	.+26     	; 0x1c06 <__udivmodsi4_ep>

00001bec <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1bec:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1bee:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1bf0:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1bf2:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1bf4:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1bf6:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1bf8:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1bfa:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1bfc:	20 f0       	brcs	.+8      	; 0x1c06 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1bfe:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1c00:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1c02:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1c04:	f5 0b       	sbc	r31, r21

00001c06 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1c06:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1c08:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1c0a:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1c0c:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1c0e:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1c10:	69 f7       	brne	.-38     	; 0x1bec <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1c12:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1c14:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1c16:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1c18:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1c1a:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1c1c:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1c1e:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1c20:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1c22:	08 95       	ret

00001c24 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1c24:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1c26:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1c28:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1c2a:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1c2c:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1c2e:	09 94       	ijmp

00001c30 <malloc>:
malloc():
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	82 30       	cpi	r24, 0x02	; 2
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	10 f4       	brcc	.+4      	; 0x1c42 <malloc+0x12>
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	e0 91 19 3d 	lds	r30, 0x3D19	; 0x803d19 <__flp>
    1c46:	f0 91 1a 3d 	lds	r31, 0x3D1A	; 0x803d1a <__flp+0x1>
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	a0 e0       	ldi	r26, 0x00	; 0
    1c52:	30 97       	sbiw	r30, 0x00	; 0
    1c54:	99 f4       	brne	.+38     	; 0x1c7c <malloc+0x4c>
    1c56:	21 15       	cp	r18, r1
    1c58:	31 05       	cpc	r19, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <malloc+0x2e>
    1c5c:	4a c0       	rjmp	.+148    	; 0x1cf2 <malloc+0xc2>
    1c5e:	28 1b       	sub	r18, r24
    1c60:	39 0b       	sbc	r19, r25
    1c62:	24 30       	cpi	r18, 0x04	; 4
    1c64:	31 05       	cpc	r19, r1
    1c66:	d8 f5       	brcc	.+118    	; 0x1cde <malloc+0xae>
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6c:	61 15       	cp	r22, r1
    1c6e:	71 05       	cpc	r23, r1
    1c70:	89 f1       	breq	.+98     	; 0x1cd4 <malloc+0xa4>
    1c72:	fb 01       	movw	r30, r22
    1c74:	82 83       	std	Z+2, r24	; 0x02
    1c76:	93 83       	std	Z+3, r25	; 0x03
    1c78:	fe 01       	movw	r30, r28
    1c7a:	11 c0       	rjmp	.+34     	; 0x1c9e <malloc+0x6e>
    1c7c:	40 81       	ld	r20, Z
    1c7e:	51 81       	ldd	r21, Z+1	; 0x01
    1c80:	02 81       	ldd	r16, Z+2	; 0x02
    1c82:	13 81       	ldd	r17, Z+3	; 0x03
    1c84:	48 17       	cp	r20, r24
    1c86:	59 07       	cpc	r21, r25
    1c88:	e0 f0       	brcs	.+56     	; 0x1cc2 <malloc+0x92>
    1c8a:	48 17       	cp	r20, r24
    1c8c:	59 07       	cpc	r21, r25
    1c8e:	99 f4       	brne	.+38     	; 0x1cb6 <malloc+0x86>
    1c90:	10 97       	sbiw	r26, 0x00	; 0
    1c92:	61 f0       	breq	.+24     	; 0x1cac <malloc+0x7c>
    1c94:	12 96       	adiw	r26, 0x02	; 2
    1c96:	0c 93       	st	X, r16
    1c98:	12 97       	sbiw	r26, 0x02	; 2
    1c9a:	13 96       	adiw	r26, 0x03	; 3
    1c9c:	1c 93       	st	X, r17
    1c9e:	32 96       	adiw	r30, 0x02	; 2
    1ca0:	cf 01       	movw	r24, r30
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	08 95       	ret
    1cac:	00 93 19 3d 	sts	0x3D19, r16	; 0x803d19 <__flp>
    1cb0:	10 93 1a 3d 	sts	0x3D1A, r17	; 0x803d1a <__flp+0x1>
    1cb4:	f4 cf       	rjmp	.-24     	; 0x1c9e <malloc+0x6e>
    1cb6:	21 15       	cp	r18, r1
    1cb8:	31 05       	cpc	r19, r1
    1cba:	51 f0       	breq	.+20     	; 0x1cd0 <malloc+0xa0>
    1cbc:	42 17       	cp	r20, r18
    1cbe:	53 07       	cpc	r21, r19
    1cc0:	38 f0       	brcs	.+14     	; 0x1cd0 <malloc+0xa0>
    1cc2:	a9 01       	movw	r20, r18
    1cc4:	db 01       	movw	r26, r22
    1cc6:	9a 01       	movw	r18, r20
    1cc8:	bd 01       	movw	r22, r26
    1cca:	df 01       	movw	r26, r30
    1ccc:	f8 01       	movw	r30, r16
    1cce:	c1 cf       	rjmp	.-126    	; 0x1c52 <malloc+0x22>
    1cd0:	ef 01       	movw	r28, r30
    1cd2:	f9 cf       	rjmp	.-14     	; 0x1cc6 <malloc+0x96>
    1cd4:	80 93 19 3d 	sts	0x3D19, r24	; 0x803d19 <__flp>
    1cd8:	90 93 1a 3d 	sts	0x3D1A, r25	; 0x803d1a <__flp+0x1>
    1cdc:	cd cf       	rjmp	.-102    	; 0x1c78 <malloc+0x48>
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e2 0f       	add	r30, r18
    1ce2:	f3 1f       	adc	r31, r19
    1ce4:	81 93       	st	Z+, r24
    1ce6:	91 93       	st	Z+, r25
    1ce8:	22 50       	subi	r18, 0x02	; 2
    1cea:	31 09       	sbc	r19, r1
    1cec:	28 83       	st	Y, r18
    1cee:	39 83       	std	Y+1, r19	; 0x01
    1cf0:	d7 cf       	rjmp	.-82     	; 0x1ca0 <malloc+0x70>
    1cf2:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1cf6:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1cfa:	23 2b       	or	r18, r19
    1cfc:	41 f4       	brne	.+16     	; 0x1d0e <malloc+0xde>
    1cfe:	20 91 08 3c 	lds	r18, 0x3C08	; 0x803c08 <__malloc_heap_start>
    1d02:	30 91 09 3c 	lds	r19, 0x3C09	; 0x803c09 <__malloc_heap_start+0x1>
    1d06:	20 93 17 3d 	sts	0x3D17, r18	; 0x803d17 <__brkval>
    1d0a:	30 93 18 3d 	sts	0x3D18, r19	; 0x803d18 <__brkval+0x1>
    1d0e:	20 91 06 3c 	lds	r18, 0x3C06	; 0x803c06 <__malloc_heap_end>
    1d12:	30 91 07 3c 	lds	r19, 0x3C07	; 0x803c07 <__malloc_heap_end+0x1>
    1d16:	21 15       	cp	r18, r1
    1d18:	31 05       	cpc	r19, r1
    1d1a:	41 f4       	brne	.+16     	; 0x1d2c <malloc+0xfc>
    1d1c:	2d b7       	in	r18, 0x3d	; 61
    1d1e:	3e b7       	in	r19, 0x3e	; 62
    1d20:	40 91 0a 3c 	lds	r20, 0x3C0A	; 0x803c0a <__malloc_margin>
    1d24:	50 91 0b 3c 	lds	r21, 0x3C0B	; 0x803c0b <__malloc_margin+0x1>
    1d28:	24 1b       	sub	r18, r20
    1d2a:	35 0b       	sbc	r19, r21
    1d2c:	e0 91 17 3d 	lds	r30, 0x3D17	; 0x803d17 <__brkval>
    1d30:	f0 91 18 3d 	lds	r31, 0x3D18	; 0x803d18 <__brkval+0x1>
    1d34:	e2 17       	cp	r30, r18
    1d36:	f3 07       	cpc	r31, r19
    1d38:	a0 f4       	brcc	.+40     	; 0x1d62 <malloc+0x132>
    1d3a:	2e 1b       	sub	r18, r30
    1d3c:	3f 0b       	sbc	r19, r31
    1d3e:	28 17       	cp	r18, r24
    1d40:	39 07       	cpc	r19, r25
    1d42:	78 f0       	brcs	.+30     	; 0x1d62 <malloc+0x132>
    1d44:	ac 01       	movw	r20, r24
    1d46:	4e 5f       	subi	r20, 0xFE	; 254
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	24 17       	cp	r18, r20
    1d4c:	35 07       	cpc	r19, r21
    1d4e:	48 f0       	brcs	.+18     	; 0x1d62 <malloc+0x132>
    1d50:	4e 0f       	add	r20, r30
    1d52:	5f 1f       	adc	r21, r31
    1d54:	40 93 17 3d 	sts	0x3D17, r20	; 0x803d17 <__brkval>
    1d58:	50 93 18 3d 	sts	0x3D18, r21	; 0x803d18 <__brkval+0x1>
    1d5c:	81 93       	st	Z+, r24
    1d5e:	91 93       	st	Z+, r25
    1d60:	9f cf       	rjmp	.-194    	; 0x1ca0 <malloc+0x70>
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	e0 e0       	ldi	r30, 0x00	; 0
    1d66:	9c cf       	rjmp	.-200    	; 0x1ca0 <malloc+0x70>

00001d68 <free>:
free():
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	e9 f0       	breq	.+58     	; 0x1daa <free+0x42>
    1d70:	fc 01       	movw	r30, r24
    1d72:	32 97       	sbiw	r30, 0x02	; 2
    1d74:	12 82       	std	Z+2, r1	; 0x02
    1d76:	13 82       	std	Z+3, r1	; 0x03
    1d78:	a0 91 19 3d 	lds	r26, 0x3D19	; 0x803d19 <__flp>
    1d7c:	b0 91 1a 3d 	lds	r27, 0x3D1A	; 0x803d1a <__flp+0x1>
    1d80:	ed 01       	movw	r28, r26
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	10 97       	sbiw	r26, 0x00	; 0
    1d88:	a1 f4       	brne	.+40     	; 0x1db2 <free+0x4a>
    1d8a:	20 81       	ld	r18, Z
    1d8c:	31 81       	ldd	r19, Z+1	; 0x01
    1d8e:	82 0f       	add	r24, r18
    1d90:	93 1f       	adc	r25, r19
    1d92:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1d96:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1d9a:	28 17       	cp	r18, r24
    1d9c:	39 07       	cpc	r19, r25
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <free+0x3a>
    1da0:	61 c0       	rjmp	.+194    	; 0x1e64 <free+0xfc>
    1da2:	e0 93 17 3d 	sts	0x3D17, r30	; 0x803d17 <__brkval>
    1da6:	f0 93 18 3d 	sts	0x3D18, r31	; 0x803d18 <__brkval+0x1>
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret
    1db0:	ea 01       	movw	r28, r20
    1db2:	ce 17       	cp	r28, r30
    1db4:	df 07       	cpc	r29, r31
    1db6:	e8 f5       	brcc	.+122    	; 0x1e32 <free+0xca>
    1db8:	4a 81       	ldd	r20, Y+2	; 0x02
    1dba:	5b 81       	ldd	r21, Y+3	; 0x03
    1dbc:	9e 01       	movw	r18, r28
    1dbe:	41 15       	cp	r20, r1
    1dc0:	51 05       	cpc	r21, r1
    1dc2:	b1 f7       	brne	.-20     	; 0x1db0 <free+0x48>
    1dc4:	e9 01       	movw	r28, r18
    1dc6:	ea 83       	std	Y+2, r30	; 0x02
    1dc8:	fb 83       	std	Y+3, r31	; 0x03
    1dca:	49 91       	ld	r20, Y+
    1dcc:	59 91       	ld	r21, Y+
    1dce:	c4 0f       	add	r28, r20
    1dd0:	d5 1f       	adc	r29, r21
    1dd2:	ec 17       	cp	r30, r28
    1dd4:	fd 07       	cpc	r31, r29
    1dd6:	61 f4       	brne	.+24     	; 0x1df0 <free+0x88>
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	02 96       	adiw	r24, 0x02	; 2
    1dde:	84 0f       	add	r24, r20
    1de0:	95 1f       	adc	r25, r21
    1de2:	e9 01       	movw	r28, r18
    1de4:	88 83       	st	Y, r24
    1de6:	99 83       	std	Y+1, r25	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	8a 83       	std	Y+2, r24	; 0x02
    1dee:	9b 83       	std	Y+3, r25	; 0x03
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	e0 e0       	ldi	r30, 0x00	; 0
    1df4:	12 96       	adiw	r26, 0x02	; 2
    1df6:	8d 91       	ld	r24, X+
    1df8:	9c 91       	ld	r25, X
    1dfa:	13 97       	sbiw	r26, 0x03	; 3
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	b9 f5       	brne	.+110    	; 0x1e6e <free+0x106>
    1e00:	2d 91       	ld	r18, X+
    1e02:	3c 91       	ld	r19, X
    1e04:	11 97       	sbiw	r26, 0x01	; 1
    1e06:	cd 01       	movw	r24, r26
    1e08:	02 96       	adiw	r24, 0x02	; 2
    1e0a:	82 0f       	add	r24, r18
    1e0c:	93 1f       	adc	r25, r19
    1e0e:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1e12:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1e16:	28 17       	cp	r18, r24
    1e18:	39 07       	cpc	r19, r25
    1e1a:	39 f6       	brne	.-114    	; 0x1daa <free+0x42>
    1e1c:	30 97       	sbiw	r30, 0x00	; 0
    1e1e:	51 f5       	brne	.+84     	; 0x1e74 <free+0x10c>
    1e20:	10 92 19 3d 	sts	0x3D19, r1	; 0x803d19 <__flp>
    1e24:	10 92 1a 3d 	sts	0x3D1A, r1	; 0x803d1a <__flp+0x1>
    1e28:	a0 93 17 3d 	sts	0x3D17, r26	; 0x803d17 <__brkval>
    1e2c:	b0 93 18 3d 	sts	0x3D18, r27	; 0x803d18 <__brkval+0x1>
    1e30:	bc cf       	rjmp	.-136    	; 0x1daa <free+0x42>
    1e32:	c2 83       	std	Z+2, r28	; 0x02
    1e34:	d3 83       	std	Z+3, r29	; 0x03
    1e36:	40 81       	ld	r20, Z
    1e38:	51 81       	ldd	r21, Z+1	; 0x01
    1e3a:	84 0f       	add	r24, r20
    1e3c:	95 1f       	adc	r25, r21
    1e3e:	c8 17       	cp	r28, r24
    1e40:	d9 07       	cpc	r29, r25
    1e42:	61 f4       	brne	.+24     	; 0x1e5c <free+0xf4>
    1e44:	4e 5f       	subi	r20, 0xFE	; 254
    1e46:	5f 4f       	sbci	r21, 0xFF	; 255
    1e48:	88 81       	ld	r24, Y
    1e4a:	99 81       	ldd	r25, Y+1	; 0x01
    1e4c:	48 0f       	add	r20, r24
    1e4e:	59 1f       	adc	r21, r25
    1e50:	40 83       	st	Z, r20
    1e52:	51 83       	std	Z+1, r21	; 0x01
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	9b 81       	ldd	r25, Y+3	; 0x03
    1e58:	82 83       	std	Z+2, r24	; 0x02
    1e5a:	93 83       	std	Z+3, r25	; 0x03
    1e5c:	21 15       	cp	r18, r1
    1e5e:	31 05       	cpc	r19, r1
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <free+0xfc>
    1e62:	b0 cf       	rjmp	.-160    	; 0x1dc4 <free+0x5c>
    1e64:	e0 93 19 3d 	sts	0x3D19, r30	; 0x803d19 <__flp>
    1e68:	f0 93 1a 3d 	sts	0x3D1A, r31	; 0x803d1a <__flp+0x1>
    1e6c:	9e cf       	rjmp	.-196    	; 0x1daa <free+0x42>
    1e6e:	fd 01       	movw	r30, r26
    1e70:	dc 01       	movw	r26, r24
    1e72:	c0 cf       	rjmp	.-128    	; 0x1df4 <free+0x8c>
    1e74:	12 82       	std	Z+2, r1	; 0x02
    1e76:	13 82       	std	Z+3, r1	; 0x03
    1e78:	d7 cf       	rjmp	.-82     	; 0x1e28 <free+0xc0>

00001e7a <realloc>:
realloc():
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	a0 e0       	ldi	r26, 0x00	; 0
    1e7e:	e2 e4       	ldi	r30, 0x42	; 66
    1e80:	ff e0       	ldi	r31, 0x0F	; 15
    1e82:	9a cd       	rjmp	.-1228   	; 0x19b8 <__prologue_saves__+0x4>
    1e84:	8c 01       	movw	r16, r24
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	41 f4       	brne	.+16     	; 0x1e9a <realloc+0x20>
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	d1 de       	rcall	.-606    	; 0x1c30 <malloc>
    1e8e:	8c 01       	movw	r16, r24
    1e90:	c8 01       	movw	r24, r16
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
    1e96:	e0 e1       	ldi	r30, 0x10	; 16
    1e98:	a8 cd       	rjmp	.-1200   	; 0x19ea <__epilogue_restores__+0x4>
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	e6 0f       	add	r30, r22
    1e9e:	f7 1f       	adc	r31, r23
    1ea0:	9c 01       	movw	r18, r24
    1ea2:	22 50       	subi	r18, 0x02	; 2
    1ea4:	31 09       	sbc	r19, r1
    1ea6:	e2 17       	cp	r30, r18
    1ea8:	f3 07       	cpc	r31, r19
    1eaa:	08 f4       	brcc	.+2      	; 0x1eae <realloc+0x34>
    1eac:	99 c0       	rjmp	.+306    	; 0x1fe0 <realloc+0x166>
    1eae:	d9 01       	movw	r26, r18
    1eb0:	cd 91       	ld	r28, X+
    1eb2:	dc 91       	ld	r29, X
    1eb4:	11 97       	sbiw	r26, 0x01	; 1
    1eb6:	c6 17       	cp	r28, r22
    1eb8:	d7 07       	cpc	r29, r23
    1eba:	90 f0       	brcs	.+36     	; 0x1ee0 <realloc+0x66>
    1ebc:	c5 30       	cpi	r28, 0x05	; 5
    1ebe:	d1 05       	cpc	r29, r1
    1ec0:	38 f3       	brcs	.-50     	; 0x1e90 <realloc+0x16>
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	04 97       	sbiw	r24, 0x04	; 4
    1ec6:	86 17       	cp	r24, r22
    1ec8:	97 07       	cpc	r25, r23
    1eca:	10 f3       	brcs	.-60     	; 0x1e90 <realloc+0x16>
    1ecc:	c6 1b       	sub	r28, r22
    1ece:	d7 0b       	sbc	r29, r23
    1ed0:	22 97       	sbiw	r28, 0x02	; 2
    1ed2:	c1 93       	st	Z+, r28
    1ed4:	d1 93       	st	Z+, r29
    1ed6:	6d 93       	st	X+, r22
    1ed8:	7c 93       	st	X, r23
    1eda:	cf 01       	movw	r24, r30
    1edc:	45 df       	rcall	.-374    	; 0x1d68 <free>
    1ede:	d8 cf       	rjmp	.-80     	; 0x1e90 <realloc+0x16>
    1ee0:	5b 01       	movw	r10, r22
    1ee2:	ac 1a       	sub	r10, r28
    1ee4:	bd 0a       	sbc	r11, r29
    1ee6:	4c 01       	movw	r8, r24
    1ee8:	8c 0e       	add	r8, r28
    1eea:	9d 1e       	adc	r9, r29
    1eec:	a0 91 19 3d 	lds	r26, 0x3D19	; 0x803d19 <__flp>
    1ef0:	b0 91 1a 3d 	lds	r27, 0x3D1A	; 0x803d1a <__flp+0x1>
    1ef4:	51 2c       	mov	r5, r1
    1ef6:	41 2c       	mov	r4, r1
    1ef8:	f1 2c       	mov	r15, r1
    1efa:	e1 2c       	mov	r14, r1
    1efc:	10 97       	sbiw	r26, 0x00	; 0
    1efe:	31 f5       	brne	.+76     	; 0x1f4c <realloc+0xd2>
    1f00:	80 91 17 3d 	lds	r24, 0x3D17	; 0x803d17 <__brkval>
    1f04:	90 91 18 3d 	lds	r25, 0x3D18	; 0x803d18 <__brkval+0x1>
    1f08:	88 15       	cp	r24, r8
    1f0a:	99 05       	cpc	r25, r9
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <realloc+0x96>
    1f0e:	5c c0       	rjmp	.+184    	; 0x1fc8 <realloc+0x14e>
    1f10:	46 16       	cp	r4, r22
    1f12:	57 06       	cpc	r5, r23
    1f14:	08 f0       	brcs	.+2      	; 0x1f18 <realloc+0x9e>
    1f16:	58 c0       	rjmp	.+176    	; 0x1fc8 <realloc+0x14e>
    1f18:	80 91 06 3c 	lds	r24, 0x3C06	; 0x803c06 <__malloc_heap_end>
    1f1c:	90 91 07 3c 	lds	r25, 0x3C07	; 0x803c07 <__malloc_heap_end+0x1>
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	41 f4       	brne	.+16     	; 0x1f34 <realloc+0xba>
    1f24:	8d b7       	in	r24, 0x3d	; 61
    1f26:	9e b7       	in	r25, 0x3e	; 62
    1f28:	40 91 0a 3c 	lds	r20, 0x3C0A	; 0x803c0a <__malloc_margin>
    1f2c:	50 91 0b 3c 	lds	r21, 0x3C0B	; 0x803c0b <__malloc_margin+0x1>
    1f30:	84 1b       	sub	r24, r20
    1f32:	95 0b       	sbc	r25, r21
    1f34:	e8 17       	cp	r30, r24
    1f36:	f9 07       	cpc	r31, r25
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <realloc+0xc2>
    1f3a:	52 c0       	rjmp	.+164    	; 0x1fe0 <realloc+0x166>
    1f3c:	e0 93 17 3d 	sts	0x3D17, r30	; 0x803d17 <__brkval>
    1f40:	f0 93 18 3d 	sts	0x3D18, r31	; 0x803d18 <__brkval+0x1>
    1f44:	f9 01       	movw	r30, r18
    1f46:	60 83       	st	Z, r22
    1f48:	71 83       	std	Z+1, r23	; 0x01
    1f4a:	a2 cf       	rjmp	.-188    	; 0x1e90 <realloc+0x16>
    1f4c:	8d 91       	ld	r24, X+
    1f4e:	9c 91       	ld	r25, X
    1f50:	11 97       	sbiw	r26, 0x01	; 1
    1f52:	12 96       	adiw	r26, 0x02	; 2
    1f54:	6c 90       	ld	r6, X
    1f56:	12 97       	sbiw	r26, 0x02	; 2
    1f58:	13 96       	adiw	r26, 0x03	; 3
    1f5a:	7c 90       	ld	r7, X
    1f5c:	13 97       	sbiw	r26, 0x03	; 3
    1f5e:	a8 15       	cp	r26, r8
    1f60:	b9 05       	cpc	r27, r9
    1f62:	59 f5       	brne	.+86     	; 0x1fba <realloc+0x140>
    1f64:	6c 01       	movw	r12, r24
    1f66:	42 e0       	ldi	r20, 0x02	; 2
    1f68:	c4 0e       	add	r12, r20
    1f6a:	d1 1c       	adc	r13, r1
    1f6c:	ca 14       	cp	r12, r10
    1f6e:	db 04       	cpc	r13, r11
    1f70:	20 f1       	brcs	.+72     	; 0x1fba <realloc+0x140>
    1f72:	ac 01       	movw	r20, r24
    1f74:	4a 19       	sub	r20, r10
    1f76:	5b 09       	sbc	r21, r11
    1f78:	da 01       	movw	r26, r20
    1f7a:	12 96       	adiw	r26, 0x02	; 2
    1f7c:	15 97       	sbiw	r26, 0x05	; 5
    1f7e:	80 f0       	brcs	.+32     	; 0x1fa0 <realloc+0x126>
    1f80:	62 82       	std	Z+2, r6	; 0x02
    1f82:	73 82       	std	Z+3, r7	; 0x03
    1f84:	40 83       	st	Z, r20
    1f86:	51 83       	std	Z+1, r21	; 0x01
    1f88:	d9 01       	movw	r26, r18
    1f8a:	6d 93       	st	X+, r22
    1f8c:	7c 93       	st	X, r23
    1f8e:	e1 14       	cp	r14, r1
    1f90:	f1 04       	cpc	r15, r1
    1f92:	71 f0       	breq	.+28     	; 0x1fb0 <realloc+0x136>
    1f94:	d7 01       	movw	r26, r14
    1f96:	12 96       	adiw	r26, 0x02	; 2
    1f98:	ed 93       	st	X+, r30
    1f9a:	fc 93       	st	X, r31
    1f9c:	13 97       	sbiw	r26, 0x03	; 3
    1f9e:	78 cf       	rjmp	.-272    	; 0x1e90 <realloc+0x16>
    1fa0:	22 96       	adiw	r28, 0x02	; 2
    1fa2:	8c 0f       	add	r24, r28
    1fa4:	9d 1f       	adc	r25, r29
    1fa6:	f9 01       	movw	r30, r18
    1fa8:	80 83       	st	Z, r24
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	f3 01       	movw	r30, r6
    1fae:	ef cf       	rjmp	.-34     	; 0x1f8e <realloc+0x114>
    1fb0:	e0 93 19 3d 	sts	0x3D19, r30	; 0x803d19 <__flp>
    1fb4:	f0 93 1a 3d 	sts	0x3D1A, r31	; 0x803d1a <__flp+0x1>
    1fb8:	6b cf       	rjmp	.-298    	; 0x1e90 <realloc+0x16>
    1fba:	48 16       	cp	r4, r24
    1fbc:	59 06       	cpc	r5, r25
    1fbe:	08 f4       	brcc	.+2      	; 0x1fc2 <realloc+0x148>
    1fc0:	2c 01       	movw	r4, r24
    1fc2:	7d 01       	movw	r14, r26
    1fc4:	d3 01       	movw	r26, r6
    1fc6:	9a cf       	rjmp	.-204    	; 0x1efc <realloc+0x82>
    1fc8:	cb 01       	movw	r24, r22
    1fca:	32 de       	rcall	.-924    	; 0x1c30 <malloc>
    1fcc:	7c 01       	movw	r14, r24
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	39 f0       	breq	.+14     	; 0x1fe0 <realloc+0x166>
    1fd2:	ae 01       	movw	r20, r28
    1fd4:	b8 01       	movw	r22, r16
    1fd6:	07 d0       	rcall	.+14     	; 0x1fe6 <memcpy>
    1fd8:	c8 01       	movw	r24, r16
    1fda:	c6 de       	rcall	.-628    	; 0x1d68 <free>
    1fdc:	87 01       	movw	r16, r14
    1fde:	58 cf       	rjmp	.-336    	; 0x1e90 <realloc+0x16>
    1fe0:	10 e0       	ldi	r17, 0x00	; 0
    1fe2:	00 e0       	ldi	r16, 0x00	; 0
    1fe4:	55 cf       	rjmp	.-342    	; 0x1e90 <realloc+0x16>

00001fe6 <memcpy>:
memcpy():
    1fe6:	fb 01       	movw	r30, r22
    1fe8:	dc 01       	movw	r26, r24
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <memcpy+0xa>
    1fec:	01 90       	ld	r0, Z+
    1fee:	0d 92       	st	X+, r0
    1ff0:	41 50       	subi	r20, 0x01	; 1
    1ff2:	50 40       	sbci	r21, 0x00	; 0
    1ff4:	d8 f7       	brcc	.-10     	; 0x1fec <memcpy+0x6>
    1ff6:	08 95       	ret

00001ff8 <strcpy>:
strcpy():
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	01 90       	ld	r0, Z+
    1ffe:	0d 92       	st	X+, r0
    2000:	00 20       	and	r0, r0
    2002:	e1 f7       	brne	.-8      	; 0x1ffc <strcpy+0x4>
    2004:	08 95       	ret

00002006 <sprintf>:
sprintf():
    2006:	ae e0       	ldi	r26, 0x0E	; 14
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e8 e0       	ldi	r30, 0x08	; 8
    200c:	f0 e1       	ldi	r31, 0x10	; 16
    200e:	e0 cc       	rjmp	.-1600   	; 0x19d0 <__prologue_saves__+0x1c>
    2010:	0d 89       	ldd	r16, Y+21	; 0x15
    2012:	1e 89       	ldd	r17, Y+22	; 0x16
    2014:	86 e0       	ldi	r24, 0x06	; 6
    2016:	8c 83       	std	Y+4, r24	; 0x04
    2018:	09 83       	std	Y+1, r16	; 0x01
    201a:	1a 83       	std	Y+2, r17	; 0x02
    201c:	8f ef       	ldi	r24, 0xFF	; 255
    201e:	9f e7       	ldi	r25, 0x7F	; 127
    2020:	8d 83       	std	Y+5, r24	; 0x05
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	ae 01       	movw	r20, r28
    2026:	47 5e       	subi	r20, 0xE7	; 231
    2028:	5f 4f       	sbci	r21, 0xFF	; 255
    202a:	6f 89       	ldd	r22, Y+23	; 0x17
    202c:	78 8d       	ldd	r23, Y+24	; 0x18
    202e:	ce 01       	movw	r24, r28
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	0e 94 04 06 	call	0xc08	; 0xc08 <vfprintf>
    2036:	2f 81       	ldd	r18, Y+7	; 0x07
    2038:	38 85       	ldd	r19, Y+8	; 0x08
    203a:	02 0f       	add	r16, r18
    203c:	13 1f       	adc	r17, r19
    203e:	f8 01       	movw	r30, r16
    2040:	10 82       	st	Z, r1
    2042:	2e 96       	adiw	r28, 0x0e	; 14
    2044:	e4 e0       	ldi	r30, 0x04	; 4
    2046:	dd cc       	rjmp	.-1606   	; 0x1a02 <__epilogue_restores__+0x1c>

00002048 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2048:	f8 94       	cli

0000204a <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    204a:	ff cf       	rjmp	.-2      	; 0x204a <__stop_program>
