
/private/var/folders/yp/37w_03rx1qdbfsqckbyyk9t80000gn/T/arduino-sketch-5380282240B235EA65F31E83BC95B4D4/components_check.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	3e c0       	rjmp	.+124    	; 0x7e <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	6f c0       	rjmp	.+222    	; 0xe4 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	6d c0       	rjmp	.+218    	; 0xe4 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	6b c0       	rjmp	.+214    	; 0xe4 <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	8f c5       	rjmp	.+2846   	; 0xb44 <__vector_9>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	57 c0       	rjmp	.+174    	; 0xe4 <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	63 c5       	rjmp	.+2758   	; 0xb34 <__vector_27>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	5c c5       	rjmp	.+2744   	; 0xb2a <__vector_28>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	64 c5       	rjmp	.+2760   	; 0xb3e <__vector_29>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
	...

0000007c <__ctors_start>:
__trampolines_start():
      7c:	f8 05       	cpc	r31, r8

0000007e <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      7e:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      80:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      82:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      84:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      86:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      88:	de bf       	out	0x3e, r29	; 62

0000008a <_initThreeStuff()>:
_Z15_initThreeStuffv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/main.cpp:95
 * (many are available reasonably cheaply on aliexpress et al.) end up being very useful        *
 * for this sort of thing.                                                                      */

  void __attribute__((weak)) init_reset_flags();
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
      8a:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <vtable for UartClass+0x7f5e65>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/main.cpp:96
    RSTCTRL.RSTFR = flags;
      8e:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <vtable for UartClass+0x7f5e65>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/main.cpp:97
    if (flags == 0) {
      92:	81 11       	cpse	r24, r1
      94:	05 c0       	rjmp	.+10     	; 0xa0 <_initThreeStuff()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/main.cpp:98
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
      96:	98 ed       	ldi	r25, 0xD8	; 216
      98:	21 e0       	ldi	r18, 0x01	; 1
      9a:	94 bf       	out	0x34, r25	; 52
      9c:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <vtable for UartClass+0x7f5e66>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/main.cpp:100
    }
    GPIOR0 = flags;
      a0:	8c bb       	out	0x1c, r24	; 28

000000a2 <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      a2:	2d e3       	ldi	r18, 0x3D	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      a4:	ac e0       	ldi	r26, 0x0C	; 12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      a6:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      ac:	ab 31       	cpi	r26, 0x1B	; 27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      ae:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>

000000b2 <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      b2:	1c e3       	ldi	r17, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      b4:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      b6:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      b8:	eb e5       	ldi	r30, 0x5B	; 91
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ba:	f5 e2       	ldi	r31, 0x25	; 37
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      be:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      c0:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      c2:	ac 30       	cpi	r26, 0x0C	; 12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      c4:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      c8:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      ca:	cf e3       	ldi	r28, 0x3F	; 63
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      cc:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      d0:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      d2:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      d4:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      d8:	ce 33       	cpi	r28, 0x3E	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      da:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      dc:	c9 f7       	brne	.-14     	; 0xd0 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
      de:	9f d5       	rcall	.+2878   	; 0xc1e <main>
../../../../crt1/gcrt1.S:315
      e0:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <_exit>

000000e4 <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
      e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>:
_ZN17TinyMegaI2CMaster5startEhi.constprop.18():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:66

// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
      e6:	89 2b       	or	r24, r25
      e8:	c9 f0       	breq	.+50     	; 0x11c <__EEPROM_REGION_LENGTH__+0x1c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:70
    read = 0; // Write
  else
  {
    I2Ccount = readcount;
      ea:	8f ef       	ldi	r24, 0xFF	; 255
      ec:	9f ef       	ldi	r25, 0xFF	; 255
      ee:	80 93 91 3c 	sts	0x3C91, r24	; 0x803c91 <TinyMegaI2C>
      f2:	90 93 92 3c 	sts	0x3C92, r25	; 0x803c92 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:71
    read = 1;
      f6:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:73
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
      f8:	84 66       	ori	r24, 0x64	; 100
      fa:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <vtable for UartClass+0x7f663c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:74
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
      fe:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f663a>
     102:	80 7c       	andi	r24, 0xC0	; 192
     104:	e1 f3       	breq	.-8      	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]+0x18>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:76
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
     106:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f663a>
     10a:	83 fd       	sbrc	r24, 3
     10c:	09 c0       	rjmp	.+18     	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:78
    return false;                        // Return false if arbitration lost or bus error
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
     10e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f663a>
     112:	82 95       	swap	r24
     114:	81 70       	andi	r24, 0x01	; 1
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	89 27       	eor	r24, r25
     11a:	08 95       	ret
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:67
// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
    read = 0; // Write
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	ec cf       	rjmp	.-40     	; 0xf8 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]+0x12>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:77
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
    return false;                        // Return false if arbitration lost or bus error
     120:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:79
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}
     122:	08 95       	ret

00000124 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>:
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:402
    {
        return (false);
    }
}

bool RV8803Tiny::readMultipleRegisters(uint8_t addr, uint8_t *dest, uint8_t len)
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:405
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	db df       	rcall	.-74     	; 0xe6 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
     130:	81 11       	cpse	r24, r1
     132:	02 c0       	rjmp	.+4      	; 0x138 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	3c c0       	rjmp	.+120    	; 0x1b0 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x8c>
write():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:55
  return TinyMegaI2CMaster::read();
}

bool TinyMegaI2CMaster::write(uint8_t data)
{
  while (!(TWI0.MSTATUS & TWI_WIF_bm))
     138:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f663a>
     13c:	86 ff       	sbrs	r24, 6
     13e:	fc cf       	rjmp	.-8      	; 0x138 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:57
    ; // Wait for write interrupt flag
  TWI0.MDATA = data;
     140:	80 e1       	ldi	r24, 0x10	; 16
     142:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <vtable for UartClass+0x7f663d>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:58
  TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;   // Do nothing
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f6639>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:59
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Returns true if slave gave an ACK
     14c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f663a>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:408
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803-C7.
        if (TinyMegaI2C.write(addr))
     150:	84 fd       	sbrc	r24, 4
     152:	f0 cf       	rjmp	.-32     	; 0x134 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
restart():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:83
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}

bool TinyMegaI2CMaster::restart(uint8_t address, int readcount)
{
  return TinyMegaI2CMaster::start(address, readcount);
     154:	8f ef       	ldi	r24, 0xFF	; 255
     156:	9f ef       	ldi	r25, 0xFF	; 255
     158:	c6 df       	rcall	.-116    	; 0xe6 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:412
        { //  if Acknowledged from RV-8803
            //  Master sends out the Repeated START condition (or STOP condition followed by START condition)
            //  Master sends out Slave Address, 65h for the RV-8803 [ R/W bit is -1 ] indicating unknown number of read operation
            if (TinyMegaI2C.restart(RV8803_ADDR, -1))
     15a:	88 23       	and	r24, r24
     15c:	59 f3       	breq	.-42     	; 0x134 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
     15e:	fe 01       	movw	r30, r28
     160:	9e 01       	movw	r18, r28
     162:	28 5f       	subi	r18, 0xF8	; 248
     164:	3f 4f       	sbci	r19, 0xFF	; 255
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     166:	46 e0       	ldi	r20, 0x06	; 6
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     168:	52 e0       	ldi	r21, 0x02	; 2
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:34
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
}

uint8_t TinyMegaI2CMaster::read(void)
{
  if (I2Ccount != 0)
     16a:	80 91 91 3c 	lds	r24, 0x3C91	; 0x803c91 <TinyMegaI2C>
     16e:	90 91 92 3c 	lds	r25, 0x3C92	; 0x803c92 <TinyMegaI2C+0x1>
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	29 f0       	breq	.+10     	; 0x180 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x5c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:35
    I2Ccount--;
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	80 93 91 3c 	sts	0x3C91, r24	; 0x803c91 <TinyMegaI2C>
     17c:	90 93 92 3c 	sts	0x3C92, r25	; 0x803c92 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:36
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
     180:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f663a>
     184:	87 ff       	sbrs	r24, 7
     186:	fc cf       	rjmp	.-8      	; 0x180 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x5c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:38
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
     188:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <vtable for UartClass+0x7f663d>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:40
  // Check slave sent ACK?
  if (I2Ccount != 0)
     18c:	60 91 91 3c 	lds	r22, 0x3C91	; 0x803c91 <TinyMegaI2C>
     190:	70 91 92 3c 	lds	r23, 0x3C92	; 0x803c92 <TinyMegaI2C+0x1>
     194:	67 2b       	or	r22, r23
     196:	79 f0       	breq	.+30     	; 0x1b6 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x92>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     198:	50 93 14 08 	sts	0x0814, r21	; 0x800814 <vtable for UartClass+0x7f6639>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:423
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
                {
                    dest[i] = TinyMegaI2C.read();
     19c:	81 93       	st	Z+, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:421
                // 2. [NO NEED] The above Steps can be repeated if necessary and the address bit increments automatically.
                // 3. ** The Master, addressed as Receiver, can stop data transmission by not generating an acknowledge on the
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
     19e:	e2 17       	cp	r30, r18
     1a0:	f3 07       	cpc	r31, r19
     1a2:	19 f7       	brne	.-58     	; 0x16a <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x46>
stop():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     1a4:	87 e0       	ldi	r24, 0x07	; 7
     1a6:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f6639>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	cd 2b       	or	r28, r29
     1ae:	11 f2       	breq	.-124    	; 0x134 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:443
    }
    else
    {
        return (false);
    }
}
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     1b6:	40 93 14 08 	sts	0x0814, r20	; 0x800814 <vtable for UartClass+0x7f6639>
     1ba:	f0 cf       	rjmp	.-32     	; 0x19c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x78>

000001bc <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:642
  int UartClass::availableForWrite(void) {
    tx_buffer_index_t head;
    tx_buffer_index_t tail;

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
     1bc:	fc 01       	movw	r30, r24
     1be:	53 89       	ldd	r21, Z+19	; 0x13
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:643
      tail = _tx_buffer_tail;
     1c0:	44 89       	ldd	r20, Z+20	; 0x14
     1c2:	25 2f       	mov	r18, r21
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	84 2f       	mov	r24, r20
     1c8:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:646
    }
    if (head >= tail) {
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1ca:	82 1b       	sub	r24, r18
     1cc:	93 0b       	sbc	r25, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:645

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
      tail = _tx_buffer_tail;
    }
    if (head >= tail) {
     1ce:	54 17       	cp	r21, r20
     1d0:	10 f0       	brcs	.+4      	; 0x1d6 <UartClass::availableForWrite()+0x1a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:646
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1d2:	4f 96       	adiw	r24, 0x1f	; 31
     1d4:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:648
    }
    return tail - head - 1;
     1d6:	01 97       	sbiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:649
  }
     1d8:	08 95       	ret

000001da <UartClass::read()>:
_ZN9UartClass4readEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:626
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }

  int UartClass::read(void) {
     1da:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:628
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
     1dc:	91 89       	ldd	r25, Z+17	; 0x11
     1de:	82 89       	ldd	r24, Z+18	; 0x12
     1e0:	98 17       	cp	r25, r24
     1e2:	61 f0       	breq	.+24     	; 0x1fc <UartClass::read()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:631
      return -1;
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
     1e4:	a2 89       	ldd	r26, Z+18	; 0x12
     1e6:	ae 0f       	add	r26, r30
     1e8:	bf 2f       	mov	r27, r31
     1ea:	b1 1d       	adc	r27, r1
     1ec:	55 96       	adiw	r26, 0x15	; 21
     1ee:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:632
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
     1f0:	92 89       	ldd	r25, Z+18	; 0x12
     1f2:	9f 5f       	subi	r25, 0xFF	; 255
     1f4:	9f 73       	andi	r25, 0x3F	; 63
     1f6:	92 8b       	std	Z+18, r25	; 0x12
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:633
      return c;
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:629
  }

  int UartClass::read(void) {
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:635
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
      return c;
    }
  }
     200:	08 95       	ret

00000202 <UartClass::peek()>:
_ZN9UartClass4peekEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:618
}
  int UartClass::available(void) {
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
     202:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:619
    if (_rx_buffer_head == _rx_buffer_tail) {
     204:	91 89       	ldd	r25, Z+17	; 0x11
     206:	82 89       	ldd	r24, Z+18	; 0x12
     208:	98 17       	cp	r25, r24
     20a:	31 f0       	breq	.+12     	; 0x218 <UartClass::peek()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:622
      return -1;
    } else {
      return _rx_buffer[_rx_buffer_tail];
     20c:	82 89       	ldd	r24, Z+18	; 0x12
     20e:	e8 0f       	add	r30, r24
     210:	f1 1d       	adc	r31, r1
     212:	85 89       	ldd	r24, Z+21	; 0x15
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:620
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:624
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }
     21c:	08 95       	ret

0000021e <UartClass::available()>:
_ZN9UartClass9availableEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:614

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}
  int UartClass::available(void) {
     21e:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:615
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
     220:	91 89       	ldd	r25, Z+17	; 0x11
     222:	22 89       	ldd	r18, Z+18	; 0x12
     224:	89 2f       	mov	r24, r25
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	80 5c       	subi	r24, 0xC0	; 192
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	82 1b       	sub	r24, r18
     22e:	91 09       	sbc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:616
  }
     230:	8f 73       	andi	r24, 0x3F	; 63
     232:	99 27       	eor	r25, r25
     234:	08 95       	ret

00000236 <UartClass::end()>:
_ZN9UartClass3endEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:598
    pinMode(_usart_pins[muxrow][3], OUTPUT); // make XDIR output.
  }
  */
}

void UartClass::end() {
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:600
  // wait for transmission of outgoing data
  flush();
     23c:	e8 81       	ld	r30, Y
     23e:	f9 81       	ldd	r31, Y+1	; 0x01
     240:	06 80       	ldd	r0, Z+6	; 0x06
     242:	f7 81       	ldd	r31, Z+7	; 0x07
     244:	e0 2d       	mov	r30, r0
     246:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:603
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  // TXCIE only used in half duplex - we can just turn the damned thing off yo!
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     248:	ec 85       	ldd	r30, Y+12	; 0x0c
     24a:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:604
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     24c:	86 81       	ldd	r24, Z+6	; 0x06
     24e:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:605
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     250:	85 81       	ldd	r24, Z+5	; 0x05
     252:	15 82       	std	Z+5, r1	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:606
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error.
     254:	80 e4       	ldi	r24, 0x40	; 64
     256:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:608
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     258:	8a 89       	ldd	r24, Y+18	; 0x12
     25a:	89 8b       	std	Y+17, r24	; 0x11
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:612

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     25c:	18 8a       	std	Y+16, r1	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:613
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:352
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     264:	dc 01       	movw	r26, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:353
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	07 fe       	sbrs	r0, 7
     26a:	04 c0       	rjmp	.+8      	; 0x274 <UartClass::_poll_tx_data_empty()+0x10>
     26c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vtable for UartClass+0x7f5f36>
     270:	88 23       	and	r24, r24
     272:	b1 f0       	breq	.+44     	; 0x2a0 <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:370
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     274:	1c 96       	adiw	r26, 0x0c	; 12
     276:	ed 91       	ld	r30, X+
     278:	fc 91       	ld	r31, X
     27a:	1d 97       	sbiw	r26, 0x0d	; 13
     27c:	84 81       	ldd	r24, Z+4	; 0x04
     27e:	85 ff       	sbrs	r24, 5
     280:	0f c0       	rjmp	.+30     	; 0x2a0 <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:371
      if (_tx_buffer_head != _tx_buffer_tail) {
     282:	53 96       	adiw	r26, 0x13	; 19
     284:	9c 91       	ld	r25, X
     286:	53 97       	sbiw	r26, 0x13	; 19
     288:	54 96       	adiw	r26, 0x14	; 20
     28a:	8c 91       	ld	r24, X
     28c:	98 17       	cp	r25, r24
     28e:	21 f0       	breq	.+8      	; 0x298 <UartClass::_poll_tx_data_empty()+0x34>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:373
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     290:	85 81       	ldd	r24, Z+5	; 0x05
     292:	8f 7d       	andi	r24, 0xDF	; 223
     294:	85 83       	std	Z+5, r24	; 0x05
     296:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:397
#ifdef USART1
                ::"z"((uint16_t)thisSerial)
#else
                ::"z"(&Serial)
#endif
                : "r18","r19","r24","r25","r26","r27");
     298:	e3 e9       	ldi	r30, 0x93	; 147
     29a:	fc e3       	ldi	r31, 0x3C	; 60
     29c:	e8 94       	clt
     29e:	e8 c3       	rjmp	.+2000   	; 0xa70 <_poll_dre>

000002a0 <_poll_dre_done>:
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:404
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
  // Note that this currently does not handle cases where the DRE interruopt becomes
  // disabled, yet you are actually attempting to send. I don't think it can happen.
}
     2a0:	08 95       	ret

000002a2 <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:682
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }


  size_t UartClass::write(uint8_t c) {
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:683
    _state |= 1; // Record that we have written to serial since it was begun.
     2ac:	88 89       	ldd	r24, Y+16	; 0x10
     2ae:	98 2f       	mov	r25, r24
     2b0:	91 60       	ori	r25, 0x01	; 1
     2b2:	98 8b       	std	Y+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:688
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     2b4:	2b 89       	ldd	r18, Y+19	; 0x13
     2b6:	9c 89       	ldd	r25, Y+20	; 0x14
     2b8:	29 13       	cpse	r18, r25
     2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <UartClass::write(unsigned char)+0x2e>
     2bc:	ec 85       	ldd	r30, Y+12	; 0x0c
     2be:	fd 85       	ldd	r31, Y+13	; 0x0d
     2c0:	94 81       	ldd	r25, Z+4	; 0x04
     2c2:	95 ff       	sbrs	r25, 5
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <UartClass::write(unsigned char)+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:689
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     2c6:	81 fd       	sbrc	r24, 1
     2c8:	0d c0       	rjmp	.+26     	; 0x2e4 <UartClass::write(unsigned char)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:696
        ctrla &= ~USART_RXCIE_bm;
        ctrla |=  USART_TXCIE_bm;
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
        (*_hwserial_module).CTRLA = ctrla;
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2ca:	80 e4       	ldi	r24, 0x40	; 64
     2cc:	84 83       	std	Z+4, r24	; 0x04
     2ce:	12 c0       	rjmp	.+36     	; 0x2f4 <UartClass::write(unsigned char)+0x52>
     2d0:	06 2f       	mov	r16, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:714
       * // that the interrupt handler is called in this situation
       * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
       */
      return 1;
    }
    tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     2d2:	1b 89       	ldd	r17, Y+19	; 0x13
     2d4:	1f 5f       	subi	r17, 0xFF	; 255
     2d6:	1f 71       	andi	r17, 0x1F	; 31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:718

    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
     2d8:	8c 89       	ldd	r24, Y+20	; 0x14
     2da:	81 13       	cpse	r24, r17
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:719
      _poll_tx_data_empty();
     2dc:	15 c0       	rjmp	.+42     	; 0x308 <UartClass::write(unsigned char)+0x66>
     2de:	ce 01       	movw	r24, r28
     2e0:	c1 df       	rcall	.-126    	; 0x264 <UartClass::_poll_tx_data_empty()>
     2e2:	fa cf       	rjmp	.-12     	; 0x2d8 <UartClass::write(unsigned char)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:690
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
        uint8_t ctrla = (*_hwserial_module).CTRLA;
     2e4:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:691
        ctrla &= ~USART_RXCIE_bm;
     2e6:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:692
        ctrla |=  USART_TXCIE_bm;
     2e8:	80 64       	ori	r24, 0x40	; 64
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:693
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2ea:	90 e4       	ldi	r25, 0x40	; 64
     2ec:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:694
        (*_hwserial_module).CTRLA = ctrla;
     2ee:	ec 85       	ldd	r30, Y+12	; 0x0c
     2f0:	fd 85       	ldd	r31, Y+13	; 0x0d
     2f2:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:699
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
      }
      // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
      (*_hwserial_module).TXDATAL = c;
     2f4:	ec 85       	ldd	r30, Y+12	; 0x0c
     2f6:	fd 85       	ldd	r31, Y+13	; 0x0d
     2f8:	62 83       	std	Z+2, r22	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:734
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    }
    return 1;
  }
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:721
    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
      _poll_tx_data_empty();
    }
    _tx_buffer[_tx_buffer_head] = c;
     308:	eb 89       	ldd	r30, Y+19	; 0x13
     30a:	ec 0f       	add	r30, r28
     30c:	fd 2f       	mov	r31, r29
     30e:	f1 1d       	adc	r31, r1
     310:	eb 5a       	subi	r30, 0xAB	; 171
     312:	ff 4f       	sbci	r31, 0xFF	; 255
     314:	00 83       	st	Z, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:722
    _tx_buffer_head = i;
     316:	1b 8b       	std	Y+19, r17	; 0x13
     318:	ec 85       	ldd	r30, Y+12	; 0x0c
     31a:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:723
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     31c:	88 89       	ldd	r24, Y+16	; 0x10
     31e:	81 ff       	sbrs	r24, 1
     320:	09 c0       	rjmp	.+18     	; 0x334 <UartClass::write(unsigned char)+0x92>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:724
      uint8_t ctrla = (*_hwserial_module).CTRLA;
     322:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:725
      ctrla &= ~USART_RXCIE_bm;
     324:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:726
      ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     326:	80 66       	ori	r24, 0x60	; 96
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:727
      (*_hwserial_module).STATUS = USART_TXCIF_bm;
     328:	90 e4       	ldi	r25, 0x40	; 64
     32a:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:728
      (*_hwserial_module).CTRLA = ctrla;
     32c:	ec 85       	ldd	r30, Y+12	; 0x0c
     32e:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:731
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     330:	85 83       	std	Z+5, r24	; 0x05
     332:	e3 cf       	rjmp	.-58     	; 0x2fa <UartClass::write(unsigned char)+0x58>
     334:	85 81       	ldd	r24, Z+5	; 0x05
     336:	80 62       	ori	r24, 0x20	; 32
     338:	fb cf       	rjmp	.-10     	; 0x330 <UartClass::write(unsigned char)+0x8e>

0000033a <UartClass::flush()>:
_ZN9UartClass5flushEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:651
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    }
    return tail - head - 1;
  }

  void UartClass::flush() {
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:655
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXCIF (transmit
    // complete) bit to 1 during initialization
    if (!_state & 1) {
     340:	88 89       	ldd	r24, Y+16	; 0x10
     342:	88 23       	and	r24, r24
     344:	59 f0       	breq	.+22     	; 0x35c <UartClass::flush()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:670
    // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
    // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
    // and in that case flush(), and write() with full buffer would just straight up hang...

    // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
    while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     346:	ec 85       	ldd	r30, Y+12	; 0x0c
     348:	fd 85       	ldd	r31, Y+13	; 0x0d
     34a:	85 81       	ldd	r24, Z+5	; 0x05
     34c:	85 fd       	sbrc	r24, 5
     34e:	03 c0       	rjmp	.+6      	; 0x356 <UartClass::flush()+0x1c>
     350:	84 81       	ldd	r24, Z+4	; 0x04
     352:	86 fd       	sbrc	r24, 6
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:675

      // If interrupts are globally disabled or the and DR empty interrupt is disabled,
      // poll the "data register empty" interrupt flag to prevent deadlock

      _poll_tx_data_empty();
     354:	03 c0       	rjmp	.+6      	; 0x35c <UartClass::flush()+0x22>
     356:	ce 01       	movw	r24, r28
     358:	85 df       	rcall	.-246    	; 0x264 <UartClass::_poll_tx_data_empty()>
     35a:	f5 cf       	rjmp	.-22     	; 0x346 <UartClass::flush()+0xc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:679
    }
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     362:	af 92       	push	r10
     364:	bf 92       	push	r11
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	6c 01       	movw	r12, r24
     378:	7b 01       	movw	r14, r22
     37a:	8b 01       	movw	r16, r22
     37c:	04 0f       	add	r16, r20
     37e:	15 1f       	adc	r17, r21
     380:	eb 01       	movw	r28, r22
     382:	5e 01       	movw	r10, r28
     384:	ae 18       	sub	r10, r14
     386:	bf 08       	sbc	r11, r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     388:	c0 17       	cp	r28, r16
     38a:	d1 07       	cpc	r29, r17
     38c:	59 f0       	breq	.+22     	; 0x3a4 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:32
    if (write(*buffer++)) {
     38e:	69 91       	ld	r22, Y+
     390:	d6 01       	movw	r26, r12
     392:	ed 91       	ld	r30, X+
     394:	fc 91       	ld	r31, X
     396:	01 90       	ld	r0, Z+
     398:	f0 81       	ld	r31, Z
     39a:	e0 2d       	mov	r30, r0
     39c:	c6 01       	movw	r24, r12
     39e:	09 95       	icall
     3a0:	89 2b       	or	r24, r25
     3a2:	79 f7       	brne	.-34     	; 0x382 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     3a4:	c5 01       	movw	r24, r10
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	bf 90       	pop	r11
     3b8:	af 90       	pop	r10
     3ba:	08 95       	ret

000003bc <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.h:293
    inline   size_t write(unsigned int n)   {return write((uint8_t)n);}
    inline   size_t write(int n)            {return write((uint8_t)n);}
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	08 95       	ret

000003c0 <micros>:
micros():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:271
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     3c0:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:272
    cli(); /* INTERRUPTS OFF */
     3c2:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:274
    #if defined(MILLIS_USE_TIMERA0)
      ticks = TCA0.SPLIT.HCNT;
     3c4:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <vtable for UartClass+0x7f6846>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:275
      flags = TCA0.SPLIT.INTFLAGS;
     3c8:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <vtable for UartClass+0x7f6830>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:291
     * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
     * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1))
      overflows = timer_overflow_count;
     3cc:	20 91 12 3c 	lds	r18, 0x3C12	; 0x803c12 <timer_overflow_count>
     3d0:	30 91 13 3c 	lds	r19, 0x3C13	; 0x803c13 <timer_overflow_count+0x1>
     3d4:	40 91 14 3c 	lds	r20, 0x3C14	; 0x803c14 <timer_overflow_count+0x2>
     3d8:	50 91 15 3c 	lds	r21, 0x3C15	; 0x803c15 <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:296
    #else
      overflows = timer_millis;
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     3dc:	8f bf       	out	0x3f, r24	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:300
    #if defined(MILLIS_USE_TIMERD0)
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
     3de:	8e ef       	ldi	r24, 0xFE	; 254
     3e0:	86 1b       	sub	r24, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:301
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
     3e2:	91 ff       	sbrs	r25, 1
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <micros+0x32>
     3e6:	84 30       	cpi	r24, 0x04	; 4
     3e8:	20 f4       	brcc	.+8      	; 0x3f2 <micros+0x32>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:308
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
    #endif
      #if ((defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1)) && (F_CPU <= 1000000))
        overflows += 2;
      #else
        overflows++;
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	4f 4f       	sbci	r20, 0xFF	; 255
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:646
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                     + (ticks * 3 + ((uint16_t)(ticks >> 2) - (ticks >> 4)));
     3f2:	93 e0       	ldi	r25, 0x03	; 3
     3f4:	89 9f       	mul	r24, r25
     3f6:	f0 01       	movw	r30, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	98 2f       	mov	r25, r24
     3fc:	92 95       	swap	r25
     3fe:	9f 70       	andi	r25, 0x0F	; 15
     400:	e9 1b       	sub	r30, r25
     402:	f1 09       	sbc	r31, r1
     404:	86 95       	lsr	r24
     406:	86 95       	lsr	r24
     408:	e8 0f       	add	r30, r24
     40a:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:645
            + (ticks * 5 + ((uint16_t)(ticks >> 2) + (ticks >> 4) + (ticks >> 5)));
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
     40c:	a0 e3       	ldi	r26, 0x30	; 48
     40e:	b3 e0       	ldi	r27, 0x03	; 3
     410:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__muluhisi3>
     414:	6e 0f       	add	r22, r30
     416:	7f 1f       	adc	r23, r31
     418:	81 1d       	adc	r24, r1
     41a:	91 1d       	adc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:656
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     41c:	08 95       	ret

0000041e <delay>:
delay():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:724
        _delay_ms(1);
      }
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
     41e:	cf 92       	push	r12
     420:	df 92       	push	r13
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	6b 01       	movw	r12, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:725
    uint16_t start = (uint16_t) micros();
     42c:	7c 01       	movw	r14, r24
     42e:	c8 df       	rcall	.-112    	; 0x3c0 <micros>
     430:	eb 01       	movw	r28, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:726
    while (ms > 0) {
     432:	c1 14       	cp	r12, r1
     434:	d1 04       	cpc	r13, r1
     436:	e1 04       	cpc	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	41 f4       	brne	.+16     	; 0x44c <delay+0x2e>
     43c:	12 c0       	rjmp	.+36     	; 0x462 <delay+0x44>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:728
      while (((uint16_t) micros() - start) >= 1000 && ms) {
        ms-- ;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	c8 1a       	sub	r12, r24
     442:	d1 08       	sbc	r13, r1
     444:	e1 08       	sbc	r14, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:729
        start += 1000;
     446:	f1 08       	sbc	r15, r1
     448:	c8 51       	subi	r28, 0x18	; 24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:727
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
    uint16_t start = (uint16_t) micros();
    while (ms > 0) {
      while (((uint16_t) micros() - start) >= 1000 && ms) {
     44a:	dc 4f       	sbci	r29, 0xFC	; 252
     44c:	b9 df       	rcall	.-142    	; 0x3c0 <micros>
     44e:	6c 1b       	sub	r22, r28
     450:	7d 0b       	sbc	r23, r29
     452:	68 3e       	cpi	r22, 0xE8	; 232
     454:	73 40       	sbci	r23, 0x03	; 3
     456:	68 f3       	brcs	.-38     	; 0x432 <delay+0x14>
     458:	c1 14       	cp	r12, r1
     45a:	d1 04       	cpc	r13, r1
     45c:	e1 04       	cpc	r14, r1
     45e:	f1 04       	cpc	r15, r1
     460:	71 f7       	brne	.-36     	; 0x43e <delay+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:732
        ms-- ;
        start += 1000;
      }
    }
  }
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	08 95       	ret

00000470 <millis>:
millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:226


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     470:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:227
  cli();
     472:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:255

     * Not only that - but a dedicated optimizing assembly programmer could probably ensure that instead of the >> 7 (a little mini loop)
     * that was implemented leftshifting it once, retaining the carried bit, and
     */
  #else
    m = timer_millis;
     474:	60 91 0e 3c 	lds	r22, 0x3C0E	; 0x803c0e <timer_millis>
     478:	70 91 0f 3c 	lds	r23, 0x3C0F	; 0x803c0f <timer_millis+0x1>
     47c:	80 91 10 3c 	lds	r24, 0x3C10	; 0x803c10 <timer_millis+0x2>
     480:	90 91 11 3c 	lds	r25, 0x3C11	; 0x803c11 <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:256
    SREG = oldSREG;
     484:	2f bf       	out	0x3f, r18	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:259
  #endif
  return m;
}
     486:	08 95       	ret

00000488 <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.h:257

  public:
    inline             UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t default_pinset);
    bool                    pins(uint8_t tx, uint8_t rx);
    bool                    swap(uint8_t mux_level = 1);
    void                   begin(uint32_t baud) {begin(baud, SERIAL_8N1);}
     488:	dc 01       	movw	r26, r24
     48a:	ed 91       	ld	r30, X+
     48c:	fc 91       	ld	r31, X
     48e:	00 88       	ldd	r0, Z+16	; 0x10
     490:	f1 89       	ldd	r31, Z+17	; 0x11
     492:	e0 2d       	mov	r30, r0
     494:	23 e0       	ldi	r18, 0x03	; 3
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	09 94       	ijmp

0000049a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>:
_ZN5Print5writeEPKc.part.2.constprop.35():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.h:56
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
     49a:	fc 01       	movw	r30, r24
     49c:	01 90       	ld	r0, Z+
     49e:	00 20       	and	r0, r0
     4a0:	e9 f7       	brne	.-6      	; 0x49c <Print::write(char const*) [clone .part.2] [clone .constprop.35]+0x2>
     4a2:	31 97       	sbiw	r30, 0x01	; 1
     4a4:	af 01       	movw	r20, r30
     4a6:	48 1b       	sub	r20, r24
     4a8:	59 0b       	sbc	r21, r25
     4aa:	bc 01       	movw	r22, r24
     4ac:	83 e9       	ldi	r24, 0x93	; 147
     4ae:	9c e3       	ldi	r25, 0x3C	; 60
     4b0:	58 cf       	rjmp	.-336    	; 0x362 <Print::write(unsigned char const*, unsigned int)>

000004b2 <Print::println(String const&) [clone .constprop.27]>:
_ZN5Print7printlnERK6String.constprop.27():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:127

size_t Print::println(void) {
  return write("\r\n");
}

size_t Print::println(const String &s) {
     4b2:	cf 93       	push	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.h:60
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     4b4:	df 93       	push	r29
write():
     4b6:	fc 01       	movw	r30, r24
     4b8:	44 81       	ldd	r20, Z+4	; 0x04
     4ba:	55 81       	ldd	r21, Z+5	; 0x05
     4bc:	60 81       	ld	r22, Z
     4be:	71 81       	ldd	r23, Z+1	; 0x01
     4c0:	83 e9       	ldi	r24, 0x93	; 147
     4c2:	9c e3       	ldi	r25, 0x3C	; 60
     4c4:	4e df       	rcall	.-356    	; 0x362 <Print::write(unsigned char const*, unsigned int)>
     4c6:	ec 01       	movw	r28, r24
     4c8:	85 ef       	ldi	r24, 0xF5	; 245
     4ca:	91 ea       	ldi	r25, 0xA1	; 161
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:131
  size_t n = print(s);
  n += println();
  return n;
}
     4cc:	e6 df       	rcall	.-52     	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
_ZN5Print7printlnERK6String.constprop.27():
     4ce:	8c 0f       	add	r24, r28
     4d0:	9d 1f       	adc	r25, r29
     4d2:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:133

size_t Print::println(const char c[]) {
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <Print::println(char const*) [clone .constprop.32]>:
_ZN5Print7printlnEPKc.constprop.32():
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
write():
     4dc:	de df       	rcall	.-68     	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
     4de:	ec 01       	movw	r28, r24
     4e0:	85 ef       	ldi	r24, 0xF5	; 245
     4e2:	91 ea       	ldi	r25, 0xA1	; 161
     4e4:	da df       	rcall	.-76     	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
_ZN5Print7printlnEPKc.constprop.32():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:137
  size_t n = print(c);
  n += println();
  return n;
}
     4e6:	8c 0f       	add	r24, r28
     4e8:	9d 1f       	adc	r25, r29
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <Print::print(int, int) [clone .constprop.20]>:
_ZN5Print5printEii.constprop.20():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:78

size_t Print::print(unsigned char b, int base) {
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base) {
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	a1 97       	sbiw	r28, 0x21	; 33
     50e:	cd bf       	out	0x3d, r28	; 61
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:79
  return print((long) n, base);
     510:	de bf       	out	0x3e, r29	; 62
     512:	6c 01       	movw	r12, r24
     514:	99 0f       	add	r25, r25
     516:	ee 08       	sbc	r14, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:90

size_t Print::print(long n, int base) {
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     518:	ff 08       	sbc	r15, r15
print():
     51a:	f7 fe       	sbrs	r15, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:71
size_t Print::print(const char str[]) {
  return write(str);
}

size_t Print::print(char c) {
  return write(c);
     51c:	3c c0       	rjmp	.+120    	; 0x596 <Print::print(int, int) [clone .constprop.20]+0xa6>
     51e:	6d e2       	ldi	r22, 0x2D	; 45
     520:	83 e9       	ldi	r24, 0x93	; 147
     522:	9c e3       	ldi	r25, 0x3C	; 60
     524:	be de       	rcall	.-644    	; 0x2a2 <UartClass::write(unsigned char)>
     526:	8c 01       	movw	r16, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:92
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     528:	22 27       	eor	r18, r18
     52a:	33 27       	eor	r19, r19
     52c:	a9 01       	movw	r20, r18
     52e:	2c 19       	sub	r18, r12
     530:	3d 09       	sbc	r19, r13
     532:	4e 09       	sbc	r20, r14
     534:	5f 09       	sbc	r21, r15
printNumber():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:219

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     536:	19 a2       	std	Y+33, r1	; 0x21
     538:	ce 01       	movw	r24, r28
     53a:	81 96       	adiw	r24, 0x21	; 33
     53c:	7c 01       	movw	r14, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:227
  if (base < 2) {
    base = 10;
  }

  do {
    char c = n % base;
     53e:	9a e0       	ldi	r25, 0x0A	; 10
     540:	89 2e       	mov	r8, r25
     542:	91 2c       	mov	r9, r1
     544:	a1 2c       	mov	r10, r1
     546:	b1 2c       	mov	r11, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:228
    n /= base;
     548:	ca 01       	movw	r24, r20
     54a:	b9 01       	movw	r22, r18
     54c:	a5 01       	movw	r20, r10
     54e:	94 01       	movw	r18, r8
     550:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     554:	60 5d       	subi	r22, 0xD0	; 208
     556:	f7 01       	movw	r30, r14
     558:	62 93       	st	-Z, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:231
  } while (n);
     55a:	7f 01       	movw	r14, r30
     55c:	21 15       	cp	r18, r1
     55e:	31 05       	cpc	r19, r1
     560:	41 05       	cpc	r20, r1
     562:	51 05       	cpc	r21, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.h:54
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
     564:	89 f7       	brne	.-30     	; 0x548 <Print::print(int, int) [clone .constprop.20]+0x58>
_ZN5Print5printEii.constprop.20():
     566:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
     568:	80 e0       	ldi	r24, 0x00	; 0
write():
     56a:	30 97       	sbiw	r30, 0x00	; 0
     56c:	11 f0       	breq	.+4      	; 0x572 <Print::print(int, int) [clone .constprop.20]+0x82>
     56e:	cf 01       	movw	r24, r30
     570:	94 df       	rcall	.-216    	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
print():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:93
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
     572:	80 0f       	add	r24, r16
     574:	91 1f       	adc	r25, r17
_ZN5Print5printEii.constprop.20():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:80
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base) {
  return print((long) n, base);
}
     576:	a1 96       	adiw	r28, 0x21	; 33
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	df 90       	pop	r13
     58a:	cf 90       	pop	r12
     58c:	bf 90       	pop	r11
     58e:	af 90       	pop	r10
     590:	9f 90       	pop	r9
     592:	8f 90       	pop	r8
     594:	08 95       	ret
print():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:95
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     596:	a7 01       	movw	r20, r14
     598:	96 01       	movw	r18, r12
printNumber():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:219

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     59a:	19 a2       	std	Y+33, r1	; 0x21
     59c:	8e 01       	movw	r16, r28
     59e:	0f 5d       	subi	r16, 0xDF	; 223
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:227
  if (base < 2) {
    base = 10;
  }

  do {
    char c = n % base;
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	c8 2e       	mov	r12, r24
     5a6:	d1 2c       	mov	r13, r1
     5a8:	e1 2c       	mov	r14, r1
     5aa:	f1 2c       	mov	r15, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:228
    n /= base;
     5ac:	ca 01       	movw	r24, r20
     5ae:	b9 01       	movw	r22, r18
     5b0:	a7 01       	movw	r20, r14
     5b2:	96 01       	movw	r18, r12
     5b4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     5b8:	60 5d       	subi	r22, 0xD0	; 208
     5ba:	f8 01       	movw	r30, r16
     5bc:	62 93       	st	-Z, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.cpp:231
  } while (n);
     5be:	8f 01       	movw	r16, r30
     5c0:	21 15       	cp	r18, r1
     5c2:	31 05       	cpc	r19, r1
     5c4:	41 05       	cpc	r20, r1
     5c6:	51 05       	cpc	r21, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.h:54
        return 0;
     5c8:	89 f7       	brne	.-30     	; 0x5ac <Print::print(int, int) [clone .constprop.20]+0xbc>
_ZN5Print5printEii.constprop.20():
     5ca:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
     5cc:	80 e0       	ldi	r24, 0x00	; 0
write():
     5ce:	30 97       	sbiw	r30, 0x00	; 0
     5d0:	91 f2       	breq	.-92     	; 0x576 <Print::print(int, int) [clone .constprop.20]+0x86>
     5d2:	cf 01       	movw	r24, r30
     5d4:	62 df       	rcall	.-316    	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
     5d6:	cf cf       	rjmp	.-98     	; 0x576 <Print::print(int, int) [clone .constprop.20]+0x86>

000005d8 <String::invalidate()>:
_ZN6String10invalidateEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:127
  buffer = NULL;
  capacity = 0;
  len = 0;
}

void String::invalidate(void) {
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:128
  if (buffer) {
     5de:	88 81       	ld	r24, Y
     5e0:	99 81       	ldd	r25, Y+1	; 0x01
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	11 f0       	breq	.+4      	; 0x5ea <String::invalidate()+0x12>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:129
    free(buffer);
     5e6:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <free>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:131
  }
  buffer = NULL;
     5ea:	18 82       	st	Y, r1
     5ec:	19 82       	std	Y+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:132
  capacity = len = 0;
     5ee:	1c 82       	std	Y+4, r1	; 0x04
     5f0:	1d 82       	std	Y+5, r1	; 0x05
     5f2:	1a 82       	std	Y+2, r1	; 0x02
     5f4:	1b 82       	std	Y+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:133
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <String::~String()>:
_ZN6StringD2Ev():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:114
  char buf[33];
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String() {
  free(buffer);
     5fc:	fc 01       	movw	r30, r24
     5fe:	80 81       	ld	r24, Z
     600:	91 81       	ldd	r25, Z+1	; 0x01
     602:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <free>

00000606 <pinMode>:
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     606:	86 31       	cpi	r24, 0x16	; 22
     608:	f0 f4       	brcc	.+60     	; 0x646 <pinMode+0x40>
check_valid_digital_pin():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin))
     60a:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     60c:	fc 01       	movw	r30, r24
     60e:	ee 54       	subi	r30, 0x4E	; 78
     610:	fe 45       	sbci	r31, 0x5E	; 94
     612:	20 81       	ld	r18, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:137
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
     614:	2f 3f       	cpi	r18, 0xFF	; 255
     616:	b9 f0       	breq	.+46     	; 0x646 <pinMode+0x40>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:140
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     618:	fc 01       	movw	r30, r24
     61a:	e4 56       	subi	r30, 0x64	; 100
     61c:	fe 45       	sbci	r31, 0x5E	; 94
portToPortBaseOffset():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:130
  SREG = oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
     61e:	e0 81       	ld	r30, Z
     620:	e2 95       	swap	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:131
  return port << 1;
     622:	ee 0f       	add	r30, r30
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:140
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	f4 60       	ori	r31, 0x04	; 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:141
  if (mode & 0x01) {
     628:	61 30       	cpi	r22, 0x01	; 1
     62a:	71 f4       	brne	.+28     	; 0x648 <pinMode+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:143
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     62c:	21 83       	std	Z+1, r18	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:152
      *(port_base + 5) = bit_mask;
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
     62e:	8a 57       	subi	r24, 0x7A	; 122
     630:	9e 45       	sbci	r25, 0x5E	; 94
     632:	dc 01       	movw	r26, r24
     634:	8c 91       	ld	r24, X
     636:	80 61       	ori	r24, 0x10	; 16
     638:	e8 0f       	add	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:153
  bit_mask = *port_base;
     63a:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:154
  if (mode & 2) {
     63c:	80 81       	ld	r24, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:155
    bit_mask |= 0x08;
     63e:	61 30       	cpi	r22, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:159
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
     640:	31 f0       	breq	.+12     	; 0x64e <pinMode+0x48>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:160
}
     642:	88 60       	ori	r24, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:145
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
     644:	80 83       	st	Z, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:147
    if (mode == 2) {
      *(port_base + 5) = bit_mask;
     646:	08 95       	ret
     648:	22 83       	std	Z+2, r18	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:157
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     64a:	25 83       	std	Z+5, r18	; 0x05
     64c:	f0 cf       	rjmp	.-32     	; 0x62e <pinMode+0x28>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:19
{
}

void TinyMegaI2CMaster::init()
{
  pinMode(PIN_WIRE_SDA, INPUT_PULLUP);
     64e:	87 7f       	andi	r24, 0xF7	; 247
     650:	f9 cf       	rjmp	.-14     	; 0x644 <pinMode+0x3e>

00000652 <TinyMegaI2CMaster::init() [clone .constprop.17]>:
_ZN17TinyMegaI2CMaster4initEv.constprop.17():
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	8a e0       	ldi	r24, 0x0A	; 10
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:20
  pinMode(PIN_WIRE_SCL, INPUT_PULLUP);
     656:	d7 df       	rcall	.-82     	; 0x606 <pinMode>
     658:	62 e0       	ldi	r22, 0x02	; 2
     65a:	8b e0       	ldi	r24, 0x0B	; 11
     65c:	d4 df       	rcall	.-88     	; 0x606 <pinMode>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:27
  // For ATTINY-1607-MFR, Setting SDA SCL pins with DPM would be
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
     65e:	e0 e1       	ldi	r30, 0x10	; 16
     660:	f8 e0       	ldi	r31, 0x08	; 8
     662:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	83 83       	std	Z+3, r24	; 0x03
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:29
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     668:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:30
}
     66a:	08 95       	ret

0000066c <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:470
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     66c:	8f 92       	push	r8
     66e:	9f 92       	push	r9
     670:	af 92       	push	r10
     672:	bf 92       	push	r11
     674:	ef 92       	push	r14
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	8c 01       	movw	r16, r24
     682:	4a 01       	movw	r8, r20
     684:	5b 01       	movw	r10, r22
     686:	e9 01       	movw	r28, r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:473
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     688:	dc 01       	movw	r26, r24
     68a:	50 96       	adiw	r26, 0x10	; 16
     68c:	8c 91       	ld	r24, X
     68e:	50 97       	sbiw	r26, 0x10	; 16
     690:	80 ff       	sbrs	r24, 0
     692:	07 c0       	rjmp	.+14     	; 0x6a2 <UartClass::begin(unsigned long, unsigned int)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:474
    this->end();
     694:	ed 91       	ld	r30, X+
     696:	fc 91       	ld	r31, X
     698:	02 88       	ldd	r0, Z+18	; 0x12
     69a:	f3 89       	ldd	r31, Z+19	; 0x13
     69c:	e0 2d       	mov	r30, r0
     69e:	c8 01       	movw	r24, r16
     6a0:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:478
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                         // see if they passed anything in low byte or SERIAL_CONFIG_VALID.
     6a2:	c1 11       	cpse	r28, r1
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <UartClass::begin(unsigned long, unsigned int)+0x3c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:479
    ctrlc = (uint8_t)SERIAL_8N1;            // low byte of 0 could mean they want SERIAL_5N1. Or that they thought they'd
     6a6:	c3 e0       	ldi	r28, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:481
  }
  ctrlc &= ~0x04; // Now unset that 0x04 bit if it's set, because none of the values with it set are supported. We use that to smuggle in a "this constant was specified" for 5N1
     6a8:	ec 2e       	mov	r14, r28
     6aa:	e8 94       	clt
     6ac:	e2 f8       	bld	r14, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:482
  uint8_t ctrla = (uint8_t) (options >> 8);// CTRLA will get the remains of the options high byte.
     6ae:	fd 2e       	mov	r15, r29
     6b0:	cd 2f       	mov	r28, r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:484
  uint16_t baud_setting = 0;                // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t   ctrlb = (~ctrla & 0xC0);        // Top two bits (TXEN RXEN), inverted so they match he sense in the registers.
     6b2:	d0 95       	com	r29
     6b4:	d0 7c       	andi	r29, 0xC0	; 192
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:485
  if (baud   > F_CPU / 16) {            // if this baud is too fast for non-U2X
     6b6:	b5 eb       	ldi	r27, 0xB5	; 181
     6b8:	8b 16       	cp	r8, r27
     6ba:	b4 ec       	ldi	r27, 0xC4	; 196
     6bc:	9b 06       	cpc	r9, r27
     6be:	b4 e0       	ldi	r27, 0x04	; 4
     6c0:	ab 06       	cpc	r10, r27
     6c2:	b1 04       	cpc	r11, r1
     6c4:	28 f0       	brcs	.+10     	; 0x6d0 <UartClass::begin(unsigned long, unsigned int)+0x64>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:486
        ctrlb   |= USART_RXMODE0_bm;        // set the U2X bit in what will become CTRLB
     6c6:	d2 60       	ori	r29, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:487
        baud   >>= 1;                       // And lower the baud rate by haldf
     6c8:	b6 94       	lsr	r11
     6ca:	a7 94       	ror	r10
     6cc:	97 94       	ror	r9
     6ce:	87 94       	ror	r8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:489
  }
  baud_setting = (((4 * F_CPU) / baud));  // And now the registers that baud was passed in are done.
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	7d e2       	ldi	r23, 0x2D	; 45
     6d4:	81 e3       	ldi	r24, 0x31	; 49
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	a5 01       	movw	r20, r10
     6da:	94 01       	movw	r18, r8
     6dc:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
     6e0:	20 34       	cpi	r18, 0x40	; 64
     6e2:	31 05       	cpc	r19, r1
     6e4:	10 f4       	brcc	.+4      	; 0x6ea <UartClass::begin(unsigned long, unsigned int)+0x7e>
     6e6:	20 e4       	ldi	r18, 0x40	; 64
     6e8:	30 e0       	ldi	r19, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:495
  if (baud_setting < 64)                      // so set to the maximum baud rate setting.
    baud_setting= 64;       // set the U2X bit in what will become CTRLB
  //} else if (baud < (F_CPU / 16800)) {      // Baud rate is too low
  //  baud_setting = 65535;                   // minimum baud rate.'
                                            // Baud setting done now we do the other options not in CTRLC;
  if (ctrla & 0x04) {                       // is ODME option set?
     6ea:	f2 fc       	sbrc	r15, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:496
    ctrlb |= USART_ODME_bm;                 // set the bit in what will become CTRLB
     6ec:	d8 60       	ori	r29, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:498
  }
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     6ee:	8c 2f       	mov	r24, r28
     6f0:	8b 72       	andi	r24, 0x2B	; 43
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:499
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     6f2:	d7 fd       	sbrc	r29, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:500
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     6f4:	80 68       	ori	r24, 0x80	; 128
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:502
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     6f6:	cd 2f       	mov	r28, r29
     6f8:	c8 7c       	andi	r28, 0xC8	; 200
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:503
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback, need to set state bit 2.
     6fa:	83 ff       	sbrs	r24, 3
     6fc:	07 c0       	rjmp	.+14     	; 0x70c <UartClass::begin(unsigned long, unsigned int)+0xa0>
     6fe:	c8 3c       	cpi	r28, 0xC8	; 200
     700:	29 f4       	brne	.+10     	; 0x70c <UartClass::begin(unsigned long, unsigned int)+0xa0>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:504
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
     702:	f8 01       	movw	r30, r16
     704:	90 89       	ldd	r25, Z+16	; 0x10
     706:	92 60       	ori	r25, 0x02	; 2
     708:	90 8b       	std	Z+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:505
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
     70a:	c8 ed       	ldi	r28, 0xD8	; 216
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:507
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     70c:	80 fd       	sbrc	r24, 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:508
    setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
     70e:	c1 60       	ori	r28, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:510
  }
  uint8_t oldSREG = SREG;
     710:	ff b6       	in	r15, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:511
  cli();
     712:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:512
  volatile USART_t* MyUSART = _hwserial_module;
     714:	d8 01       	movw	r26, r16
     716:	1c 96       	adiw	r26, 0x0c	; 12
     718:	ed 91       	ld	r30, X+
     71a:	fc 91       	ld	r31, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:513
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     71c:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:514
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     71e:	e7 82       	std	Z+7, r14	; 0x07
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:515
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     720:	20 87       	std	Z+8, r18	; 0x08
     722:	31 87       	std	Z+9, r19	; 0x09
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:516
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     724:	85 ff       	sbrs	r24, 5
     726:	3f c0       	rjmp	.+126    	; 0x7a6 <UartClass::begin(unsigned long, unsigned int)+0x13a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:517
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     728:	cf 77       	andi	r28, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:518
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	94 87       	std	Z+12, r25	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:519
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     72e:	9f ef       	ldi	r25, 0xFF	; 255
     730:	95 87       	std	Z+13, r25	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:523
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     732:	8f 7d       	andi	r24, 0xDF	; 223
     734:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:524
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     736:	d6 83       	std	Z+6, r29	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:525
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
     738:	f8 01       	movw	r30, r16
     73a:	27 85       	ldd	r18, Z+15	; 0x0f
     73c:	86 85       	ldd	r24, Z+14	; 0x0e
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:538
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     73e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vtable for UartClass+0x7f6026>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:537
    uint8_t muxregval    = PORTMUX.USARTROUTEA;
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
     742:	22 23       	and	r18, r18
     744:	91 f1       	breq	.+100    	; 0x7aa <UartClass::begin(unsigned long, unsigned int)+0x13e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:538
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     746:	91 60       	ori	r25, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:540
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     748:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <vtable for UartClass+0x7f6026>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:548
  #if MEGATINYCORE_SERIES == 2
    if (mux_set == 3) { // not connected to pins...
      return;           // so we are done!
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
     74c:	82 0f       	add	r24, r18
     74e:	99 27       	eor	r25, r25
     750:	99 1f       	adc	r25, r25
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	8c 01       	movw	r16, r24
     75c:	0d 52       	subi	r16, 0x2D	; 45
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:549
  if ((enmask & 0x40 && !(enmask & 0x08))) {
     75e:	1e 45       	sbci	r17, 0x5E	; 94
     760:	c6 ff       	sbrs	r28, 6
     762:	25 c0       	rjmp	.+74     	; 0x7ae <UartClass::begin(unsigned long, unsigned int)+0x142>
     764:	c3 fd       	sbrc	r28, 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:550
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
     766:	23 c0       	rjmp	.+70     	; 0x7ae <UartClass::begin(unsigned long, unsigned int)+0x142>
     768:	61 e0       	ldi	r22, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:553
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     76a:	d8 01       	movw	r26, r16
     76c:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:555
  }
  if (enmask & 0x80 && !(enmask & 0x10)) {
     76e:	4b df       	rcall	.-362    	; 0x606 <pinMode>
     770:	c7 ff       	sbrs	r28, 7
     772:	07 c0       	rjmp	.+14     	; 0x782 <UartClass::begin(unsigned long, unsigned int)+0x116>
     774:	c4 fd       	sbrc	r28, 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:557
    // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
    pinMode(muxrow[1], INPUT_PULLUP);
     776:	05 c0       	rjmp	.+10     	; 0x782 <UartClass::begin(unsigned long, unsigned int)+0x116>
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	d8 01       	movw	r26, r16
     77c:	11 96       	adiw	r26, 0x01	; 1
     77e:	8c 91       	ld	r24, X
     780:	42 df       	rcall	.-380    	; 0x606 <pinMode>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:559
  }
  if (enmask & 0x01) { // finally if RS485 mode is enabled, we make XDIR output, otherwise it can't drive the pin.
     782:	c0 ff       	sbrs	r28, 0
     784:	04 c0       	rjmp	.+8      	; 0x78e <UartClass::begin(unsigned long, unsigned int)+0x122>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:560
    pinMode(muxrow[3], OUTPUT); // make XDIR output.
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	f8 01       	movw	r30, r16
     78a:	83 81       	ldd	r24, Z+3	; 0x03
     78c:	3c df       	rcall	.-392    	; 0x606 <pinMode>
_ZN9UartClass5beginEmj():
     78e:	ff be       	out	0x3f, r15	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:526
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
  SREG = oldSREG;                             // re-enable interrupts, and we're done.
     790:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:527
}
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	bf 90       	pop	r11
     79e:	af 90       	pop	r10
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	08 95       	ret
     7a6:	14 86       	std	Z+12, r1	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:521
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     7a8:	c4 cf       	rjmp	.-120    	; 0x732 <UartClass::begin(unsigned long, unsigned int)+0xc6>
_set_pins():
     7aa:	9e 7f       	andi	r25, 0xFE	; 254
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:540

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     7ac:	cd cf       	rjmp	.-102    	; 0x748 <UartClass::begin(unsigned long, unsigned int)+0xdc>
     7ae:	2c 2f       	mov	r18, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:551
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
  if ((enmask & 0x40 && !(enmask & 0x08))) {
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     7b0:	20 75       	andi	r18, 0x50	; 80
     7b2:	f1 f2       	breq	.-68     	; 0x770 <UartClass::begin(unsigned long, unsigned int)+0x104>
     7b4:	8d 52       	subi	r24, 0x2D	; 45
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:553
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     7b6:	9e 45       	sbci	r25, 0x5E	; 94
     7b8:	62 e0       	ldi	r22, 0x02	; 2
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	d7 cf       	rjmp	.-82     	; 0x76e <UartClass::begin(unsigned long, unsigned int)+0x102>

000007c0 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
     7c0:	0f 93       	push	r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:135
  }
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size) {
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	ec 01       	movw	r28, r24
     7ca:	88 81       	ld	r24, Y
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:136
  if (buffer && capacity >= size) {
     7cc:	99 81       	ldd	r25, Y+1	; 0x01
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	59 f0       	breq	.+22     	; 0x7e8 <String::reserve(unsigned int)+0x28>
     7d2:	2a 81       	ldd	r18, Y+2	; 0x02
     7d4:	3b 81       	ldd	r19, Y+3	; 0x03
     7d6:	26 17       	cp	r18, r22
     7d8:	37 07       	cpc	r19, r23
     7da:	30 f0       	brcs	.+12     	; 0x7e8 <String::reserve(unsigned int)+0x28>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:141
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
      buffer[0] = 0;
     7de:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:146
    }
    return 1;
  }
  return 0;
}
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	08 95       	ret
     7e8:	8b 01       	movw	r16, r22
changeBuffer():
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:149

unsigned char String::changeBuffer(unsigned int maxStrLen) {
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <realloc>
     7f2:	00 97       	sbiw	r24, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:150
  if (newbuffer) {
     7f4:	59 f0       	breq	.+22     	; 0x80c <String::reserve(unsigned int)+0x4c>
     7f6:	88 83       	st	Y, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:151
    buffer = newbuffer;
     7f8:	99 83       	std	Y+1, r25	; 0x01
     7fa:	0a 83       	std	Y+2, r16	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:152
    capacity = maxStrLen;
     7fc:	1b 83       	std	Y+3, r17	; 0x03
_ZN6String7reserveEj():
     7fe:	2c 81       	ldd	r18, Y+4	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:140
unsigned char String::reserve(unsigned int size) {
  if (buffer && capacity >= size) {
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
     800:	3d 81       	ldd	r19, Y+5	; 0x05
     802:	23 2b       	or	r18, r19
     804:	59 f7       	brne	.-42     	; 0x7dc <String::reserve(unsigned int)+0x1c>
     806:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:141
      buffer[0] = 0;
     808:	10 82       	st	Z, r1
     80a:	e8 cf       	rjmp	.-48     	; 0x7dc <String::reserve(unsigned int)+0x1c>
     80c:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:145
    }
    return 1;
  }
  return 0;
     80e:	e7 cf       	rjmp	.-50     	; 0x7de <String::reserve(unsigned int)+0x1e>

00000810 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
     810:	ef 92       	push	r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:261

unsigned char String::concat(const String &s) {
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length) {
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	61 15       	cp	r22, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:263
  unsigned int newlen = len + length;
  if (!cstr) {
     81e:	71 05       	cpc	r23, r1
     820:	41 f4       	brne	.+16     	; 0x832 <String::concat(char const*, unsigned int)+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:264
    return 0;
     822:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:275
    return 0;
  }
  strcpy(buffer + len, cstr);
  len = newlen;
  return 1;
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	0f 91       	pop	r16
     82c:	ff 90       	pop	r15
     82e:	ef 90       	pop	r14
     830:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:266
unsigned char String::concat(const char *cstr, unsigned int length) {
  unsigned int newlen = len + length;
  if (!cstr) {
    return 0;
  }
  if (length == 0) {
     832:	41 15       	cp	r20, r1
     834:	51 05       	cpc	r21, r1
     836:	a9 f0       	breq	.+42     	; 0x862 <String::concat(char const*, unsigned int)+0x52>
     838:	7b 01       	movw	r14, r22
     83a:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:262
unsigned char String::concat(const String &s) {
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length) {
  unsigned int newlen = len + length;
     83c:	0c 81       	ldd	r16, Y+4	; 0x04
     83e:	1d 81       	ldd	r17, Y+5	; 0x05
     840:	04 0f       	add	r16, r20
     842:	15 1f       	adc	r17, r21
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:269
    return 0;
  }
  if (length == 0) {
    return 1;
  }
  if (!reserve(newlen)) {
     844:	b8 01       	movw	r22, r16
     846:	bc df       	rcall	.-136    	; 0x7c0 <String::reserve(unsigned int)>
     848:	88 23       	and	r24, r24
     84a:	59 f3       	breq	.-42     	; 0x822 <String::concat(char const*, unsigned int)+0x12>
     84c:	28 81       	ld	r18, Y
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:272
    return 0;
  }
  strcpy(buffer + len, cstr);
     84e:	39 81       	ldd	r19, Y+1	; 0x01
     850:	8c 81       	ldd	r24, Y+4	; 0x04
     852:	9d 81       	ldd	r25, Y+5	; 0x05
     854:	b7 01       	movw	r22, r14
     856:	82 0f       	add	r24, r18
     858:	93 1f       	adc	r25, r19
     85a:	0e 94 9a 10 	call	0x2134	; 0x2134 <strcpy>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:273
  len = newlen;
     85e:	0c 83       	std	Y+4, r16	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:267
  unsigned int newlen = len + length;
  if (!cstr) {
    return 0;
  }
  if (length == 0) {
    return 1;
     860:	1d 83       	std	Y+5, r17	; 0x05
     862:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:362
    a.invalidate();
  }
  return a;
}

StringSumHelper &operator + (const StringSumHelper &lhs, const char *cstr) {
     864:	df cf       	rjmp	.-66     	; 0x824 <String::concat(char const*, unsigned int)+0x14>

00000866 <operator+(StringSumHelper const&, char const*)>:
_ZplRK15StringSumHelperPKc():
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:364
  StringSumHelper &a = const_cast<StringSumHelper &>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) {
     86a:	ec 01       	movw	r28, r24
     86c:	fb 01       	movw	r30, r22
     86e:	01 90       	ld	r0, Z+
     870:	00 20       	and	r0, r0
     872:	e9 f7       	brne	.-6      	; 0x86e <operator+(StringSumHelper const&, char const*)+0x8>
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	af 01       	movw	r20, r30
     878:	46 1b       	sub	r20, r22
     87a:	57 0b       	sbc	r21, r23
     87c:	c9 df       	rcall	.-110    	; 0x810 <String::concat(char const*, unsigned int)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:365
    a.invalidate();
     87e:	81 11       	cpse	r24, r1
     880:	02 c0       	rjmp	.+4      	; 0x886 <operator+(StringSumHelper const&, char const*)+0x20>
     882:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:368
  }
  return a;
}
     884:	a9 de       	rcall	.-686    	; 0x5d8 <String::invalidate()>
     886:	ce 01       	movw	r24, r28
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:354

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper &operator + (const StringSumHelper &lhs, const String &rhs) {
     88c:	08 95       	ret

0000088e <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper &>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) {
     892:	ec 01       	movw	r28, r24
     894:	fb 01       	movw	r30, r22
     896:	44 81       	ldd	r20, Z+4	; 0x04
     898:	55 81       	ldd	r21, Z+5	; 0x05
     89a:	60 81       	ld	r22, Z
     89c:	71 81       	ldd	r23, Z+1	; 0x01
     89e:	b8 df       	rcall	.-144    	; 0x810 <String::concat(char const*, unsigned int)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:357
    a.invalidate();
     8a0:	81 11       	cpse	r24, r1
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <operator+(StringSumHelper const&, String const&)+0x1a>
     8a4:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:360
  }
  return a;
}
     8a6:	98 de       	rcall	.-720    	; 0x5d8 <String::invalidate()>
     8a8:	ce 01       	movw	r24, r28
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:162

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String &String::copy(const char *cstr, unsigned int length) {
     8ae:	08 95       	ret

000008b0 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
     8b0:	ef 92       	push	r14
     8b2:	ff 92       	push	r15
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
     8be:	7b 01       	movw	r14, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:163
  if (!reserve(length)) {
     8c0:	8a 01       	movw	r16, r20
     8c2:	ba 01       	movw	r22, r20
     8c4:	7d df       	rcall	.-262    	; 0x7c0 <String::reserve(unsigned int)>
     8c6:	81 11       	cpse	r24, r1
     8c8:	0a c0       	rjmp	.+20     	; 0x8de <String::copy(char const*, unsigned int)+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:164
    invalidate();
     8ca:	ce 01       	movw	r24, r28
     8cc:	85 de       	rcall	.-758    	; 0x5d8 <String::invalidate()>
     8ce:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:170
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	08 95       	ret
     8de:	0c 83       	std	Y+4, r16	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:167
String &String::copy(const char *cstr, unsigned int length) {
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     8e0:	1d 83       	std	Y+5, r17	; 0x05
     8e2:	b7 01       	movw	r22, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:168
  strcpy(buffer, cstr);
     8e4:	88 81       	ld	r24, Y
     8e6:	99 81       	ldd	r25, Y+1	; 0x01
     8e8:	0e 94 9a 10 	call	0x2134	; 0x2134 <strcpy>
     8ec:	f0 cf       	rjmp	.-32     	; 0x8ce <String::copy(char const*, unsigned int)+0x1e>

000008ee <String::String(int, unsigned char) [clone .constprop.25]>:
_ZN6StringC2Eih.constprop.25():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:73
  char buf[1 + 8 * sizeof(unsigned char)];
  utoa(value, buf, base);
  *this = buf;
}

String::String(int value, unsigned char base) {
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	62 97       	sbiw	r28, 0x12	; 18
     900:	cd bf       	out	0x3d, r28	; 61
     902:	de bf       	out	0x3e, r29	; 62
     904:	8c 01       	movw	r16, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     906:	cb 01       	movw	r24, r22
_ZN6String4initEv():
     908:	f8 01       	movw	r30, r16
     90a:	10 82       	st	Z, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     90c:	11 82       	std	Z+1, r1	; 0x01
     90e:	12 82       	std	Z+2, r1	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:124
  len = 0;
     910:	13 82       	std	Z+3, r1	; 0x03
     912:	14 82       	std	Z+4, r1	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/DxCore/tools/avr-gcc/7.3.0-atmel3.6.1-azduino4b/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     914:	15 82       	std	Z+5, r1	; 0x05
itoa():
     916:	4a e0       	ldi	r20, 0x0A	; 10
     918:	9e 01       	movw	r18, r28
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	79 01       	movw	r14, r18
     920:	b9 01       	movw	r22, r18
     922:	10 d7       	rcall	.+3616   	; 0x1744 <__itoa_ncheck>
operator=():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:235
}
#endif

String &String::operator = (const char *cstr) {
  if (cstr) {
    copy(cstr, strlen(cstr));
     924:	f7 01       	movw	r30, r14
     926:	01 90       	ld	r0, Z+
     928:	00 20       	and	r0, r0
     92a:	e9 f7       	brne	.-6      	; 0x926 <String::String(int, unsigned char) [clone .constprop.25]+0x38>
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	af 01       	movw	r20, r30
     930:	4e 19       	sub	r20, r14
     932:	5f 09       	sbc	r21, r15
     934:	b7 01       	movw	r22, r14
     936:	c8 01       	movw	r24, r16
     938:	bb df       	rcall	.-138    	; 0x8b0 <String::copy(char const*, unsigned int)>
_ZN6StringC2Eih.constprop.25():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:78
String::String(int value, unsigned char base) {
  init();
  char buf[2 + 8 * sizeof(int)];
  itoa(value, buf, base);
  *this = buf;
}
     93a:	62 96       	adiw	r28, 0x12	; 18
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	de bf       	out	0x3e, r29	; 62
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	08 95       	ret

0000094e <String::String(char const*)>:
_ZN6String4initEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     94e:	fc 01       	movw	r30, r24
     950:	10 82       	st	Z, r1
     952:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     954:	12 82       	std	Z+2, r1	; 0x02
     956:	13 82       	std	Z+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:124
  len = 0;
     958:	14 82       	std	Z+4, r1	; 0x04
     95a:	15 82       	std	Z+5, r1	; 0x05
_ZN6StringC2EPKc():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:32
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr) {
  init();
  if (cstr) {
     95c:	61 15       	cp	r22, r1
     95e:	71 05       	cpc	r23, r1
     960:	49 f0       	breq	.+18     	; 0x974 <String::String(char const*)+0x26>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:33
    copy(cstr, strlen(cstr));
     962:	fb 01       	movw	r30, r22
     964:	01 90       	ld	r0, Z+
     966:	00 20       	and	r0, r0
     968:	e9 f7       	brne	.-6      	; 0x964 <String::String(char const*)+0x16>
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	af 01       	movw	r20, r30
     96e:	46 1b       	sub	r20, r22
     970:	57 0b       	sbc	r21, r23
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:20
  btnWatchTimerStart = millis();
  startDisplayFPSMicros = micros();
  startCountMillis = millis();
}

void printStepTitle(String Title, int holdDelay) {
     972:	9e cf       	rjmp	.-196    	; 0x8b0 <String::copy(char const*, unsigned int)>
     974:	08 95       	ret

00000976 <printStepTitle(String, int) [clone .constprop.2]>:
_Z14printStepTitle6Stringi.constprop.2():
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:21
  if (!printHeader) {
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	2c 97       	sbiw	r28, 0x0c	; 12
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	de bf       	out	0x3e, r29	; 62
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:279
};

class StringSumHelper : public String {
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
     990:	20 91 90 3c 	lds	r18, 0x3C90	; 0x803c90 <printHeader>
     994:	21 11       	cpse	r18, r1
     996:	58 c0       	rjmp	.+176    	; 0xa48 <printStepTitle(String, int) [clone .constprop.2]+0xd2>
     998:	7c 01       	movw	r14, r24
_ZN15StringSumHelperC2EPKc():
     99a:	68 ef       	ldi	r22, 0xF8	; 248
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:22
    Serial.println("\n[H]" + Title + ":");
     99c:	71 ea       	ldi	r23, 0xA1	; 161
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	d5 df       	rcall	.-86     	; 0x94e <String::String(char const*)>
_Z14printStepTitle6Stringi.constprop.2():
     9a4:	b7 01       	movw	r22, r14
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	71 df       	rcall	.-286    	; 0x88e <operator+(StringSumHelper const&, String const&)>
     9ac:	60 ef       	ldi	r22, 0xF0	; 240
     9ae:	74 ea       	ldi	r23, 0xA4	; 164
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
     9b0:	5a df       	rcall	.-332    	; 0x866 <operator+(StringSumHelper const&, char const*)>
     9b2:	7f dd       	rcall	.-1282   	; 0x4b2 <Print::println(String const&) [clone .constprop.27]>
_ZN15StringSumHelperD2Ev():
     9b4:	ce 01       	movw	r24, r28
     9b6:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:23
    String underline = "-";
     9b8:	21 de       	rcall	.-958    	; 0x5fc <String::~String()>
_Z14printStepTitle6Stringi.constprop.2():
     9ba:	8e 01       	movw	r16, r28
     9bc:	09 5f       	subi	r16, 0xF9	; 249
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
     9c0:	6d ef       	ldi	r22, 0xFD	; 253
     9c2:	71 ea       	ldi	r23, 0xA1	; 161
     9c4:	c8 01       	movw	r24, r16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:24
    for (int i = 0; i < int(Title.length()); i++) {
     9c6:	c3 df       	rcall	.-122    	; 0x94e <String::String(char const*)>
     9c8:	d1 2c       	mov	r13, r1
     9ca:	c1 2c       	mov	r12, r1
     9cc:	f7 01       	movw	r30, r14
     9ce:	84 81       	ldd	r24, Z+4	; 0x04
     9d0:	95 81       	ldd	r25, Z+5	; 0x05
     9d2:	c8 16       	cp	r12, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     9d4:	d9 06       	cpc	r13, r25
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     9d6:	64 f5       	brge	.+88     	; 0xa30 <printStepTitle(String, int) [clone .constprop.2]+0xba>
_ZN6String4initEv():
     9d8:	19 82       	std	Y+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:124
  len = 0;
     9da:	1a 82       	std	Y+2, r1	; 0x02
     9dc:	1b 82       	std	Y+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:208
String &String::operator = (const String &rhs) {
  if (this == &rhs) {
    return *this;
  }

  if (rhs.buffer) {
     9de:	1c 82       	std	Y+4, r1	; 0x04
     9e0:	1d 82       	std	Y+5, r1	; 0x05
     9e2:	1e 82       	std	Y+6, r1	; 0x06
operator=():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:209
    copy(rhs.buffer, rhs.len);
     9e4:	6f 81       	ldd	r22, Y+7	; 0x07
     9e6:	78 85       	ldd	r23, Y+8	; 0x08
     9e8:	61 15       	cp	r22, r1
     9ea:	71 05       	cpc	r23, r1
     9ec:	29 f0       	breq	.+10     	; 0x9f8 <printStepTitle(String, int) [clone .constprop.2]+0x82>
     9ee:	4b 85       	ldd	r20, Y+11	; 0x0b
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:25
      underline = underline + "-";
     9f0:	5c 85       	ldd	r21, Y+12	; 0x0c
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	5c df       	rcall	.-328    	; 0x8b0 <String::copy(char const*, unsigned int)>
_Z14printStepTitle6Stringi.constprop.2():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:204
  rhs.len = 0;
}
#endif

String &String::operator = (const String &rhs) {
  if (this == &rhs) {
     9f8:	6d ef       	ldi	r22, 0xFD	; 253
     9fa:	71 ea       	ldi	r23, 0xA1	; 161
     9fc:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:208
    return *this;
  }

  if (rhs.buffer) {
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	32 df       	rcall	.-412    	; 0x866 <operator+(StringSumHelper const&, char const*)>
operator=():
     a02:	80 17       	cp	r24, r16
     a04:	91 07       	cpc	r25, r17
     a06:	51 f0       	breq	.+20     	; 0xa1c <printStepTitle(String, int) [clone .constprop.2]+0xa6>
     a08:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:209
    copy(rhs.buffer, rhs.len);
     a0a:	60 81       	ld	r22, Z
     a0c:	71 81       	ldd	r23, Z+1	; 0x01
     a0e:	61 15       	cp	r22, r1
     a10:	71 05       	cpc	r23, r1
     a12:	59 f0       	breq	.+22     	; 0xa2a <printStepTitle(String, int) [clone .constprop.2]+0xb4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:276
     a14:	44 81       	ldd	r20, Z+4	; 0x04
     a16:	55 81       	ldd	r21, Z+5	; 0x05
     a18:	c8 01       	movw	r24, r16
     a1a:	4a df       	rcall	.-364    	; 0x8b0 <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperD2Ev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:24

void printStepTitle(String Title, int holdDelay) {
  if (!printHeader) {
    Serial.println("\n[H]" + Title + ":");
    String underline = "-";
    for (int i = 0; i < int(Title.length()); i++) {
     a1c:	ce 01       	movw	r24, r28
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	ed dd       	rcall	.-1062   	; 0x5fc <String::~String()>
_Z14printStepTitle6Stringi.constprop.2():
     a22:	ff ef       	ldi	r31, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.cpp:211
  } else {
    invalidate();
     a24:	cf 1a       	sub	r12, r31
     a26:	df 0a       	sbc	r13, r31
     a28:	d1 cf       	rjmp	.-94     	; 0x9cc <printStepTitle(String, int) [clone .constprop.2]+0x56>
operator=():
     a2a:	c8 01       	movw	r24, r16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:27
      underline = underline + "-";
    }
    Serial.println(underline);
     a2c:	d5 dd       	rcall	.-1110   	; 0x5d8 <String::invalidate()>
     a2e:	f6 cf       	rjmp	.-20     	; 0xa1c <printStepTitle(String, int) [clone .constprop.2]+0xa6>
_Z14printStepTitle6Stringi.constprop.2():
     a30:	c8 01       	movw	r24, r16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:28
    printHeader = true;
     a32:	3f dd       	rcall	.-1410   	; 0x4b2 <Print::println(String const&) [clone .constprop.27]>
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 90 3c 	sts	0x3C90, r24	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:29
    delay(holdDelay);
     a3a:	60 ed       	ldi	r22, 0xD0	; 208
     a3c:	77 e0       	ldi	r23, 0x07	; 7
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	ed dc       	rcall	.-1574   	; 0x41e <delay>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:23
}

void printStepTitle(String Title, int holdDelay) {
  if (!printHeader) {
    Serial.println("\n[H]" + Title + ":");
    String underline = "-";
     a44:	c8 01       	movw	r24, r16
     a46:	da dd       	rcall	.-1100   	; 0x5fc <String::~String()>
     a48:	2c 96       	adiw	r28, 0x0c	; 12
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:31
    }
    Serial.println(underline);
    printHeader = true;
    delay(holdDelay);
  }
}
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	08 95       	ret

00000a60 <_do_dre()>:
_Z7_do_drev():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:307
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                        "\n"   // and RETI!
      ::);
     a60:	2f 93       	push	r18
     a62:	2f b7       	in	r18, 0x3f	; 63
     a64:	2f 93       	push	r18
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	af 93       	push	r26
     a6c:	bf 93       	push	r27
     a6e:	68 94       	set

00000a70 <_poll_dre>:
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	c4 85       	ldd	r28, Z+12	; 0x0c
     a78:	d8 e0       	ldi	r29, 0x08	; 8
     a7a:	94 89       	ldd	r25, Z+20	; 0x14
     a7c:	df 01       	movw	r26, r30
     a7e:	a9 0f       	add	r26, r25
     a80:	b2 1f       	adc	r27, r18
     a82:	ab 5a       	subi	r26, 0xAB	; 171
     a84:	bf 4f       	sbci	r27, 0xFF	; 255
     a86:	8c 91       	ld	r24, X
     a88:	20 e4       	ldi	r18, 0x40	; 64
     a8a:	2c 83       	std	Y+4, r18	; 0x04
     a8c:	8a 83       	std	Y+2, r24	; 0x02
     a8e:	9f 5f       	subi	r25, 0xFF	; 255
     a90:	9f 71       	andi	r25, 0x1F	; 31
     a92:	8d 81       	ldd	r24, Y+5	; 0x05
     a94:	23 89       	ldd	r18, Z+19	; 0x13
     a96:	29 13       	cpse	r18, r25
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <_done_dre_irq>
     a9a:	8f 7d       	andi	r24, 0xDF	; 223
     a9c:	8d 83       	std	Y+5, r24	; 0x05

00000a9e <_done_dre_irq>:
     a9e:	94 8b       	std	Z+20, r25	; 0x14
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	0e f0       	brts	.+2      	; 0xaa8 <_done_dre_irq+0xa>
     aa6:	fc cb       	rjmp	.-2056   	; 0x2a0 <_poll_dre_done>
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	2f 91       	pop	r18
     ab2:	2f bf       	out	0x3f, r18	; 63
     ab4:	2f 91       	pop	r18
     ab6:	ff 91       	pop	r31
     ab8:	ef 91       	pop	r30
     aba:	18 95       	reti

00000abc <_do_rxc()>:
_Z7_do_rxcv():
     abc:	2f 93       	push	r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:175
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     abe:	2f b7       	in	r18, 0x3f	; 63
     ac0:	2f 93       	push	r18
     ac2:	8f 93       	push	r24
     ac4:	9f 93       	push	r25
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
     aca:	c4 85       	ldd	r28, Z+12	; 0x0c
     acc:	d8 e0       	ldi	r29, 0x08	; 8
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	98 81       	ld	r25, Y
     ad2:	81 fd       	sbrc	r24, 1
     ad4:	0d c0       	rjmp	.+26     	; 0xaf0 <_end_rxc>
     ad6:	c1 89       	ldd	r28, Z+17	; 0x11
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	8c 0f       	add	r24, r28
     adc:	8f 73       	andi	r24, 0x3F	; 63
     ade:	22 89       	ldd	r18, Z+18	; 0x12
     ae0:	28 17       	cp	r18, r24
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <_end_rxc>
     ae4:	ce 0f       	add	r28, r30
     ae6:	df 2f       	mov	r29, r31
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	d2 1f       	adc	r29, r18
     aec:	9d 8b       	std	Y+21, r25	; 0x15
     aee:	81 8b       	std	Z+17, r24	; 0x11

00000af0 <_end_rxc>:
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	2f 91       	pop	r18
     afa:	2f bf       	out	0x3f, r18	; 63
     afc:	2f 91       	pop	r18
     afe:	ff 91       	pop	r31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART.cpp:105
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     b00:	ef 91       	pop	r30
     b02:	18 95       	reti

00000b04 <_do_txc()>:
_Z7_do_txcv():
     b04:	ff 93       	push	r31
     b06:	8f 93       	push	r24
     b08:	8f b7       	in	r24, 0x3f	; 63
     b0a:	8f 93       	push	r24
     b0c:	f8 e0       	ldi	r31, 0x08	; 8

00000b0e <_txc_flush_rx>:
     b0e:	80 81       	ld	r24, Z
     b10:	84 81       	ldd	r24, Z+4	; 0x04
     b12:	87 ff       	sbrs	r24, 7
     b14:	fc cf       	rjmp	.-8      	; 0xb0e <_txc_flush_rx>
     b16:	85 81       	ldd	r24, Z+5	; 0x05
     b18:	8f 7b       	andi	r24, 0xBF	; 191
     b1a:	80 68       	ori	r24, 0x80	; 128
     b1c:	85 83       	std	Z+5, r24	; 0x05
     b1e:	8f 91       	pop	r24
     b20:	8f bf       	out	0x3f, r24	; 63
     b22:	8f 91       	pop	r24
     b24:	ff 91       	pop	r31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART0.cpp:73
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     b26:	ef 91       	pop	r30
     b28:	18 95       	reti

00000b2a <__vector_28>:
__vector_28():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART0.cpp:76
      __asm__ __volatile__(
                "jmp _do_dre"  "\n"
                ::"z"(&Serial));
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
     b2e:	e3 e9       	ldi	r30, 0x93	; 147
     b30:	fc e3       	ldi	r31, 0x3C	; 60
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART0.cpp:55
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     b32:	96 cf       	rjmp	.-212    	; 0xa60 <_do_dre()>

00000b34 <__vector_27>:
__vector_27():
     b34:	ef 93       	push	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART0.cpp:58
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
     b36:	ff 93       	push	r31
     b38:	e3 e9       	ldi	r30, 0x93	; 147
     b3a:	fc e3       	ldi	r31, 0x3C	; 60
     b3c:	bf cf       	rjmp	.-130    	; 0xabc <_do_rxc()>

00000b3e <__vector_29>:
__vector_29():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/UART0.cpp:31
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     b3e:	ef 93       	push	r30
     b40:	e0 e0       	ldi	r30, 0x00	; 0
     b42:	e0 cf       	rjmp	.-64     	; 0xb04 <_do_txc()>

00000b44 <__vector_9>:
__vector_9():
     b44:	1f 92       	push	r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:142
#elif defined(MILLIS_USE_TIMERB1)
  ISR(TCB1_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	80 91 0e 3c 	lds	r24, 0x3C0E	; 0x803c0e <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:154
    #else
      timer_millis += 2;
    #endif
  #else
    #if !defined(MILLIS_USE_TIMERRTC) // TCA0 or TCD0
      uint32_t m = timer_millis;
     b64:	90 91 0f 3c 	lds	r25, 0x3C0F	; 0x803c0f <timer_millis+0x1>
     b68:	a0 91 10 3c 	lds	r26, 0x3C10	; 0x803c10 <timer_millis+0x2>
     b6c:	b0 91 11 3c 	lds	r27, 0x3C11	; 0x803c11 <timer_millis+0x3>
     b70:	40 91 0c 3c 	lds	r20, 0x3C0C	; 0x803c0c <__data_end>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:155
      uint16_t f = timer_fract;
     b74:	50 91 0d 3c 	lds	r21, 0x3C0D	; 0x803c0d <__data_end+0x1>
     b78:	9a 01       	movw	r18, r20
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:157
      m += MILLIS_INC;
      f += FRACT_INC;
     b7a:	20 5d       	subi	r18, 0xD0	; 208
     b7c:	3c 4f       	sbci	r19, 0xFC	; 252
     b7e:	28 3e       	cpi	r18, 0xE8	; 232
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:158
      if (f >= FRACT_MAX) {
     b80:	63 e0       	ldi	r22, 0x03	; 3
     b82:	36 07       	cpc	r19, r22
     b84:	28 f0       	brcs	.+10     	; 0xb90 <__vector_9+0x4c>
     b86:	28 5e       	subi	r18, 0xE8	; 232
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:160

        f -= FRACT_MAX;
     b88:	33 40       	sbci	r19, 0x03	; 3
     b8a:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:161
        m += 1;
     b8c:	a1 1d       	adc	r26, r1
     b8e:	b1 1d       	adc	r27, r1
     b90:	20 93 0c 3c 	sts	0x3C0C, r18	; 0x803c0c <__data_end>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:163
      }
      timer_fract = f;
     b94:	30 93 0d 3c 	sts	0x3C0D, r19	; 0x803c0d <__data_end+0x1>
     b98:	80 93 0e 3c 	sts	0x3C0E, r24	; 0x803c0e <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:164
      timer_millis = m;
     b9c:	90 93 0f 3c 	sts	0x3C0F, r25	; 0x803c0f <timer_millis+0x1>
     ba0:	a0 93 10 3c 	sts	0x3C10, r26	; 0x803c10 <timer_millis+0x2>
     ba4:	b0 93 11 3c 	sts	0x3C11, r27	; 0x803c11 <timer_millis+0x3>
     ba8:	80 91 12 3c 	lds	r24, 0x3C12	; 0x803c12 <timer_overflow_count>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:167
    #endif
    // if RTC is used as timer, we only increment the overflow count
    timer_overflow_count++;
     bac:	90 91 13 3c 	lds	r25, 0x3C13	; 0x803c13 <timer_overflow_count+0x1>
     bb0:	a0 91 14 3c 	lds	r26, 0x3C14	; 0x803c14 <timer_overflow_count+0x2>
     bb4:	b0 91 15 3c 	lds	r27, 0x3C15	; 0x803c15 <timer_overflow_count+0x3>
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	a1 1d       	adc	r26, r1
     bbc:	b1 1d       	adc	r27, r1
     bbe:	80 93 12 3c 	sts	0x3C12, r24	; 0x803c12 <timer_overflow_count>
     bc2:	90 93 13 3c 	sts	0x3C13, r25	; 0x803c13 <timer_overflow_count+0x1>
     bc6:	a0 93 14 3c 	sts	0x3C14, r26	; 0x803c14 <timer_overflow_count+0x2>
     bca:	b0 93 15 3c 	sts	0x3C15, r27	; 0x803c15 <timer_overflow_count+0x3>
     bce:	82 e0       	ldi	r24, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:171
  #endif
  /* Clear flag */
  #if defined(MILLIS_USE_TIMERA0)
    TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm;
     bd0:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <vtable for UartClass+0x7f6830>
     bd4:	bf 91       	pop	r27
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:179
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
  #endif
}
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <global constructors keyed to 65535_0_components_check.ino.cpp.o.2654>:
_GLOBAL__I_65535_0_components_check.ino.cpp.o.2654():
     bf0:	e3 e9       	ldi	r30, 0x93	; 147
     bf2:	fc e3       	ldi	r31, 0x3C	; 60
     bf4:	12 82       	std	Z+2, r1	; 0x02
     bf6:	13 82       	std	Z+3, r1	; 0x03
     bf8:	88 ee       	ldi	r24, 0xE8	; 232
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	84 83       	std	Z+4, r24	; 0x04
     c02:	95 83       	std	Z+5, r25	; 0x05
     c04:	a6 83       	std	Z+6, r26	; 0x06
     c06:	b7 83       	std	Z+7, r27	; 0x07
     c08:	8f ed       	ldi	r24, 0xDF	; 223
     c0a:	91 ea       	ldi	r25, 0xA1	; 161
     c0c:	80 83       	st	Z, r24
     c0e:	91 83       	std	Z+1, r25	; 0x01
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	98 e0       	ldi	r25, 0x08	; 8
     c14:	84 87       	std	Z+12, r24	; 0x0c
     c16:	95 87       	std	Z+13, r25	; 0x0d
     c18:	16 86       	std	Z+14, r1	; 0x0e
     c1a:	17 86       	std	Z+15, r1	; 0x0f
     c1c:	08 95       	ret

00000c1e <main>:
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	2e 97       	sbiw	r28, 0x0e	; 14
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	de bf       	out	0x3e, r29	; 62
init_clock():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1287
      #elif (F_CPU == 8000000) // 16MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
      #elif (F_CPU == 5000000) // 20MHz prescaled by 4
        /* Clock DIV4 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));
     c2c:	88 ed       	ldi	r24, 0xD8	; 216
     c2e:	93 e0       	ldi	r25, 0x03	; 3
     c30:	84 bf       	out	0x34, r24	; 52
     c32:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f5e86>
init_ADC0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1383
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      ADC0.CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  3000000    //  4 MHz /  4 = 1.0 MHz,   5 MHz /  4 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
     c36:	81 e5       	ldi	r24, 0x51	; 81
     c38:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f6427>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1390
      ADC0.CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #endif
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      ADC0.SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      ADC0.SAMPCTRL = (13);   // 15 ADC clock,s 12 us
     c3c:	8d e0       	ldi	r24, 0x0D	; 13
     c3e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <vtable for UartClass+0x7f642a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1394
    #else
      ADC0.SAMPCTRL = (10); // 12 ADC clocks, 12 us
    #endif
    ADC0.CTRLD    = ADC_INITDLY_DLY16_gc;
     c42:	80 e2       	ldi	r24, 0x20	; 32
     c44:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <vtable for UartClass+0x7f6428>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1395
    ADC0.CTRLA    = ADC_ENABLE_bm;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <vtable for UartClass+0x7f6425>
init_TCA0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1487
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     c4e:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <vtable for UartClass+0x7f6828>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1492

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     c52:	8e ef       	ldi	r24, 0xFE	; 254
     c54:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <vtable for UartClass+0x7f684b>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1493
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     c58:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <vtable for UartClass+0x7f684c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1513
  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 1000000) // and use 16...
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
     c5c:	89 e0       	ldi	r24, 0x09	; 9
     c5e:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <vtable for UartClass+0x7f6825>
init_millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1181
{
  #if defined(MILLIS_USE_TIMERNONE)
    badCall("init_millis() is only valid with millis time keeping enabled.");
  #else
    #if defined(MILLIS_USE_TIMERA0)
      TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
     c62:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <vtable for UartClass+0x7f682f>
     c66:	82 60       	ori	r24, 0x02	; 2
     c68:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <vtable for UartClass+0x7f682f>
init():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring.c:1257
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
     c6c:	78 94       	sei
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
     c6e:	78 94       	sei
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:26

bool sentSerialcheckFlag;


void setup() {
  Serial.begin(115200);
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	52 ec       	ldi	r21, 0xC2	; 194
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	83 e9       	ldi	r24, 0x93	; 147
     c7a:	9c e3       	ldi	r25, 0x3C	; 60
     c7c:	05 dc       	rcall	.-2038   	; 0x488 <UartClass::begin(unsigned long)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:30
  while (!Serial) {
    // trying to connect to serial...
  }
  delay(5000);
     c7e:	68 e8       	ldi	r22, 0x88	; 136
     c80:	73 e1       	ldi	r23, 0x13	; 19
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:14

bool printHeader;

//-- Init functions **
void initAllTheTimeTrackers() {
  pinTestModeStartMillis = millis();
     c86:	cb db       	rcall	.-2154   	; 0x41e <delay>
initAllTheTimeTrackers():
     c88:	f3 db       	rcall	.-2074   	; 0x470 <millis>
     c8a:	60 93 4a 3c 	sts	0x3C4A, r22	; 0x803c4a <pinTestModeStartMillis>
     c8e:	70 93 4b 3c 	sts	0x3C4B, r23	; 0x803c4b <pinTestModeStartMillis+0x1>
     c92:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <pinTestModeStartMillis+0x2>
     c96:	90 93 4d 3c 	sts	0x3C4D, r25	; 0x803c4d <pinTestModeStartMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:15
  btnWatchTimerStart = millis();
     c9a:	ea db       	rcall	.-2092   	; 0x470 <millis>
     c9c:	60 93 6e 3c 	sts	0x3C6E, r22	; 0x803c6e <btnWatchTimerStart>
     ca0:	70 93 6f 3c 	sts	0x3C6F, r23	; 0x803c6f <btnWatchTimerStart+0x1>
     ca4:	80 93 70 3c 	sts	0x3C70, r24	; 0x803c70 <btnWatchTimerStart+0x2>
     ca8:	90 93 71 3c 	sts	0x3C71, r25	; 0x803c71 <btnWatchTimerStart+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:16
  startDisplayFPSMicros = micros();
     cac:	89 db       	rcall	.-2286   	; 0x3c0 <micros>
     cae:	60 93 7a 3c 	sts	0x3C7A, r22	; 0x803c7a <startDisplayFPSMicros>
     cb2:	70 93 7b 3c 	sts	0x3C7B, r23	; 0x803c7b <startDisplayFPSMicros+0x1>
     cb6:	80 93 7c 3c 	sts	0x3C7C, r24	; 0x803c7c <startDisplayFPSMicros+0x2>
     cba:	90 93 7d 3c 	sts	0x3C7D, r25	; 0x803c7d <startDisplayFPSMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/extraUtils.h:17
  startCountMillis = millis();
     cbe:	d8 db       	rcall	.-2128   	; 0x470 <millis>
     cc0:	60 93 82 3c 	sts	0x3C82, r22	; 0x803c82 <startCountMillis>
     cc4:	70 93 83 3c 	sts	0x3C83, r23	; 0x803c83 <startCountMillis+0x1>
     cc8:	80 93 84 3c 	sts	0x3C84, r24	; 0x803c84 <startCountMillis+0x2>
     ccc:	90 93 85 3c 	sts	0x3C85, r25	; 0x803c85 <startCountMillis+0x3>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:238

      //  For Port C (After Port A & Port B)
      if (PORTA_checked && PORTB_checked && !PORTC_checked) {

        byte portAddrMask = 0b00000001;
        portAddrMask <<= pcc;
     cd0:	01 e0       	ldi	r16, 0x01	; 1
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	44 24       	eor	r4, r4
     cd6:	43 94       	inc	r4
     cd8:	51 2c       	mov	r5, r1
setupDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:51
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
     cda:	8e ef       	ldi	r24, 0xFE	; 254
     cdc:	d8 2e       	mov	r13, r24
showOnDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:96
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
     cde:	91 e1       	ldi	r25, 0x11	; 17
     ce0:	69 2e       	mov	r6, r25
     ce2:	71 2c       	mov	r7, r1
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:37
}


void loop() {
  /* --- 0. Send Serial check flag = 1 ---*/
  if (!sentSerialcheckFlag) {
     ce4:	80 91 8f 3c 	lds	r24, 0x3C8F	; 0x803c8f <sentSerialcheckFlag>
     ce8:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:38
    Serial.println("SERIAL:1");
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <main+0xda>
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	91 ea       	ldi	r25, 0xA1	; 161
     cf0:	f3 db       	rcall	.-2074   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:39
    sentSerialcheckFlag = true;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 93 8f 3c 	sts	0x3C8F, r24	; 0x803c8f <sentSerialcheckFlag>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:43
  }

  /* ----  1. Check ATTINY's Internal digital IO Pin Status. ---- */
  printStepTitle("CHECKING ATTINY's INT IOs", 2000);
     cf8:	68 e0       	ldi	r22, 0x08	; 8
     cfa:	72 ea       	ldi	r23, 0xA2	; 162
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	26 de       	rcall	.-948    	; 0x94e <String::String(char const*)>
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	37 de       	rcall	.-914    	; 0x976 <printStepTitle(String, int) [clone .constprop.2]>
     d08:	ce 01       	movw	r24, r28
     d0a:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:45

  if (!pinExaminationFinished) {
     d0c:	77 dc       	rcall	.-1810   	; 0x5fc <String::~String()>
     d0e:	80 91 8e 3c 	lds	r24, 0x3C8E	; 0x803c8e <pinExaminationFinished>
     d12:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:247
        cli();
        PORTC.DIRSET = portAddrMask;
        PORTC.OUTSET = portAddrMask;
        // Set as INPUT and read STATE
        PORTC.DIRCLR = portAddrMask;
        firstState = PORTC.IN & portAddrMask;
     d14:	39 c1       	rjmp	.+626    	; 0xf88 <main+0x36a>
examinePins():
     d16:	cc 24       	eor	r12, r12
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:69
boolean isSerialPin;


void examinePins() {
  while (true) {
    pinTestModeCurrMillis = millis();
     d18:	c3 94       	inc	r12
     d1a:	aa db       	rcall	.-2220   	; 0x470 <millis>
     d1c:	60 93 4e 3c 	sts	0x3C4E, r22	; 0x803c4e <pinTestModeCurrMillis>
     d20:	70 93 4f 3c 	sts	0x3C4F, r23	; 0x803c4f <pinTestModeCurrMillis+0x1>
     d24:	80 93 50 3c 	sts	0x3C50, r24	; 0x803c50 <pinTestModeCurrMillis+0x2>
     d28:	90 93 51 3c 	sts	0x3C51, r25	; 0x803c51 <pinTestModeCurrMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:71

    if (pinTestModeCurrMillis - pinTestModeStartMillis >= testModeProgressPeriod) {
     d2c:	80 90 4a 3c 	lds	r8, 0x3C4A	; 0x803c4a <pinTestModeStartMillis>
     d30:	90 90 4b 3c 	lds	r9, 0x3C4B	; 0x803c4b <pinTestModeStartMillis+0x1>
     d34:	a0 90 4c 3c 	lds	r10, 0x3C4C	; 0x803c4c <pinTestModeStartMillis+0x2>
     d38:	b0 90 4d 3c 	lds	r11, 0x3C4D	; 0x803c4d <pinTestModeStartMillis+0x3>
     d3c:	68 19       	sub	r22, r8
     d3e:	79 09       	sbc	r23, r9
     d40:	8a 09       	sbc	r24, r10
     d42:	9b 09       	sbc	r25, r11
     d44:	64 36       	cpi	r22, 0x64	; 100
     d46:	71 05       	cpc	r23, r1
     d48:	81 05       	cpc	r24, r1
     d4a:	91 05       	cpc	r25, r1
     d4c:	30 f3       	brcs	.-52     	; 0xd1a <main+0xfc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:74

      //---  For Port A (Before Port B & C) ---//
      if (!PORTA_checked && !PORTB_checked && !PORTC_checked) {
     d4e:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <PORTA_checked>
     d52:	81 11       	cpse	r24, r1
     d54:	50 c0       	rjmp	.+160    	; 0xdf6 <main+0x1d8>
     d56:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <PORTB_checked>
     d5a:	81 11       	cpse	r24, r1
     d5c:	47 c0       	rjmp	.+142    	; 0xdec <main+0x1ce>
     d5e:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <PORTC_checked>
     d62:	81 11       	cpse	r24, r1
     d64:	43 c0       	rjmp	.+134    	; 0xdec <main+0x1ce>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:81
        //      Serial.print(pac);
        //      Serial.print(" : ");

        // byte portAddrMask = (0b00000001 << pac);
        byte portAddrMask = 0b00000001;
        portAddrMask <<= pac;
     d66:	c8 01       	movw	r24, r16
     d68:	00 90 00 3c 	lds	r0, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <main+0x154>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <main+0x150>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:85
        // printBinary(portAddrMask);

        // Set as OUTPUT & HIGH
        cli();
     d76:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:86
        PORTA.DIRSET = portAddrMask;
     d78:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <vtable for UartClass+0x7f6226>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:87
        PORTA.OUTSET = portAddrMask;
     d7c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <vtable for UartClass+0x7f622a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:89
        // Set as INPUT and read STATE
        PORTA.DIRCLR = portAddrMask;
     d80:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <vtable for UartClass+0x7f6227>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:90
        firstState = PORTA.IN & portAddrMask;
     d84:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <vtable for UartClass+0x7f622d>
     d88:	28 23       	and	r18, r24
     d8a:	31 e0       	ldi	r19, 0x01	; 1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <main+0x172>
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	30 93 46 3c 	sts	0x3C46, r19	; 0x803c46 <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:93
        //      Serial.println(firstState);
        // Set as OUTPUT & LOW
        PORTA.DIRSET = portAddrMask;
     d94:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <vtable for UartClass+0x7f6226>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:94
        PORTA.OUTCLR = portAddrMask;
     d98:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f622b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:96
        // Set as INPUT and read STATE, again
        PORTA.DIRCLR = portAddrMask;
     d9c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <vtable for UartClass+0x7f6227>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:97
        secondState = PORTA.IN & portAddrMask;
     da0:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <vtable for UartClass+0x7f622d>
     da4:	89 23       	and	r24, r25
     da6:	91 e0       	ldi	r25, 0x01	; 1
     da8:	09 f4       	brne	.+2      	; 0xdac <main+0x18e>
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	90 93 45 3c 	sts	0x3C45, r25	; 0x803c45 <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:105
        // [DEBUG] [TEST] **Simulation for non-working pins
        //        if (pac == 4 || pac == 6) {
        //          secondState = HIGH;
        //        }
        //------------------------------------------------//
        sei();
     db0:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:110

        //      Serial.print(String(firstState) + " " + String(secondState));

        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
     db2:	20 91 46 3c 	lds	r18, 0x3C46	; 0x803c46 <firstState>
     db6:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
     dba:	90 91 01 3c 	lds	r25, 0x3C01	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
     dbe:	fc 01       	movw	r30, r24
     dc0:	ee 0f       	add	r30, r30
     dc2:	ff 1f       	adc	r31, r31
     dc4:	eb 5c       	subi	r30, 0xCB	; 203
     dc6:	f3 4c       	sbci	r31, 0xC3	; 195
     dc8:	22 23       	and	r18, r18
     dca:	09 f4       	brne	.+2      	; 0xdce <main+0x1b0>
     dcc:	05 c1       	rjmp	.+522    	; 0xfd8 <main+0x3ba>
     dce:	20 91 45 3c 	lds	r18, 0x3C45	; 0x803c45 <secondState>
     dd2:	21 11       	cpse	r18, r1
     dd4:	01 c1       	rjmp	.+514    	; 0xfd8 <main+0x3ba>
     dd6:	00 83       	st	Z, r16
     dd8:	11 83       	std	Z+1, r17	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:114
        else portAStatus[pac - 1] = 0;


        pac++;
     dda:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:115
        if (pac > int(sizeof(portAStatus) / 2)) {
     ddc:	88 30       	cpi	r24, 0x08	; 8
     dde:	91 05       	cpc	r25, r1
     de0:	0c f0       	brlt	.+2      	; 0xde4 <main+0x1c6>
     de2:	fd c0       	rjmp	.+506    	; 0xfde <main+0x3c0>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:114
        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
        else portAStatus[pac - 1] = 0;


        pac++;
     de4:	80 93 00 3c 	sts	0x3C00, r24	; 0x803c00 <__DATA_REGION_ORIGIN__>
     de8:	90 93 01 3c 	sts	0x3C01, r25	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:152
          }
        }
      }

      //---  For Port B (After Port A) ---//
      if (PORTA_checked && !PORTB_checked && !PORTC_checked) {
     dec:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <PORTA_checked>
     df0:	88 23       	and	r24, r24
     df2:	09 f4       	brne	.+2      	; 0xdf6 <main+0x1d8>
     df4:	61 c0       	rjmp	.+194    	; 0xeb8 <main+0x29a>
     df6:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <PORTB_checked>
     dfa:	81 11       	cpse	r24, r1
     dfc:	62 c0       	rjmp	.+196    	; 0xec2 <main+0x2a4>
     dfe:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <PORTC_checked>
     e02:	81 11       	cpse	r24, r1
     e04:	5e c0       	rjmp	.+188    	; 0xec2 <main+0x2a4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:157
        byte portAddrMask = 0b00000001; // pbc staring at 4

        // PB2 and PB3 are serial, assuming they are working

        if (pbc == 2 || pbc == 3) {
     e06:	80 91 35 3c 	lds	r24, 0x3C35	; 0x803c35 <pbc>
     e0a:	90 91 36 3c 	lds	r25, 0x3C36	; 0x803c36 <pbc+0x1>
     e0e:	9c 01       	movw	r18, r24
     e10:	22 50       	subi	r18, 0x02	; 2
     e12:	31 09       	sbc	r19, r1
     e14:	22 30       	cpi	r18, 0x02	; 2
     e16:	31 05       	cpc	r19, r1
     e18:	08 f0       	brcs	.+2      	; 0xe1c <main+0x1fe>
     e1a:	33 c1       	rjmp	.+614    	; 0x1082 <main+0x464>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:158
          isSerialPin = true;
     e1c:	c0 92 34 3c 	sts	0x3C34, r12	; 0x803c34 <isSerialPin>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:162
          //  Serial.println("Not bitshifting, it is serial pin!");

          // Just for filling in hardcoded data for later
          firstState = LOW;
     e20:	10 92 46 3c 	sts	0x3C46, r1	; 0x803c46 <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:163
          secondState = LOW;
     e24:	10 92 45 3c 	sts	0x3C45, r1	; 0x803c45 <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:168
        } else {
          isSerialPin = false;
        }

        if (!isSerialPin) {
     e28:	20 91 34 3c 	lds	r18, 0x3C34	; 0x803c34 <isSerialPin>
     e2c:	21 11       	cpse	r18, r1
     e2e:	25 c0       	rjmp	.+74     	; 0xe7a <main+0x25c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:170
          // bit shift and iterate through PORT
          portAddrMask <<= pbc;
     e30:	a8 01       	movw	r20, r16
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <main+0x21a>
     e34:	44 0f       	add	r20, r20
     e36:	55 1f       	adc	r21, r21
     e38:	8a 95       	dec	r24
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <main+0x216>
     e3c:	ca 01       	movw	r24, r20
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:174
          //        printBinary(portAddrMask);

          // Set as OUTPUT & HIGH
          cli();
     e3e:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:175
          PORTB.DIRSET = portAddrMask;
     e40:	40 93 21 04 	sts	0x0421, r20	; 0x800421 <vtable for UartClass+0x7f6246>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:176
          PORTB.OUTSET = portAddrMask;
     e44:	40 93 25 04 	sts	0x0425, r20	; 0x800425 <vtable for UartClass+0x7f624a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:178
          // Set as INPUT and read STATE
          PORTB.DIRCLR = portAddrMask;
     e48:	40 93 22 04 	sts	0x0422, r20	; 0x800422 <vtable for UartClass+0x7f6247>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:179
          firstState = PORTB.IN & portAddrMask;
     e4c:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <vtable for UartClass+0x7f624d>
     e50:	24 23       	and	r18, r20
     e52:	31 e0       	ldi	r19, 0x01	; 1
     e54:	09 f4       	brne	.+2      	; 0xe58 <main+0x23a>
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	30 93 46 3c 	sts	0x3C46, r19	; 0x803c46 <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:182
          //        Serial.println(firstState);
          // Set as OUTPUT & LOW
          PORTB.DIRSET = portAddrMask;
     e5c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <vtable for UartClass+0x7f6246>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:183
          PORTB.OUTCLR = portAddrMask;
     e60:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <vtable for UartClass+0x7f624b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:185
          // Set as INPUT and read STATE, again!
          PORTB.DIRCLR = portAddrMask;
     e64:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <vtable for UartClass+0x7f6247>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:186
          secondState = PORTB.IN & portAddrMask;
     e68:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <vtable for UartClass+0x7f624d>
     e6c:	89 23       	and	r24, r25
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	09 f4       	brne	.+2      	; 0xe74 <main+0x256>
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 45 3c 	sts	0x3C45, r25	; 0x803c45 <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:194
          // [DEBUG] [TEST] **Simulation for non-working pins
          //          if (pbc == 5) {
          //            secondState = HIGH;
          //          }
          //------------------------------------------------//
          sei();
     e78:	78 94       	sei
     e7a:	20 91 35 3c 	lds	r18, 0x3C35	; 0x803c35 <pbc>
     e7e:	30 91 36 3c 	lds	r19, 0x3C36	; 0x803c36 <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:199
        }


        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
     e82:	40 91 46 3c 	lds	r20, 0x3C46	; 0x803c46 <firstState>
     e86:	c9 01       	movw	r24, r18
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	8c 5d       	subi	r24, 0xDC	; 220
     e8e:	93 4c       	sbci	r25, 0xC3	; 195
     e90:	44 23       	and	r20, r20
     e92:	09 f4       	brne	.+2      	; 0xe96 <main+0x278>
     e94:	f9 c0       	rjmp	.+498    	; 0x1088 <main+0x46a>
     e96:	40 91 45 3c 	lds	r20, 0x3C45	; 0x803c45 <secondState>
     e9a:	41 11       	cpse	r20, r1
     e9c:	f5 c0       	rjmp	.+490    	; 0x1088 <main+0x46a>
     e9e:	dc 01       	movw	r26, r24
     ea0:	0d 93       	st	X+, r16
     ea2:	1c 93       	st	X, r17
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:203
        else portBStatus[pbc] = 0;


        pbc++;
     ea4:	2f 5f       	subi	r18, 0xFF	; 255
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:204
        if (pbc > int(sizeof(portBStatus) / 2)) {
     ea8:	29 30       	cpi	r18, 0x09	; 9
     eaa:	31 05       	cpc	r19, r1
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <main+0x292>
     eae:	f0 c0       	rjmp	.+480    	; 0x1090 <main+0x472>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:203
        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
        else portBStatus[pbc] = 0;


        pbc++;
     eb0:	20 93 35 3c 	sts	0x3C35, r18	; 0x803c35 <pbc>
     eb4:	30 93 36 3c 	sts	0x3C36, r19	; 0x803c36 <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:235
          }
        }
      }

      //  For Port C (After Port A & Port B)
      if (PORTA_checked && PORTB_checked && !PORTC_checked) {
     eb8:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <PORTA_checked>
     ebc:	88 23       	and	r24, r24
     ebe:	09 f4       	brne	.+2      	; 0xec2 <main+0x2a4>
     ec0:	92 c1       	rjmp	.+804    	; 0x11e6 <main+0x5c8>
     ec2:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <PORTB_checked>
     ec6:	88 23       	and	r24, r24
     ec8:	09 f4       	brne	.+2      	; 0xecc <main+0x2ae>
     eca:	4c c0       	rjmp	.+152    	; 0xf64 <main+0x346>
     ecc:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <PORTC_checked>
     ed0:	81 11       	cpse	r24, r1
     ed2:	48 c0       	rjmp	.+144    	; 0xf64 <main+0x346>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:238

        byte portAddrMask = 0b00000001;
        portAddrMask <<= pcc;
     ed4:	c8 01       	movw	r24, r16
     ed6:	00 90 22 3c 	lds	r0, 0x3C22	; 0x803c22 <pcc>
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <main+0x2c2>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <main+0x2be>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:242
        //      printBinary(portAddrMask);

        // Set as OUTPUT & HIGH
        cli();
     ee4:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:243
        PORTC.DIRSET = portAddrMask;
     ee6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f6266>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:244
        PORTC.OUTSET = portAddrMask;
     eea:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <vtable for UartClass+0x7f626a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:246
        // Set as INPUT and read STATE
        PORTC.DIRCLR = portAddrMask;
     eee:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <vtable for UartClass+0x7f6267>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:247
        firstState = PORTC.IN & portAddrMask;
     ef2:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <vtable for UartClass+0x7f626d>
     ef6:	28 23       	and	r18, r24
     ef8:	31 e0       	ldi	r19, 0x01	; 1
     efa:	09 f4       	brne	.+2      	; 0xefe <main+0x2e0>
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	30 93 46 3c 	sts	0x3C46, r19	; 0x803c46 <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:250
        //      Serial.println(firstState);
        // Set as OUTPUT & LOW
        PORTC.DIRSET = portAddrMask;
     f02:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f6266>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:251
        PORTC.OUTCLR = portAddrMask;
     f06:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f626b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:253
        // Set as INPUT and read STATE, again
        PORTC.DIRCLR = portAddrMask;
     f0a:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <vtable for UartClass+0x7f6267>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:254
        secondState = PORTC.IN & portAddrMask;
     f0e:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <vtable for UartClass+0x7f626d>
     f12:	89 23       	and	r24, r25
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	09 f4       	brne	.+2      	; 0xf1a <main+0x2fc>
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	90 93 45 3c 	sts	0x3C45, r25	; 0x803c45 <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:262
        // [DEBUG] [TEST] **Simulation for non-working pins
        //        if (pcc == 4) {
        //          secondState = HIGH;
        //        }
        //------------------------------------------------//
        sei();
     f1e:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:265


        if (firstState == HIGH && secondState == LOW) {
     f20:	20 91 46 3c 	lds	r18, 0x3C46	; 0x803c46 <firstState>
     f24:	80 91 22 3c 	lds	r24, 0x3C22	; 0x803c22 <pcc>
     f28:	90 91 23 3c 	lds	r25, 0x3C23	; 0x803c23 <pcc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:269
          //  Means that particular pin state is changing and working
          //  Mark that pin as "working: 1"
          //  Serial.println("Working!");
          portCStatus[pcc] = 1;
     f2c:	fc 01       	movw	r30, r24
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ea 5e       	subi	r30, 0xEA	; 234
     f34:	f3 4c       	sbci	r31, 0xC3	; 195
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:265
        //        }
        //------------------------------------------------//
        sei();


        if (firstState == HIGH && secondState == LOW) {
     f36:	22 23       	and	r18, r18
     f38:	09 f4       	brne	.+2      	; 0xf3c <main+0x31e>
     f3a:	00 c1       	rjmp	.+512    	; 0x113c <main+0x51e>
     f3c:	20 91 45 3c 	lds	r18, 0x3C45	; 0x803c45 <secondState>
     f40:	21 11       	cpse	r18, r1
     f42:	fc c0       	rjmp	.+504    	; 0x113c <main+0x51e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:269
          //  Means that particular pin state is changing and working
          //  Mark that pin as "working: 1"
          //  Serial.println("Working!");
          portCStatus[pcc] = 1;
     f44:	00 83       	st	Z, r16
     f46:	11 83       	std	Z+1, r17	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:276
          //  Mark that pin as "not-working: 0"
          //  Serial.println("Not Working!");
          portCStatus[pcc] = 0;
        }

        pcc++;
     f48:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:277
        if (pcc > 5) {
     f4a:	86 30       	cpi	r24, 0x06	; 6
     f4c:	91 05       	cpc	r25, r1
     f4e:	0c f0       	brlt	.+2      	; 0xf52 <main+0x334>
     f50:	f8 c0       	rjmp	.+496    	; 0x1142 <main+0x524>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:276
          //  Mark that pin as "not-working: 0"
          //  Serial.println("Not Working!");
          portCStatus[pcc] = 0;
        }

        pcc++;
     f52:	80 93 22 3c 	sts	0x3C22, r24	; 0x803c22 <pcc>
     f56:	90 93 23 3c 	sts	0x3C23, r25	; 0x803c23 <pcc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:306
        }
      }



      if (PORTA_checked && PORTB_checked && PORTC_checked) {
     f5a:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <PORTA_checked>
     f5e:	88 23       	and	r24, r24
     f60:	09 f4       	brne	.+2      	; 0xf64 <main+0x346>
     f62:	41 c1       	rjmp	.+642    	; 0x11e6 <main+0x5c8>
     f64:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <PORTB_checked>
     f68:	88 23       	and	r24, r24
     f6a:	09 f4       	brne	.+2      	; 0xf6e <main+0x350>
     f6c:	3c c1       	rjmp	.+632    	; 0x11e6 <main+0x5c8>
     f6e:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <PORTC_checked>
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <main+0x35a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:307
        Serial.println("\nATTINY Digital IO Test finished!\n");
     f76:	37 c1       	rjmp	.+622    	; 0x11e6 <main+0x5c8>
     f78:	8f e9       	ldi	r24, 0x9F	; 159
     f7a:	93 ea       	ldi	r25, 0xA3	; 163
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:48
    examinePins();

    pinExaminationFinished = true;
     f7c:	ad da       	rcall	.-2726   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
loop():
     f7e:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:49
    printHeader = false;
     f80:	80 93 8e 3c 	sts	0x3C8E, r24	; 0x803c8e <pinExaminationFinished>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:54
  }


  /* ----  2. Check rtc clock addr. ---- */
  printStepTitle("CHECKING RTC's AVAILABILITY", 2000);
     f84:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
     f88:	62 ec       	ldi	r22, 0xC2	; 194
     f8a:	73 ea       	ldi	r23, 0xA3	; 163
     f8c:	ce 01       	movw	r24, r28
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	de dc       	rcall	.-1604   	; 0x94e <String::String(char const*)>
     f92:	ce 01       	movw	r24, r28
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	ef dc       	rcall	.-1570   	; 0x976 <printStepTitle(String, int) [clone .constprop.2]>
     f98:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:56

  if (pinExaminationFinished && !rtcAvailabilityChecked) {
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	2f db       	rcall	.-2466   	; 0x5fc <String::~String()>
     f9e:	80 91 8e 3c 	lds	r24, 0x3C8E	; 0x803c8e <pinExaminationFinished>
     fa2:	88 23       	and	r24, r24
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <main+0x38a>
     fa6:	45 c1       	rjmp	.+650    	; 0x1232 <main+0x614>
     fa8:	80 91 8d 3c 	lds	r24, 0x3C8D	; 0x803c8d <rtcAvailabilityChecked>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:67
{
}

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();
     fac:	81 11       	cpse	r24, r1
     fae:	41 c1       	rjmp	.+642    	; 0x1232 <main+0x614>
begin():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     fb0:	50 db       	rcall	.-2400   	; 0x652 <TinyMegaI2CMaster::init() [clone .constprop.17]>
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	97 d8       	rcall	.-3794   	; 0xe6 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
     fb8:	81 11       	cpse	r24, r1
     fba:	2a c1       	rjmp	.+596    	; 0x1210 <main+0x5f2>
reportRTCAvailability():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:22
bool rtcAvailabilityChecked;
bool rtcReadabilityChecked;

void reportRTCAvailability() {
  while (!rtc.begin()) {
    if (checking_rtc_counter < 20) {
     fbc:	80 91 52 3c 	lds	r24, 0x3C52	; 0x803c52 <checking_rtc_counter>
     fc0:	90 91 53 3c 	lds	r25, 0x3C53	; 0x803c53 <checking_rtc_counter+0x1>
     fc4:	84 31       	cpi	r24, 0x14	; 20
     fc6:	91 05       	cpc	r25, r1
     fc8:	0c f0       	brlt	.+2      	; 0xfcc <main+0x3ae>
     fca:	1e c1       	rjmp	.+572    	; 0x1208 <main+0x5ea>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:23
      checking_rtc_counter += 1;
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	80 93 52 3c 	sts	0x3C52, r24	; 0x803c52 <checking_rtc_counter>
     fd2:	90 93 53 3c 	sts	0x3C53, r25	; 0x803c53 <checking_rtc_counter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:111

        //      Serial.print(String(firstState) + " " + String(secondState));

        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
        else portAStatus[pac - 1] = 0;
     fd6:	ec cf       	rjmp	.-40     	; 0xfb0 <main+0x392>
examinePins():
     fd8:	10 82       	st	Z, r1
     fda:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:116


        pac++;
        if (pac > int(sizeof(portAStatus) / 2)) {
          pac = 1;
     fdc:	fe ce       	rjmp	.-516    	; 0xdda <main+0x1bc>
     fde:	40 92 00 3c 	sts	0x3C00, r4	; 0x803c00 <__DATA_REGION_ORIGIN__>
     fe2:	50 92 01 3c 	sts	0x3C01, r5	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:117
          PORTA_checked = true;
     fe6:	c0 92 49 3c 	sts	0x3C49, r12	; 0x803c49 <PORTA_checked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:118
          Serial.println("PORT-A IO check finished!");
     fea:	82 e2       	ldi	r24, 0x22	; 34
     fec:	92 ea       	ldi	r25, 0xA2	; 162
     fee:	74 da       	rcall	.-2840   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
     ff0:	f7 e3       	ldi	r31, 0x37	; 55
     ff2:	8f 2e       	mov	r8, r31
     ff4:	fc e3       	ldi	r31, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:120

          int total_working_pins = 0;
     ff6:	9f 2e       	mov	r9, r31
main():
     ff8:	f1 2c       	mov	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:126

          // ** [BUG] [TBD] - size fo array is 14 , should be 7 ??
          //    Serial.print("Size of array: ");
          //    Serial.println(sizeof(portAStatus));
          // ** Duct tape solution
          for (int i = 0; i < int(sizeof(portAStatus) / 2); i++) {
     ffa:	e1 2c       	mov	r14, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:132
            //          Serial.print("PA");
            //          Serial.print(i + 1);
            //          Serial.print(": ");
            //          Serial.println(portAStatus[i]);

            if (portAStatus[i] == 0) {
     ffc:	b1 2c       	mov	r11, r1
     ffe:	a1 2c       	mov	r10, r1
examinePins():
    1000:	d4 01       	movw	r26, r8
    1002:	8d 91       	ld	r24, X+
    1004:	9d 91       	ld	r25, X+
    1006:	4d 01       	movw	r8, r26
    1008:	bf ef       	ldi	r27, 0xFF	; 255
    100a:	ab 1a       	sub	r10, r27
    100c:	bb 0a       	sbc	r11, r27
    100e:	89 2b       	or	r24, r25
    1010:	b9 f4       	brne	.+46     	; 0x1040 <main+0x422>
write():
    1012:	8c e3       	ldi	r24, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:134
              Serial.print("[ERR] Internally, PA");
              Serial.print(i + 1);
    1014:	92 ea       	ldi	r25, 0xA2	; 162
    1016:	41 da       	rcall	.-2942   	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
examinePins():
    1018:	c5 01       	movw	r24, r10
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:135
              Serial.println(" not working!");
    101a:	6a da       	rcall	.-2860   	; 0x4f0 <Print::print(int, int) [clone .constprop.20]>
    101c:	81 e5       	ldi	r24, 0x51	; 81
    101e:	92 ea       	ldi	r25, 0xA2	; 162
    1020:	5b da       	rcall	.-2890   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:126

          // ** [BUG] [TBD] - size fo array is 14 , should be 7 ??
          //    Serial.print("Size of array: ");
          //    Serial.println(sizeof(portAStatus));
          // ** Duct tape solution
          for (int i = 0; i < int(sizeof(portAStatus) / 2); i++) {
    1022:	f7 e0       	ldi	r31, 0x07	; 7
    1024:	af 16       	cp	r10, r31
    1026:	b1 04       	cpc	r11, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:141
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portAStatus) / 2) {
    1028:	59 f7       	brne	.-42     	; 0x1000 <main+0x3e2>
    102a:	27 e0       	ldi	r18, 0x07	; 7
    102c:	e2 16       	cp	r14, r18
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:142
            Serial.println("[/] In PORT A (PA1-PA7),");
    102e:	f1 04       	cpc	r15, r1
    1030:	59 f4       	brne	.+22     	; 0x1048 <main+0x42a>
    1032:	8f e5       	ldi	r24, 0x5F	; 95
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:143
            Serial.println("All pins are working!\n");
    1034:	92 ea       	ldi	r25, 0xA2	; 162
    1036:	50 da       	rcall	.-2912   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    1038:	88 e7       	ldi	r24, 0x78	; 120
    103a:	92 ea       	ldi	r25, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:137
            if (portAStatus[i] == 0) {
              Serial.print("[ERR] Internally, PA");
              Serial.print(i + 1);
              Serial.println(" not working!");
            } else {
              total_working_pins += 1;
    103c:	4d da       	rcall	.-2918   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    103e:	d6 ce       	rjmp	.-596    	; 0xdec <main+0x1ce>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:145

          if (total_working_pins == sizeof(portAStatus) / 2) {
            Serial.println("[/] In PORT A (PA1-PA7),");
            Serial.println("All pins are working!\n");
          } else {
            Serial.println("[X] In PORT A (PA1-PA7), a total");
    1040:	ef ef       	ldi	r30, 0xFF	; 255
    1042:	ee 1a       	sub	r14, r30
    1044:	fe 0a       	sbc	r15, r30
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:146
            Serial.println("of only " + String(total_working_pins) + " pins are working!\n");
    1046:	ed cf       	rjmp	.-38     	; 0x1022 <main+0x404>
    1048:	8f e8       	ldi	r24, 0x8F	; 143
    104a:	92 ea       	ldi	r25, 0xA2	; 162
    104c:	45 da       	rcall	.-2934   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    104e:	b7 01       	movw	r22, r14
    1050:	ce 01       	movw	r24, r28
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	4c dc       	rcall	.-1896   	; 0x8ee <String::String(int, unsigned char) [clone .constprop.25]>
_ZN15StringSumHelperC2EPKc():
    1056:	60 eb       	ldi	r22, 0xB0	; 176
    1058:	72 ea       	ldi	r23, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:146
    105a:	ce 01       	movw	r24, r28
    105c:	09 96       	adiw	r24, 0x09	; 9
    105e:	77 dc       	rcall	.-1810   	; 0x94e <String::String(char const*)>
examinePins():
    1060:	be 01       	movw	r22, r28
    1062:	6f 5f       	subi	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	ce 01       	movw	r24, r28
    1068:	09 96       	adiw	r24, 0x09	; 9
    106a:	11 dc       	rcall	.-2014   	; 0x88e <operator+(StringSumHelper const&, String const&)>
    106c:	6b e7       	ldi	r22, 0x7B	; 123
    106e:	72 ea       	ldi	r23, 0xA2	; 162
    1070:	fa db       	rcall	.-2060   	; 0x866 <operator+(StringSumHelper const&, char const*)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    1072:	1f da       	rcall	.-3010   	; 0x4b2 <Print::println(String const&) [clone .constprop.27]>
_ZN15StringSumHelperD2Ev():
    1074:	ce 01       	movw	r24, r28
    1076:	09 96       	adiw	r24, 0x09	; 9
    1078:	c1 da       	rcall	.-2686   	; 0x5fc <String::~String()>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:146
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	be da       	rcall	.-2692   	; 0x5fc <String::~String()>
    1080:	b5 ce       	rjmp	.-662    	; 0xdec <main+0x1ce>
    1082:	10 92 34 3c 	sts	0x3C34, r1	; 0x803c34 <isSerialPin>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:165

          // Just for filling in hardcoded data for later
          firstState = LOW;
          secondState = LOW;
        } else {
          isSerialPin = false;
    1086:	d0 ce       	rjmp	.-608    	; 0xe28 <main+0x20a>
    1088:	fc 01       	movw	r30, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:200
        }


        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
        else portBStatus[pbc] = 0;
    108a:	10 82       	st	Z, r1
    108c:	11 82       	std	Z+1, r1	; 0x01
    108e:	0a cf       	rjmp	.-492    	; 0xea4 <main+0x286>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:205


        pbc++;
        if (pbc > int(sizeof(portBStatus) / 2)) {
          pbc = 0;
    1090:	10 92 35 3c 	sts	0x3C35, r1	; 0x803c35 <pbc>
    1094:	10 92 36 3c 	sts	0x3C36, r1	; 0x803c36 <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:206
          PORTB_checked = true;
    1098:	c0 92 48 3c 	sts	0x3C48, r12	; 0x803c48 <PORTB_checked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:207
          Serial.println("PORT-B IO check finished!");
    109c:	89 eb       	ldi	r24, 0xB9	; 185
    109e:	92 ea       	ldi	r25, 0xA2	; 162
    10a0:	1b da       	rcall	.-3018   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    10a2:	74 e2       	ldi	r23, 0x24	; 36
    10a4:	87 2e       	mov	r8, r23
    10a6:	7c e3       	ldi	r23, 0x3C	; 60
    10a8:	97 2e       	mov	r9, r23
main():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:209

          int total_working_pins = 0;
    10aa:	b1 2c       	mov	r11, r1
    10ac:	a1 2c       	mov	r10, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:211

          for (int i = 0; i < int(sizeof(portBStatus) / 2); i++) { // ignoring RX TX pin's registered states
    10ae:	f1 2c       	mov	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:213
            //  Serial.println(i);
            if ((portBStatus[i] == 0) && i != 2 && i != 3) {
    10b0:	e1 2c       	mov	r14, r1
examinePins():
    10b2:	d4 01       	movw	r26, r8
    10b4:	8d 91       	ld	r24, X+
    10b6:	9d 91       	ld	r25, X+
    10b8:	4d 01       	movw	r8, r26
    10ba:	89 2b       	or	r24, r25
    10bc:	f1 f4       	brne	.+60     	; 0x10fa <main+0x4dc>
    10be:	c7 01       	movw	r24, r14
    10c0:	02 97       	sbiw	r24, 0x02	; 2
    10c2:	02 97       	sbiw	r24, 0x02	; 2
    10c4:	40 f0       	brcs	.+16     	; 0x10d6 <main+0x4b8>
write():
    10c6:	83 ed       	ldi	r24, 0xD3	; 211
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:215
              Serial.print("[ERR] Internally, PB");
              Serial.print(i);
    10c8:	92 ea       	ldi	r25, 0xA2	; 162
    10ca:	e7 d9       	rcall	.-3122   	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:216
              Serial.println(" not working!");
    10cc:	c7 01       	movw	r24, r14
    10ce:	10 da       	rcall	.-3040   	; 0x4f0 <Print::print(int, int) [clone .constprop.20]>
    10d0:	81 e5       	ldi	r24, 0x51	; 81
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:211
          PORTB_checked = true;
          Serial.println("PORT-B IO check finished!");

          int total_working_pins = 0;

          for (int i = 0; i < int(sizeof(portBStatus) / 2); i++) { // ignoring RX TX pin's registered states
    10d2:	92 ea       	ldi	r25, 0xA2	; 162
    10d4:	01 da       	rcall	.-3070   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    10d6:	ef ef       	ldi	r30, 0xFF	; 255
    10d8:	ee 1a       	sub	r14, r30
    10da:	fe 0a       	sbc	r15, r30
    10dc:	f8 e0       	ldi	r31, 0x08	; 8
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:224
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portBStatus) / 2 - 2) { // ignoring RX TX pins
    10de:	ef 16       	cp	r14, r31
    10e0:	f1 04       	cpc	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:225
            Serial.println("[/] In PORT B (PB0-PB1 & PB4-PB7),");
    10e2:	39 f7       	brne	.-50     	; 0x10b2 <main+0x494>
    10e4:	26 e0       	ldi	r18, 0x06	; 6
    10e6:	a2 16       	cp	r10, r18
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:226
            Serial.println("All pins are working!\n");
    10e8:	b1 04       	cpc	r11, r1
    10ea:	59 f4       	brne	.+22     	; 0x1102 <main+0x4e4>
    10ec:	88 ee       	ldi	r24, 0xE8	; 232
    10ee:	92 ea       	ldi	r25, 0xA2	; 162
    10f0:	f3 d9       	rcall	.-3098   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:220
              Serial.print(i);
              Serial.println(" not working!");
            } else if ((portBStatus[i] == 0) && (i == 2 || i == 3)) {
              //  Serial.println("Ignoring Hardcoded values for Serial Pins!");
            } else {
              total_working_pins += 1;
    10f2:	88 e7       	ldi	r24, 0x78	; 120
    10f4:	92 ea       	ldi	r25, 0xA2	; 162
    10f6:	f0 d9       	rcall	.-3104   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    10f8:	df ce       	rjmp	.-578    	; 0xeb8 <main+0x29a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:228

          if (total_working_pins == sizeof(portBStatus) / 2 - 2) { // ignoring RX TX pins
            Serial.println("[/] In PORT B (PB0-PB1 & PB4-PB7),");
            Serial.println("All pins are working!\n");
          } else {
            Serial.println("[X] In PORT B (PB0-PB1 & PB4-PB7), a total");
    10fa:	bf ef       	ldi	r27, 0xFF	; 255
    10fc:	ab 1a       	sub	r10, r27
    10fe:	bb 0a       	sbc	r11, r27
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:229
            Serial.println("of only " + String(total_working_pins) + " pins are working!\n");
    1100:	ea cf       	rjmp	.-44     	; 0x10d6 <main+0x4b8>
    1102:	8b e0       	ldi	r24, 0x0B	; 11
    1104:	93 ea       	ldi	r25, 0xA3	; 163
    1106:	e8 d9       	rcall	.-3120   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    1108:	b5 01       	movw	r22, r10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    110a:	ce 01       	movw	r24, r28
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	ef db       	rcall	.-2082   	; 0x8ee <String::String(int, unsigned char) [clone .constprop.25]>
_ZN15StringSumHelperC2EPKc():
    1110:	60 eb       	ldi	r22, 0xB0	; 176
    1112:	72 ea       	ldi	r23, 0xA2	; 162
    1114:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:229
    1116:	09 96       	adiw	r24, 0x09	; 9
    1118:	1a dc       	rcall	.-1996   	; 0x94e <String::String(char const*)>
examinePins():
    111a:	be 01       	movw	r22, r28
    111c:	6f 5f       	subi	r22, 0xFF	; 255
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	ce 01       	movw	r24, r28
    1122:	09 96       	adiw	r24, 0x09	; 9
    1124:	b4 db       	rcall	.-2200   	; 0x88e <operator+(StringSumHelper const&, String const&)>
    1126:	6b e7       	ldi	r22, 0x7B	; 123
    1128:	72 ea       	ldi	r23, 0xA2	; 162
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    112a:	9d db       	rcall	.-2246   	; 0x866 <operator+(StringSumHelper const&, char const*)>
    112c:	c2 d9       	rcall	.-3196   	; 0x4b2 <Print::println(String const&) [clone .constprop.27]>
_ZN15StringSumHelperD2Ev():
    112e:	ce 01       	movw	r24, r28
    1130:	09 96       	adiw	r24, 0x09	; 9
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:229
    1132:	64 da       	rcall	.-2872   	; 0x5fc <String::~String()>
examinePins():
    1134:	ce 01       	movw	r24, r28
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	61 da       	rcall	.-2878   	; 0x5fc <String::~String()>
    113a:	be ce       	rjmp	.-644    	; 0xeb8 <main+0x29a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:273
          //  Serial.println("Working!");
          portCStatus[pcc] = 1;
        } else {
          //  Mark that pin as "not-working: 0"
          //  Serial.println("Not Working!");
          portCStatus[pcc] = 0;
    113c:	10 82       	st	Z, r1
    113e:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:278
        }

        pcc++;
        if (pcc > 5) {
          pcc = 0;
    1140:	03 cf       	rjmp	.-506    	; 0xf48 <main+0x32a>
    1142:	10 92 22 3c 	sts	0x3C22, r1	; 0x803c22 <pcc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:279
          PORTC_checked = true;
    1146:	10 92 23 3c 	sts	0x3C23, r1	; 0x803c23 <pcc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:280
          Serial.println("PORT-C IO check finished!");
    114a:	c0 92 47 3c 	sts	0x3C47, r12	; 0x803c47 <PORTC_checked>
    114e:	86 e3       	ldi	r24, 0x36	; 54
    1150:	93 ea       	ldi	r25, 0xA3	; 163
    1152:	c2 d9       	rcall	.-3196   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    1154:	56 e1       	ldi	r21, 0x16	; 22
    1156:	85 2e       	mov	r8, r21
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:282

          int total_working_pins = 0;
    1158:	5c e3       	ldi	r21, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:284

          for (int i = 0; i < int(sizeof(portCStatus) / 2); i++) {
    115a:	95 2e       	mov	r9, r21
main():
    115c:	f1 2c       	mov	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:285
            if (portCStatus[i] == 0) {
    115e:	e1 2c       	mov	r14, r1
    1160:	b1 2c       	mov	r11, r1
    1162:	a1 2c       	mov	r10, r1
examinePins():
    1164:	d4 01       	movw	r26, r8
    1166:	8d 91       	ld	r24, X+
    1168:	9d 91       	ld	r25, X+
    116a:	4d 01       	movw	r8, r26
    116c:	89 2b       	or	r24, r25
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:287
              Serial.print("[ERR] Internally, PC");
              Serial.print(i);
    116e:	d1 f4       	brne	.+52     	; 0x11a4 <main+0x586>
write():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:288
              Serial.println(" not working!");
    1170:	80 e5       	ldi	r24, 0x50	; 80
    1172:	93 ea       	ldi	r25, 0xA3	; 163
    1174:	92 d9       	rcall	.-3292   	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:284
          PORTC_checked = true;
          Serial.println("PORT-C IO check finished!");

          int total_working_pins = 0;

          for (int i = 0; i < int(sizeof(portCStatus) / 2); i++) {
    1176:	c5 01       	movw	r24, r10
    1178:	bb d9       	rcall	.-3210   	; 0x4f0 <Print::print(int, int) [clone .constprop.20]>
    117a:	81 e5       	ldi	r24, 0x51	; 81
    117c:	92 ea       	ldi	r25, 0xA2	; 162
    117e:	ac d9       	rcall	.-3240   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    1180:	ef ef       	ldi	r30, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:294
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portCStatus) / 2) {
    1182:	ae 1a       	sub	r10, r30
    1184:	be 0a       	sbc	r11, r30
    1186:	f6 e0       	ldi	r31, 0x06	; 6
    1188:	af 16       	cp	r10, r31
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:295
            Serial.println("[/] In PORT C (PC0-PC5),");
    118a:	b1 04       	cpc	r11, r1
    118c:	59 f7       	brne	.-42     	; 0x1164 <main+0x546>
    118e:	26 e0       	ldi	r18, 0x06	; 6
    1190:	e2 16       	cp	r14, r18
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:296
            Serial.println("All pins are working!\n");
    1192:	f1 04       	cpc	r15, r1
    1194:	59 f4       	brne	.+22     	; 0x11ac <main+0x58e>
    1196:	85 e6       	ldi	r24, 0x65	; 101
    1198:	93 ea       	ldi	r25, 0xA3	; 163
    119a:	9e d9       	rcall	.-3268   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:290
            if (portCStatus[i] == 0) {
              Serial.print("[ERR] Internally, PC");
              Serial.print(i);
              Serial.println(" not working!");
            } else {
              total_working_pins += 1;
    119c:	88 e7       	ldi	r24, 0x78	; 120
    119e:	92 ea       	ldi	r25, 0xA2	; 162
    11a0:	9b d9       	rcall	.-3274   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:298

          if (total_working_pins == sizeof(portCStatus) / 2) {
            Serial.println("[/] In PORT C (PC0-PC5),");
            Serial.println("All pins are working!\n");
          } else {
            Serial.println("[X] In PORT C (PC0-PC5), a total");
    11a2:	db ce       	rjmp	.-586    	; 0xf5a <main+0x33c>
    11a4:	bf ef       	ldi	r27, 0xFF	; 255
    11a6:	eb 1a       	sub	r14, r27
    11a8:	fb 0a       	sbc	r15, r27
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:299
            Serial.println("of only " + String(total_working_pins) + " pins are working!\n");
    11aa:	ea cf       	rjmp	.-44     	; 0x1180 <main+0x562>
    11ac:	8e e7       	ldi	r24, 0x7E	; 126
    11ae:	93 ea       	ldi	r25, 0xA3	; 163
    11b0:	93 d9       	rcall	.-3290   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    11b2:	b7 01       	movw	r22, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	9a db       	rcall	.-2252   	; 0x8ee <String::String(int, unsigned char) [clone .constprop.25]>
_ZN15StringSumHelperC2EPKc():
    11ba:	60 eb       	ldi	r22, 0xB0	; 176
    11bc:	72 ea       	ldi	r23, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:299
    11be:	ce 01       	movw	r24, r28
    11c0:	09 96       	adiw	r24, 0x09	; 9
    11c2:	c5 db       	rcall	.-2166   	; 0x94e <String::String(char const*)>
examinePins():
    11c4:	be 01       	movw	r22, r28
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	ce 01       	movw	r24, r28
    11cc:	09 96       	adiw	r24, 0x09	; 9
    11ce:	5f db       	rcall	.-2370   	; 0x88e <operator+(StringSumHelper const&, String const&)>
    11d0:	6b e7       	ldi	r22, 0x7B	; 123
    11d2:	72 ea       	ldi	r23, 0xA2	; 162
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    11d4:	48 db       	rcall	.-2416   	; 0x866 <operator+(StringSumHelper const&, char const*)>
    11d6:	6d d9       	rcall	.-3366   	; 0x4b2 <Print::println(String const&) [clone .constprop.27]>
_ZN15StringSumHelperD2Ev():
    11d8:	ce 01       	movw	r24, r28
    11da:	09 96       	adiw	r24, 0x09	; 9
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:299
    11dc:	0f da       	rcall	.-3042   	; 0x5fc <String::~String()>
examinePins():
    11de:	ce 01       	movw	r24, r28
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	0c da       	rcall	.-3048   	; 0x5fc <String::~String()>
    11e4:	ba ce       	rjmp	.-652    	; 0xf5a <main+0x33c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/internalIOExaminer.h:311
      if (PORTA_checked && PORTB_checked && PORTC_checked) {
        Serial.println("\nATTINY Digital IO Test finished!\n");
        break;
      }

      pinTestModeStartMillis = pinTestModeCurrMillis;
    11e6:	80 91 4e 3c 	lds	r24, 0x3C4E	; 0x803c4e <pinTestModeCurrMillis>
    11ea:	90 91 4f 3c 	lds	r25, 0x3C4F	; 0x803c4f <pinTestModeCurrMillis+0x1>
    11ee:	a0 91 50 3c 	lds	r26, 0x3C50	; 0x803c50 <pinTestModeCurrMillis+0x2>
    11f2:	b0 91 51 3c 	lds	r27, 0x3C51	; 0x803c51 <pinTestModeCurrMillis+0x3>
    11f6:	80 93 4a 3c 	sts	0x3C4A, r24	; 0x803c4a <pinTestModeStartMillis>
    11fa:	90 93 4b 3c 	sts	0x3C4B, r25	; 0x803c4b <pinTestModeStartMillis+0x1>
    11fe:	a0 93 4c 3c 	sts	0x3C4C, r26	; 0x803c4c <pinTestModeStartMillis+0x2>
    1202:	b0 93 4d 3c 	sts	0x3C4D, r27	; 0x803c4d <pinTestModeStartMillis+0x3>
    1206:	89 cd       	rjmp	.-1262   	; 0xd1a <main+0xfc>
reportRTCAvailability():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:25
    } else {
      checking_rtc_counter = 0;
    1208:	10 92 52 3c 	sts	0x3C52, r1	; 0x803c52 <checking_rtc_counter>
    120c:	10 92 53 3c 	sts	0x3C53, r1	; 0x803c53 <checking_rtc_counter+0x1>
begin():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:67
{
}

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();
    1210:	20 da       	rcall	.-3008   	; 0x652 <TinyMegaI2CMaster::init() [clone .constprop.17]>
    1212:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	0e 94 73 00 	call	0xe6	; 0xe6 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
    121a:	81 11       	cpse	r24, r1
    121c:	4a c2       	rjmp	.+1172   	; 0x16b2 <main+0xa94>
reportRTCAvailability():
    121e:	10 92 69 3c 	sts	0x3C69, r1	; 0x803c69 <rtcAvailable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:31
      break;
    }
  }

  if (!rtc.begin()) {
    rtcAvailable = false;
    1222:	8e ed       	ldi	r24, 0xDE	; 222
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:32
    Serial.println("RTC_ADDR_FOUND:0");
    1224:	93 ea       	ldi	r25, 0xA3	; 163
    1226:	58 d9       	rcall	.-3408   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:35
  } else {
    rtcAvailable = true;
    Serial.println("RTC_ADDR_FOUND:1");
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 8d 3c 	sts	0x3C8D, r24	; 0x803c8d <rtcAvailabilityChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:59
    reportRTCAvailability();

    rtcAvailabilityChecked = true;
    122e:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:60
    printHeader = false;
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	74 ea       	ldi	r23, 0xA4	; 164
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:65
  }


  /* ---- 3. Check curr. factory default time ---- */
  printStepTitle("CHECKING RTC's R/W FUNC", 2000);
    1236:	ce 01       	movw	r24, r28
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	89 db       	rcall	.-2286   	; 0x94e <String::String(char const*)>
    123c:	ce 01       	movw	r24, r28
    123e:	01 96       	adiw	r24, 0x01	; 1
    1240:	9a db       	rcall	.-2252   	; 0x976 <printStepTitle(String, int) [clone .constprop.2]>
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	da d9       	rcall	.-3148   	; 0x5fc <String::~String()>
    1248:	80 91 8d 3c 	lds	r24, 0x3C8D	; 0x803c8d <rtcAvailabilityChecked>
    124c:	88 23       	and	r24, r24
    124e:	09 f4       	brne	.+2      	; 0x1252 <main+0x634>
    1250:	b9 c0       	rjmp	.+370    	; 0x13c4 <main+0x7a6>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:67

  if (rtcAvailabilityChecked && !rtcReadabilityChecked) {
    1252:	80 91 8c 3c 	lds	r24, 0x3C8C	; 0x803c8c <rtcReadabilityChecked>
    1256:	81 11       	cpse	r24, r1
    1258:	b5 c0       	rjmp	.+362    	; 0x13c4 <main+0x7a6>
rtcReadWriteChecker():
    125a:	80 91 69 3c 	lds	r24, 0x3C69	; 0x803c69 <rtcAvailable>
    125e:	88 23       	and	r24, r24
    1260:	09 f4       	brne	.+2      	; 0x1264 <main+0x646>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:40
  }
}

void rtcReadWriteChecker() {
  while (rtcAvailable) {
    1262:	a3 c0       	rjmp	.+326    	; 0x13aa <main+0x78c>
updateTime():
    1264:	8e e0       	ldi	r24, 0x0E	; 14
    1266:	9d e3       	ldi	r25, 0x3D	; 61
    1268:	0e 94 92 00 	call	0x124	; 0x124 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:81
    }
}

bool RV8803Tiny::updateTime()
{
    if (!readMultipleRegisters(RV8803_HUNDREDTHS, _time, TIME_ARRAY_LENGTH))
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <main+0x654>
    1270:	26 c2       	rjmp	.+1100   	; 0x16be <main+0xaa0>
    1272:	80 91 0f 3d 	lds	r24, 0x3D0F	; 0x803d0f <rtc+0x7>
BCDtoDEC():
    1276:	28 2f       	mov	r18, r24
    1278:	22 95       	swap	r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    // If seconds are at 59, read again to make sure we didn't accidentally skip a minute
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
    127a:	2f 70       	andi	r18, 0x0F	; 15
    127c:	9a e0       	ldi	r25, 0x0A	; 10
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    127e:	8f 70       	andi	r24, 0x0F	; 15
    1280:	29 9f       	mul	r18, r25
    1282:	80 0d       	add	r24, r0
    1284:	11 24       	eor	r1, r1
updateTime():
    1286:	8b 33       	cpi	r24, 0x3B	; 59
    1288:	d1 f4       	brne	.+52     	; 0x12be <main+0x6a0>
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
BCDtoDEC():
    128c:	28 2f       	mov	r18, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    // If seconds are at 59, read again to make sure we didn't accidentally skip a minute
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
    128e:	22 95       	swap	r18
    1290:	2f 70       	andi	r18, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for seconds changed, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(tempTime[TIME_SECONDS]) == 0)
    1292:	8f 70       	andi	r24, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1294:	29 9f       	mul	r18, r25
    1296:	80 0d       	add	r24, r0
    1298:	11 24       	eor	r1, r1
updateTime():
    129a:	81 11       	cpse	r24, r1
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <main+0x692>
    129e:	88 e0       	ldi	r24, 0x08	; 8
    12a0:	fe 01       	movw	r30, r28
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for seconds changed, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(tempTime[TIME_SECONDS]) == 0)
    12a2:	31 96       	adiw	r30, 0x01	; 1
    12a4:	ae e0       	ldi	r26, 0x0E	; 14
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:95
        {
            memcpy(_time, tempTime, TIME_ARRAY_LENGTH);
    12a6:	bd e3       	ldi	r27, 0x3D	; 61
    12a8:	01 90       	ld	r0, Z+
    12aa:	0d 92       	st	X+, r0
    12ac:	8a 95       	dec	r24
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <main+0x68a>
    12b0:	ce 01       	movw	r24, r28
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	0e 94 92 00 	call	0x124	; 0x124 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:97
        }
        if (!readMultipleRegisters(RV8803_HUNDREDTHS, tempTime, TIME_ARRAY_LENGTH))
    12b8:	88 23       	and	r24, r24
    12ba:	09 f4       	brne	.+2      	; 0x12be <main+0x6a0>
    12bc:	00 c2       	rjmp	.+1024   	; 0x16be <main+0xaa0>
rtcReadWriteChecker():
    12be:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:42
    if (rtc.updateTime()) {
      rtcReadable = true;
    12c0:	80 93 68 3c 	sts	0x3C68, r24	; 0x803c68 <rtcReadable>
    12c4:	64 e6       	ldi	r22, 0x64	; 100
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:47
      // --- ** No need for this section according to a new method [ currTimeAsArray() ] in rtc lib ** --- //
      //      delay(100);
      //      rtc.updateTimeArray(); // "updateTimeArray()" function has been dissolved in the RTClibrary
      //-------------------------------------------------------------------------------------------- ------//
      delay(100);
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a8 d8       	rcall	.-3760   	; 0x41e <delay>
stringTime():
    12ce:	20 91 0f 3d 	lds	r18, 0x3D0F	; 0x803d0f <rtc+0x7>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    12d2:	90 91 10 3d 	lds	r25, 0x3D10	; 0x803d10 <rtc+0x8>
    12d6:	80 91 11 3d 	lds	r24, 0x3D11	; 0x803d11 <rtc+0x9>
BCDtoDEC():
    12da:	32 2f       	mov	r19, r18
    12dc:	32 95       	swap	r19
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    12de:	3f 70       	andi	r19, 0x0F	; 15
    12e0:	4a e0       	ldi	r20, 0x0A	; 10
    12e2:	f4 2e       	mov	r15, r20
    12e4:	2f 70       	andi	r18, 0x0F	; 15
    12e6:	3f 9d       	mul	r19, r15
    12e8:	20 0d       	add	r18, r0
    12ea:	11 24       	eor	r1, r1
stringTime():
    12ec:	1f 92       	push	r1
    12ee:	2f 93       	push	r18
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    12f0:	29 2f       	mov	r18, r25
    12f2:	22 95       	swap	r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    12f4:	2f 70       	andi	r18, 0x0F	; 15
    12f6:	9f 70       	andi	r25, 0x0F	; 15
    12f8:	2f 9d       	mul	r18, r15
    12fa:	90 0d       	add	r25, r0
    12fc:	11 24       	eor	r1, r1
stringTime():
    12fe:	1f 92       	push	r1
    1300:	9f 93       	push	r25
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    1302:	98 2f       	mov	r25, r24
    1304:	92 95       	swap	r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1306:	9f 70       	andi	r25, 0x0F	; 15
    1308:	8f 70       	andi	r24, 0x0F	; 15
    130a:	9f 9d       	mul	r25, r15
    130c:	80 0d       	add	r24, r0
    130e:	11 24       	eor	r1, r1
stringTime():
    1310:	1f 92       	push	r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    1312:	8f 93       	push	r24
    1314:	88 e1       	ldi	r24, 0x18	; 24
    1316:	94 ea       	ldi	r25, 0xA4	; 164
    1318:	9f 93       	push	r25
    131a:	8f 93       	push	r24
    131c:	84 e5       	ldi	r24, 0x54	; 84
    131e:	9c e3       	ldi	r25, 0x3C	; 60
    1320:	9f 93       	push	r25
    1322:	8f 93       	push	r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:49
      // Send string date & time
      Serial.println(String(rtc.stringTime()));
    1324:	0e d7       	rcall	.+3612   	; 0x2142 <sprintf>
rtcReadWriteChecker():
    1326:	64 e5       	ldi	r22, 0x54	; 84
    1328:	7c e3       	ldi	r23, 0x3C	; 60
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	0f db       	rcall	.-2530   	; 0x94e <String::String(char const*)>
    1330:	ce 01       	movw	r24, r28
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	be d8       	rcall	.-3716   	; 0x4b2 <Print::println(String const&) [clone .constprop.27]>
    1336:	ce 01       	movw	r24, r28
    1338:	01 96       	adiw	r24, 0x01	; 1
    133a:	60 d9       	rcall	.-3392   	; 0x5fc <String::~String()>
stringDate():
    133c:	20 91 15 3d 	lds	r18, 0x3D15	; 0x803d15 <rtc+0xd>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    1340:	90 91 14 3d 	lds	r25, 0x3D14	; 0x803d14 <rtc+0xc>
    1344:	80 91 13 3d 	lds	r24, 0x3D13	; 0x803d13 <rtc+0xb>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1348:	32 2f       	mov	r19, r18
    134a:	32 95       	swap	r19
    134c:	3f 70       	andi	r19, 0x0F	; 15
    134e:	2f 70       	andi	r18, 0x0F	; 15
    1350:	3f 9d       	mul	r19, r15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    1352:	20 0d       	add	r18, r0
    1354:	11 24       	eor	r1, r1
stringDate():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1356:	1f 92       	push	r1
    1358:	2f 93       	push	r18
BCDtoDEC():
    135a:	29 2f       	mov	r18, r25
    135c:	22 95       	swap	r18
    135e:	2f 70       	andi	r18, 0x0F	; 15
    1360:	9f 70       	andi	r25, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    1362:	2f 9d       	mul	r18, r15
    1364:	90 0d       	add	r25, r0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1366:	11 24       	eor	r1, r1
stringDate():
    1368:	1f 92       	push	r1
    136a:	9f 93       	push	r25
BCDtoDEC():
    136c:	98 2f       	mov	r25, r24
    136e:	92 95       	swap	r25
    1370:	9f 70       	andi	r25, 0x0F	; 15
    1372:	8f 70       	andi	r24, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    1374:	9f 9d       	mul	r25, r15
    1376:	80 0d       	add	r24, r0
    1378:	11 24       	eor	r1, r1
stringDate():
    137a:	1f 92       	push	r1
    137c:	8f 93       	push	r24
    137e:	87 e2       	ldi	r24, 0x27	; 39
    1380:	94 ea       	ldi	r25, 0xA4	; 164
    1382:	9f 93       	push	r25
    1384:	8f 93       	push	r24
    1386:	8d e5       	ldi	r24, 0x5D	; 93
    1388:	9c e3       	ldi	r25, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:50
      Serial.println(String(rtc.stringDate()));
    138a:	9f 93       	push	r25
    138c:	8f 93       	push	r24
    138e:	d9 d6       	rcall	.+3506   	; 0x2142 <sprintf>
rtcReadWriteChecker():
    1390:	6d e5       	ldi	r22, 0x5D	; 93
    1392:	7c e3       	ldi	r23, 0x3C	; 60
    1394:	ce 01       	movw	r24, r28
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	da da       	rcall	.-2636   	; 0x94e <String::String(char const*)>
    139a:	ce 01       	movw	r24, r28
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	89 d8       	rcall	.-3822   	; 0x4b2 <Print::println(String const&) [clone .constprop.27]>
    13a0:	ce 01       	movw	r24, r28
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	2b d9       	rcall	.-3498   	; 0x5fc <String::~String()>
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	de bf       	out	0x3e, r29	; 62
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:57
      rtcReadable = false;
      Serial.println("RTC_READABLE:0");
    }
    break;
  }
  if (rtcReadable) {
    13aa:	80 91 68 3c 	lds	r24, 0x3C68	; 0x803c68 <rtcReadable>
    13ae:	88 23       	and	r24, r24
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <main+0x796>
    13b2:	8c c1       	rjmp	.+792    	; 0x16cc <main+0xaae>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:58
    Serial.println("RTC_READABLE:1");
    13b4:	87 e4       	ldi	r24, 0x47	; 71
    13b6:	94 ea       	ldi	r25, 0xA4	; 164
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:60
  } else {
    Serial.println("RTC_READABLE:0");
    13b8:	8f d8       	rcall	.-3810   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
loop():
    13ba:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:70
    rtcReadWriteChecker();

    rtcReadabilityChecked = true;
    13bc:	80 93 8c 3c 	sts	0x3C8C, r24	; 0x803c8c <rtcReadabilityChecked>
    13c0:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:71
    printHeader = false;
    13c4:	66 e5       	ldi	r22, 0x56	; 86
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:76
  }


  /* ---- 4. check button for presses ---- */
  printStepTitle("CHECKING BUTTON COND [Press]", 2000);
    13c6:	74 ea       	ldi	r23, 0xA4	; 164
    13c8:	ce 01       	movw	r24, r28
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	c0 da       	rcall	.-2688   	; 0x94e <String::String(char const*)>
    13ce:	ce 01       	movw	r24, r28
    13d0:	01 96       	adiw	r24, 0x01	; 1
    13d2:	d1 da       	rcall	.-2654   	; 0x976 <printStepTitle(String, int) [clone .constprop.2]>
    13d4:	ce 01       	movw	r24, r28
    13d6:	01 96       	adiw	r24, 0x01	; 1
    13d8:	11 d9       	rcall	.-3550   	; 0x5fc <String::~String()>
initBtnPin():
    13da:	80 91 6a 3c 	lds	r24, 0x3C6A	; 0x803c6a <btnInitialized>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:20

boolean btnInitialized;
bool btnConnChecked;

void initBtnPin(int Pin) {
  if (!btnInitialized) {
    13de:	81 11       	cpse	r24, r1
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <main+0x7d0>
    13e2:	62 e0       	ldi	r22, 0x02	; 2
    13e4:	8e e0       	ldi	r24, 0x0E	; 14
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:23
    //--- Buttons initialization ---//
    //  PORTC.PIN2CTRL = 0b00001001;
    pinMode(Pin, INPUT_PULLUP);
    13e6:	0f d9       	rcall	.-3554   	; 0x606 <pinMode>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	80 93 6a 3c 	sts	0x3C6A, r24	; 0x803c6a <btnInitialized>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:24
    btnInitialized = true;
    13ee:	80 91 8c 3c 	lds	r24, 0x3C8C	; 0x803c8c <rtcReadabilityChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:79
  initBtnPin(14);

  if (rtcReadabilityChecked && !btnConnChecked) {
    13f2:	88 23       	and	r24, r24
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <main+0x7da>
    13f6:	59 c0       	rjmp	.+178    	; 0x14aa <main+0x88c>
    13f8:	80 91 8b 3c 	lds	r24, 0x3C8B	; 0x803c8b <btnConnChecked>
    13fc:	81 11       	cpse	r24, r1
    13fe:	55 c0       	rjmp	.+170    	; 0x14aa <main+0x88c>
btnChecker():
    1400:	cc 24       	eor	r12, r12
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:37

      btnWatcherFlag++;
      SW_OneState = digitalRead(14);

      Serial.print("SW_STATE: ");
      Serial.print(!SW_OneState);
    1402:	c3 94       	inc	r12
    1404:	9a e0       	ldi	r25, 0x0A	; 10
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:39
      Serial.print(" [");
      Serial.print(10 - btnWatcherFlag);
    1406:	e9 2e       	mov	r14, r25
    1408:	f1 2c       	mov	r15, r1
    140a:	32 d8       	rcall	.-3996   	; 0x470 <millis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:30
  }
}

void btnChecker() {
  while (true) {
    btnWatchTimerCurr = millis();
    140c:	60 93 72 3c 	sts	0x3C72, r22	; 0x803c72 <btnWatchTimerCurr>
    1410:	70 93 73 3c 	sts	0x3C73, r23	; 0x803c73 <btnWatchTimerCurr+0x1>
    1414:	80 93 74 3c 	sts	0x3C74, r24	; 0x803c74 <btnWatchTimerCurr+0x2>
    1418:	90 93 75 3c 	sts	0x3C75, r25	; 0x803c75 <btnWatchTimerCurr+0x3>
    141c:	80 90 6e 3c 	lds	r8, 0x3C6E	; 0x803c6e <btnWatchTimerStart>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:31
    if ( btnWatchTimerCurr - btnWatchTimerStart >= 1000) {
    1420:	90 90 6f 3c 	lds	r9, 0x3C6F	; 0x803c6f <btnWatchTimerStart+0x1>
    1424:	a0 90 70 3c 	lds	r10, 0x3C70	; 0x803c70 <btnWatchTimerStart+0x2>
    1428:	b0 90 71 3c 	lds	r11, 0x3C71	; 0x803c71 <btnWatchTimerStart+0x3>
    142c:	68 19       	sub	r22, r8
    142e:	79 09       	sbc	r23, r9
    1430:	8a 09       	sbc	r24, r10
    1432:	9b 09       	sbc	r25, r11
    1434:	68 3e       	cpi	r22, 0xE8	; 232
    1436:	73 40       	sbci	r23, 0x03	; 3
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:33

      btnWatcherFlag++;
    1438:	81 05       	cpc	r24, r1
    143a:	91 05       	cpc	r25, r1
    143c:	30 f3       	brcs	.-52     	; 0x140a <main+0x7ec>
    143e:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <btnWatcherFlag>
    1442:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <btnWatcherFlag+0x1>
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	80 93 6c 3c 	sts	0x3C6C, r24	; 0x803c6c <btnWatcherFlag>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.10/cores/megatinycore/wiring_digital.c:385

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask) {
    144c:	90 93 6d 3c 	sts	0x3C6D, r25	; 0x803c6d <btnWatcherFlag+0x1>
digitalRead():
    1450:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <vtable for UartClass+0x7f626d>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:34
      SW_OneState = digitalRead(14);
    1454:	82 fb       	bst	r24, 2
    1456:	88 27       	eor	r24, r24
    1458:	80 f9       	bld	r24, 0
btnChecker():
    145a:	80 93 6b 3c 	sts	0x3C6B, r24	; 0x803c6b <SW_OneState>
write():
    145e:	83 e7       	ldi	r24, 0x73	; 115
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:37

      Serial.print("SW_STATE: ");
      Serial.print(!SW_OneState);
    1460:	94 ea       	ldi	r25, 0xA4	; 164
    1462:	1b d8       	rcall	.-4042   	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
btnChecker():
    1464:	80 91 6b 3c 	lds	r24, 0x3C6B	; 0x803c6b <SW_OneState>
    1468:	8c 25       	eor	r24, r12
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	41 d8       	rcall	.-3966   	; 0x4f0 <Print::print(int, int) [clone .constprop.20]>
write():
    146e:	8e e7       	ldi	r24, 0x7E	; 126
    1470:	94 ea       	ldi	r25, 0xA4	; 164
    1472:	13 d8       	rcall	.-4058   	; 0x49a <Print::write(char const*) [clone .part.2] [clone .constprop.35]>
btnChecker():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:39
      Serial.print(" [");
      Serial.print(10 - btnWatcherFlag);
    1474:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <btnWatcherFlag>
    1478:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <btnWatcherFlag+0x1>
    147c:	d7 01       	movw	r26, r14
    147e:	a8 1b       	sub	r26, r24
    1480:	b9 0b       	sbc	r27, r25
    1482:	cd 01       	movw	r24, r26
    1484:	35 d8       	rcall	.-3990   	; 0x4f0 <Print::print(int, int) [clone .constprop.20]>
    1486:	81 e8       	ldi	r24, 0x81	; 129
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:40
      Serial.println(" sec left]");
    1488:	94 ea       	ldi	r25, 0xA4	; 164
    148a:	26 d8       	rcall	.-4020   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    148c:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <btnWatcherFlag>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:42

      if (btnWatcherFlag >= watchBtnFor) {
    1490:	90 91 6d 3c 	lds	r25, 0x3C6D	; 0x803c6d <btnWatcherFlag+0x1>
    1494:	0a 97       	sbiw	r24, 0x0a	; 10
    1496:	0c f4       	brge	.+2      	; 0x149a <main+0x87c>
    1498:	1c c1       	rjmp	.+568    	; 0x16d2 <main+0xab4>
    149a:	10 92 6c 3c 	sts	0x3C6C, r1	; 0x803c6c <btnWatcherFlag>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:43
        btnWatcherFlag = 0;
    149e:	10 92 6d 3c 	sts	0x3C6D, r1	; 0x803c6d <btnWatcherFlag+0x1>
loop():
    14a2:	c0 92 8b 3c 	sts	0x3C8B, r12	; 0x803c8b <btnConnChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:82
    btnChecker();

    btnConnChecked = true;
    14a6:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:83
    printHeader = false;
    14aa:	6c e8       	ldi	r22, 0x8C	; 140
    14ac:	74 ea       	ldi	r23, 0xA4	; 164
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:88
  }


  /* ---- 5. check display routine ---- */
  printStepTitle("CHECKING DISPLAY's CONDITION", 2000);
    14ae:	ce 01       	movw	r24, r28
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	4d da       	rcall	.-2918   	; 0x94e <String::String(char const*)>
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	5e da       	rcall	.-2884   	; 0x976 <printStepTitle(String, int) [clone .constprop.2]>
    14ba:	ce 01       	movw	r24, r28
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	9e d8       	rcall	.-3780   	; 0x5fc <String::~String()>
printDisplayObservingInstructions():
    14c0:	80 91 76 3c 	lds	r24, 0x3C76	; 0x803c76 <showdisplayobservinginstructions>
    14c4:	81 11       	cpse	r24, r1
    14c6:	33 c0       	rjmp	.+102    	; 0x152e <main+0x910>
    14c8:	89 ea       	ldi	r24, 0xA9	; 169
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:25
bool displayChecked;

bool showdisplayobservinginstructions;

void printDisplayObservingInstructions() {
  if (!showdisplayobservinginstructions) {
    14ca:	94 ea       	ldi	r25, 0xA4	; 164
    14cc:	05 d8       	rcall	.-4086   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    14ce:	82 ef       	ldi	r24, 0xF2	; 242
    14d0:	94 ea       	ldi	r25, 0xA4	; 164
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:26
    Serial.println("Watch if you see the below pattern \nin the segments\n(Starting in 5 sec):");
    14d2:	02 d8       	rcall	.-4092   	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    14d4:	87 ef       	ldi	r24, 0xF7	; 247
    14d6:	94 ea       	ldi	r25, 0xA4	; 164
    14d8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:27
    Serial.println("0, 1");
    14dc:	8c ef       	ldi	r24, 0xFC	; 252
    14de:	94 ea       	ldi	r25, 0xA4	; 164
    14e0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:28
    Serial.println("2, 3");
    14e4:	89 e0       	ldi	r24, 0x09	; 9
    14e6:	95 ea       	ldi	r25, 0xA5	; 165
    14e8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:29
    Serial.println("delay(4000);");
    14ec:	8e e0       	ldi	r24, 0x0E	; 14
    14ee:	95 ea       	ldi	r25, 0xA5	; 165
    14f0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:30
    Serial.println("4, 5");
    14f4:	8c ef       	ldi	r24, 0xFC	; 252
    14f6:	94 ea       	ldi	r25, 0xA4	; 164
    14f8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:31
    Serial.println("6, 7");
    14fc:	83 e1       	ldi	r24, 0x13	; 19
    14fe:	95 ea       	ldi	r25, 0xA5	; 165
    1500:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:32
    Serial.println("delay(4000);");
    1504:	88 e1       	ldi	r24, 0x18	; 24
    1506:	95 ea       	ldi	r25, 0xA5	; 165
    1508:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:33
    Serial.println("8, 9");
    150c:	8c ef       	ldi	r24, 0xFC	; 252
    150e:	94 ea       	ldi	r25, 0xA4	; 164
    1510:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:34
    Serial.println("0, 0");
    1514:	8d e1       	ldi	r24, 0x1D	; 29
    1516:	95 ea       	ldi	r25, 0xA5	; 165
    1518:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:35
    Serial.println("delay(4000);");
    151c:	68 e8       	ldi	r22, 0x88	; 136
    151e:	73 e1       	ldi	r23, 0x13	; 19
    1520:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:36
    Serial.println("Finally display will Turn OFF");
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0e 94 0f 02 	call	0x41e	; 0x41e <delay>
    1528:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:38

    delay(5000);
    152a:	80 93 76 3c 	sts	0x3C76, r24	; 0x803c76 <showdisplayobservinginstructions>
initSegmentDisplay():
    152e:	80 91 77 3c 	lds	r24, 0x3C77	; 0x803c77 <displayPinsInitialized>
    1532:	81 11       	cpse	r24, r1
    1534:	13 c0       	rjmp	.+38     	; 0x155c <main+0x93e>
setupDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:40

    showdisplayobservinginstructions = true;
    1536:	80 e2       	ldi	r24, 0x20	; 32
    1538:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f6266>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:133



bool displayPinsInitialized;
void initSegmentDisplay() {
  if (!displayPinsInitialized) {
    153c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f626b>
    1540:	d0 92 01 04 	sts	0x0401, r13	; 0x800401 <vtable for UartClass+0x7f6226>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:47
}


void setupDisplay() {
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
    1544:	90 ef       	ldi	r25, 0xF0	; 240
    1546:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <vtable for UartClass+0x7f6246>
turnOffDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:48
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off
    154a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f626b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:51

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
    154e:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f622b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:53
  //  Anode Pins for LEDS
  PORTB.DIRSET = 0b11110000;
    1552:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <vtable for UartClass+0x7f624a>
initSegmentDisplay():
    1556:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:58
}


void turnOffDisplay() {
  PORTC.OUTCLR = PIN5_bm; // toggle PC5 OFF
    1558:	80 93 77 3c 	sts	0x3C77, r24	; 0x803c77 <displayPinsInitialized>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:61

  // ---- Clear all leds of a segment ---- //
  PORTA.OUTCLR = 0b11111110;
    155c:	80 91 8b 3c 	lds	r24, 0x3C8B	; 0x803c8b <btnConnChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:63
  // ---- Deactivatec all segments by setting them HIGH (My segments are in common Anode config) ---- //
  PORTB.OUTSET = 0b11110000;
    1560:	88 23       	and	r24, r24
    1562:	09 f4       	brne	.+2      	; 0x1566 <main+0x948>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:137
void initSegmentDisplay() {
  if (!displayPinsInitialized) {
    setupDisplay();
    turnOffDisplay();

    displayPinsInitialized = true;
    1564:	bf cb       	rjmp	.-2178   	; 0xce4 <main+0xc6>
    1566:	80 91 8a 3c 	lds	r24, 0x3C8A	; 0x803c8a <displayChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:92
  printDisplayObservingInstructions();
  initSegmentDisplay();

  if (btnConnChecked && !displayChecked) {
    156a:	81 11       	cpse	r24, r1
    156c:	bb cb       	rjmp	.-2186   	; 0xce4 <main+0xc6>
showOnDisplay():
    156e:	80 ef       	ldi	r24, 0xF0	; 240
    1570:	c8 2e       	mov	r12, r24
    1572:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <micros>
    1576:	60 93 7e 3c 	sts	0x3C7E, r22	; 0x803c7e <currDisplayFPSMicros>
    157a:	70 93 7f 3c 	sts	0x3C7F, r23	; 0x803c7f <currDisplayFPSMicros+0x1>
  if (currDisplayFPSMicros - startDisplayFPSMicros >= period) {

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
    157e:	80 93 80 3c 	sts	0x3C80, r24	; 0x803c80 <currDisplayFPSMicros+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:85
};


int c = 0;
void showOnDisplay(uint8_t * digits) {
  currDisplayFPSMicros = micros();
    1582:	90 93 81 3c 	sts	0x3C81, r25	; 0x803c81 <currDisplayFPSMicros+0x3>
    1586:	80 90 7a 3c 	lds	r8, 0x3C7A	; 0x803c7a <startDisplayFPSMicros>
    158a:	90 90 7b 3c 	lds	r9, 0x3C7B	; 0x803c7b <startDisplayFPSMicros+0x1>
    158e:	a0 90 7c 3c 	lds	r10, 0x3C7C	; 0x803c7c <startDisplayFPSMicros+0x2>
    1592:	b0 90 7d 3c 	lds	r11, 0x3C7D	; 0x803c7d <startDisplayFPSMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:87

  if (currDisplayFPSMicros - startDisplayFPSMicros >= period) {
    1596:	68 19       	sub	r22, r8
    1598:	79 09       	sbc	r23, r9
    159a:	8a 09       	sbc	r24, r10
    159c:	9b 09       	sbc	r25, r11
    159e:	6a 30       	cpi	r22, 0x0A	; 10
    15a0:	71 05       	cpc	r23, r1
    15a2:	81 05       	cpc	r24, r1
    15a4:	91 05       	cpc	r25, r1
    15a6:	c8 f1       	brcs	.+114    	; 0x161a <main+0x9fc>
    15a8:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f622b>
    15ac:	c0 92 25 04 	sts	0x0425, r12	; 0x800425 <vtable for UartClass+0x7f624a>
    15b0:	f8 94       	cli
    15b2:	80 91 78 3c 	lds	r24, 0x3C78	; 0x803c78 <c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:90

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
    15b6:	90 91 79 3c 	lds	r25, 0x3C79	; 0x803c79 <c+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:92
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
    15ba:	93 01       	movw	r18, r6
    15bc:	08 2e       	mov	r0, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:95

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <main+0x9a4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:96
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
    15c0:	22 0f       	add	r18, r18
    15c2:	0a 94       	dec	r0
    15c4:	ea f7       	brpl	.-6      	; 0x15c0 <main+0x9a2>
    15c6:	20 7f       	andi	r18, 0xF0	; 240
    15c8:	20 93 27 04 	sts	0x0427, r18	; 0x800427 <vtable for UartClass+0x7f624c>
    15cc:	8e 5f       	subi	r24, 0xFE	; 254
    15ce:	93 4c       	sbci	r25, 0xC3	; 195
    15d0:	dc 01       	movw	r26, r24
    15d2:	ec 91       	ld	r30, X
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:97
    PORTB.OUTTGL = mask;                    // Toggle those bits
    15d6:	e8 53       	subi	r30, 0x38	; 56
    15d8:	fe 45       	sbci	r31, 0x5E	; 94
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:99
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    15da:	80 81       	ld	r24, Z
    15dc:	81 b9       	out	0x01, r24	; 1
    15de:	78 94       	sei
    15e0:	80 91 78 3c 	lds	r24, 0x3C78	; 0x803c78 <c>
    15e4:	90 91 79 3c 	lds	r25, 0x3C79	; 0x803c79 <c+0x1>
    15e8:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:100
    VPORTA.OUT = this_digit;
    15ea:	84 30       	cpi	r24, 0x04	; 4
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:101
    sei(); // Interrupts back on
    15ec:	91 05       	cpc	r25, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:103

    c++;
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <main+0x9d4>
    15f0:	81 c0       	rjmp	.+258    	; 0x16f4 <main+0xad6>
    15f2:	80 93 78 3c 	sts	0x3C78, r24	; 0x803c78 <c>
    15f6:	90 93 79 3c 	sts	0x3C79, r25	; 0x803c79 <c+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:104
    if (c > 3) c = 0;
    15fa:	80 91 7e 3c 	lds	r24, 0x3C7E	; 0x803c7e <currDisplayFPSMicros>
    15fe:	90 91 7f 3c 	lds	r25, 0x3C7F	; 0x803c7f <currDisplayFPSMicros+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:103
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    1602:	a0 91 80 3c 	lds	r26, 0x3C80	; 0x803c80 <currDisplayFPSMicros+0x2>
    1606:	b0 91 81 3c 	lds	r27, 0x3C81	; 0x803c81 <currDisplayFPSMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:106
    if (c > 3) c = 0;

    startDisplayFPSMicros = currDisplayFPSMicros;
    160a:	80 93 7a 3c 	sts	0x3C7A, r24	; 0x803c7a <startDisplayFPSMicros>
    160e:	90 93 7b 3c 	sts	0x3C7B, r25	; 0x803c7b <startDisplayFPSMicros+0x1>
    1612:	a0 93 7c 3c 	sts	0x3C7C, r26	; 0x803c7c <startDisplayFPSMicros+0x2>
    1616:	b0 93 7d 3c 	sts	0x3C7D, r27	; 0x803c7d <startDisplayFPSMicros+0x3>
operateDisplay():
    161a:	e0 90 88 3c 	lds	r14, 0x3C88	; 0x803c88 <displayCycleCounter>
    161e:	f0 90 89 3c 	lds	r15, 0x3C89	; 0x803c89 <displayCycleCounter+0x1>
    1622:	80 91 86 3c 	lds	r24, 0x3C86	; 0x803c86 <prevCounter>
    1626:	90 91 87 3c 	lds	r25, 0x3C87	; 0x803c87 <prevCounter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:145

void operateDisplay() {
  while (true) {
    showOnDisplay(digits_);

    if (displayCycleCounter != prevCounter) {
    162a:	e8 16       	cp	r14, r24
    162c:	f9 06       	cpc	r15, r25
    162e:	b9 f0       	breq	.+46     	; 0x165e <main+0xa40>
    1630:	c7 01       	movw	r24, r14
    1632:	02 97       	sbiw	r24, 0x02	; 2
    1634:	02 97       	sbiw	r24, 0x02	; 2
    1636:	08 f0       	brcs	.+2      	; 0x163a <main+0xa1c>
    1638:	64 c0       	rjmp	.+200    	; 0x1702 <main+0xae4>
    163a:	e2 e0       	ldi	r30, 0x02	; 2
    163c:	fc e3       	ldi	r31, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:147
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
    163e:	81 91       	ld	r24, Z+
    1640:	8c 5f       	subi	r24, 0xFC	; 252
    1642:	df 01       	movw	r26, r30
    1644:	11 97       	sbiw	r26, 0x01	; 1
    1646:	8a 30       	cpi	r24, 0x0A	; 10
    1648:	08 f0       	brcs	.+2      	; 0x164c <main+0xa2e>
    164a:	59 c0       	rjmp	.+178    	; 0x16fe <main+0xae0>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:149
        for (int i = 0; i < int(sizeof(digits_)); i++) {
          digits_[i] += 4;
    164c:	8c 93       	st	X, r24
    164e:	bc e3       	ldi	r27, 0x3C	; 60
    1650:	e6 30       	cpi	r30, 0x06	; 6
    1652:	fb 07       	cpc	r31, r27
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:150
          if (digits_[i] > 9) digits_[i] = 0;
    1654:	a1 f7       	brne	.-24     	; 0x163e <main+0xa20>
    1656:	e0 92 86 3c 	sts	0x3C86, r14	; 0x803c86 <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:149

    if (displayCycleCounter != prevCounter) {
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < int(sizeof(digits_)); i++) {
          digits_[i] += 4;
    165a:	f0 92 87 3c 	sts	0x3C87, r15	; 0x803c87 <prevCounter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:148
    showOnDisplay(digits_);

    if (displayCycleCounter != prevCounter) {
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < int(sizeof(digits_)); i++) {
    165e:	0e 94 38 02 	call	0x470	; 0x470 <millis>
    1662:	80 90 82 3c 	lds	r8, 0x3C82	; 0x803c82 <startCountMillis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:163

        break;
        //--
      }

      prevCounter = displayCycleCounter;
    1666:	90 90 83 3c 	lds	r9, 0x3C83	; 0x803c83 <startCountMillis+0x1>
    166a:	a0 90 84 3c 	lds	r10, 0x3C84	; 0x803c84 <startCountMillis+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:166
    }

    currentCountMillis = millis();
    166e:	b0 90 85 3c 	lds	r11, 0x3C85	; 0x803c85 <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:167
    if (currentCountMillis - startCountMillis >= countdownPeriod) {
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	28 19       	sub	r18, r8
    1678:	39 09       	sbc	r19, r9
    167a:	4a 09       	sbc	r20, r10
    167c:	5b 09       	sbc	r21, r11
    167e:	49 01       	movw	r8, r18
    1680:	5a 01       	movw	r10, r20
    1682:	30 ea       	ldi	r19, 0xA0	; 160
    1684:	83 16       	cp	r8, r19
    1686:	3f e0       	ldi	r19, 0x0F	; 15
    1688:	93 06       	cpc	r9, r19
    168a:	a1 04       	cpc	r10, r1
    168c:	b1 04       	cpc	r11, r1
    168e:	08 f4       	brcc	.+2      	; 0x1692 <main+0xa74>
    1690:	70 cf       	rjmp	.-288    	; 0x1572 <main+0x954>
    1692:	4f ef       	ldi	r20, 0xFF	; 255
    1694:	e4 1a       	sub	r14, r20
    1696:	f4 0a       	sbc	r15, r20
    1698:	e0 92 88 3c 	sts	0x3C88, r14	; 0x803c88 <displayCycleCounter>
    169c:	f0 92 89 3c 	sts	0x3C89, r15	; 0x803c89 <displayCycleCounter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:168
      displayCycleCounter++;
    16a0:	60 93 82 3c 	sts	0x3C82, r22	; 0x803c82 <startCountMillis>
    16a4:	70 93 83 3c 	sts	0x3C83, r23	; 0x803c83 <startCountMillis+0x1>
    16a8:	80 93 84 3c 	sts	0x3C84, r24	; 0x803c84 <startCountMillis+0x2>
    16ac:	90 93 85 3c 	sts	0x3C85, r25	; 0x803c85 <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:169
      startCountMillis = currentCountMillis;
    16b0:	60 cf       	rjmp	.-320    	; 0x1572 <main+0x954>
reportRTCAvailability():
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	80 93 69 3c 	sts	0x3C69, r24	; 0x803c69 <rtcAvailable>
    16b8:	8f ee       	ldi	r24, 0xEF	; 239
    16ba:	93 ea       	ldi	r25, 0xA3	; 163
    16bc:	b4 cd       	rjmp	.-1176   	; 0x1226 <main+0x608>
rtcReadWriteChecker():
    16be:	10 92 68 3c 	sts	0x3C68, r1	; 0x803c68 <rtcReadable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:34

  if (!rtc.begin()) {
    rtcAvailable = false;
    Serial.println("RTC_ADDR_FOUND:0");
  } else {
    rtcAvailable = true;
    16c2:	88 e3       	ldi	r24, 0x38	; 56
    16c4:	94 ea       	ldi	r25, 0xA4	; 164
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:35
    Serial.println("RTC_ADDR_FOUND:1");
    16c6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
    16ca:	6f ce       	rjmp	.-802    	; 0x13aa <main+0x78c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:52
      delay(100);
      // Send string date & time
      Serial.println(String(rtc.stringTime()));
      Serial.println(String(rtc.stringDate()));
    } else {
      rtcReadable = false;
    16cc:	88 e3       	ldi	r24, 0x38	; 56
    16ce:	94 ea       	ldi	r25, 0xA4	; 164
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:53
      Serial.println("RTC_READABLE:0");
    16d0:	73 ce       	rjmp	.-794    	; 0x13b8 <main+0x79a>
btnChecker():
    16d2:	80 91 72 3c 	lds	r24, 0x3C72	; 0x803c72 <btnWatchTimerCurr>
    16d6:	90 91 73 3c 	lds	r25, 0x3C73	; 0x803c73 <btnWatchTimerCurr+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/rtcExaminer.h:60
    break;
  }
  if (rtcReadable) {
    Serial.println("RTC_READABLE:1");
  } else {
    Serial.println("RTC_READABLE:0");
    16da:	a0 91 74 3c 	lds	r26, 0x3C74	; 0x803c74 <btnWatchTimerCurr+0x2>
    16de:	b0 91 75 3c 	lds	r27, 0x3C75	; 0x803c75 <btnWatchTimerCurr+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/btnExaminer.h:49
        //        btnConnChecked = true;
        //        printHeader = false;
        break;
      }

      btnWatchTimerStart = btnWatchTimerCurr;
    16e2:	80 93 6e 3c 	sts	0x3C6E, r24	; 0x803c6e <btnWatchTimerStart>
    16e6:	90 93 6f 3c 	sts	0x3C6F, r25	; 0x803c6f <btnWatchTimerStart+0x1>
    16ea:	a0 93 70 3c 	sts	0x3C70, r26	; 0x803c70 <btnWatchTimerStart+0x2>
    16ee:	b0 93 71 3c 	sts	0x3C71, r27	; 0x803c71 <btnWatchTimerStart+0x3>
    16f2:	8b ce       	rjmp	.-746    	; 0x140a <main+0x7ec>
showOnDisplay():
    16f4:	10 92 78 3c 	sts	0x3C78, r1	; 0x803c78 <c>
    16f8:	10 92 79 3c 	sts	0x3C79, r1	; 0x803c79 <c+0x1>
    16fc:	7e cf       	rjmp	.-260    	; 0x15fa <main+0x9dc>
operateDisplay():
    16fe:	1c 92       	st	X, r1
    1700:	a6 cf       	rjmp	.-180    	; 0x164e <main+0xa30>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:104
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    if (c > 3) c = 0;
    1702:	e4 e0       	ldi	r30, 0x04	; 4
    1704:	ee 16       	cp	r14, r30
    1706:	f1 04       	cpc	r15, r1
    1708:	0c f4       	brge	.+2      	; 0x170c <main+0xaee>
    170a:	a5 cf       	rjmp	.-182    	; 0x1656 <main+0xa38>
turnOffDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:150
    if (displayCycleCounter != prevCounter) {
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < int(sizeof(digits_)); i++) {
          digits_[i] += 4;
          if (digits_[i] > 9) digits_[i] = 0;
    170c:	80 e2       	ldi	r24, 0x20	; 32
    170e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f626b>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:154
        }
      }

      if (displayCycleCounter > 3) {
    1712:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f622b>
    1716:	80 ef       	ldi	r24, 0xF0	; 240
    1718:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f624a>
operateDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:58
  PORTB.DIRSET = 0b11110000;
}


void turnOffDisplay() {
  PORTC.OUTCLR = PIN5_bm; // toggle PC5 OFF
    171c:	10 92 88 3c 	sts	0x3C88, r1	; 0x803c88 <displayCycleCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:61

  // ---- Clear all leds of a segment ---- //
  PORTA.OUTCLR = 0b11111110;
    1720:	10 92 89 3c 	sts	0x3C89, r1	; 0x803c89 <displayCycleCounter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:63
  // ---- Deactivatec all segments by setting them HIGH (My segments are in common Anode config) ---- //
  PORTB.OUTSET = 0b11110000;
    1724:	10 92 86 3c 	sts	0x3C86, r1	; 0x803c86 <prevCounter>
    1728:	10 92 87 3c 	sts	0x3C87, r1	; 0x803c87 <prevCounter+0x1>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:156
        }
      }

      if (displayCycleCounter > 3) {
        turnOffDisplay();
        displayCycleCounter = 0;
    172c:	8b e3       	ldi	r24, 0x3B	; 59
    172e:	95 ea       	ldi	r25, 0xA5	; 165
    1730:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/displayOperator.h:157
        prevCounter = 0;
    1734:	8a e3       	ldi	r24, 0x3A	; 58
    1736:	92 ea       	ldi	r25, 0xA2	; 162
    1738:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <Print::println(char const*) [clone .constprop.32]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:95
    operateDisplay();

    Serial.println("\nDISPLAY WORKING? (write below)");
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	80 93 8a 3c 	sts	0x3C8A, r24	; 0x803c8a <displayChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:96
    Serial.println("!");
    1742:	d0 ca       	rjmp	.-2656   	; 0xce4 <main+0xc6>

00001744 <__itoa_ncheck>:
__itoa_ncheck():
    1744:	bb 27       	eor	r27, r27
    1746:	4a 30       	cpi	r20, 0x0A	; 10
    1748:	31 f4       	brne	.+12     	; 0x1756 <__itoa_ncheck+0x12>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:98

    displayChecked = true;
    174a:	99 23       	and	r25, r25
    174c:	22 f4       	brpl	.+8      	; 0x1756 <__itoa_ncheck+0x12>
    174e:	bd e2       	ldi	r27, 0x2D	; 45
    1750:	90 95       	com	r25
    1752:	81 95       	neg	r24
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	01 c0       	rjmp	.+2      	; 0x175a <__utoa_common>

00001758 <__utoa_ncheck>:
__utoa_ncheck():
    1758:	bb 27       	eor	r27, r27

0000175a <__utoa_common>:
    175a:	fb 01       	movw	r30, r22
    175c:	55 27       	eor	r21, r21
    175e:	aa 27       	eor	r26, r26
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	aa 1f       	adc	r26, r26
    1766:	a4 17       	cp	r26, r20
    1768:	10 f0       	brcs	.+4      	; 0x176e <__utoa_common+0x14>
    176a:	a4 1b       	sub	r26, r20
    176c:	83 95       	inc	r24
    176e:	50 51       	subi	r21, 0x10	; 16
    1770:	b9 f7       	brne	.-18     	; 0x1760 <__utoa_common+0x6>
    1772:	a0 5d       	subi	r26, 0xD0	; 208
    1774:	aa 33       	cpi	r26, 0x3A	; 58
    1776:	08 f0       	brcs	.+2      	; 0x177a <__utoa_common+0x20>
    1778:	a9 5d       	subi	r26, 0xD9	; 217
    177a:	a1 93       	st	Z+, r26
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	79 f7       	brne	.-34     	; 0x175e <__utoa_common+0x4>
    1780:	b1 11       	cpse	r27, r1
    1782:	b1 93       	st	Z+, r27
    1784:	11 92       	st	Z+, r1
    1786:	cb 01       	movw	r24, r22
    1788:	e1 c1       	rjmp	.+962    	; 0x1b4c <strrev>

0000178a <vfprintf>:
vfprintf():
    178a:	ab e0       	ldi	r26, 0x0B	; 11
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ea ec       	ldi	r30, 0xCA	; 202
    1790:	fb e0       	ldi	r31, 0x0B	; 11
    1792:	84 c2       	rjmp	.+1288   	; 0x1c9c <__prologue_saves__>
    1794:	7c 01       	movw	r14, r24
    1796:	3b 01       	movw	r6, r22
    1798:	8a 01       	movw	r16, r20
    179a:	fc 01       	movw	r30, r24
    179c:	16 82       	std	Z+6, r1	; 0x06
    179e:	17 82       	std	Z+7, r1	; 0x07
    17a0:	83 81       	ldd	r24, Z+3	; 0x03
    17a2:	81 ff       	sbrs	r24, 1
    17a4:	ba c1       	rjmp	.+884    	; 0x1b1a <vfprintf+0x390>
    17a6:	ce 01       	movw	r24, r28
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	5c 01       	movw	r10, r24
    17ac:	f7 01       	movw	r30, r14
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	f3 01       	movw	r30, r6
    17b2:	93 fd       	sbrc	r25, 3
    17b4:	85 91       	lpm	r24, Z+
    17b6:	93 ff       	sbrs	r25, 3
    17b8:	81 91       	ld	r24, Z+
    17ba:	3f 01       	movw	r6, r30
    17bc:	88 23       	and	r24, r24
    17be:	09 f4       	brne	.+2      	; 0x17c2 <vfprintf+0x38>
    17c0:	49 c1       	rjmp	.+658    	; 0x1a54 <vfprintf+0x2ca>
    17c2:	85 32       	cpi	r24, 0x25	; 37
    17c4:	39 f4       	brne	.+14     	; 0x17d4 <vfprintf+0x4a>
    17c6:	93 fd       	sbrc	r25, 3
    17c8:	85 91       	lpm	r24, Z+
    17ca:	93 ff       	sbrs	r25, 3
    17cc:	81 91       	ld	r24, Z+
    17ce:	3f 01       	movw	r6, r30
    17d0:	85 32       	cpi	r24, 0x25	; 37
    17d2:	21 f4       	brne	.+8      	; 0x17dc <vfprintf+0x52>
    17d4:	b7 01       	movw	r22, r14
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	c9 d1       	rcall	.+914    	; 0x1b6c <fputc>
    17da:	e8 cf       	rjmp	.-48     	; 0x17ac <vfprintf+0x22>
    17dc:	91 2c       	mov	r9, r1
    17de:	21 2c       	mov	r2, r1
    17e0:	31 2c       	mov	r3, r1
    17e2:	ff e1       	ldi	r31, 0x1F	; 31
    17e4:	f3 15       	cp	r31, r3
    17e6:	38 f0       	brcs	.+14     	; 0x17f6 <vfprintf+0x6c>
    17e8:	8b 32       	cpi	r24, 0x2B	; 43
    17ea:	11 f1       	breq	.+68     	; 0x1830 <vfprintf+0xa6>
    17ec:	90 f4       	brcc	.+36     	; 0x1812 <vfprintf+0x88>
    17ee:	80 32       	cpi	r24, 0x20	; 32
    17f0:	09 f1       	breq	.+66     	; 0x1834 <vfprintf+0xaa>
    17f2:	83 32       	cpi	r24, 0x23	; 35
    17f4:	29 f1       	breq	.+74     	; 0x1840 <vfprintf+0xb6>
    17f6:	37 fc       	sbrc	r3, 7
    17f8:	3c c0       	rjmp	.+120    	; 0x1872 <vfprintf+0xe8>
    17fa:	20 ed       	ldi	r18, 0xD0	; 208
    17fc:	28 0f       	add	r18, r24
    17fe:	2a 30       	cpi	r18, 0x0A	; 10
    1800:	50 f5       	brcc	.+84     	; 0x1856 <vfprintf+0xcc>
    1802:	36 fe       	sbrs	r3, 6
    1804:	20 c0       	rjmp	.+64     	; 0x1846 <vfprintf+0xbc>
    1806:	8a e0       	ldi	r24, 0x0A	; 10
    1808:	98 9e       	mul	r9, r24
    180a:	20 0d       	add	r18, r0
    180c:	11 24       	eor	r1, r1
    180e:	92 2e       	mov	r9, r18
    1810:	06 c0       	rjmp	.+12     	; 0x181e <vfprintf+0x94>
    1812:	8d 32       	cpi	r24, 0x2D	; 45
    1814:	91 f0       	breq	.+36     	; 0x183a <vfprintf+0xb0>
    1816:	80 33       	cpi	r24, 0x30	; 48
    1818:	71 f7       	brne	.-36     	; 0x17f6 <vfprintf+0x6c>
    181a:	68 94       	set
    181c:	30 f8       	bld	r3, 0
    181e:	f3 01       	movw	r30, r6
    1820:	93 fd       	sbrc	r25, 3
    1822:	85 91       	lpm	r24, Z+
    1824:	93 ff       	sbrs	r25, 3
    1826:	81 91       	ld	r24, Z+
    1828:	3f 01       	movw	r6, r30
    182a:	81 11       	cpse	r24, r1
    182c:	da cf       	rjmp	.-76     	; 0x17e2 <vfprintf+0x58>
    182e:	21 c0       	rjmp	.+66     	; 0x1872 <vfprintf+0xe8>
    1830:	68 94       	set
    1832:	31 f8       	bld	r3, 1
    1834:	68 94       	set
    1836:	32 f8       	bld	r3, 2
    1838:	f2 cf       	rjmp	.-28     	; 0x181e <vfprintf+0x94>
    183a:	68 94       	set
    183c:	33 f8       	bld	r3, 3
    183e:	ef cf       	rjmp	.-34     	; 0x181e <vfprintf+0x94>
    1840:	68 94       	set
    1842:	34 f8       	bld	r3, 4
    1844:	ec cf       	rjmp	.-40     	; 0x181e <vfprintf+0x94>
    1846:	ea e0       	ldi	r30, 0x0A	; 10
    1848:	2e 9e       	mul	r2, r30
    184a:	20 0d       	add	r18, r0
    184c:	11 24       	eor	r1, r1
    184e:	22 2e       	mov	r2, r18
    1850:	68 94       	set
    1852:	35 f8       	bld	r3, 5
    1854:	e4 cf       	rjmp	.-56     	; 0x181e <vfprintf+0x94>
    1856:	8e 32       	cpi	r24, 0x2E	; 46
    1858:	29 f4       	brne	.+10     	; 0x1864 <vfprintf+0xda>
    185a:	36 fc       	sbrc	r3, 6
    185c:	fb c0       	rjmp	.+502    	; 0x1a54 <vfprintf+0x2ca>
    185e:	68 94       	set
    1860:	36 f8       	bld	r3, 6
    1862:	dd cf       	rjmp	.-70     	; 0x181e <vfprintf+0x94>
    1864:	8c 36       	cpi	r24, 0x6C	; 108
    1866:	19 f4       	brne	.+6      	; 0x186e <vfprintf+0xe4>
    1868:	68 94       	set
    186a:	37 f8       	bld	r3, 7
    186c:	d8 cf       	rjmp	.-80     	; 0x181e <vfprintf+0x94>
    186e:	88 36       	cpi	r24, 0x68	; 104
    1870:	b1 f2       	breq	.-84     	; 0x181e <vfprintf+0x94>
    1872:	98 2f       	mov	r25, r24
    1874:	9f 7d       	andi	r25, 0xDF	; 223
    1876:	95 54       	subi	r25, 0x45	; 69
    1878:	93 30       	cpi	r25, 0x03	; 3
    187a:	d8 f0       	brcs	.+54     	; 0x18b2 <vfprintf+0x128>
    187c:	83 36       	cpi	r24, 0x63	; 99
    187e:	91 f1       	breq	.+100    	; 0x18e4 <vfprintf+0x15a>
    1880:	83 37       	cpi	r24, 0x73	; 115
    1882:	b1 f1       	breq	.+108    	; 0x18f0 <vfprintf+0x166>
    1884:	83 35       	cpi	r24, 0x53	; 83
    1886:	09 f0       	breq	.+2      	; 0x188a <vfprintf+0x100>
    1888:	5e c0       	rjmp	.+188    	; 0x1946 <vfprintf+0x1bc>
    188a:	28 01       	movw	r4, r16
    188c:	f2 e0       	ldi	r31, 0x02	; 2
    188e:	4f 0e       	add	r4, r31
    1890:	51 1c       	adc	r5, r1
    1892:	f8 01       	movw	r30, r16
    1894:	c0 80       	ld	r12, Z
    1896:	d1 80       	ldd	r13, Z+1	; 0x01
    1898:	69 2d       	mov	r22, r9
    189a:	70 e0       	ldi	r23, 0x00	; 0
    189c:	36 fc       	sbrc	r3, 6
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <vfprintf+0x11a>
    18a0:	6f ef       	ldi	r22, 0xFF	; 255
    18a2:	7f ef       	ldi	r23, 0xFF	; 255
    18a4:	c6 01       	movw	r24, r12
    18a6:	3c d1       	rcall	.+632    	; 0x1b20 <strnlen_P>
    18a8:	4c 01       	movw	r8, r24
    18aa:	68 94       	set
    18ac:	37 f8       	bld	r3, 7
    18ae:	82 01       	movw	r16, r4
    18b0:	0a c0       	rjmp	.+20     	; 0x18c6 <vfprintf+0x13c>
    18b2:	0c 5f       	subi	r16, 0xFC	; 252
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	ff e3       	ldi	r31, 0x3F	; 63
    18b8:	f9 83       	std	Y+1, r31	; 0x01
    18ba:	88 24       	eor	r8, r8
    18bc:	83 94       	inc	r8
    18be:	91 2c       	mov	r9, r1
    18c0:	65 01       	movw	r12, r10
    18c2:	e8 94       	clt
    18c4:	37 f8       	bld	r3, 7
    18c6:	33 fe       	sbrs	r3, 3
    18c8:	2a c0       	rjmp	.+84     	; 0x191e <vfprintf+0x194>
    18ca:	52 2c       	mov	r5, r2
    18cc:	81 14       	cp	r8, r1
    18ce:	91 04       	cpc	r9, r1
    18d0:	59 f5       	brne	.+86     	; 0x1928 <vfprintf+0x19e>
    18d2:	55 20       	and	r5, r5
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <vfprintf+0x14e>
    18d6:	6a cf       	rjmp	.-300    	; 0x17ac <vfprintf+0x22>
    18d8:	b7 01       	movw	r22, r14
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	46 d1       	rcall	.+652    	; 0x1b6c <fputc>
    18e0:	5a 94       	dec	r5
    18e2:	f7 cf       	rjmp	.-18     	; 0x18d2 <vfprintf+0x148>
    18e4:	f8 01       	movw	r30, r16
    18e6:	80 81       	ld	r24, Z
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	0e 5f       	subi	r16, 0xFE	; 254
    18ec:	1f 4f       	sbci	r17, 0xFF	; 255
    18ee:	e5 cf       	rjmp	.-54     	; 0x18ba <vfprintf+0x130>
    18f0:	28 01       	movw	r4, r16
    18f2:	f2 e0       	ldi	r31, 0x02	; 2
    18f4:	4f 0e       	add	r4, r31
    18f6:	51 1c       	adc	r5, r1
    18f8:	f8 01       	movw	r30, r16
    18fa:	c0 80       	ld	r12, Z
    18fc:	d1 80       	ldd	r13, Z+1	; 0x01
    18fe:	69 2d       	mov	r22, r9
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	36 fc       	sbrc	r3, 6
    1904:	02 c0       	rjmp	.+4      	; 0x190a <vfprintf+0x180>
    1906:	6f ef       	ldi	r22, 0xFF	; 255
    1908:	7f ef       	ldi	r23, 0xFF	; 255
    190a:	c6 01       	movw	r24, r12
    190c:	14 d1       	rcall	.+552    	; 0x1b36 <strnlen>
    190e:	4c 01       	movw	r8, r24
    1910:	82 01       	movw	r16, r4
    1912:	d7 cf       	rjmp	.-82     	; 0x18c2 <vfprintf+0x138>
    1914:	b7 01       	movw	r22, r14
    1916:	80 e2       	ldi	r24, 0x20	; 32
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	28 d1       	rcall	.+592    	; 0x1b6c <fputc>
    191c:	2a 94       	dec	r2
    191e:	28 14       	cp	r2, r8
    1920:	19 04       	cpc	r1, r9
    1922:	09 f0       	breq	.+2      	; 0x1926 <vfprintf+0x19c>
    1924:	b8 f7       	brcc	.-18     	; 0x1914 <vfprintf+0x18a>
    1926:	d1 cf       	rjmp	.-94     	; 0x18ca <vfprintf+0x140>
    1928:	f6 01       	movw	r30, r12
    192a:	37 fc       	sbrc	r3, 7
    192c:	85 91       	lpm	r24, Z+
    192e:	37 fe       	sbrs	r3, 7
    1930:	81 91       	ld	r24, Z+
    1932:	6f 01       	movw	r12, r30
    1934:	b7 01       	movw	r22, r14
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	19 d1       	rcall	.+562    	; 0x1b6c <fputc>
    193a:	51 10       	cpse	r5, r1
    193c:	5a 94       	dec	r5
    193e:	f1 e0       	ldi	r31, 0x01	; 1
    1940:	8f 1a       	sub	r8, r31
    1942:	91 08       	sbc	r9, r1
    1944:	c3 cf       	rjmp	.-122    	; 0x18cc <vfprintf+0x142>
    1946:	84 36       	cpi	r24, 0x64	; 100
    1948:	19 f0       	breq	.+6      	; 0x1950 <vfprintf+0x1c6>
    194a:	89 36       	cpi	r24, 0x69	; 105
    194c:	09 f0       	breq	.+2      	; 0x1950 <vfprintf+0x1c6>
    194e:	73 c0       	rjmp	.+230    	; 0x1a36 <vfprintf+0x2ac>
    1950:	f8 01       	movw	r30, r16
    1952:	37 fe       	sbrs	r3, 7
    1954:	67 c0       	rjmp	.+206    	; 0x1a24 <vfprintf+0x29a>
    1956:	60 81       	ld	r22, Z
    1958:	71 81       	ldd	r23, Z+1	; 0x01
    195a:	82 81       	ldd	r24, Z+2	; 0x02
    195c:	93 81       	ldd	r25, Z+3	; 0x03
    195e:	0c 5f       	subi	r16, 0xFC	; 252
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	f3 2d       	mov	r31, r3
    1964:	ff 76       	andi	r31, 0x6F	; 111
    1966:	3f 2e       	mov	r3, r31
    1968:	97 ff       	sbrs	r25, 7
    196a:	09 c0       	rjmp	.+18     	; 0x197e <vfprintf+0x1f4>
    196c:	90 95       	com	r25
    196e:	80 95       	com	r24
    1970:	70 95       	com	r23
    1972:	61 95       	neg	r22
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	8f 4f       	sbci	r24, 0xFF	; 255
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	68 94       	set
    197c:	37 f8       	bld	r3, 7
    197e:	2a e0       	ldi	r18, 0x0A	; 10
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	a5 01       	movw	r20, r10
    1984:	23 d1       	rcall	.+582    	; 0x1bcc <__ultoa_invert>
    1986:	c8 2e       	mov	r12, r24
    1988:	ca 18       	sub	r12, r10
    198a:	8c 2c       	mov	r8, r12
    198c:	43 2c       	mov	r4, r3
    198e:	36 fe       	sbrs	r3, 6
    1990:	0c c0       	rjmp	.+24     	; 0x19aa <vfprintf+0x220>
    1992:	e8 94       	clt
    1994:	40 f8       	bld	r4, 0
    1996:	c9 14       	cp	r12, r9
    1998:	40 f4       	brcc	.+16     	; 0x19aa <vfprintf+0x220>
    199a:	34 fe       	sbrs	r3, 4
    199c:	05 c0       	rjmp	.+10     	; 0x19a8 <vfprintf+0x21e>
    199e:	32 fc       	sbrc	r3, 2
    19a0:	03 c0       	rjmp	.+6      	; 0x19a8 <vfprintf+0x21e>
    19a2:	f3 2d       	mov	r31, r3
    19a4:	fe 7e       	andi	r31, 0xEE	; 238
    19a6:	4f 2e       	mov	r4, r31
    19a8:	89 2c       	mov	r8, r9
    19aa:	44 fe       	sbrs	r4, 4
    19ac:	90 c0       	rjmp	.+288    	; 0x1ace <vfprintf+0x344>
    19ae:	fe 01       	movw	r30, r28
    19b0:	ec 0d       	add	r30, r12
    19b2:	f1 1d       	adc	r31, r1
    19b4:	80 81       	ld	r24, Z
    19b6:	80 33       	cpi	r24, 0x30	; 48
    19b8:	09 f0       	breq	.+2      	; 0x19bc <vfprintf+0x232>
    19ba:	82 c0       	rjmp	.+260    	; 0x1ac0 <vfprintf+0x336>
    19bc:	24 2d       	mov	r18, r4
    19be:	29 7e       	andi	r18, 0xE9	; 233
    19c0:	42 2e       	mov	r4, r18
    19c2:	84 2d       	mov	r24, r4
    19c4:	88 70       	andi	r24, 0x08	; 8
    19c6:	58 2e       	mov	r5, r24
    19c8:	43 fc       	sbrc	r4, 3
    19ca:	8f c0       	rjmp	.+286    	; 0x1aea <vfprintf+0x360>
    19cc:	40 fe       	sbrs	r4, 0
    19ce:	89 c0       	rjmp	.+274    	; 0x1ae2 <vfprintf+0x358>
    19d0:	9c 2c       	mov	r9, r12
    19d2:	82 14       	cp	r8, r2
    19d4:	18 f4       	brcc	.+6      	; 0x19dc <vfprintf+0x252>
    19d6:	2c 0c       	add	r2, r12
    19d8:	92 2c       	mov	r9, r2
    19da:	98 18       	sub	r9, r8
    19dc:	44 fe       	sbrs	r4, 4
    19de:	8b c0       	rjmp	.+278    	; 0x1af6 <vfprintf+0x36c>
    19e0:	b7 01       	movw	r22, r14
    19e2:	80 e3       	ldi	r24, 0x30	; 48
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	c2 d0       	rcall	.+388    	; 0x1b6c <fputc>
    19e8:	42 fe       	sbrs	r4, 2
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <vfprintf+0x272>
    19ec:	88 e7       	ldi	r24, 0x78	; 120
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	41 fe       	sbrs	r4, 1
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <vfprintf+0x26e>
    19f4:	88 e5       	ldi	r24, 0x58	; 88
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	b7 01       	movw	r22, r14
    19fa:	b8 d0       	rcall	.+368    	; 0x1b6c <fputc>
    19fc:	c9 14       	cp	r12, r9
    19fe:	08 f4       	brcc	.+2      	; 0x1a02 <vfprintf+0x278>
    1a00:	86 c0       	rjmp	.+268    	; 0x1b0e <vfprintf+0x384>
    1a02:	ca 94       	dec	r12
    1a04:	d1 2c       	mov	r13, r1
    1a06:	9f ef       	ldi	r25, 0xFF	; 255
    1a08:	c9 1a       	sub	r12, r25
    1a0a:	d9 0a       	sbc	r13, r25
    1a0c:	ca 0c       	add	r12, r10
    1a0e:	db 1c       	adc	r13, r11
    1a10:	f6 01       	movw	r30, r12
    1a12:	82 91       	ld	r24, -Z
    1a14:	6f 01       	movw	r12, r30
    1a16:	b7 01       	movw	r22, r14
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a8 d0       	rcall	.+336    	; 0x1b6c <fputc>
    1a1c:	ac 14       	cp	r10, r12
    1a1e:	bd 04       	cpc	r11, r13
    1a20:	b9 f7       	brne	.-18     	; 0x1a10 <vfprintf+0x286>
    1a22:	57 cf       	rjmp	.-338    	; 0x18d2 <vfprintf+0x148>
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	07 2e       	mov	r0, r23
    1a2a:	00 0c       	add	r0, r0
    1a2c:	88 0b       	sbc	r24, r24
    1a2e:	99 0b       	sbc	r25, r25
    1a30:	0e 5f       	subi	r16, 0xFE	; 254
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	96 cf       	rjmp	.-212    	; 0x1962 <vfprintf+0x1d8>
    1a36:	d3 2c       	mov	r13, r3
    1a38:	e8 94       	clt
    1a3a:	d4 f8       	bld	r13, 4
    1a3c:	2a e0       	ldi	r18, 0x0A	; 10
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	85 37       	cpi	r24, 0x75	; 117
    1a42:	31 f1       	breq	.+76     	; 0x1a90 <vfprintf+0x306>
    1a44:	23 2d       	mov	r18, r3
    1a46:	29 7f       	andi	r18, 0xF9	; 249
    1a48:	d2 2e       	mov	r13, r18
    1a4a:	8f 36       	cpi	r24, 0x6F	; 111
    1a4c:	f9 f0       	breq	.+62     	; 0x1a8c <vfprintf+0x302>
    1a4e:	40 f4       	brcc	.+16     	; 0x1a60 <vfprintf+0x2d6>
    1a50:	88 35       	cpi	r24, 0x58	; 88
    1a52:	a1 f0       	breq	.+40     	; 0x1a7c <vfprintf+0x2f2>
    1a54:	f7 01       	movw	r30, r14
    1a56:	86 81       	ldd	r24, Z+6	; 0x06
    1a58:	97 81       	ldd	r25, Z+7	; 0x07
    1a5a:	2b 96       	adiw	r28, 0x0b	; 11
    1a5c:	e2 e1       	ldi	r30, 0x12	; 18
    1a5e:	37 c1       	rjmp	.+622    	; 0x1cce <__epilogue_restores__>
    1a60:	80 37       	cpi	r24, 0x70	; 112
    1a62:	49 f0       	breq	.+18     	; 0x1a76 <vfprintf+0x2ec>
    1a64:	88 37       	cpi	r24, 0x78	; 120
    1a66:	b1 f7       	brne	.-20     	; 0x1a54 <vfprintf+0x2ca>
    1a68:	d4 fe       	sbrs	r13, 4
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <vfprintf+0x2e6>
    1a6c:	68 94       	set
    1a6e:	d2 f8       	bld	r13, 2
    1a70:	20 e1       	ldi	r18, 0x10	; 16
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <vfprintf+0x306>
    1a76:	68 94       	set
    1a78:	d4 f8       	bld	r13, 4
    1a7a:	f6 cf       	rjmp	.-20     	; 0x1a68 <vfprintf+0x2de>
    1a7c:	34 fe       	sbrs	r3, 4
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <vfprintf+0x2fc>
    1a80:	82 2f       	mov	r24, r18
    1a82:	86 60       	ori	r24, 0x06	; 6
    1a84:	d8 2e       	mov	r13, r24
    1a86:	20 e1       	ldi	r18, 0x10	; 16
    1a88:	32 e0       	ldi	r19, 0x02	; 2
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vfprintf+0x306>
    1a8c:	28 e0       	ldi	r18, 0x08	; 8
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	f8 01       	movw	r30, r16
    1a92:	d7 fe       	sbrs	r13, 7
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <vfprintf+0x328>
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	82 81       	ldd	r24, Z+2	; 0x02
    1a9c:	93 81       	ldd	r25, Z+3	; 0x03
    1a9e:	0c 5f       	subi	r16, 0xFC	; 252
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	a5 01       	movw	r20, r10
    1aa4:	93 d0       	rcall	.+294    	; 0x1bcc <__ultoa_invert>
    1aa6:	c8 2e       	mov	r12, r24
    1aa8:	ca 18       	sub	r12, r10
    1aaa:	3d 2c       	mov	r3, r13
    1aac:	e8 94       	clt
    1aae:	37 f8       	bld	r3, 7
    1ab0:	6c cf       	rjmp	.-296    	; 0x198a <vfprintf+0x200>
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 5f       	subi	r16, 0xFE	; 254
    1abc:	1f 4f       	sbci	r17, 0xFF	; 255
    1abe:	f1 cf       	rjmp	.-30     	; 0x1aa2 <vfprintf+0x318>
    1ac0:	42 fc       	sbrc	r4, 2
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <vfprintf+0x33e>
    1ac4:	83 94       	inc	r8
    1ac6:	7d cf       	rjmp	.-262    	; 0x19c2 <vfprintf+0x238>
    1ac8:	83 94       	inc	r8
    1aca:	83 94       	inc	r8
    1acc:	7a cf       	rjmp	.-268    	; 0x19c2 <vfprintf+0x238>
    1ace:	84 2d       	mov	r24, r4
    1ad0:	86 78       	andi	r24, 0x86	; 134
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <vfprintf+0x34c>
    1ad4:	76 cf       	rjmp	.-276    	; 0x19c2 <vfprintf+0x238>
    1ad6:	f6 cf       	rjmp	.-20     	; 0x1ac4 <vfprintf+0x33a>
    1ad8:	b7 01       	movw	r22, r14
    1ada:	80 e2       	ldi	r24, 0x20	; 32
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	46 d0       	rcall	.+140    	; 0x1b6c <fputc>
    1ae0:	83 94       	inc	r8
    1ae2:	82 14       	cp	r8, r2
    1ae4:	c8 f3       	brcs	.-14     	; 0x1ad8 <vfprintf+0x34e>
    1ae6:	51 2c       	mov	r5, r1
    1ae8:	79 cf       	rjmp	.-270    	; 0x19dc <vfprintf+0x252>
    1aea:	52 2c       	mov	r5, r2
    1aec:	58 18       	sub	r5, r8
    1aee:	82 14       	cp	r8, r2
    1af0:	08 f4       	brcc	.+2      	; 0x1af4 <vfprintf+0x36a>
    1af2:	74 cf       	rjmp	.-280    	; 0x19dc <vfprintf+0x252>
    1af4:	f8 cf       	rjmp	.-16     	; 0x1ae6 <vfprintf+0x35c>
    1af6:	84 2d       	mov	r24, r4
    1af8:	86 78       	andi	r24, 0x86	; 134
    1afa:	09 f4       	brne	.+2      	; 0x1afe <vfprintf+0x374>
    1afc:	7f cf       	rjmp	.-258    	; 0x19fc <vfprintf+0x272>
    1afe:	8b e2       	ldi	r24, 0x2B	; 43
    1b00:	41 fe       	sbrs	r4, 1
    1b02:	80 e2       	ldi	r24, 0x20	; 32
    1b04:	47 fc       	sbrc	r4, 7
    1b06:	8d e2       	ldi	r24, 0x2D	; 45
    1b08:	b7 01       	movw	r22, r14
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	76 cf       	rjmp	.-276    	; 0x19fa <vfprintf+0x270>
    1b0e:	b7 01       	movw	r22, r14
    1b10:	80 e3       	ldi	r24, 0x30	; 48
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	2b d0       	rcall	.+86     	; 0x1b6c <fputc>
    1b16:	9a 94       	dec	r9
    1b18:	71 cf       	rjmp	.-286    	; 0x19fc <vfprintf+0x272>
    1b1a:	8f ef       	ldi	r24, 0xFF	; 255
    1b1c:	9f ef       	ldi	r25, 0xFF	; 255
    1b1e:	9d cf       	rjmp	.-198    	; 0x1a5a <vfprintf+0x2d0>

00001b20 <strnlen_P>:
strnlen_P():
    1b20:	fc 01       	movw	r30, r24
    1b22:	05 90       	lpm	r0, Z+
    1b24:	61 50       	subi	r22, 0x01	; 1
    1b26:	70 40       	sbci	r23, 0x00	; 0
    1b28:	01 10       	cpse	r0, r1
    1b2a:	d8 f7       	brcc	.-10     	; 0x1b22 <strnlen_P+0x2>
    1b2c:	80 95       	com	r24
    1b2e:	90 95       	com	r25
    1b30:	8e 0f       	add	r24, r30
    1b32:	9f 1f       	adc	r25, r31
    1b34:	08 95       	ret

00001b36 <strnlen>:
strnlen():
    1b36:	fc 01       	movw	r30, r24
    1b38:	61 50       	subi	r22, 0x01	; 1
    1b3a:	70 40       	sbci	r23, 0x00	; 0
    1b3c:	01 90       	ld	r0, Z+
    1b3e:	01 10       	cpse	r0, r1
    1b40:	d8 f7       	brcc	.-10     	; 0x1b38 <strnlen+0x2>
    1b42:	80 95       	com	r24
    1b44:	90 95       	com	r25
    1b46:	8e 0f       	add	r24, r30
    1b48:	9f 1f       	adc	r25, r31
    1b4a:	08 95       	ret

00001b4c <strrev>:
strrev():
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	fc 01       	movw	r30, r24
    1b50:	67 2f       	mov	r22, r23
    1b52:	71 91       	ld	r23, Z+
    1b54:	77 23       	and	r23, r23
    1b56:	e1 f7       	brne	.-8      	; 0x1b50 <strrev+0x4>
    1b58:	32 97       	sbiw	r30, 0x02	; 2
    1b5a:	04 c0       	rjmp	.+8      	; 0x1b64 <strrev+0x18>
    1b5c:	7c 91       	ld	r23, X
    1b5e:	6d 93       	st	X+, r22
    1b60:	70 83       	st	Z, r23
    1b62:	62 91       	ld	r22, -Z
    1b64:	ae 17       	cp	r26, r30
    1b66:	bf 07       	cpc	r27, r31
    1b68:	c8 f3       	brcs	.-14     	; 0x1b5c <strrev+0x10>
    1b6a:	08 95       	ret

00001b6c <fputc>:
fputc():
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	18 2f       	mov	r17, r24
    1b76:	09 2f       	mov	r16, r25
    1b78:	eb 01       	movw	r28, r22
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	81 fd       	sbrc	r24, 1
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <fputc+0x26>
    1b80:	1f ef       	ldi	r17, 0xFF	; 255
    1b82:	0f ef       	ldi	r16, 0xFF	; 255
    1b84:	81 2f       	mov	r24, r17
    1b86:	90 2f       	mov	r25, r16
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	1f 91       	pop	r17
    1b8e:	0f 91       	pop	r16
    1b90:	08 95       	ret
    1b92:	82 ff       	sbrs	r24, 2
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <fputc+0x52>
    1b96:	2e 81       	ldd	r18, Y+6	; 0x06
    1b98:	3f 81       	ldd	r19, Y+7	; 0x07
    1b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9e:	28 17       	cp	r18, r24
    1ba0:	39 07       	cpc	r19, r25
    1ba2:	3c f4       	brge	.+14     	; 0x1bb2 <fputc+0x46>
    1ba4:	e8 81       	ld	r30, Y
    1ba6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ba8:	cf 01       	movw	r24, r30
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	88 83       	st	Y, r24
    1bae:	99 83       	std	Y+1, r25	; 0x01
    1bb0:	10 83       	st	Z, r17
    1bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	8e 83       	std	Y+6, r24	; 0x06
    1bba:	9f 83       	std	Y+7, r25	; 0x07
    1bbc:	e3 cf       	rjmp	.-58     	; 0x1b84 <fputc+0x18>
    1bbe:	e8 85       	ldd	r30, Y+8	; 0x08
    1bc0:	f9 85       	ldd	r31, Y+9	; 0x09
    1bc2:	81 2f       	mov	r24, r17
    1bc4:	09 95       	icall
    1bc6:	89 2b       	or	r24, r25
    1bc8:	a1 f3       	breq	.-24     	; 0x1bb2 <fputc+0x46>
    1bca:	da cf       	rjmp	.-76     	; 0x1b80 <fputc+0x14>

00001bcc <__ultoa_invert>:
__ultoa_invert():
    1bcc:	fa 01       	movw	r30, r20
    1bce:	aa 27       	eor	r26, r26
    1bd0:	28 30       	cpi	r18, 0x08	; 8
    1bd2:	51 f1       	breq	.+84     	; 0x1c28 <__ultoa_invert+0x5c>
    1bd4:	20 31       	cpi	r18, 0x10	; 16
    1bd6:	81 f1       	breq	.+96     	; 0x1c38 <__ultoa_invert+0x6c>
    1bd8:	e8 94       	clt
    1bda:	6f 93       	push	r22
    1bdc:	6e 7f       	andi	r22, 0xFE	; 254
    1bde:	6e 5f       	subi	r22, 0xFE	; 254
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	8f 4f       	sbci	r24, 0xFF	; 255
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	af 4f       	sbci	r26, 0xFF	; 255
    1be8:	b1 e0       	ldi	r27, 0x01	; 1
    1bea:	3e d0       	rcall	.+124    	; 0x1c68 <__ultoa_invert+0x9c>
    1bec:	b4 e0       	ldi	r27, 0x04	; 4
    1bee:	3c d0       	rcall	.+120    	; 0x1c68 <__ultoa_invert+0x9c>
    1bf0:	67 0f       	add	r22, r23
    1bf2:	78 1f       	adc	r23, r24
    1bf4:	89 1f       	adc	r24, r25
    1bf6:	9a 1f       	adc	r25, r26
    1bf8:	a1 1d       	adc	r26, r1
    1bfa:	68 0f       	add	r22, r24
    1bfc:	79 1f       	adc	r23, r25
    1bfe:	8a 1f       	adc	r24, r26
    1c00:	91 1d       	adc	r25, r1
    1c02:	a1 1d       	adc	r26, r1
    1c04:	6a 0f       	add	r22, r26
    1c06:	71 1d       	adc	r23, r1
    1c08:	81 1d       	adc	r24, r1
    1c0a:	91 1d       	adc	r25, r1
    1c0c:	a1 1d       	adc	r26, r1
    1c0e:	20 d0       	rcall	.+64     	; 0x1c50 <__ultoa_invert+0x84>
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <__ultoa_invert+0x48>
    1c12:	68 94       	set
    1c14:	3f 91       	pop	r19
    1c16:	2a e0       	ldi	r18, 0x0A	; 10
    1c18:	26 9f       	mul	r18, r22
    1c1a:	11 24       	eor	r1, r1
    1c1c:	30 19       	sub	r19, r0
    1c1e:	30 5d       	subi	r19, 0xD0	; 208
    1c20:	31 93       	st	Z+, r19
    1c22:	de f6       	brtc	.-74     	; 0x1bda <__ultoa_invert+0xe>
    1c24:	cf 01       	movw	r24, r30
    1c26:	08 95       	ret
    1c28:	46 2f       	mov	r20, r22
    1c2a:	47 70       	andi	r20, 0x07	; 7
    1c2c:	40 5d       	subi	r20, 0xD0	; 208
    1c2e:	41 93       	st	Z+, r20
    1c30:	b3 e0       	ldi	r27, 0x03	; 3
    1c32:	0f d0       	rcall	.+30     	; 0x1c52 <__ultoa_invert+0x86>
    1c34:	c9 f7       	brne	.-14     	; 0x1c28 <__ultoa_invert+0x5c>
    1c36:	f6 cf       	rjmp	.-20     	; 0x1c24 <__ultoa_invert+0x58>
    1c38:	46 2f       	mov	r20, r22
    1c3a:	4f 70       	andi	r20, 0x0F	; 15
    1c3c:	40 5d       	subi	r20, 0xD0	; 208
    1c3e:	4a 33       	cpi	r20, 0x3A	; 58
    1c40:	18 f0       	brcs	.+6      	; 0x1c48 <__ultoa_invert+0x7c>
    1c42:	49 5d       	subi	r20, 0xD9	; 217
    1c44:	31 fd       	sbrc	r19, 1
    1c46:	40 52       	subi	r20, 0x20	; 32
    1c48:	41 93       	st	Z+, r20
    1c4a:	02 d0       	rcall	.+4      	; 0x1c50 <__ultoa_invert+0x84>
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__ultoa_invert+0x6c>
    1c4e:	ea cf       	rjmp	.-44     	; 0x1c24 <__ultoa_invert+0x58>
    1c50:	b4 e0       	ldi	r27, 0x04	; 4
    1c52:	a6 95       	lsr	r26
    1c54:	97 95       	ror	r25
    1c56:	87 95       	ror	r24
    1c58:	77 95       	ror	r23
    1c5a:	67 95       	ror	r22
    1c5c:	ba 95       	dec	r27
    1c5e:	c9 f7       	brne	.-14     	; 0x1c52 <__ultoa_invert+0x86>
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	61 05       	cpc	r22, r1
    1c64:	71 05       	cpc	r23, r1
    1c66:	08 95       	ret
    1c68:	9b 01       	movw	r18, r22
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	0a 2e       	mov	r0, r26
    1c6e:	06 94       	lsr	r0
    1c70:	57 95       	ror	r21
    1c72:	47 95       	ror	r20
    1c74:	37 95       	ror	r19
    1c76:	27 95       	ror	r18
    1c78:	ba 95       	dec	r27
    1c7a:	c9 f7       	brne	.-14     	; 0x1c6e <__ultoa_invert+0xa2>
    1c7c:	62 0f       	add	r22, r18
    1c7e:	73 1f       	adc	r23, r19
    1c80:	84 1f       	adc	r24, r20
    1c82:	95 1f       	adc	r25, r21
    1c84:	a0 1d       	adc	r26, r0
    1c86:	08 95       	ret

00001c88 <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1c88:	3a d0       	rcall	.+116    	; 0x1cfe <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1c8a:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1c8c:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1c8e:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1c90:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1c92:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1c94:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1c96:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1c98:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1c9a:	08 95       	ret

00001c9c <__prologue_saves__>:
__prologue_saves__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1c9c:	2f 92       	push	r2
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1c9e:	3f 92       	push	r3
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1ca0:	4f 92       	push	r4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1ca2:	5f 92       	push	r5
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1ca4:	6f 92       	push	r6
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    1ca6:	7f 92       	push	r7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    1ca8:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    1caa:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1cac:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1cae:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1cb0:	cf 92       	push	r12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1cb2:	df 92       	push	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1cb4:	ef 92       	push	r14
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    1cb6:	ff 92       	push	r15
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    1cb8:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    1cba:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1cbc:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1cbe:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    1cc0:	cd b7       	in	r28, 0x3d	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    1cc2:	de b7       	in	r29, 0x3e	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    1cc4:	ca 1b       	sub	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    1cc6:	db 0b       	sbc	r29, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    1cc8:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    1cca:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1ccc:	09 94       	ijmp

00001cce <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1cce:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1cd0:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1cd2:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1cd4:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1cd6:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    1cd8:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    1cda:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    1cdc:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1cde:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1ce0:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1ce2:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1ce4:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1ce6:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    1ce8:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    1cea:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    1cec:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1cee:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    1cf0:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    1cf2:	ce 0f       	add	r28, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    1cf4:	d1 1d       	adc	r29, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    1cf6:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    1cf8:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    1cfa:	ed 01       	movw	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    1cfc:	08 95       	ret

00001cfe <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1cfe:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1d00:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1d02:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1d04:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1d06:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1d08:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1d0a:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1d0c:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1d0e:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1d10:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1d12:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1d14:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1d16:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1d18:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1d1a:	08 95       	ret

00001d1c <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1d1c:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1d1e:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1d20:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1d22:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1d24:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1d26:	0d c0       	rjmp	.+26     	; 0x1d42 <__udivmodsi4_ep>

00001d28 <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1d28:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1d2a:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1d2c:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1d2e:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1d30:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1d32:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1d34:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1d36:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1d38:	20 f0       	brcs	.+8      	; 0x1d42 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1d3a:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1d3c:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1d3e:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1d40:	f5 0b       	sbc	r31, r21

00001d42 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1d42:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1d44:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1d46:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1d48:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1d4a:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1d4e:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1d50:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1d52:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1d54:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1d56:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1d58:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1d5a:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1d5c:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1d5e:	08 95       	ret

00001d60 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1d60:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1d62:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1d64:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1d66:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1d68:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1d6a:	09 94       	ijmp

00001d6c <malloc>:
malloc():
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	82 30       	cpi	r24, 0x02	; 2
    1d76:	91 05       	cpc	r25, r1
    1d78:	10 f4       	brcc	.+4      	; 0x1d7e <malloc+0x12>
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	e0 91 19 3d 	lds	r30, 0x3D19	; 0x803d19 <__flp>
    1d82:	f0 91 1a 3d 	lds	r31, 0x3D1A	; 0x803d1a <__flp+0x1>
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	30 97       	sbiw	r30, 0x00	; 0
    1d90:	99 f4       	brne	.+38     	; 0x1db8 <malloc+0x4c>
    1d92:	21 15       	cp	r18, r1
    1d94:	31 05       	cpc	r19, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <malloc+0x2e>
    1d98:	4a c0       	rjmp	.+148    	; 0x1e2e <malloc+0xc2>
    1d9a:	28 1b       	sub	r18, r24
    1d9c:	39 0b       	sbc	r19, r25
    1d9e:	24 30       	cpi	r18, 0x04	; 4
    1da0:	31 05       	cpc	r19, r1
    1da2:	d8 f5       	brcc	.+118    	; 0x1e1a <malloc+0xae>
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	61 15       	cp	r22, r1
    1daa:	71 05       	cpc	r23, r1
    1dac:	89 f1       	breq	.+98     	; 0x1e10 <malloc+0xa4>
    1dae:	fb 01       	movw	r30, r22
    1db0:	82 83       	std	Z+2, r24	; 0x02
    1db2:	93 83       	std	Z+3, r25	; 0x03
    1db4:	fe 01       	movw	r30, r28
    1db6:	11 c0       	rjmp	.+34     	; 0x1dda <malloc+0x6e>
    1db8:	40 81       	ld	r20, Z
    1dba:	51 81       	ldd	r21, Z+1	; 0x01
    1dbc:	02 81       	ldd	r16, Z+2	; 0x02
    1dbe:	13 81       	ldd	r17, Z+3	; 0x03
    1dc0:	48 17       	cp	r20, r24
    1dc2:	59 07       	cpc	r21, r25
    1dc4:	e0 f0       	brcs	.+56     	; 0x1dfe <malloc+0x92>
    1dc6:	48 17       	cp	r20, r24
    1dc8:	59 07       	cpc	r21, r25
    1dca:	99 f4       	brne	.+38     	; 0x1df2 <malloc+0x86>
    1dcc:	10 97       	sbiw	r26, 0x00	; 0
    1dce:	61 f0       	breq	.+24     	; 0x1de8 <malloc+0x7c>
    1dd0:	12 96       	adiw	r26, 0x02	; 2
    1dd2:	0c 93       	st	X, r16
    1dd4:	12 97       	sbiw	r26, 0x02	; 2
    1dd6:	13 96       	adiw	r26, 0x03	; 3
    1dd8:	1c 93       	st	X, r17
    1dda:	32 96       	adiw	r30, 0x02	; 2
    1ddc:	cf 01       	movw	r24, r30
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret
    1de8:	00 93 19 3d 	sts	0x3D19, r16	; 0x803d19 <__flp>
    1dec:	10 93 1a 3d 	sts	0x3D1A, r17	; 0x803d1a <__flp+0x1>
    1df0:	f4 cf       	rjmp	.-24     	; 0x1dda <malloc+0x6e>
    1df2:	21 15       	cp	r18, r1
    1df4:	31 05       	cpc	r19, r1
    1df6:	51 f0       	breq	.+20     	; 0x1e0c <malloc+0xa0>
    1df8:	42 17       	cp	r20, r18
    1dfa:	53 07       	cpc	r21, r19
    1dfc:	38 f0       	brcs	.+14     	; 0x1e0c <malloc+0xa0>
    1dfe:	a9 01       	movw	r20, r18
    1e00:	db 01       	movw	r26, r22
    1e02:	9a 01       	movw	r18, r20
    1e04:	bd 01       	movw	r22, r26
    1e06:	df 01       	movw	r26, r30
    1e08:	f8 01       	movw	r30, r16
    1e0a:	c1 cf       	rjmp	.-126    	; 0x1d8e <malloc+0x22>
    1e0c:	ef 01       	movw	r28, r30
    1e0e:	f9 cf       	rjmp	.-14     	; 0x1e02 <malloc+0x96>
    1e10:	80 93 19 3d 	sts	0x3D19, r24	; 0x803d19 <__flp>
    1e14:	90 93 1a 3d 	sts	0x3D1A, r25	; 0x803d1a <__flp+0x1>
    1e18:	cd cf       	rjmp	.-102    	; 0x1db4 <malloc+0x48>
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e2 0f       	add	r30, r18
    1e1e:	f3 1f       	adc	r31, r19
    1e20:	81 93       	st	Z+, r24
    1e22:	91 93       	st	Z+, r25
    1e24:	22 50       	subi	r18, 0x02	; 2
    1e26:	31 09       	sbc	r19, r1
    1e28:	28 83       	st	Y, r18
    1e2a:	39 83       	std	Y+1, r19	; 0x01
    1e2c:	d7 cf       	rjmp	.-82     	; 0x1ddc <malloc+0x70>
    1e2e:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1e32:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1e36:	23 2b       	or	r18, r19
    1e38:	41 f4       	brne	.+16     	; 0x1e4a <malloc+0xde>
    1e3a:	20 91 08 3c 	lds	r18, 0x3C08	; 0x803c08 <__malloc_heap_start>
    1e3e:	30 91 09 3c 	lds	r19, 0x3C09	; 0x803c09 <__malloc_heap_start+0x1>
    1e42:	20 93 17 3d 	sts	0x3D17, r18	; 0x803d17 <__brkval>
    1e46:	30 93 18 3d 	sts	0x3D18, r19	; 0x803d18 <__brkval+0x1>
    1e4a:	20 91 06 3c 	lds	r18, 0x3C06	; 0x803c06 <__malloc_heap_end>
    1e4e:	30 91 07 3c 	lds	r19, 0x3C07	; 0x803c07 <__malloc_heap_end+0x1>
    1e52:	21 15       	cp	r18, r1
    1e54:	31 05       	cpc	r19, r1
    1e56:	41 f4       	brne	.+16     	; 0x1e68 <malloc+0xfc>
    1e58:	2d b7       	in	r18, 0x3d	; 61
    1e5a:	3e b7       	in	r19, 0x3e	; 62
    1e5c:	40 91 0a 3c 	lds	r20, 0x3C0A	; 0x803c0a <__malloc_margin>
    1e60:	50 91 0b 3c 	lds	r21, 0x3C0B	; 0x803c0b <__malloc_margin+0x1>
    1e64:	24 1b       	sub	r18, r20
    1e66:	35 0b       	sbc	r19, r21
    1e68:	e0 91 17 3d 	lds	r30, 0x3D17	; 0x803d17 <__brkval>
    1e6c:	f0 91 18 3d 	lds	r31, 0x3D18	; 0x803d18 <__brkval+0x1>
    1e70:	e2 17       	cp	r30, r18
    1e72:	f3 07       	cpc	r31, r19
    1e74:	a0 f4       	brcc	.+40     	; 0x1e9e <malloc+0x132>
    1e76:	2e 1b       	sub	r18, r30
    1e78:	3f 0b       	sbc	r19, r31
    1e7a:	28 17       	cp	r18, r24
    1e7c:	39 07       	cpc	r19, r25
    1e7e:	78 f0       	brcs	.+30     	; 0x1e9e <malloc+0x132>
    1e80:	ac 01       	movw	r20, r24
    1e82:	4e 5f       	subi	r20, 0xFE	; 254
    1e84:	5f 4f       	sbci	r21, 0xFF	; 255
    1e86:	24 17       	cp	r18, r20
    1e88:	35 07       	cpc	r19, r21
    1e8a:	48 f0       	brcs	.+18     	; 0x1e9e <malloc+0x132>
    1e8c:	4e 0f       	add	r20, r30
    1e8e:	5f 1f       	adc	r21, r31
    1e90:	40 93 17 3d 	sts	0x3D17, r20	; 0x803d17 <__brkval>
    1e94:	50 93 18 3d 	sts	0x3D18, r21	; 0x803d18 <__brkval+0x1>
    1e98:	81 93       	st	Z+, r24
    1e9a:	91 93       	st	Z+, r25
    1e9c:	9f cf       	rjmp	.-194    	; 0x1ddc <malloc+0x70>
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	e0 e0       	ldi	r30, 0x00	; 0
    1ea2:	9c cf       	rjmp	.-200    	; 0x1ddc <malloc+0x70>

00001ea4 <free>:
free():
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	e9 f0       	breq	.+58     	; 0x1ee6 <free+0x42>
    1eac:	fc 01       	movw	r30, r24
    1eae:	32 97       	sbiw	r30, 0x02	; 2
    1eb0:	12 82       	std	Z+2, r1	; 0x02
    1eb2:	13 82       	std	Z+3, r1	; 0x03
    1eb4:	a0 91 19 3d 	lds	r26, 0x3D19	; 0x803d19 <__flp>
    1eb8:	b0 91 1a 3d 	lds	r27, 0x3D1A	; 0x803d1a <__flp+0x1>
    1ebc:	ed 01       	movw	r28, r26
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	10 97       	sbiw	r26, 0x00	; 0
    1ec4:	a1 f4       	brne	.+40     	; 0x1eee <free+0x4a>
    1ec6:	20 81       	ld	r18, Z
    1ec8:	31 81       	ldd	r19, Z+1	; 0x01
    1eca:	82 0f       	add	r24, r18
    1ecc:	93 1f       	adc	r25, r19
    1ece:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1ed2:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1ed6:	28 17       	cp	r18, r24
    1ed8:	39 07       	cpc	r19, r25
    1eda:	09 f0       	breq	.+2      	; 0x1ede <free+0x3a>
    1edc:	61 c0       	rjmp	.+194    	; 0x1fa0 <free+0xfc>
    1ede:	e0 93 17 3d 	sts	0x3D17, r30	; 0x803d17 <__brkval>
    1ee2:	f0 93 18 3d 	sts	0x3D18, r31	; 0x803d18 <__brkval+0x1>
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	08 95       	ret
    1eec:	ea 01       	movw	r28, r20
    1eee:	ce 17       	cp	r28, r30
    1ef0:	df 07       	cpc	r29, r31
    1ef2:	e8 f5       	brcc	.+122    	; 0x1f6e <free+0xca>
    1ef4:	4a 81       	ldd	r20, Y+2	; 0x02
    1ef6:	5b 81       	ldd	r21, Y+3	; 0x03
    1ef8:	9e 01       	movw	r18, r28
    1efa:	41 15       	cp	r20, r1
    1efc:	51 05       	cpc	r21, r1
    1efe:	b1 f7       	brne	.-20     	; 0x1eec <free+0x48>
    1f00:	e9 01       	movw	r28, r18
    1f02:	ea 83       	std	Y+2, r30	; 0x02
    1f04:	fb 83       	std	Y+3, r31	; 0x03
    1f06:	49 91       	ld	r20, Y+
    1f08:	59 91       	ld	r21, Y+
    1f0a:	c4 0f       	add	r28, r20
    1f0c:	d5 1f       	adc	r29, r21
    1f0e:	ec 17       	cp	r30, r28
    1f10:	fd 07       	cpc	r31, r29
    1f12:	61 f4       	brne	.+24     	; 0x1f2c <free+0x88>
    1f14:	80 81       	ld	r24, Z
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	02 96       	adiw	r24, 0x02	; 2
    1f1a:	84 0f       	add	r24, r20
    1f1c:	95 1f       	adc	r25, r21
    1f1e:	e9 01       	movw	r28, r18
    1f20:	88 83       	st	Y, r24
    1f22:	99 83       	std	Y+1, r25	; 0x01
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	8a 83       	std	Y+2, r24	; 0x02
    1f2a:	9b 83       	std	Y+3, r25	; 0x03
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	e0 e0       	ldi	r30, 0x00	; 0
    1f30:	12 96       	adiw	r26, 0x02	; 2
    1f32:	8d 91       	ld	r24, X+
    1f34:	9c 91       	ld	r25, X
    1f36:	13 97       	sbiw	r26, 0x03	; 3
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	b9 f5       	brne	.+110    	; 0x1faa <free+0x106>
    1f3c:	2d 91       	ld	r18, X+
    1f3e:	3c 91       	ld	r19, X
    1f40:	11 97       	sbiw	r26, 0x01	; 1
    1f42:	cd 01       	movw	r24, r26
    1f44:	02 96       	adiw	r24, 0x02	; 2
    1f46:	82 0f       	add	r24, r18
    1f48:	93 1f       	adc	r25, r19
    1f4a:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1f4e:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1f52:	28 17       	cp	r18, r24
    1f54:	39 07       	cpc	r19, r25
    1f56:	39 f6       	brne	.-114    	; 0x1ee6 <free+0x42>
    1f58:	30 97       	sbiw	r30, 0x00	; 0
    1f5a:	51 f5       	brne	.+84     	; 0x1fb0 <free+0x10c>
    1f5c:	10 92 19 3d 	sts	0x3D19, r1	; 0x803d19 <__flp>
    1f60:	10 92 1a 3d 	sts	0x3D1A, r1	; 0x803d1a <__flp+0x1>
    1f64:	a0 93 17 3d 	sts	0x3D17, r26	; 0x803d17 <__brkval>
    1f68:	b0 93 18 3d 	sts	0x3D18, r27	; 0x803d18 <__brkval+0x1>
    1f6c:	bc cf       	rjmp	.-136    	; 0x1ee6 <free+0x42>
    1f6e:	c2 83       	std	Z+2, r28	; 0x02
    1f70:	d3 83       	std	Z+3, r29	; 0x03
    1f72:	40 81       	ld	r20, Z
    1f74:	51 81       	ldd	r21, Z+1	; 0x01
    1f76:	84 0f       	add	r24, r20
    1f78:	95 1f       	adc	r25, r21
    1f7a:	c8 17       	cp	r28, r24
    1f7c:	d9 07       	cpc	r29, r25
    1f7e:	61 f4       	brne	.+24     	; 0x1f98 <free+0xf4>
    1f80:	4e 5f       	subi	r20, 0xFE	; 254
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	88 81       	ld	r24, Y
    1f86:	99 81       	ldd	r25, Y+1	; 0x01
    1f88:	48 0f       	add	r20, r24
    1f8a:	59 1f       	adc	r21, r25
    1f8c:	40 83       	st	Z, r20
    1f8e:	51 83       	std	Z+1, r21	; 0x01
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	9b 81       	ldd	r25, Y+3	; 0x03
    1f94:	82 83       	std	Z+2, r24	; 0x02
    1f96:	93 83       	std	Z+3, r25	; 0x03
    1f98:	21 15       	cp	r18, r1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	09 f0       	breq	.+2      	; 0x1fa0 <free+0xfc>
    1f9e:	b0 cf       	rjmp	.-160    	; 0x1f00 <free+0x5c>
    1fa0:	e0 93 19 3d 	sts	0x3D19, r30	; 0x803d19 <__flp>
    1fa4:	f0 93 1a 3d 	sts	0x3D1A, r31	; 0x803d1a <__flp+0x1>
    1fa8:	9e cf       	rjmp	.-196    	; 0x1ee6 <free+0x42>
    1faa:	fd 01       	movw	r30, r26
    1fac:	dc 01       	movw	r26, r24
    1fae:	c0 cf       	rjmp	.-128    	; 0x1f30 <free+0x8c>
    1fb0:	12 82       	std	Z+2, r1	; 0x02
    1fb2:	13 82       	std	Z+3, r1	; 0x03
    1fb4:	d7 cf       	rjmp	.-82     	; 0x1f64 <free+0xc0>

00001fb6 <realloc>:
realloc():
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	a0 e0       	ldi	r26, 0x00	; 0
    1fba:	e0 ee       	ldi	r30, 0xE0	; 224
    1fbc:	ff e0       	ldi	r31, 0x0F	; 15
    1fbe:	70 ce       	rjmp	.-800    	; 0x1ca0 <__prologue_saves__+0x4>
    1fc0:	8c 01       	movw	r16, r24
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	41 f4       	brne	.+16     	; 0x1fd6 <realloc+0x20>
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	d1 de       	rcall	.-606    	; 0x1d6c <malloc>
    1fca:	8c 01       	movw	r16, r24
    1fcc:	c8 01       	movw	r24, r16
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	e0 e1       	ldi	r30, 0x10	; 16
    1fd4:	7e ce       	rjmp	.-772    	; 0x1cd2 <__epilogue_restores__+0x4>
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e6 0f       	add	r30, r22
    1fda:	f7 1f       	adc	r31, r23
    1fdc:	9c 01       	movw	r18, r24
    1fde:	22 50       	subi	r18, 0x02	; 2
    1fe0:	31 09       	sbc	r19, r1
    1fe2:	e2 17       	cp	r30, r18
    1fe4:	f3 07       	cpc	r31, r19
    1fe6:	08 f4       	brcc	.+2      	; 0x1fea <realloc+0x34>
    1fe8:	99 c0       	rjmp	.+306    	; 0x211c <realloc+0x166>
    1fea:	d9 01       	movw	r26, r18
    1fec:	cd 91       	ld	r28, X+
    1fee:	dc 91       	ld	r29, X
    1ff0:	11 97       	sbiw	r26, 0x01	; 1
    1ff2:	c6 17       	cp	r28, r22
    1ff4:	d7 07       	cpc	r29, r23
    1ff6:	90 f0       	brcs	.+36     	; 0x201c <realloc+0x66>
    1ff8:	c5 30       	cpi	r28, 0x05	; 5
    1ffa:	d1 05       	cpc	r29, r1
    1ffc:	38 f3       	brcs	.-50     	; 0x1fcc <realloc+0x16>
    1ffe:	ce 01       	movw	r24, r28
    2000:	04 97       	sbiw	r24, 0x04	; 4
    2002:	86 17       	cp	r24, r22
    2004:	97 07       	cpc	r25, r23
    2006:	10 f3       	brcs	.-60     	; 0x1fcc <realloc+0x16>
    2008:	c6 1b       	sub	r28, r22
    200a:	d7 0b       	sbc	r29, r23
    200c:	22 97       	sbiw	r28, 0x02	; 2
    200e:	c1 93       	st	Z+, r28
    2010:	d1 93       	st	Z+, r29
    2012:	6d 93       	st	X+, r22
    2014:	7c 93       	st	X, r23
    2016:	cf 01       	movw	r24, r30
    2018:	45 df       	rcall	.-374    	; 0x1ea4 <free>
    201a:	d8 cf       	rjmp	.-80     	; 0x1fcc <realloc+0x16>
    201c:	5b 01       	movw	r10, r22
    201e:	ac 1a       	sub	r10, r28
    2020:	bd 0a       	sbc	r11, r29
    2022:	4c 01       	movw	r8, r24
    2024:	8c 0e       	add	r8, r28
    2026:	9d 1e       	adc	r9, r29
    2028:	a0 91 19 3d 	lds	r26, 0x3D19	; 0x803d19 <__flp>
    202c:	b0 91 1a 3d 	lds	r27, 0x3D1A	; 0x803d1a <__flp+0x1>
    2030:	51 2c       	mov	r5, r1
    2032:	41 2c       	mov	r4, r1
    2034:	f1 2c       	mov	r15, r1
    2036:	e1 2c       	mov	r14, r1
    2038:	10 97       	sbiw	r26, 0x00	; 0
    203a:	31 f5       	brne	.+76     	; 0x2088 <realloc+0xd2>
    203c:	80 91 17 3d 	lds	r24, 0x3D17	; 0x803d17 <__brkval>
    2040:	90 91 18 3d 	lds	r25, 0x3D18	; 0x803d18 <__brkval+0x1>
    2044:	88 15       	cp	r24, r8
    2046:	99 05       	cpc	r25, r9
    2048:	09 f0       	breq	.+2      	; 0x204c <realloc+0x96>
    204a:	5c c0       	rjmp	.+184    	; 0x2104 <realloc+0x14e>
    204c:	46 16       	cp	r4, r22
    204e:	57 06       	cpc	r5, r23
    2050:	08 f0       	brcs	.+2      	; 0x2054 <realloc+0x9e>
    2052:	58 c0       	rjmp	.+176    	; 0x2104 <realloc+0x14e>
    2054:	80 91 06 3c 	lds	r24, 0x3C06	; 0x803c06 <__malloc_heap_end>
    2058:	90 91 07 3c 	lds	r25, 0x3C07	; 0x803c07 <__malloc_heap_end+0x1>
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	41 f4       	brne	.+16     	; 0x2070 <realloc+0xba>
    2060:	8d b7       	in	r24, 0x3d	; 61
    2062:	9e b7       	in	r25, 0x3e	; 62
    2064:	40 91 0a 3c 	lds	r20, 0x3C0A	; 0x803c0a <__malloc_margin>
    2068:	50 91 0b 3c 	lds	r21, 0x3C0B	; 0x803c0b <__malloc_margin+0x1>
    206c:	84 1b       	sub	r24, r20
    206e:	95 0b       	sbc	r25, r21
    2070:	e8 17       	cp	r30, r24
    2072:	f9 07       	cpc	r31, r25
    2074:	08 f0       	brcs	.+2      	; 0x2078 <realloc+0xc2>
    2076:	52 c0       	rjmp	.+164    	; 0x211c <realloc+0x166>
    2078:	e0 93 17 3d 	sts	0x3D17, r30	; 0x803d17 <__brkval>
    207c:	f0 93 18 3d 	sts	0x3D18, r31	; 0x803d18 <__brkval+0x1>
    2080:	f9 01       	movw	r30, r18
    2082:	60 83       	st	Z, r22
    2084:	71 83       	std	Z+1, r23	; 0x01
    2086:	a2 cf       	rjmp	.-188    	; 0x1fcc <realloc+0x16>
    2088:	8d 91       	ld	r24, X+
    208a:	9c 91       	ld	r25, X
    208c:	11 97       	sbiw	r26, 0x01	; 1
    208e:	12 96       	adiw	r26, 0x02	; 2
    2090:	6c 90       	ld	r6, X
    2092:	12 97       	sbiw	r26, 0x02	; 2
    2094:	13 96       	adiw	r26, 0x03	; 3
    2096:	7c 90       	ld	r7, X
    2098:	13 97       	sbiw	r26, 0x03	; 3
    209a:	a8 15       	cp	r26, r8
    209c:	b9 05       	cpc	r27, r9
    209e:	59 f5       	brne	.+86     	; 0x20f6 <realloc+0x140>
    20a0:	6c 01       	movw	r12, r24
    20a2:	42 e0       	ldi	r20, 0x02	; 2
    20a4:	c4 0e       	add	r12, r20
    20a6:	d1 1c       	adc	r13, r1
    20a8:	ca 14       	cp	r12, r10
    20aa:	db 04       	cpc	r13, r11
    20ac:	20 f1       	brcs	.+72     	; 0x20f6 <realloc+0x140>
    20ae:	ac 01       	movw	r20, r24
    20b0:	4a 19       	sub	r20, r10
    20b2:	5b 09       	sbc	r21, r11
    20b4:	da 01       	movw	r26, r20
    20b6:	12 96       	adiw	r26, 0x02	; 2
    20b8:	15 97       	sbiw	r26, 0x05	; 5
    20ba:	80 f0       	brcs	.+32     	; 0x20dc <realloc+0x126>
    20bc:	62 82       	std	Z+2, r6	; 0x02
    20be:	73 82       	std	Z+3, r7	; 0x03
    20c0:	40 83       	st	Z, r20
    20c2:	51 83       	std	Z+1, r21	; 0x01
    20c4:	d9 01       	movw	r26, r18
    20c6:	6d 93       	st	X+, r22
    20c8:	7c 93       	st	X, r23
    20ca:	e1 14       	cp	r14, r1
    20cc:	f1 04       	cpc	r15, r1
    20ce:	71 f0       	breq	.+28     	; 0x20ec <realloc+0x136>
    20d0:	d7 01       	movw	r26, r14
    20d2:	12 96       	adiw	r26, 0x02	; 2
    20d4:	ed 93       	st	X+, r30
    20d6:	fc 93       	st	X, r31
    20d8:	13 97       	sbiw	r26, 0x03	; 3
    20da:	78 cf       	rjmp	.-272    	; 0x1fcc <realloc+0x16>
    20dc:	22 96       	adiw	r28, 0x02	; 2
    20de:	8c 0f       	add	r24, r28
    20e0:	9d 1f       	adc	r25, r29
    20e2:	f9 01       	movw	r30, r18
    20e4:	80 83       	st	Z, r24
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	f3 01       	movw	r30, r6
    20ea:	ef cf       	rjmp	.-34     	; 0x20ca <realloc+0x114>
    20ec:	e0 93 19 3d 	sts	0x3D19, r30	; 0x803d19 <__flp>
    20f0:	f0 93 1a 3d 	sts	0x3D1A, r31	; 0x803d1a <__flp+0x1>
    20f4:	6b cf       	rjmp	.-298    	; 0x1fcc <realloc+0x16>
    20f6:	48 16       	cp	r4, r24
    20f8:	59 06       	cpc	r5, r25
    20fa:	08 f4       	brcc	.+2      	; 0x20fe <realloc+0x148>
    20fc:	2c 01       	movw	r4, r24
    20fe:	7d 01       	movw	r14, r26
    2100:	d3 01       	movw	r26, r6
    2102:	9a cf       	rjmp	.-204    	; 0x2038 <realloc+0x82>
    2104:	cb 01       	movw	r24, r22
    2106:	32 de       	rcall	.-924    	; 0x1d6c <malloc>
    2108:	7c 01       	movw	r14, r24
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	39 f0       	breq	.+14     	; 0x211c <realloc+0x166>
    210e:	ae 01       	movw	r20, r28
    2110:	b8 01       	movw	r22, r16
    2112:	07 d0       	rcall	.+14     	; 0x2122 <memcpy>
    2114:	c8 01       	movw	r24, r16
    2116:	c6 de       	rcall	.-628    	; 0x1ea4 <free>
    2118:	87 01       	movw	r16, r14
    211a:	58 cf       	rjmp	.-336    	; 0x1fcc <realloc+0x16>
    211c:	10 e0       	ldi	r17, 0x00	; 0
    211e:	00 e0       	ldi	r16, 0x00	; 0
    2120:	55 cf       	rjmp	.-342    	; 0x1fcc <realloc+0x16>

00002122 <memcpy>:
memcpy():
    2122:	fb 01       	movw	r30, r22
    2124:	dc 01       	movw	r26, r24
    2126:	02 c0       	rjmp	.+4      	; 0x212c <memcpy+0xa>
    2128:	01 90       	ld	r0, Z+
    212a:	0d 92       	st	X+, r0
    212c:	41 50       	subi	r20, 0x01	; 1
    212e:	50 40       	sbci	r21, 0x00	; 0
    2130:	d8 f7       	brcc	.-10     	; 0x2128 <memcpy+0x6>
    2132:	08 95       	ret

00002134 <strcpy>:
strcpy():
    2134:	fb 01       	movw	r30, r22
    2136:	dc 01       	movw	r26, r24
    2138:	01 90       	ld	r0, Z+
    213a:	0d 92       	st	X+, r0
    213c:	00 20       	and	r0, r0
    213e:	e1 f7       	brne	.-8      	; 0x2138 <strcpy+0x4>
    2140:	08 95       	ret

00002142 <sprintf>:
sprintf():
    2142:	ae e0       	ldi	r26, 0x0E	; 14
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e6 ea       	ldi	r30, 0xA6	; 166
    2148:	f0 e1       	ldi	r31, 0x10	; 16
    214a:	b6 cd       	rjmp	.-1172   	; 0x1cb8 <__prologue_saves__+0x1c>
    214c:	0d 89       	ldd	r16, Y+21	; 0x15
    214e:	1e 89       	ldd	r17, Y+22	; 0x16
    2150:	86 e0       	ldi	r24, 0x06	; 6
    2152:	8c 83       	std	Y+4, r24	; 0x04
    2154:	09 83       	std	Y+1, r16	; 0x01
    2156:	1a 83       	std	Y+2, r17	; 0x02
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	9f e7       	ldi	r25, 0x7F	; 127
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	ae 01       	movw	r20, r28
    2162:	47 5e       	subi	r20, 0xE7	; 231
    2164:	5f 4f       	sbci	r21, 0xFF	; 255
    2166:	6f 89       	ldd	r22, Y+23	; 0x17
    2168:	78 8d       	ldd	r23, Y+24	; 0x18
    216a:	ce 01       	movw	r24, r28
    216c:	01 96       	adiw	r24, 0x01	; 1
    216e:	0d db       	rcall	.-2534   	; 0x178a <vfprintf>
    2170:	2f 81       	ldd	r18, Y+7	; 0x07
    2172:	38 85       	ldd	r19, Y+8	; 0x08
    2174:	02 0f       	add	r16, r18
    2176:	13 1f       	adc	r17, r19
    2178:	f8 01       	movw	r30, r16
    217a:	10 82       	st	Z, r1
    217c:	2e 96       	adiw	r28, 0x0e	; 14
    217e:	e4 e0       	ldi	r30, 0x04	; 4
    2180:	b4 cd       	rjmp	.-1176   	; 0x1cea <__epilogue_restores__+0x1c>

00002182 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2182:	f8 94       	cli

00002184 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2184:	ff cf       	rjmp	.-2      	; 0x2184 <__stop_program>
