
/var/folders/yp/37w_03rx1qdbfsqckbyyk9t80000gn/T/arduino-sketch-5380282240B235EA65F31E83BC95B4D4/components_check.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	3e c0       	rjmp	.+124    	; 0x7e <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	17 c4       	rjmp	.+2094   	; 0x854 <__vector_9>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	41 c0       	rjmp	.+130    	; 0xcc <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	3f c0       	rjmp	.+126    	; 0xcc <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	3d c0       	rjmp	.+122    	; 0xcc <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	c5 c3       	rjmp	.+1930   	; 0x7f8 <__vector_27>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	9e c3       	rjmp	.+1852   	; 0x7ae <__vector_28>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	29 c0       	rjmp	.+82     	; 0xcc <__bad_interrupt>
	...

0000007c <__ctors_start>:
__trampolines_start():
      7c:	80 04       	cpc	r8, r0

0000007e <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      7e:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      80:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      82:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      84:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      86:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      88:	de bf       	out	0x3e, r29	; 62

0000008a <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      8a:	2c e3       	ldi	r18, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      8c:	aa e0       	ldi	r26, 0x0A	; 10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      8e:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      94:	ad 3f       	cpi	r26, 0xFD	; 253
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      96:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>

0000009a <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      9a:	1c e3       	ldi	r17, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      9c:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      9e:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      a0:	e5 e3       	ldi	r30, 0x35	; 53
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      a2:	fc e1       	ldi	r31, 0x1C	; 28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      a4:	02 c0       	rjmp	.+4      	; 0xaa <__do_copy_data+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      a6:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      a8:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      aa:	aa 30       	cpi	r26, 0x0A	; 10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ac:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      ae:	d9 f7       	brne	.-10     	; 0xa6 <__do_copy_data+0xc>

000000b0 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      b0:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      b2:	cf e3       	ldi	r28, 0x3F	; 63
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      b4:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      b8:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      ba:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      bc:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      c0:	ce 33       	cpi	r28, 0x3E	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      c2:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      c4:	c9 f7       	brne	.-14     	; 0xb8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
      c6:	44 d4       	rcall	.+2184   	; 0x950 <main>
../../../../crt1/gcrt1.S:315
      c8:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <_exit>

000000cc <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
      cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.10]>:
_ZN17TinyMegaI2CMaster5startEhi.constprop.10():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:66

// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
      ce:	89 2b       	or	r24, r25
      d0:	c9 f0       	breq	.+50     	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:70
    read = 0; // Write
  else
  {
    I2Ccount = readcount;
      d2:	8f ef       	ldi	r24, 0xFF	; 255
      d4:	9f ef       	ldi	r25, 0xFF	; 255
      d6:	80 93 4d 3c 	sts	0x3C4D, r24	; 0x803c4d <TinyMegaI2C>
      da:	90 93 4e 3c 	sts	0x3C4E, r25	; 0x803c4e <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:71
    read = 1;
      de:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:73
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
      e0:	84 66       	ori	r24, 0x64	; 100
      e2:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <vtable for UartClass+0x7f6dea>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:74
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
      e6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6de8>
      ea:	80 7c       	andi	r24, 0xC0	; 192
      ec:	e1 f3       	breq	.-8      	; 0xe6 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.10]+0x18>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:76
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
      ee:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6de8>
      f2:	83 fd       	sbrc	r24, 3
      f4:	09 c0       	rjmp	.+18     	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:78
    return false;                        // Return false if arbitration lost or bus error
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
      f6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6de8>
      fa:	82 95       	swap	r24
      fc:	81 70       	andi	r24, 0x01	; 1
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	89 27       	eor	r24, r25
     102:	08 95       	ret
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:67
// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
    read = 0; // Write
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	ec cf       	rjmp	.-40     	; 0xe0 <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.10]+0x12>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:77
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
    return false;                        // Return false if arbitration lost or bus error
     108:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:79
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}
     10a:	08 95       	ret

0000010c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]>:
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.7():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:388
    {
        return (false);
    }
}

bool RV8803Tiny::readMultipleRegisters(uint8_t addr, uint8_t *dest, uint8_t len)
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:391
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	db df       	rcall	.-74     	; 0xce <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.10]>
     118:	81 11       	cpse	r24, r1
     11a:	02 c0       	rjmp	.+4      	; 0x120 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:413
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	3c c0       	rjmp	.+120    	; 0x198 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x8c>
write():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:55
  return TinyMegaI2CMaster::read();
}

bool TinyMegaI2CMaster::write(uint8_t data)
{
  while (!(TWI0.MSTATUS & TWI_WIF_bm))
     120:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6de8>
     124:	86 ff       	sbrs	r24, 6
     126:	fc cf       	rjmp	.-8      	; 0x120 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:57
    ; // Wait for write interrupt flag
  TWI0.MDATA = data;
     128:	80 e1       	ldi	r24, 0x10	; 16
     12a:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <vtable for UartClass+0x7f6deb>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:58
  TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;   // Do nothing
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f6de7>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:59
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Returns true if slave gave an ACK
     134:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6de8>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.7():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:394
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803-C7.
        if (TinyMegaI2C.write(addr))
     138:	84 fd       	sbrc	r24, 4
     13a:	f0 cf       	rjmp	.-32     	; 0x11c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x10>
restart():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:83
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}

bool TinyMegaI2CMaster::restart(uint8_t address, int readcount)
{
  return TinyMegaI2CMaster::start(address, readcount);
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	9f ef       	ldi	r25, 0xFF	; 255
     140:	c6 df       	rcall	.-116    	; 0xce <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.10]>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.7():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:398
        { //  if Acknowledged from RV-8803
            //  Master sends out the Repeated START condition (or STOP condition followed by START condition)
            //  Master sends out Slave Address, 65h for the RV-8803 [ R/W bit is -1 ] indicating unknown number of read operation
            if (TinyMegaI2C.restart(RV8803_ADDR, -1))
     142:	88 23       	and	r24, r24
     144:	59 f3       	breq	.-42     	; 0x11c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x10>
     146:	fe 01       	movw	r30, r28
     148:	9e 01       	movw	r18, r28
     14a:	28 5f       	subi	r18, 0xF8	; 248
     14c:	3f 4f       	sbci	r19, 0xFF	; 255
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     14e:	46 e0       	ldi	r20, 0x06	; 6
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     150:	52 e0       	ldi	r21, 0x02	; 2
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:34
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
}

uint8_t TinyMegaI2CMaster::read(void)
{
  if (I2Ccount != 0)
     152:	80 91 4d 3c 	lds	r24, 0x3C4D	; 0x803c4d <TinyMegaI2C>
     156:	90 91 4e 3c 	lds	r25, 0x3C4E	; 0x803c4e <TinyMegaI2C+0x1>
     15a:	00 97       	sbiw	r24, 0x00	; 0
     15c:	29 f0       	breq	.+10     	; 0x168 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x5c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:35
    I2Ccount--;
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	80 93 4d 3c 	sts	0x3C4D, r24	; 0x803c4d <TinyMegaI2C>
     164:	90 93 4e 3c 	sts	0x3C4E, r25	; 0x803c4e <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:36
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
     168:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f6de8>
     16c:	87 ff       	sbrs	r24, 7
     16e:	fc cf       	rjmp	.-8      	; 0x168 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x5c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:38
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
     170:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <vtable for UartClass+0x7f6deb>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:40
  // Check slave sent ACK?
  if (I2Ccount != 0)
     174:	60 91 4d 3c 	lds	r22, 0x3C4D	; 0x803c4d <TinyMegaI2C>
     178:	70 91 4e 3c 	lds	r23, 0x3C4E	; 0x803c4e <TinyMegaI2C+0x1>
     17c:	67 2b       	or	r22, r23
     17e:	79 f0       	breq	.+30     	; 0x19e <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x92>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     180:	50 93 14 08 	sts	0x0814, r21	; 0x800814 <vtable for UartClass+0x7f6de7>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.7():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:409
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
                {
                    dest[i] = TinyMegaI2C.read();
     184:	81 93       	st	Z+, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:407
                // 2. [NO NEED] The above Steps can be repeated if necessary and the address bit increments automatically.
                // 3. ** The Master, addressed as Receiver, can stop data transmission by not generating an acknowledge on the
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
     186:	e2 17       	cp	r30, r18
     188:	f3 07       	cpc	r31, r19
     18a:	19 f7       	brne	.-58     	; 0x152 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x46>
stop():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     18c:	87 e0       	ldi	r24, 0x07	; 7
     18e:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f6de7>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.7():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:413
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	cd 2b       	or	r28, r29
     196:	11 f2       	breq	.-124    	; 0x11c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:429
    }
    else
    {
        return (false);
    }
}
     198:	df 91       	pop	r29
     19a:	cf 91       	pop	r28
     19c:	08 95       	ret
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     19e:	40 93 14 08 	sts	0x0814, r20	; 0x800814 <vtable for UartClass+0x7f6de7>
     1a2:	f0 cf       	rjmp	.-32     	; 0x184 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]+0x78>

000001a4 <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:332
int UartClass::availableForWrite(void) {
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     1a4:	fc 01       	movw	r30, r24
     1a6:	50 8d       	ldd	r21, Z+24	; 0x18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:333
    tail = _tx_buffer_tail;
     1a8:	41 8d       	ldd	r20, Z+25	; 0x19
     1aa:	25 2f       	mov	r18, r21
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	84 2f       	mov	r24, r20
     1b0:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:336
  }
  if (head >= tail) {
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1b2:	82 1b       	sub	r24, r18
     1b4:	93 0b       	sbc	r25, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:335

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    tail = _tx_buffer_tail;
  }
  if (head >= tail) {
     1b6:	54 17       	cp	r21, r20
     1b8:	10 f0       	brcs	.+4      	; 0x1be <UartClass::availableForWrite()+0x1a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:336
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1ba:	cf 96       	adiw	r24, 0x3f	; 63
     1bc:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:338
  }
  return tail - head - 1;
     1be:	01 97       	sbiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:339
}
     1c0:	08 95       	ret

000001c2 <UartClass::read()>:
_ZN9UartClass4readEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:316
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}

int UartClass::read(void) {
     1c2:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:318
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     1c4:	96 89       	ldd	r25, Z+22	; 0x16
     1c6:	87 89       	ldd	r24, Z+23	; 0x17
     1c8:	98 17       	cp	r25, r24
     1ca:	61 f0       	breq	.+24     	; 0x1e4 <UartClass::read()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:321
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     1cc:	a7 89       	ldd	r26, Z+23	; 0x17
     1ce:	ae 0f       	add	r26, r30
     1d0:	bf 2f       	mov	r27, r31
     1d2:	b1 1d       	adc	r27, r1
     1d4:	5b 96       	adiw	r26, 0x1b	; 27
     1d6:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:322
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE-1); // % SERIAL_RX_BUFFER_SIZE;
     1d8:	97 89       	ldd	r25, Z+23	; 0x17
     1da:	9f 5f       	subi	r25, 0xFF	; 255
     1dc:	9f 73       	andi	r25, 0x3F	; 63
     1de:	97 8b       	std	Z+23, r25	; 0x17
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:323
    return c;
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:319
}

int UartClass::read(void) {
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:325
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE-1); // % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     1e8:	08 95       	ret

000001ea <UartClass::peek()>:
_ZN9UartClass4peekEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:308

int UartClass::available(void) {
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE-1); //% SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void) {
     1ea:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:309
  if (_rx_buffer_head == _rx_buffer_tail) {
     1ec:	96 89       	ldd	r25, Z+22	; 0x16
     1ee:	87 89       	ldd	r24, Z+23	; 0x17
     1f0:	98 17       	cp	r25, r24
     1f2:	31 f0       	breq	.+12     	; 0x200 <UartClass::peek()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:312
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     1f4:	87 89       	ldd	r24, Z+23	; 0x17
     1f6:	e8 0f       	add	r30, r24
     1f8:	f1 1d       	adc	r31, r1
     1fa:	83 8d       	ldd	r24, Z+27	; 0x1b
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:310
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE-1); //% SERIAL_RX_BUFFER_SIZE;
}

int UartClass::peek(void) {
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:314
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     204:	08 95       	ret

00000206 <UartClass::available()>:
_ZN9UartClass9availableEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:304

  // Note: Does not change output pins
  _written = false;
}

int UartClass::available(void) {
     206:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:305
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE-1); //% SERIAL_RX_BUFFER_SIZE;
     208:	96 89       	ldd	r25, Z+22	; 0x16
     20a:	27 89       	ldd	r18, Z+23	; 0x17
     20c:	89 2f       	mov	r24, r25
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	80 5c       	subi	r24, 0xC0	; 192
     212:	9f 4f       	sbci	r25, 0xFF	; 255
     214:	82 1b       	sub	r24, r18
     216:	91 09       	sbc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:306
}
     218:	8f 73       	andi	r24, 0x3F	; 63
     21a:	99 27       	eor	r25, r25
     21c:	08 95       	ret

0000021e <UartClass::end()>:
_ZN9UartClass3endEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:288

  // Restore SREG content
  SREG = oldSREG;
}

void UartClass::end() {
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:290
  // wait for transmission of outgoing data
  flush();
     224:	e8 81       	ld	r30, Y
     226:	f9 81       	ldd	r31, Y+1	; 0x01
     228:	06 80       	ldd	r0, Z+6	; 0x06
     22a:	f7 81       	ldd	r31, Z+7	; 0x07
     22c:	e0 2d       	mov	r30, r0
     22e:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:294

  // Disable receiver and transmitter as well as the RX complete and
  // data register empty interrupts.
  (*_hwserial_module).CTRLB &= ~(USART_RXEN_bm | USART_TXEN_bm);
     230:	ec 85       	ldd	r30, Y+12	; 0x0c
     232:	fd 85       	ldd	r31, Y+13	; 0x0d
     234:	86 81       	ldd	r24, Z+6	; 0x06
     236:	8f 73       	andi	r24, 0x3F	; 63
     238:	86 83       	std	Z+6, r24	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:295
  (*_hwserial_module).CTRLA &= ~(USART_RXCIE_bm | USART_DREIE_bm);
     23a:	ec 85       	ldd	r30, Y+12	; 0x0c
     23c:	fd 85       	ldd	r31, Y+13	; 0x0d
     23e:	85 81       	ldd	r24, Z+5	; 0x05
     240:	8f 75       	andi	r24, 0x5F	; 95
     242:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:298

  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     244:	8f 89       	ldd	r24, Y+23	; 0x17
     246:	8e 8b       	std	Y+22, r24	; 0x16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:301

  // Note: Does not change output pins
  _written = false;
     248:	1d 8a       	std	Y+21, r1	; 0x15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:302
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <UartClass::_tx_data_empty_irq()>:
_ZN9UartClass18_tx_data_empty_irqEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:96
  #define TX_BUFFER_ATOMIC
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void UartClass::_tx_data_empty_irq(void) {
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:98
  // Check if tx buffer already empty.
  if (_tx_buffer_head == _tx_buffer_tail) {
     256:	90 8d       	ldd	r25, Z+24	; 0x18
     258:	81 8d       	ldd	r24, Z+25	; 0x19
     25a:	c4 85       	ldd	r28, Z+12	; 0x0c
     25c:	d5 85       	ldd	r29, Z+13	; 0x0d
     25e:	98 13       	cpse	r25, r24
     260:	06 c0       	rjmp	.+12     	; 0x26e <UartClass::_tx_data_empty_irq()+0x1e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:101
    // Buffer empty, so disable "data register empty" interrupt
    //VPORTA.IN |= 0x80;
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     262:	8d 81       	ldd	r24, Y+5	; 0x05
     264:	8f 7d       	andi	r24, 0xDF	; 223
     266:	8d 83       	std	Y+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:123
  if (_tx_buffer_head == _tx_buffer_tail) {
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
    //VPORTA.IN |= 0x80;
  }
}
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:107
    return;
  }

  // There must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     26e:	a1 8d       	ldd	r26, Z+25	; 0x19
     270:	ae 0f       	add	r26, r30
     272:	bf 2f       	mov	r27, r31
     274:	b1 1d       	adc	r27, r1
     276:	a5 5a       	subi	r26, 0xA5	; 165
     278:	bf 4f       	sbci	r27, 0xFF	; 255
     27a:	9c 91       	ld	r25, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:108
  _tx_buffer_tail = (_tx_buffer_tail + 1) & (SERIAL_TX_BUFFER_SIZE-1); //% SERIAL_TX_BUFFER_SIZE;
     27c:	81 8d       	ldd	r24, Z+25	; 0x19
     27e:	8f 5f       	subi	r24, 0xFF	; 255
     280:	8f 73       	andi	r24, 0x3F	; 63
     282:	81 8f       	std	Z+25, r24	; 0x19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:113

  // clear the TXCIF flag -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  (*_hwserial_module).STATUS = USART_TXCIF_bm;
     284:	80 e4       	ldi	r24, 0x40	; 64
     286:	8c 83       	std	Y+4, r24	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:116
    //VPORTA.IN |= 0x40;

  (*_hwserial_module).TXDATAL = c;
     288:	a4 85       	ldd	r26, Z+12	; 0x0c
     28a:	b5 85       	ldd	r27, Z+13	; 0x0d
     28c:	12 96       	adiw	r26, 0x02	; 2
     28e:	9c 93       	st	X, r25
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:118

  if (_tx_buffer_head == _tx_buffer_tail) {
     290:	90 8d       	ldd	r25, Z+24	; 0x18
     292:	81 8d       	ldd	r24, Z+25	; 0x19
     294:	98 13       	cpse	r25, r24
     296:	e8 cf       	rjmp	.-48     	; 0x268 <UartClass::_tx_data_empty_irq()+0x18>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:120
    // Buffer empty, so disable "data register empty" interrupt
    (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     298:	04 84       	ldd	r0, Z+12	; 0x0c
     29a:	f5 85       	ldd	r31, Z+13	; 0x0d
     29c:	e0 2d       	mov	r30, r0
     29e:	85 81       	ldd	r24, Z+5	; 0x05
     2a0:	8f 7d       	andi	r24, 0xDF	; 223
     2a2:	85 83       	std	Z+5, r24	; 0x05
     2a4:	e1 cf       	rjmp	.-62     	; 0x268 <UartClass::_tx_data_empty_irq()+0x18>

000002a6 <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:126
    //VPORTA.IN |= 0x80;
  }
}

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     2a6:	dc 01       	movw	r26, r24
     2a8:	1c 96       	adiw	r26, 0x0c	; 12
     2aa:	ed 91       	ld	r30, X+
     2ac:	fc 91       	ld	r31, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:127
  if ((!(SREG & CPU_I_bm)) || (!((*_hwserial_module).CTRLA & USART_DREIE_bm)) || CPUINT.STATUS) {
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	07 fe       	sbrs	r0, 7
     2b2:	07 c0       	rjmp	.+14     	; 0x2c2 <UartClass::_poll_tx_data_empty()+0x1c>
     2b4:	25 81       	ldd	r18, Z+5	; 0x05
     2b6:	25 ff       	sbrs	r18, 5
     2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <UartClass::_poll_tx_data_empty()+0x1c>
     2ba:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <vtable for UartClass+0x7f66e4>
     2be:	22 23       	and	r18, r18
     2c0:	19 f0       	breq	.+6      	; 0x2c8 <UartClass::_poll_tx_data_empty()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:144
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.

    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     2c2:	24 81       	ldd	r18, Z+4	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:147


      _tx_data_empty_irq();
     2c4:	25 fd       	sbrc	r18, 5
     2c6:	c4 cf       	rjmp	.-120    	; 0x250 <UartClass::_tx_data_empty_irq()>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:151
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
}
     2c8:	08 95       	ret

000002ca <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:371
  }
  // When we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}

size_t UartClass::write(uint8_t c) {
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:372
  _written = true;
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	8d 8b       	std	Y+21, r24	; 0x15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:378

  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps significantly
  // improve the effective data rate at high (>500kbit/s) bit rates,
  // where interrupt overhead becomes a slowdown.
  if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     2d8:	98 8d       	ldd	r25, Y+24	; 0x18
     2da:	89 8d       	ldd	r24, Y+25	; 0x19
     2dc:	98 13       	cpse	r25, r24
     2de:	11 c0       	rjmp	.+34     	; 0x302 <UartClass::write(unsigned char)+0x38>
     2e0:	ec 85       	ldd	r30, Y+12	; 0x0c
     2e2:	fd 85       	ldd	r31, Y+13	; 0x0d
     2e4:	84 81       	ldd	r24, Z+4	; 0x04
     2e6:	85 ff       	sbrs	r24, 5
     2e8:	0c c0       	rjmp	.+24     	; 0x302 <UartClass::write(unsigned char)+0x38>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:379
    (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2ea:	80 e4       	ldi	r24, 0x40	; 64
     2ec:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:384
    /* Must clear TXCIF BEFORE we feed in the new byte!
       otherwise if millis interruot fires between these, at high baud rates and slow
       system clock, the byte will have transferred during millis, and so TXCIF will never get set again,
       and calls to flush() will hang. https://github.com/SpenceKonde/megaTinyCore/issues/352 */
    (*_hwserial_module).TXDATAL = c;
     2ee:	ec 85       	ldd	r30, Y+12	; 0x0c
     2f0:	fd 85       	ldd	r31, Y+13	; 0x0d
     2f2:	62 83       	std	Z+2, r22	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:418

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;

  return 1;
}
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	08 95       	ret
     302:	06 2f       	mov	r16, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:403
     (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
*/

    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE-1); // % SERIAL_TX_BUFFER_SIZE;
     304:	18 8d       	ldd	r17, Y+24	; 0x18
     306:	1f 5f       	subi	r17, 0xFF	; 255
     308:	1f 73       	andi	r17, 0x3F	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:407

  //If the output buffer is full, there's nothing for it other than to
  //wait for the interrupt handler to empty it a bit (or emulate interrupts)
  while (i == _tx_buffer_tail) {
     30a:	89 8d       	ldd	r24, Y+25	; 0x19
     30c:	81 13       	cpse	r24, r17
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:408
    _poll_tx_data_empty();
     30e:	03 c0       	rjmp	.+6      	; 0x316 <UartClass::write(unsigned char)+0x4c>
     310:	ce 01       	movw	r24, r28
     312:	c9 df       	rcall	.-110    	; 0x2a6 <UartClass::_poll_tx_data_empty()>
     314:	fa cf       	rjmp	.-12     	; 0x30a <UartClass::write(unsigned char)+0x40>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:411
  }

  _tx_buffer[_tx_buffer_head] = c;
     316:	e8 8d       	ldd	r30, Y+24	; 0x18
     318:	ec 0f       	add	r30, r28
     31a:	fd 2f       	mov	r31, r29
     31c:	f1 1d       	adc	r31, r1
     31e:	e5 5a       	subi	r30, 0xA5	; 165
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	00 83       	st	Z, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:412
  _tx_buffer_head = i;
     324:	18 8f       	std	Y+24, r17	; 0x18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:415

  // Enable data "register empty interrupt"
  (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     326:	ec 85       	ldd	r30, Y+12	; 0x0c
     328:	fd 85       	ldd	r31, Y+13	; 0x0d
     32a:	85 81       	ldd	r24, Z+5	; 0x05
     32c:	80 62       	ori	r24, 0x20	; 32
     32e:	85 83       	std	Z+5, r24	; 0x05
     330:	e1 cf       	rjmp	.-62     	; 0x2f4 <UartClass::write(unsigned char)+0x2a>

00000332 <UartClass::flush()>:
_ZN9UartClass5flushEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:341
    return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  }
  return tail - head - 1;
}

void UartClass::flush() {
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:345
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXCIF (transmit
  // complete) bit to 1 during initialization
  if (!_written) {
     338:	8d 89       	ldd	r24, Y+21	; 0x15
     33a:	88 23       	and	r24, r24
     33c:	59 f0       	breq	.+22     	; 0x354 <UartClass::flush()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:360
  // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
  // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
  // and in that case flush(), and write() with full buffer would just straight up hang...

  // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
  while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     33e:	ec 85       	ldd	r30, Y+12	; 0x0c
     340:	fd 85       	ldd	r31, Y+13	; 0x0d
     342:	85 81       	ldd	r24, Z+5	; 0x05
     344:	85 fd       	sbrc	r24, 5
     346:	03 c0       	rjmp	.+6      	; 0x34e <UartClass::flush()+0x1c>
     348:	84 81       	ldd	r24, Z+4	; 0x04
     34a:	86 fd       	sbrc	r24, 6
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:365

    // If interrupts are globally disabled or the and DR empty interrupt is disabled,
    // poll the "data register empty" interrupt flag to prevent deadlock

    _poll_tx_data_empty();
     34c:	03 c0       	rjmp	.+6      	; 0x354 <UartClass::flush()+0x22>
     34e:	ce 01       	movw	r24, r28
     350:	aa df       	rcall	.-172    	; 0x2a6 <UartClass::_poll_tx_data_empty()>
     352:	f5 cf       	rjmp	.-22     	; 0x33e <UartClass::flush()+0xc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:369
  }
  // When we get here, nothing is queued anymore (DREIE is disabled) and
  // the hardware finished transmission (TXCIF is set).
}
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     35a:	af 92       	push	r10
     35c:	bf 92       	push	r11
     35e:	cf 92       	push	r12
     360:	df 92       	push	r13
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	6c 01       	movw	r12, r24
     370:	7b 01       	movw	r14, r22
     372:	8b 01       	movw	r16, r22
     374:	04 0f       	add	r16, r20
     376:	15 1f       	adc	r17, r21
     378:	eb 01       	movw	r28, r22
     37a:	5e 01       	movw	r10, r28
     37c:	ae 18       	sub	r10, r14
     37e:	bf 08       	sbc	r11, r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     380:	c0 17       	cp	r28, r16
     382:	d1 07       	cpc	r29, r17
     384:	59 f0       	breq	.+22     	; 0x39c <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:32
    if (write(*buffer++)) {
     386:	69 91       	ld	r22, Y+
     388:	d6 01       	movw	r26, r12
     38a:	ed 91       	ld	r30, X+
     38c:	fc 91       	ld	r31, X
     38e:	01 90       	ld	r0, Z+
     390:	f0 81       	ld	r31, Z
     392:	e0 2d       	mov	r30, r0
     394:	c6 01       	movw	r24, r12
     396:	09 95       	icall
     398:	89 2b       	or	r24, r25
     39a:	79 f7       	brne	.-34     	; 0x37a <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     39c:	c5 01       	movw	r24, r10
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	1f 91       	pop	r17
     3a4:	0f 91       	pop	r16
     3a6:	ff 90       	pop	r15
     3a8:	ef 90       	pop	r14
     3aa:	df 90       	pop	r13
     3ac:	cf 90       	pop	r12
     3ae:	bf 90       	pop	r11
     3b0:	af 90       	pop	r10
     3b2:	08 95       	ret

000003b4 <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.h:223
      return write((uint8_t)n);
    }
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	08 95       	ret

000003b8 <micros>:
micros():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:228
  #else
    uint8_t ticks;
  #endif
  uint8_t flags;
  /* Save current state and disable interrupts */
  uint8_t oldSREG = SREG;
     3b8:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:229
  cli(); /* INTERRUPTS OFF */
     3ba:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:231
  #if defined(MILLIS_USE_TIMERA0)
    ticks = TCA0.SPLIT.HCNT;
     3bc:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <vtable for UartClass+0x7f6ff4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:232
    flags = TCA0.SPLIT.INTFLAGS;
     3c0:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <vtable for UartClass+0x7f6fde>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:248
   * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
   * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
   * doesn't matter.
   * Get current number of overflows and timer count */
  #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1))
    overflows = timer_overflow_count;
     3c4:	20 91 0c 3c 	lds	r18, 0x3C0C	; 0x803c0c <timer_overflow_count>
     3c8:	30 91 0d 3c 	lds	r19, 0x3C0D	; 0x803c0d <timer_overflow_count+0x1>
     3cc:	40 91 0e 3c 	lds	r20, 0x3C0E	; 0x803c0e <timer_overflow_count+0x2>
     3d0:	50 91 0f 3c 	lds	r21, 0x3C0F	; 0x803c0f <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:253
  #else
    overflows = timer_millis;
  #endif
  /* Turn interrupts back on, assuming they were on when micros was called. */
  SREG = oldSREG; /* INTERRUPTS ON */
     3d4:	8f bf       	out	0x3f, r24	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:257
  #if defined(MILLIS_USE_TIMERD0)
    if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
  #elif defined(MILLIS_USE_TIMERA0)
    ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
     3d6:	8e ef       	ldi	r24, 0xFE	; 254
     3d8:	86 1b       	sub	r24, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:258
    if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4 )) {
     3da:	91 ff       	sbrs	r25, 1
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <micros+0x32>
     3de:	84 30       	cpi	r24, 0x04	; 4
     3e0:	20 f4       	brcc	.+8      	; 0x3ea <micros+0x32>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:265
    if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
  #endif
    #if ((defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1)) && (F_CPU <= 1000000))
      overflows += 2;
    #else
      overflows++;
     3e2:	2f 5f       	subi	r18, 0xFF	; 255
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	4f 4f       	sbci	r20, 0xFF	; 255
     3e8:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:346
    #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
      microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                   + (ticks * 3 + ((uint16_t)(ticks >> 1) - (ticks >> 3)));
    #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
      microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                   + (ticks * 3 + ((uint16_t)(ticks >> 2) - (ticks >> 4)));
     3ea:	93 e0       	ldi	r25, 0x03	; 3
     3ec:	89 9f       	mul	r24, r25
     3ee:	f0 01       	movw	r30, r0
     3f0:	11 24       	eor	r1, r1
     3f2:	98 2f       	mov	r25, r24
     3f4:	92 95       	swap	r25
     3f6:	9f 70       	andi	r25, 0x0F	; 15
     3f8:	e9 1b       	sub	r30, r25
     3fa:	f1 09       	sbc	r31, r1
     3fc:	86 95       	lsr	r24
     3fe:	86 95       	lsr	r24
     400:	e8 0f       	add	r30, r24
     402:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:345
                   // I also cannot fathom how the compiler generates what it does from this input....
    #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
      microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                   + (ticks * 3 + ((uint16_t)(ticks >> 1) - (ticks >> 3)));
    #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
      microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
     404:	a0 e3       	ldi	r26, 0x30	; 48
     406:	b3 e0       	ldi	r27, 0x03	; 3
     408:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__muluhisi3>
     40c:	6e 0f       	add	r22, r30
     40e:	7f 1f       	adc	r23, r31
     410:	81 1d       	adc	r24, r1
     412:	91 1d       	adc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:356
      microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                    + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
    #endif
  #endif //end of timer-specific part of micros calculations
  return microseconds;
}
     414:	08 95       	ret

00000416 <delay>:
delay():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:397
      }
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms)
  {
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:398
    uint16_t start = (uint16_t)micros();
     422:	6b 01       	movw	r12, r22
     424:	7c 01       	movw	r14, r24
     426:	c8 df       	rcall	.-112    	; 0x3b8 <micros>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:400
    while (ms > 0) {
      while (((uint16_t)micros() - start) >= 1000 && ms) {
     428:	eb 01       	movw	r28, r22
     42a:	c6 df       	rcall	.-116    	; 0x3b8 <micros>
     42c:	6c 1b       	sub	r22, r28
     42e:	7d 0b       	sbc	r23, r29
     430:	68 3e       	cpi	r22, 0xE8	; 232
     432:	73 40       	sbci	r23, 0x03	; 3
     434:	a0 f0       	brcs	.+40     	; 0x45e <delay+0x48>
     436:	c1 14       	cp	r12, r1
     438:	d1 04       	cpc	r13, r1
     43a:	e1 04       	cpc	r14, r1
     43c:	f1 04       	cpc	r15, r1
     43e:	39 f4       	brne	.+14     	; 0x44e <delay+0x38>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:405
        ms-- ;
        start += 1000;
      }
    }
  }
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:401
  void delay(uint32_t ms)
  {
    uint16_t start = (uint16_t)micros();
    while (ms > 0) {
      while (((uint16_t)micros() - start) >= 1000 && ms) {
        ms-- ;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	c8 1a       	sub	r12, r24
     452:	d1 08       	sbc	r13, r1
     454:	e1 08       	sbc	r14, r1
     456:	f1 08       	sbc	r15, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:402
        start += 1000;
     458:	c8 51       	subi	r28, 0x18	; 24
     45a:	dc 4f       	sbci	r29, 0xFC	; 252
     45c:	e6 cf       	rjmp	.-52     	; 0x42a <delay+0x14>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:399
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms)
  {
    uint16_t start = (uint16_t)micros();
    while (ms > 0) {
     45e:	c1 14       	cp	r12, r1
     460:	d1 04       	cpc	r13, r1
     462:	e1 04       	cpc	r14, r1
     464:	f1 04       	cpc	r15, r1
     466:	09 f7       	brne	.-62     	; 0x42a <delay+0x14>
     468:	eb cf       	rjmp	.-42     	; 0x440 <delay+0x2a>

0000046a <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.h:175
  public:
    inline UartClass(volatile USART_t *hwserial_module, uint8_t hwserial_rx_pin, uint8_t hwserial_tx_pin, uint8_t hwserial_rx_pin_swap, uint8_t hwserial_tx_pin_swap, uint8_t dre_vect_num, uint8_t uart_mux, uint8_t uart_mux_swap);
    bool pins(uint8_t tx, uint8_t rx);
    bool swap(uint8_t state = 1);
    void begin(unsigned long baud) {
      begin(baud, SERIAL_8N1);
     46a:	dc 01       	movw	r26, r24
     46c:	ed 91       	ld	r30, X+
     46e:	fc 91       	ld	r31, X
     470:	00 88       	ldd	r0, Z+16	; 0x10
     472:	f1 89       	ldd	r31, Z+17	; 0x11
     474:	e0 2d       	mov	r30, r0
     476:	23 e0       	ldi	r18, 0x03	; 3
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	09 94       	ijmp

0000047c <Print::write(char const*) [clone .part.2] [clone .constprop.33]>:
_ZN5Print5writeEPKc.part.2.constprop.33():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.h:56
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
     47c:	fc 01       	movw	r30, r24
     47e:	01 90       	ld	r0, Z+
     480:	00 20       	and	r0, r0
     482:	e9 f7       	brne	.-6      	; 0x47e <Print::write(char const*) [clone .part.2] [clone .constprop.33]+0x2>
     484:	31 97       	sbiw	r30, 0x01	; 1
     486:	af 01       	movw	r20, r30
     488:	48 1b       	sub	r20, r24
     48a:	59 0b       	sbc	r21, r25
     48c:	bc 01       	movw	r22, r24
     48e:	8f e4       	ldi	r24, 0x4F	; 79
     490:	9c e3       	ldi	r25, 0x3C	; 60
     492:	63 cf       	rjmp	.-314    	; 0x35a <Print::write(unsigned char const*, unsigned int)>

00000494 <Print::println(String const&) [clone .constprop.20]>:
_ZN5Print7printlnERK6String.constprop.20():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:127

size_t Print::println(void) {
  return write("\r\n");
}

size_t Print::println(const String &s) {
     494:	cf 93       	push	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.h:60
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     496:	df 93       	push	r29
write():
     498:	fc 01       	movw	r30, r24
     49a:	44 81       	ldd	r20, Z+4	; 0x04
     49c:	55 81       	ldd	r21, Z+5	; 0x05
     49e:	60 81       	ld	r22, Z
     4a0:	71 81       	ldd	r23, Z+1	; 0x01
     4a2:	8f e4       	ldi	r24, 0x4F	; 79
     4a4:	9c e3       	ldi	r25, 0x3C	; 60
     4a6:	59 df       	rcall	.-334    	; 0x35a <Print::write(unsigned char const*, unsigned int)>
     4a8:	ec 01       	movw	r28, r24
     4aa:	87 e4       	ldi	r24, 0x47	; 71
     4ac:	9a e9       	ldi	r25, 0x9A	; 154
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:131
  size_t n = print(s);
  n += println();
  return n;
}
     4ae:	e6 df       	rcall	.-52     	; 0x47c <Print::write(char const*) [clone .part.2] [clone .constprop.33]>
_ZN5Print7printlnERK6String.constprop.20():
     4b0:	8c 0f       	add	r24, r28
     4b2:	9d 1f       	adc	r25, r29
     4b4:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:133

size_t Print::println(const char c[]) {
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <Print::println(char const*) [clone .constprop.30]>:
_ZN5Print7printlnEPKc.constprop.30():
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
write():
     4be:	de df       	rcall	.-68     	; 0x47c <Print::write(char const*) [clone .part.2] [clone .constprop.33]>
     4c0:	ec 01       	movw	r28, r24
     4c2:	87 e4       	ldi	r24, 0x47	; 71
     4c4:	9a e9       	ldi	r25, 0x9A	; 154
     4c6:	da df       	rcall	.-76     	; 0x47c <Print::write(char const*) [clone .part.2] [clone .constprop.33]>
_ZN5Print7printlnEPKc.constprop.30():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:137
  size_t n = print(c);
  n += println();
  return n;
}
     4c8:	8c 0f       	add	r24, r28
     4ca:	9d 1f       	adc	r25, r29
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <Print::print(int, int) [clone .constprop.25]>:
_ZN5Print5printEii.constprop.25():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:78

size_t Print::print(unsigned char b, int base) {
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base) {
     4d2:	8f 92       	push	r8
     4d4:	9f 92       	push	r9
     4d6:	af 92       	push	r10
     4d8:	bf 92       	push	r11
     4da:	cf 92       	push	r12
     4dc:	df 92       	push	r13
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	a1 97       	sbiw	r28, 0x21	; 33
     4f0:	cd bf       	out	0x3d, r28	; 61
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:79
  return print((long) n, base);
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	6c 01       	movw	r12, r24
     4f6:	99 0f       	add	r25, r25
     4f8:	ee 08       	sbc	r14, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:90

size_t Print::print(long n, int base) {
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     4fa:	ff 08       	sbc	r15, r15
print():
     4fc:	f7 fe       	sbrs	r15, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:71
size_t Print::print(const char str[]) {
  return write(str);
}

size_t Print::print(char c) {
  return write(c);
     4fe:	3c c0       	rjmp	.+120    	; 0x578 <Print::print(int, int) [clone .constprop.25]+0xa6>
     500:	6d e2       	ldi	r22, 0x2D	; 45
     502:	8f e4       	ldi	r24, 0x4F	; 79
     504:	9c e3       	ldi	r25, 0x3C	; 60
     506:	e1 de       	rcall	.-574    	; 0x2ca <UartClass::write(unsigned char)>
     508:	8c 01       	movw	r16, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:92
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     50a:	22 27       	eor	r18, r18
     50c:	33 27       	eor	r19, r19
     50e:	a9 01       	movw	r20, r18
     510:	2c 19       	sub	r18, r12
     512:	3d 09       	sbc	r19, r13
     514:	4e 09       	sbc	r20, r14
     516:	5f 09       	sbc	r21, r15
printNumber():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:219

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     518:	19 a2       	std	Y+33, r1	; 0x21
     51a:	ce 01       	movw	r24, r28
     51c:	81 96       	adiw	r24, 0x21	; 33
     51e:	7c 01       	movw	r14, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:227
  if (base < 2) {
    base = 10;
  }

  do {
    char c = n % base;
     520:	9a e0       	ldi	r25, 0x0A	; 10
     522:	89 2e       	mov	r8, r25
     524:	91 2c       	mov	r9, r1
     526:	a1 2c       	mov	r10, r1
     528:	b1 2c       	mov	r11, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:228
    n /= base;
     52a:	ca 01       	movw	r24, r20
     52c:	b9 01       	movw	r22, r18
     52e:	a5 01       	movw	r20, r10
     530:	94 01       	movw	r18, r8
     532:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__udivmodsi4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     536:	60 5d       	subi	r22, 0xD0	; 208
     538:	f7 01       	movw	r30, r14
     53a:	62 93       	st	-Z, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:231
  } while (n);
     53c:	7f 01       	movw	r14, r30
     53e:	21 15       	cp	r18, r1
     540:	31 05       	cpc	r19, r1
     542:	41 05       	cpc	r20, r1
     544:	51 05       	cpc	r21, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.h:54
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
     546:	89 f7       	brne	.-30     	; 0x52a <Print::print(int, int) [clone .constprop.25]+0x58>
_ZN5Print5printEii.constprop.25():
     548:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
     54a:	80 e0       	ldi	r24, 0x00	; 0
write():
     54c:	30 97       	sbiw	r30, 0x00	; 0
     54e:	11 f0       	breq	.+4      	; 0x554 <Print::print(int, int) [clone .constprop.25]+0x82>
     550:	cf 01       	movw	r24, r30
     552:	94 df       	rcall	.-216    	; 0x47c <Print::write(char const*) [clone .part.2] [clone .constprop.33]>
print():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:93
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
     554:	80 0f       	add	r24, r16
     556:	91 1f       	adc	r25, r17
_ZN5Print5printEii.constprop.25():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:80
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base) {
  return print((long) n, base);
}
     558:	a1 96       	adiw	r28, 0x21	; 33
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	bf 90       	pop	r11
     570:	af 90       	pop	r10
     572:	9f 90       	pop	r9
     574:	8f 90       	pop	r8
     576:	08 95       	ret
print():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:95
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     578:	a7 01       	movw	r20, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:219

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     57a:	96 01       	movw	r18, r12
printNumber():
     57c:	19 a2       	std	Y+33, r1	; 0x21
     57e:	8e 01       	movw	r16, r28
     580:	0f 5d       	subi	r16, 0xDF	; 223
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:227
  if (base < 2) {
    base = 10;
  }

  do {
    char c = n % base;
     582:	1f 4f       	sbci	r17, 0xFF	; 255
     584:	8a e0       	ldi	r24, 0x0A	; 10
     586:	c8 2e       	mov	r12, r24
     588:	d1 2c       	mov	r13, r1
     58a:	e1 2c       	mov	r14, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:228
    n /= base;
     58c:	f1 2c       	mov	r15, r1
     58e:	ca 01       	movw	r24, r20
     590:	b9 01       	movw	r22, r18
     592:	a7 01       	movw	r20, r14
     594:	96 01       	movw	r18, r12
     596:	ef d7       	rcall	.+4062   	; 0x1576 <__udivmodsi4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:230

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     598:	60 5d       	subi	r22, 0xD0	; 208
     59a:	f8 01       	movw	r30, r16
     59c:	62 93       	st	-Z, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.cpp:231
  } while (n);
     59e:	8f 01       	movw	r16, r30
     5a0:	21 15       	cp	r18, r1
     5a2:	31 05       	cpc	r19, r1
     5a4:	41 05       	cpc	r20, r1
     5a6:	51 05       	cpc	r21, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.h:54
        return 0;
     5a8:	91 f7       	brne	.-28     	; 0x58e <Print::print(int, int) [clone .constprop.25]+0xbc>
_ZN5Print5printEii.constprop.25():
     5aa:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/Print.h:53
      setWriteError(0);
    }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
     5ac:	80 e0       	ldi	r24, 0x00	; 0
write():
     5ae:	30 97       	sbiw	r30, 0x00	; 0
     5b0:	99 f2       	breq	.-90     	; 0x558 <Print::print(int, int) [clone .constprop.25]+0x86>
     5b2:	cf 01       	movw	r24, r30
     5b4:	63 df       	rcall	.-314    	; 0x47c <Print::write(char const*) [clone .part.2] [clone .constprop.33]>
     5b6:	d0 cf       	rjmp	.-96     	; 0x558 <Print::print(int, int) [clone .constprop.25]+0x86>

000005b8 <pinMode>:
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:125
  *(portbase + 0x10 + bit_pos)=pinncfg;
  SREG=oldSREG; //re-enable interrupts
}


void pinMode(uint8_t pin, uint8_t mode) {
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:128
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     5bc:	86 31       	cpi	r24, 0x16	; 22
     5be:	98 f4       	brcc	.+38     	; 0x5e6 <pinMode+0x2e>
check_valid_digital_pin():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if(__builtin_constant_p(pin))
     5c0:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:128


void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     5c2:	fc 01       	movw	r30, r24
     5c4:	e4 5f       	subi	r30, 0xF4	; 244
     5c6:	f5 46       	sbci	r31, 0x65	; 101
     5c8:	20 81       	ld	r18, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:129
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
     5ca:	2f 3f       	cpi	r18, 0xFF	; 255
     5cc:	61 f0       	breq	.+24     	; 0x5e6 <pinMode+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:132
    return;                             /* ignore invalid pins passed at runtime */
  }
  PORT_t *port = digitalPinToPortStruct(pin);
     5ce:	fc 01       	movw	r30, r24
     5d0:	ea 50       	subi	r30, 0x0A	; 10
     5d2:	f6 46       	sbci	r31, 0x66	; 102
     5d4:	e0 81       	ld	r30, Z
     5d6:	30 e2       	ldi	r19, 0x20	; 32
     5d8:	e3 9f       	mul	r30, r19
     5da:	f0 01       	movw	r30, r0
     5dc:	11 24       	eor	r1, r1
     5de:	fc 5f       	subi	r31, 0xFC	; 252
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:134
  //if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
     5e0:	61 30       	cpi	r22, 0x01	; 1
     5e2:	21 f4       	brne	.+8      	; 0x5ec <pinMode+0x34>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:135
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
     5e4:	21 83       	std	Z+1, r18	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:152
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
  }
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:138
  //if (port == NULL) return;           /* skip this test; if bit_mask isn't NOT_A_PIN, port won't be null - if it is, pins_arduino.h contains errors and we can't expect any digital I/O to work correctly.
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
     5ec:	80 52       	subi	r24, 0x20	; 32
     5ee:	96 46       	sbci	r25, 0x66	; 102
     5f0:	ec 01       	movw	r28, r24
     5f2:	a8 81       	ld	r26, Y
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:139
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
     5f4:	30 97       	sbiw	r30, 0x00	; 0
     5f6:	81 f0       	breq	.+32     	; 0x618 <pinMode+0x60>
     5f8:	af 3f       	cpi	r26, 0xFF	; 255
     5fa:	71 f0       	breq	.+28     	; 0x618 <pinMode+0x60>
     5fc:	cf 01       	movw	r24, r30
     5fe:	40 96       	adiw	r24, 0x10	; 16
     600:	a8 0f       	add	r26, r24
     602:	b9 2f       	mov	r27, r25
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:140
    uint8_t status = SREG;              /* Save state */
     604:	b1 1d       	adc	r27, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:141
    cli();                              /* Interrupts off for PINnCTRL stuff */
     606:	9f b7       	in	r25, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:144
    port->DIRCLR = bit_mask;            /* Configure direction as input */
    if (mode == INPUT_PULLUP) {         /* Configure pull-up resistor */
      *pin_ctrl |= PORT_PULLUPEN_bm;    /* Enable pull-up */
     608:	f8 94       	cli
     60a:	22 83       	std	Z+2, r18	; 0x02
     60c:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:145
      port->OUTSET = bit_mask;          /* emulate setting of the port output register on classic AVR */
     60e:	88 60       	ori	r24, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:150
    } else {                            /* mode == INPUT (no pullup) */
      *pin_ctrl &= ~(PORT_PULLUPEN_bm); /* Disable pull-up */
      port->OUTCLR = bit_mask;          /* emulate clearing of the port output register on classic AVR */
    }
    SREG = status;                      /* Restore state */
     610:	8c 93       	st	X, r24
     612:	25 83       	std	Z+5, r18	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:139
  if (mode == OUTPUT) {
    port->DIRSET = bit_mask;            /* Configure direction as output and done*/
  } else {                              /* mode == INPUT or INPUT_PULLUP - more complicated */
                                        /* Calculate where pin control register is */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    volatile uint8_t *pin_ctrl = getPINnCTRLregister(port, bit_pos);
     614:	9f bf       	out	0x3f, r25	; 63
     616:	e7 cf       	rjmp	.-50     	; 0x5e6 <pinMode+0x2e>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:19
{
}

void TinyMegaI2CMaster::init()
{
  pinMode(PIN_WIRE_SDA, INPUT_PULLUP);
     618:	b0 e0       	ldi	r27, 0x00	; 0
     61a:	a0 e0       	ldi	r26, 0x00	; 0
     61c:	f4 cf       	rjmp	.-24     	; 0x606 <pinMode+0x4e>

0000061e <RV8803Tiny::begin() [clone .constprop.3]>:
_ZN10RV8803Tiny5beginEv.constprop.3():
     61e:	62 e0       	ldi	r22, 0x02	; 2
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:20
  pinMode(PIN_WIRE_SCL, INPUT_PULLUP);
     620:	8a e0       	ldi	r24, 0x0A	; 10
     622:	ca df       	rcall	.-108    	; 0x5b8 <pinMode>
     624:	62 e0       	ldi	r22, 0x02	; 2
     626:	8b e0       	ldi	r24, 0x0B	; 11
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:27
  // For ATTINY-1607-MFR, Setting SDA SCL pins with DPM would be
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
     628:	c7 df       	rcall	.-114    	; 0x5b8 <pinMode>
     62a:	e0 e1       	ldi	r30, 0x10	; 16
     62c:	f8 e0       	ldi	r31, 0x08	; 8
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     62e:	16 82       	std	Z+6, r1	; 0x06
     630:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:29
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     632:	83 83       	std	Z+3, r24	; 0x03
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     634:	85 83       	std	Z+5, r24	; 0x05
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	49 cd       	rjmp	.-1390   	; 0xce <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.10]>

0000063c <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:181
    _pin_set = 0;
    return false;
  }
}

void UartClass::begin(unsigned long baud, uint16_t config) {
     63c:	7f 92       	push	r7
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	4a 01       	movw	r8, r20
     65a:	5b 01       	movw	r10, r22
     65c:	72 2e       	mov	r7, r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:188
    if (baud > (F_CPU/8)) badArg("Unachievable baud, too high - must be less than F_CPU/8");
    if (baud < (F_CPU/16800)) badArg("Unachievable baud, too low - must be more than F_CPU/16800 (16384 plus allowable error)");
  }
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_written) {
     65e:	8d 89       	ldd	r24, Y+21	; 0x15
     660:	88 23       	and	r24, r24
     662:	39 f0       	breq	.+14     	; 0x672 <UartClass::begin(unsigned long, unsigned int)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:189
    this->end();
     664:	e8 81       	ld	r30, Y
     666:	f9 81       	ldd	r31, Y+1	; 0x01
     668:	02 88       	ldd	r0, Z+18	; 0x12
     66a:	f3 89       	ldd	r31, Z+19	; 0x13
     66c:	e0 2d       	mov	r30, r0
     66e:	ce 01       	movw	r24, r28
     670:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:192
  }

  struct UartPinSet *set = &_hw_set[_pin_set];
     672:	0c 89       	ldd	r16, Y+20	; 0x14
     674:	10 e0       	ldi	r17, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:195

  int32_t baud_setting = 0;
  uint8_t rxmode=0;
     676:	e1 2c       	mov	r14, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:199

  // Use CLK2X if appropriate.
  #if (F_CPU > 2000000)
  if(baud>=(38400*(F_CPU/1000000))) {
     678:	81 14       	cp	r8, r1
     67a:	8e ee       	ldi	r24, 0xEE	; 238
     67c:	98 06       	cpc	r9, r24
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	a8 06       	cpc	r10, r24
     682:	b1 04       	cpc	r11, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:201
    rxmode = USART_RXMODE_CLK2X_gc;
    baud=baud>>1;
     684:	30 f0       	brcs	.+12     	; 0x692 <UartClass::begin(unsigned long, unsigned int)+0x56>
     686:	b6 94       	lsr	r11
     688:	a7 94       	ror	r10
     68a:	97 94       	ror	r9
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:200
  uint8_t rxmode=0;

  // Use CLK2X if appropriate.
  #if (F_CPU > 2000000)
  if(baud>=(38400*(F_CPU/1000000))) {
    rxmode = USART_RXMODE_CLK2X_gc;
     68c:	87 94       	ror	r8
     68e:	32 e0       	ldi	r19, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:213
  #else
  //if clocked at 1 or 2 MHz, always use CLK2X mode and save a bit of space, we correct for not shifting the baud value below, as it saves a bit of flash
    rxmode = USART_RXMODE_CLK2X_gc;
  #endif

  _written = false;
     690:	e3 2e       	mov	r14, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:258
    #endif
  #endif

  // Make sure global interrupts are disabled during initialization
  // no reason to do this before we potentially do all that long division, right?
  uint8_t oldSREG = SREG;
     692:	1d 8a       	std	Y+21, r1	; 0x15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:259
  cli();
     694:	ff b6       	in	r15, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:261
  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
     696:	f8 94       	cli
     698:	cc 84       	ldd	r12, Y+12	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:249
      baud_setting=65535;
    }
    #else
    #if (F_CPU > 2000000)
      //if we are above 2 MHz, baud was corrected above if CLK2X used.
      baud_setting = (((4 * F_CPU) / baud));
     69a:	dd 84       	ldd	r13, Y+13	; 0x0d
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	7d e2       	ldi	r23, 0x2D	; 45
     6a0:	81 e3       	ldi	r24, 0x31	; 49
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	a5 01       	movw	r20, r10
     6a6:	94 01       	movw	r18, r8
     6a8:	66 d7       	rcall	.+3788   	; 0x1576 <__udivmodsi4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:261
  // Make sure global interrupts are disabled during initialization
  // no reason to do this before we potentially do all that long division, right?
  uint8_t oldSREG = SREG;
  cli();
  // assign the baud_setting, a.k.a. BAUD (USART Baud Rate Register)
  (*_hwserial_module).BAUD = (uint16_t)baud_setting;
     6aa:	f6 01       	movw	r30, r12
     6ac:	20 87       	std	Z+8, r18	; 0x08
     6ae:	31 87       	std	Z+9, r19	; 0x09
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:264

  // Set USART mode of operation
  (*_hwserial_module).CTRLC = config;
     6b0:	ec 85       	ldd	r30, Y+12	; 0x0c
     6b2:	fd 85       	ldd	r31, Y+13	; 0x0d
     6b4:	77 82       	std	Z+7, r7	; 0x07
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:267

  // Enable transmitter and receiver
  (*_hwserial_module).CTRLB = ((*_hwserial_module).CTRLB&(~USART_RXMODE_gm)) | rxmode | (USART_RXEN_bm | USART_TXEN_bm);
     6b6:	ec 85       	ldd	r30, Y+12	; 0x0c
     6b8:	fd 85       	ldd	r31, Y+13	; 0x0d
     6ba:	86 81       	ldd	r24, Z+6	; 0x06
     6bc:	89 7f       	andi	r24, 0xF9	; 249
     6be:	80 6c       	ori	r24, 0xC0	; 192
     6c0:	8e 29       	or	r24, r14
     6c2:	86 83       	std	Z+6, r24	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:269

  (*_hwserial_module).CTRLA |= USART_RXCIE_bm;
     6c4:	ec 85       	ldd	r30, Y+12	; 0x0c
     6c6:	fd 85       	ldd	r31, Y+13	; 0x0d
     6c8:	85 81       	ldd	r24, Z+5	; 0x05
     6ca:	80 68       	ori	r24, 0x80	; 128
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:274


  // Let PORTMUX point to alternative UART pins as requested
  #ifdef PORTMUX_CTRLB
    PORTMUX.CTRLB = set->mux | (PORTMUX.CTRLB & ~_hw_set[1].mux);
     6cc:	85 83       	std	Z+5, r24	; 0x05
     6ce:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vtable for UartClass+0x7f67d4>
     6d2:	8b 89       	ldd	r24, Y+19	; 0x13
     6d4:	80 95       	com	r24
     6d6:	89 23       	and	r24, r25
     6d8:	98 01       	movw	r18, r16
     6da:	22 0f       	add	r18, r18
     6dc:	33 1f       	adc	r19, r19
     6de:	02 0f       	add	r16, r18
     6e0:	13 1f       	adc	r17, r19
     6e2:	c0 0f       	add	r28, r16
     6e4:	d1 1f       	adc	r29, r17
     6e6:	98 89       	ldd	r25, Y+16	; 0x10
     6e8:	89 2b       	or	r24, r25
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:280
  #else
    PORTMUX.USARTROUTEA = set->mux | (PORTMUX.USARTROUTEA & ~_hw_set[1].mux);
  #endif

  // Set pin state for swapped UART pins
  pinMode(set->rx_pin, INPUT_PULLUP);
     6ea:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <vtable for UartClass+0x7f67d4>
     6ee:	62 e0       	ldi	r22, 0x02	; 2
     6f0:	8e 85       	ldd	r24, Y+14	; 0x0e
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:282
  //digitalWrite(set->tx_pin, HIGH);
  pinMode(set->tx_pin, OUTPUT);
     6f2:	62 df       	rcall	.-316    	; 0x5b8 <pinMode>
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     6f8:	5f df       	rcall	.-322    	; 0x5b8 <pinMode>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:285

  // Restore SREG content
  SREG = oldSREG;
     6fa:	ff be       	out	0x3f, r15	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART.cpp:286
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	bf 90       	pop	r11
     70e:	af 90       	pop	r10
     710:	9f 90       	pop	r9
     712:	8f 90       	pop	r8
     714:	7f 90       	pop	r7
     716:	08 95       	ret

00000718 <String::String(char const*)>:
_ZN6StringC2EPKc():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:30

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr) {
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	ec 01       	movw	r28, r24
_ZN6String4initEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     726:	18 82       	st	Y, r1
     728:	19 82       	std	Y+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     72a:	1a 82       	std	Y+2, r1	; 0x02
     72c:	1b 82       	std	Y+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:124
  len = 0;
     72e:	1c 82       	std	Y+4, r1	; 0x04
     730:	1d 82       	std	Y+5, r1	; 0x05
_ZN6StringC2EPKc():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:32
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr) {
  init();
  if (cstr) {
     732:	61 15       	cp	r22, r1
     734:	71 05       	cpc	r23, r1
     736:	a1 f1       	breq	.+104    	; 0x7a0 <String::String(char const*)+0x88>
     738:	7b 01       	movw	r14, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:33
    copy(cstr, strlen(cstr));
     73a:	fb 01       	movw	r30, r22
     73c:	01 90       	ld	r0, Z+
     73e:	00 20       	and	r0, r0
     740:	e9 f7       	brne	.-6      	; 0x73c <String::String(char const*)+0x24>
     742:	31 97       	sbiw	r30, 0x01	; 1
     744:	8f 01       	movw	r16, r30
     746:	06 1b       	sub	r16, r22
     748:	17 0b       	sbc	r17, r23
changeBuffer():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:149
  }
  return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen) {
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     74a:	b8 01       	movw	r22, r16
     74c:	6f 5f       	subi	r22, 0xFF	; 255
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 08 0c 	call	0x1810	; 0x1810 <realloc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:150
  if (newbuffer) {
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	b9 f0       	breq	.+46     	; 0x78a <String::String(char const*)+0x72>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:151
    buffer = newbuffer;
     75c:	88 83       	st	Y, r24
     75e:	99 83       	std	Y+1, r25	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:152
    capacity = maxStrLen;
     760:	0a 83       	std	Y+2, r16	; 0x02
     762:	1b 83       	std	Y+3, r17	; 0x03
reserve():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:140
unsigned char String::reserve(unsigned int size) {
  if (buffer && capacity >= size) {
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
     764:	2c 81       	ldd	r18, Y+4	; 0x04
     766:	3d 81       	ldd	r19, Y+5	; 0x05
     768:	23 2b       	or	r18, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:141
      buffer[0] = 0;
     76a:	11 f4       	brne	.+4      	; 0x770 <String::String(char const*)+0x58>
     76c:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:167
String &String::copy(const char *cstr, unsigned int length) {
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     76e:	10 82       	st	Z, r1
copy():
     770:	0c 83       	std	Y+4, r16	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:168
  strcpy(buffer, cstr);
     772:	1d 83       	std	Y+5, r17	; 0x05
     774:	b7 01       	movw	r22, r14
     776:	88 81       	ld	r24, Y
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:35
String::String(const char *cstr) {
  init();
  if (cstr) {
    copy(cstr, strlen(cstr));
  }
}
     778:	99 81       	ldd	r25, Y+1	; 0x01
_ZN6StringC2EPKc():
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:168
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
     784:	ef 90       	pop	r14
copy():
     786:	0c 94 c7 0c 	jmp	0x198e	; 0x198e <strcpy>
invalidate():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:128
  capacity = 0;
  len = 0;
}

void String::invalidate(void) {
  if (buffer) {
     78a:	88 81       	ld	r24, Y
     78c:	99 81       	ldd	r25, Y+1	; 0x01
     78e:	00 97       	sbiw	r24, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:129
    free(buffer);
     790:	09 f0       	breq	.+2      	; 0x794 <String::String(char const*)+0x7c>
     792:	b5 d7       	rcall	.+3946   	; 0x16fe <free>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:131
  }
  buffer = NULL;
     794:	18 82       	st	Y, r1
     796:	19 82       	std	Y+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:132
  capacity = len = 0;
     798:	1c 82       	std	Y+4, r1	; 0x04
     79a:	1d 82       	std	Y+5, r1	; 0x05
     79c:	1a 82       	std	Y+2, r1	; 0x02
     79e:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StringC2EPKc():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:35
String::String(const char *cstr) {
  init();
  if (cstr) {
    copy(cstr, strlen(cstr));
  }
}
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART0.cpp:48
#else
#error "Don't know what the Data Received interrupt vector is called for Serial"
#endif

#if defined(HWSERIAL0_DRE_VECTOR)
ISR(HWSERIAL0_DRE_VECTOR) {
     7ac:	08 95       	ret

000007ae <__vector_28>:
__vector_28():
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	2f 93       	push	r18
     7ba:	3f 93       	push	r19
     7bc:	4f 93       	push	r20
     7be:	5f 93       	push	r21
     7c0:	6f 93       	push	r22
     7c2:	7f 93       	push	r23
     7c4:	8f 93       	push	r24
     7c6:	9f 93       	push	r25
     7c8:	af 93       	push	r26
     7ca:	bf 93       	push	r27
     7cc:	ef 93       	push	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART0.cpp:49
  Serial._tx_data_empty_irq();
     7ce:	ff 93       	push	r31
     7d0:	8f e4       	ldi	r24, 0x4F	; 79
     7d2:	9c e3       	ldi	r25, 0x3C	; 60
     7d4:	3d dd       	rcall	.-1414   	; 0x250 <UartClass::_tx_data_empty_irq()>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART0.cpp:50
}
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	bf 91       	pop	r27
     7dc:	af 91       	pop	r26
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	7f 91       	pop	r23
     7e4:	6f 91       	pop	r22
     7e6:	5f 91       	pop	r21
     7e8:	4f 91       	pop	r20
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <__vector_27>:
__vector_27():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART0.cpp:40
// first place.

#if defined(HAVE_HWSERIAL0)

#if defined(HWSERIAL0_RXC_VECTOR)
ISR(HWSERIAL0_RXC_VECTOR) {
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	2f 93       	push	r18
     804:	8f 93       	push	r24
     806:	9f 93       	push	r25
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
_rx_complete_irq():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART_private.h:59

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void UartClass::_rx_complete_irq(void) {
  //if (bit_is_clear(*_rxdatah, USART_PERR_bp)) {
  if (!(((*_hwserial_module).RXDATAH) & USART_PERR_bm)) {
     80c:	e0 91 5b 3c 	lds	r30, 0x3C5B	; 0x803c5b <Serial+0xc>
     810:	f0 91 5c 3c 	lds	r31, 0x3C5C	; 0x803c5c <Serial+0xd>
     814:	81 81       	ldd	r24, Z+1	; 0x01
     816:	81 fd       	sbrc	r24, 1
     818:	1b c0       	rjmp	.+54     	; 0x850 <__vector_27+0x58>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART_private.h:62
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = (*_hwserial_module).RXDATAL;
     81a:	90 81       	ld	r25, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART_private.h:63
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     81c:	80 91 65 3c 	lds	r24, 0x3C65	; 0x803c65 <Serial+0x16>
     820:	8f 5f       	subi	r24, 0xFF	; 255
     822:	8f 73       	andi	r24, 0x3F	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART_private.h:69

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     824:	20 91 66 3c 	lds	r18, 0x3C66	; 0x803c66 <Serial+0x17>
     828:	82 17       	cp	r24, r18
     82a:	41 f0       	breq	.+16     	; 0x83c <__vector_27+0x44>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART_private.h:70
      _rx_buffer[_rx_buffer_head] = c;
     82c:	e0 91 65 3c 	lds	r30, 0x3C65	; 0x803c65 <Serial+0x16>
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	e1 5b       	subi	r30, 0xB1	; 177
     834:	f3 4c       	sbci	r31, 0xC3	; 195
     836:	93 8f       	std	Z+27, r25	; 0x1b
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART_private.h:71
      _rx_buffer_head = i;
     838:	80 93 65 3c 	sts	0x3C65, r24	; 0x803c65 <Serial+0x16>
__vector_27():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART0.cpp:42
  Serial._rx_complete_irq();
}
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	2f 91       	pop	r18
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti
_rx_complete_irq():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/UART_private.h:75
    }
  } else {
    // Parity error, read byte but discard it
    (*_hwserial_module).RXDATAL;
     850:	80 81       	ld	r24, Z
     852:	f4 cf       	rjmp	.-24     	; 0x83c <__vector_27+0x44>

00000854 <__vector_9>:
__vector_9():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:135
#elif defined(MILLIS_USE_TIMERB1)
  ISR(TCB1_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	2f 93       	push	r18
     860:	3f 93       	push	r19
     862:	4f 93       	push	r20
     864:	5f 93       	push	r21
     866:	6f 93       	push	r22
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:147
    #else
      timer_millis += 2;
    #endif
  #else
    #if !defined(MILLIS_USE_TIMERRTC) //TCA0 or TCD0
      uint32_t m = timer_millis;
     870:	80 91 2e 3c 	lds	r24, 0x3C2E	; 0x803c2e <timer_millis>
     874:	90 91 2f 3c 	lds	r25, 0x3C2F	; 0x803c2f <timer_millis+0x1>
     878:	a0 91 30 3c 	lds	r26, 0x3C30	; 0x803c30 <timer_millis+0x2>
     87c:	b0 91 31 3c 	lds	r27, 0x3C31	; 0x803c31 <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:148
      uint16_t f = timer_fract;
     880:	40 91 0a 3c 	lds	r20, 0x3C0A	; 0x803c0a <__data_end>
     884:	50 91 0b 3c 	lds	r21, 0x3C0B	; 0x803c0b <__data_end+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:150
      m += MILLIS_INC;
      f += FRACT_INC;
     888:	9a 01       	movw	r18, r20
     88a:	20 5d       	subi	r18, 0xD0	; 208
     88c:	3c 4f       	sbci	r19, 0xFC	; 252
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:151
      if (f >= FRACT_MAX) {
     88e:	28 3e       	cpi	r18, 0xE8	; 232
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	36 07       	cpc	r19, r22
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__vector_9+0x4c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:153

        f -= FRACT_MAX;
     896:	28 5e       	subi	r18, 0xE8	; 232
     898:	33 40       	sbci	r19, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:154
        m += 1;
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	a1 1d       	adc	r26, r1
     89e:	b1 1d       	adc	r27, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:156
      }
      timer_fract = f;
     8a0:	20 93 0a 3c 	sts	0x3C0A, r18	; 0x803c0a <__data_end>
     8a4:	30 93 0b 3c 	sts	0x3C0B, r19	; 0x803c0b <__data_end+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:157
      timer_millis = m;
     8a8:	80 93 2e 3c 	sts	0x3C2E, r24	; 0x803c2e <timer_millis>
     8ac:	90 93 2f 3c 	sts	0x3C2F, r25	; 0x803c2f <timer_millis+0x1>
     8b0:	a0 93 30 3c 	sts	0x3C30, r26	; 0x803c30 <timer_millis+0x2>
     8b4:	b0 93 31 3c 	sts	0x3C31, r27	; 0x803c31 <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:160
    #endif
    //if RTC is used as timer, we only increment the overflow count
    timer_overflow_count++;
     8b8:	80 91 0c 3c 	lds	r24, 0x3C0C	; 0x803c0c <timer_overflow_count>
     8bc:	90 91 0d 3c 	lds	r25, 0x3C0D	; 0x803c0d <timer_overflow_count+0x1>
     8c0:	a0 91 0e 3c 	lds	r26, 0x3C0E	; 0x803c0e <timer_overflow_count+0x2>
     8c4:	b0 91 0f 3c 	lds	r27, 0x3C0F	; 0x803c0f <timer_overflow_count+0x3>
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	a1 1d       	adc	r26, r1
     8cc:	b1 1d       	adc	r27, r1
     8ce:	80 93 0c 3c 	sts	0x3C0C, r24	; 0x803c0c <timer_overflow_count>
     8d2:	90 93 0d 3c 	sts	0x3C0D, r25	; 0x803c0d <timer_overflow_count+0x1>
     8d6:	a0 93 0e 3c 	sts	0x3C0E, r26	; 0x803c0e <timer_overflow_count+0x2>
     8da:	b0 93 0f 3c 	sts	0x3C0F, r27	; 0x803c0f <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:164
  #endif
  /* Clear flag */
  #if defined(MILLIS_USE_TIMERA0)
    TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm;
     8de:	82 e0       	ldi	r24, 0x02	; 2
     8e0:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <vtable for UartClass+0x7f6fde>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:172
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else //timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
  #endif
}
     8e4:	bf 91       	pop	r27
     8e6:	af 91       	pop	r26
     8e8:	9f 91       	pop	r25
     8ea:	8f 91       	pop	r24
     8ec:	6f 91       	pop	r22
     8ee:	5f 91       	pop	r21
     8f0:	4f 91       	pop	r20
     8f2:	3f 91       	pop	r19
     8f4:	2f 91       	pop	r18
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <global constructors keyed to 65535_0_components_check.ino.cpp.o.2589>:
_GLOBAL__I_65535_0_components_check.ino.cpp.o.2589():
     900:	ef e4       	ldi	r30, 0x4F	; 79
     902:	fc e3       	ldi	r31, 0x3C	; 60
     904:	12 82       	std	Z+2, r1	; 0x02
     906:	13 82       	std	Z+3, r1	; 0x03
     908:	88 ee       	ldi	r24, 0xE8	; 232
     90a:	93 e0       	ldi	r25, 0x03	; 3
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	84 83       	std	Z+4, r24	; 0x04
     912:	95 83       	std	Z+5, r25	; 0x05
     914:	a6 83       	std	Z+6, r26	; 0x06
     916:	b7 83       	std	Z+7, r27	; 0x07
     918:	81 e3       	ldi	r24, 0x31	; 49
     91a:	9a e9       	ldi	r25, 0x9A	; 154
     91c:	80 83       	st	Z, r24
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	98 e0       	ldi	r25, 0x08	; 8
     924:	84 87       	std	Z+12, r24	; 0x0c
     926:	95 87       	std	Z+13, r25	; 0x0d
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	86 87       	std	Z+14, r24	; 0x0e
     92c:	89 e0       	ldi	r24, 0x09	; 9
     92e:	87 87       	std	Z+15, r24	; 0x0f
     930:	10 8a       	std	Z+16, r1	; 0x10
     932:	83 e1       	ldi	r24, 0x13	; 19
     934:	81 8b       	std	Z+17, r24	; 0x11
     936:	82 e1       	ldi	r24, 0x12	; 18
     938:	82 8b       	std	Z+18, r24	; 0x12
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	83 8b       	std	Z+19, r24	; 0x13
     93e:	14 8a       	std	Z+20, r1	; 0x14
     940:	15 8a       	std	Z+21, r1	; 0x15
     942:	16 8a       	std	Z+22, r1	; 0x16
     944:	17 8a       	std	Z+23, r1	; 0x17
     946:	10 8e       	std	Z+24, r1	; 0x18
     948:	11 8e       	std	Z+25, r1	; 0x19
     94a:	8c e1       	ldi	r24, 0x1C	; 28
     94c:	82 8f       	std	Z+26, r24	; 0x1a
     94e:	08 95       	ret

00000950 <main>:
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/main.cpp:25
 * If serial event is enabled (which should be unusual, as it is no longer a menu option even, that gets
 * checked for after each call to loop.
 * In the past there was a USB-related function here, that is removed, as work will be needed in any event
 * at the core level if VUSB-based "stuff" arrives that needs support at this level */

int main() {
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	2c 97       	sbiw	r28, 0x0c	; 12
     95a:	cd bf       	out	0x3d, r28	; 61
     95c:	de bf       	out	0x3e, r29	; 62
init_clock():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:903
      #elif (F_CPU == 8000000) //16MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
      #elif (F_CPU == 5000000) //20MHz prescaled by 4
        /* Clock DIV4 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));
     95e:	88 ed       	ldi	r24, 0xD8	; 216
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	84 bf       	out	0x34, r24	; 52
     964:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f6634>
init_ADC0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:997
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      ADC0.CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  3000000    //  4 MHz /  4 = 1.0 MHz,   5 MHz /  4 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
     968:	81 e5       	ldi	r24, 0x51	; 81
     96a:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f6bd5>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:1004
      ADC0.CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #endif
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      ADC0.SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000 )
      ADC0.SAMPCTRL = 13;   // 15 ADC clock,s 12 us
     96e:	8d e0       	ldi	r24, 0x0D	; 13
     970:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <vtable for UartClass+0x7f6bd8>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:1008
    #else
      ADC0.SAMPCTRL = (10); // 12 ADC clocks, 12 us
    #endif
    ADC0.CTRLD    = ADC_INITDLY_DLY16_gc;
     974:	00 e2       	ldi	r16, 0x20	; 32
     976:	00 93 03 06 	sts	0x0603, r16	; 0x800603 <vtable for UartClass+0x7f6bd6>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:1009
    ADC0.CTRLA    = ADC_ENABLE_bm;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <vtable for UartClass+0x7f6bd3>
init_TCA0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:1094

  /* PORTMUX setting for TCA - don't need to set because using default */
  //PORTMUX.CTRLA = PORTMUX_TCA00_DEFAULT_gc;

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     980:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <vtable for UartClass+0x7f6fd6>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:1099

  //Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     984:	1e ef       	ldi	r17, 0xFE	; 254
     986:	10 93 26 0a 	sts	0x0A26, r17	; 0x800a26 <vtable for UartClass+0x7f6ff9>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:1100
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     98a:	10 93 27 0a 	sts	0x0A27, r17	; 0x800a27 <vtable for UartClass+0x7f6ffa>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:1120
  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 1000000) // and use 16...
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
     98e:	89 e0       	ldi	r24, 0x09	; 9
     990:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <vtable for UartClass+0x7f6fd3>
init_millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:795
{
  #if defined(MILLIS_USE_TIMERNONE)
    badCall("init_millis() is only valid with millis time keeping enabled.");
  #else
    #if defined(MILLIS_USE_TIMERA0)
      TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
     994:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <vtable for UartClass+0x7f6fdd>
     998:	82 60       	ori	r24, 0x02	; 2
     99a:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <vtable for UartClass+0x7f6fdd>
init():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:873
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
     99e:	78 94       	sei
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:36
int prevCounter = 0;



void setup() {
  Serial.begin(115200);
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	52 ec       	ldi	r21, 0xC2	; 194
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	8f e4       	ldi	r24, 0x4F	; 79
     9aa:	9c e3       	ldi	r25, 0x3C	; 60
     9ac:	5e dd       	rcall	.-1348   	; 0x46a <UartClass::begin(unsigned long)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:43
    // trying to connect to serial...
  }

  //--- Buttons initialization ---//
  //  PORTC.PIN2CTRL = 0b00001001;
  pinMode(14, INPUT_PULLUP);
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	8e e0       	ldi	r24, 0x0E	; 14
     9b2:	02 de       	rcall	.-1020   	; 0x5b8 <pinMode>
setupDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:231



void setupDisplay() {
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
     9b4:	00 93 41 04 	sts	0x0441, r16	; 0x800441 <vtable for UartClass+0x7f6a14>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:232
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off
     9b8:	00 93 46 04 	sts	0x0446, r16	; 0x800446 <vtable for UartClass+0x7f6a19>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:235

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
     9bc:	10 93 01 04 	sts	0x0401, r17	; 0x800401 <vtable for UartClass+0x7f69d4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:237
  //  Anode Pins for LEDS
  PORTB.DIRSET = 0b11110000;
     9c0:	80 ef       	ldi	r24, 0xF0	; 240
     9c2:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <vtable for UartClass+0x7f69f4>
turnOffDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:285
    startMicros = currentMicros;
  }
}

void turnOffDisplay() {
  PORTC.OUTCLR = PIN5_bm; // toggle PC5 OFF
     9c6:	00 93 46 04 	sts	0x0446, r16	; 0x800446 <vtable for UartClass+0x7f6a19>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:288

  // ---- Clear all leds of a segment ---- //
  PORTA.OUTCLR = 0b11111110;
     9ca:	10 93 06 04 	sts	0x0406, r17	; 0x800406 <vtable for UartClass+0x7f69d9>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:290
  // ---- Deactivatec all segments by setting them HIGH (My segments are in common Anode config) ---- //
  PORTB.OUTSET = 0b11110000;
     9ce:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f69f8>
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:49

  //--- Display initialization ---//
  setupDisplay();
  turnOffDisplay();

  delay(1000);
     9d2:	68 ee       	ldi	r22, 0xE8	; 232
     9d4:	73 e0       	ldi	r23, 0x03	; 3
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	1d dd       	rcall	.-1478   	; 0x416 <delay>
millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:180
  //return timer_overflow_count; //for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  uint8_t oldSREG = SREG;
     9dc:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:181
  cli();
     9de:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:212
     * like it was all one (5 clocks 5 words). It now contain m >> 7, add to m (4 & 4).
     * Repeat the leftshift twice more (17 clocks 9 words) giving m >> 5, subtract (4 & 4)  and you're done.
     * This not only is more efficient in and of itself, but it  ALSO saves you 4 words and 6 clocks in the prologue and epilogue
     * because you don't need to save and restore r16 and r17 because you don't piss away 4 registers. */
  #else
    m = timer_millis;
     9e0:	80 91 2e 3c 	lds	r24, 0x3C2E	; 0x803c2e <timer_millis>
     9e4:	90 91 2f 3c 	lds	r25, 0x3C2F	; 0x803c2f <timer_millis+0x1>
     9e8:	a0 91 30 3c 	lds	r26, 0x3C30	; 0x803c30 <timer_millis+0x2>
     9ec:	b0 91 31 3c 	lds	r27, 0x3C31	; 0x803c31 <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:213
    SREG = oldSREG;
     9f0:	2f bf       	out	0x3f, r18	; 63
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:51

  btnWatchTimerStart = millis();
     9f2:	80 93 3e 3c 	sts	0x3C3E, r24	; 0x803c3e <btnWatchTimerStart>
     9f6:	90 93 3f 3c 	sts	0x3C3F, r25	; 0x803c3f <btnWatchTimerStart+0x1>
     9fa:	a0 93 40 3c 	sts	0x3C40, r26	; 0x803c40 <btnWatchTimerStart+0x2>
     9fe:	b0 93 41 3c 	sts	0x3C41, r27	; 0x803c41 <btnWatchTimerStart+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:52
  startMicros = micros();
     a02:	da dc       	rcall	.-1612   	; 0x3b8 <micros>
     a04:	60 93 26 3c 	sts	0x3C26, r22	; 0x803c26 <startMicros>
     a08:	70 93 27 3c 	sts	0x3C27, r23	; 0x803c27 <startMicros+0x1>
     a0c:	80 93 28 3c 	sts	0x3C28, r24	; 0x803c28 <startMicros+0x2>
     a10:	90 93 29 3c 	sts	0x3C29, r25	; 0x803c29 <startMicros+0x3>
millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:180
  //return timer_overflow_count; //for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  uint8_t oldSREG = SREG;
     a14:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:181
  cli();
     a16:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:212
     * like it was all one (5 clocks 5 words). It now contain m >> 7, add to m (4 & 4).
     * Repeat the leftshift twice more (17 clocks 9 words) giving m >> 5, subtract (4 & 4)  and you're done.
     * This not only is more efficient in and of itself, but it  ALSO saves you 4 words and 6 clocks in the prologue and epilogue
     * because you don't need to save and restore r16 and r17 because you don't piss away 4 registers. */
  #else
    m = timer_millis;
     a18:	80 91 2e 3c 	lds	r24, 0x3C2E	; 0x803c2e <timer_millis>
     a1c:	90 91 2f 3c 	lds	r25, 0x3C2F	; 0x803c2f <timer_millis+0x1>
     a20:	a0 91 30 3c 	lds	r26, 0x3C30	; 0x803c30 <timer_millis+0x2>
     a24:	b0 91 31 3c 	lds	r27, 0x3C31	; 0x803c31 <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:213
    SREG = oldSREG;
     a28:	2f bf       	out	0x3f, r18	; 63
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:53
  startCountMillis = millis();
     a2a:	80 93 32 3c 	sts	0x3C32, r24	; 0x803c32 <startCountMillis>
     a2e:	90 93 33 3c 	sts	0x3C33, r25	; 0x803c33 <startCountMillis+0x1>
     a32:	a0 93 34 3c 	sts	0x3C34, r26	; 0x803c34 <startCountMillis+0x2>
     a36:	b0 93 35 3c 	sts	0x3C35, r27	; 0x803c35 <startCountMillis+0x3>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:69

  /* ----  1. Check rtc clock. ---- */
  if (!printHeader) {
    Serial.println("CHECKING RTC's CONDITION:");
    Serial.println("--------------------------");
    printHeader = true;
     a3a:	22 24       	eor	r2, r2
     a3c:	23 94       	inc	r2
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     a3e:	8a e0       	ldi	r24, 0x0A	; 10
     a40:	38 2e       	mov	r3, r24
stringTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
     a42:	93 eb       	ldi	r25, 0xB3	; 179
     a44:	49 2e       	mov	r4, r25
     a46:	9a e9       	ldi	r25, 0x9A	; 154
     a48:	59 2e       	mov	r5, r25
     a4a:	20 e1       	ldi	r18, 0x10	; 16
     a4c:	62 2e       	mov	r6, r18
     a4e:	2c e3       	ldi	r18, 0x3C	; 60
     a50:	72 2e       	mov	r7, r18
stringDate():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
     a52:	39 e1       	ldi	r19, 0x19	; 25
     a54:	e3 2e       	mov	r14, r19
     a56:	3c e3       	ldi	r19, 0x3C	; 60
     a58:	f3 2e       	mov	r15, r19
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:152
      SW_OneState = digitalRead(14);

      Serial.print("SW_STATE:");
      Serial.print(SW_OneState);
      Serial.print(" [");
      Serial.print(10 - btnWatcherFlag);
     a5a:	4a e0       	ldi	r20, 0x0A	; 10
     a5c:	c4 2e       	mov	r12, r20
     a5e:	d1 2c       	mov	r13, r1
     a60:	54 e0       	ldi	r21, 0x04	; 4
     a62:	a5 2e       	mov	r10, r21
     a64:	5c e3       	ldi	r21, 0x3C	; 60
     a66:	b5 2e       	mov	r11, r21
showOnDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:270
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
     a68:	61 e1       	ldi	r22, 0x11	; 17
     a6a:	86 2e       	mov	r8, r22
     a6c:	91 2c       	mov	r9, r1
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:66
bool displayChecked;

void loop() {

  /* ----  1. Check rtc clock. ---- */
  if (!printHeader) {
     a6e:	80 91 4c 3c 	lds	r24, 0x3C4C	; 0x803c4c <printHeader>
     a72:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:67
    Serial.println("CHECKING RTC's CONDITION:");
     a74:	0d c0       	rjmp	.+26     	; 0xa90 <main+0x140>
     a76:	8a e4       	ldi	r24, 0x4A	; 74
     a78:	9a e9       	ldi	r25, 0x9A	; 154
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:68
    Serial.println("--------------------------");
     a7a:	1f dd       	rcall	.-1474   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     a7c:	8a e3       	ldi	r24, 0x3A	; 58
     a7e:	9b e9       	ldi	r25, 0x9B	; 155
     a80:	1c dd       	rcall	.-1480   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:69
    printHeader = true;
     a82:	20 92 4c 3c 	sts	0x3C4C, r2	; 0x803c4c <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:70
    delay(3000);
     a86:	68 eb       	ldi	r22, 0xB8	; 184
     a88:	7b e0       	ldi	r23, 0x0B	; 11
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:73
  }

  if (!rtcAvailabilityChecked) {
     a8e:	c3 dc       	rcall	.-1658   	; 0x416 <delay>
     a90:	80 91 4b 3c 	lds	r24, 0x3C4B	; 0x803c4b <rtcAvailabilityChecked>
     a94:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:75

    while (!rtc.begin()) {
     a96:	20 c0       	rjmp	.+64     	; 0xad8 <main+0x188>
     a98:	c2 dd       	rcall	.-1148   	; 0x61e <RV8803Tiny::begin() [clone .constprop.3]>
     a9a:	81 11       	cpse	r24, r1
     a9c:	11 c0       	rjmp	.+34     	; 0xac0 <main+0x170>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:76
      if (checking_rtc_counter < 20) {
     a9e:	80 91 49 3c 	lds	r24, 0x3C49	; 0x803c49 <checking_rtc_counter>
     aa2:	90 91 4a 3c 	lds	r25, 0x3C4A	; 0x803c4a <checking_rtc_counter+0x1>
     aa6:	84 31       	cpi	r24, 0x14	; 20
     aa8:	91 05       	cpc	r25, r1
     aaa:	34 f4       	brge	.+12     	; 0xab8 <main+0x168>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:77
        checking_rtc_counter += 1;
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	80 93 49 3c 	sts	0x3C49, r24	; 0x803c49 <checking_rtc_counter>
     ab2:	90 93 4a 3c 	sts	0x3C4A, r25	; 0x803c4a <checking_rtc_counter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:79
      } else {
        checking_rtc_counter = 0;
     ab6:	f0 cf       	rjmp	.-32     	; 0xa98 <main+0x148>
     ab8:	10 92 49 3c 	sts	0x3C49, r1	; 0x803c49 <checking_rtc_counter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:83
        break;
      }
    }
    if (!rtc.begin()) {
     abc:	10 92 4a 3c 	sts	0x3C4A, r1	; 0x803c4a <checking_rtc_counter+0x1>
     ac0:	ae dd       	rcall	.-1188   	; 0x61e <RV8803Tiny::begin() [clone .constprop.3]>
     ac2:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:84
      rtcAvailable = false;
     ac4:	2f c2       	rjmp	.+1118   	; 0xf24 <main+0x5d4>
     ac6:	10 92 48 3c 	sts	0x3C48, r1	; 0x803c48 <rtcAvailable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:85
      Serial.println("RTC_ADDR_FOUND:0");
     aca:	84 e6       	ldi	r24, 0x64	; 100
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:89
      //    Serial.println(); rtc addr
    } else {
      rtcAvailable = true;
      Serial.println("RTC_ADDR_FOUND:1");
     acc:	9a e9       	ldi	r25, 0x9A	; 154
     ace:	f5 dc       	rcall	.-1558   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:92
    }

    rtcAvailabilityChecked = true;
     ad0:	20 92 4b 3c 	sts	0x3C4B, r2	; 0x803c4b <rtcAvailabilityChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:98
    printHeader = false;
  }


  /* ---- 2. Check curr. factory default time ---- */
  if (!printHeader) {
     ad4:	10 92 4c 3c 	sts	0x3C4C, r1	; 0x803c4c <printHeader>
     ad8:	80 91 4c 3c 	lds	r24, 0x3C4C	; 0x803c4c <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:99
    Serial.println("\nCHECKING RTC's AVAILABILITY:");
     adc:	81 11       	cpse	r24, r1
     ade:	0d c0       	rjmp	.+26     	; 0xafa <main+0x1aa>
     ae0:	86 e8       	ldi	r24, 0x86	; 134
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:100
    Serial.println("----------------------------");
     ae2:	9a e9       	ldi	r25, 0x9A	; 154
     ae4:	ea dc       	rcall	.-1580   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     ae6:	88 e3       	ldi	r24, 0x38	; 56
     ae8:	9b e9       	ldi	r25, 0x9B	; 155
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:101
    printHeader = true;
     aea:	e7 dc       	rcall	.-1586   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     aec:	20 92 4c 3c 	sts	0x3C4C, r2	; 0x803c4c <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:102
    delay(3000);
     af0:	68 eb       	ldi	r22, 0xB8	; 184
     af2:	7b e0       	ldi	r23, 0x0B	; 11
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	8e dc       	rcall	.-1764   	; 0x416 <delay>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:105
  }

  if (rtcAvailabilityChecked && !rtcReadabilityChecked) {
     afa:	80 91 4b 3c 	lds	r24, 0x3C4B	; 0x803c4b <rtcAvailabilityChecked>
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <main+0x1b4>
     b02:	db c0       	rjmp	.+438    	; 0xcba <main+0x36a>
     b04:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <rtcReadabilityChecked>
     b08:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:107

    if (rtcAvailable) {
     b0a:	d7 c0       	rjmp	.+430    	; 0xcba <main+0x36a>
     b0c:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <rtcAvailable>
     b10:	88 23       	and	r24, r24
     b12:	09 f4       	brne	.+2      	; 0xb16 <main+0x1c6>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:81
    }
}

bool RV8803Tiny::updateTime()
{
    if (!readMultipleRegisters(RV8803_HUNDREDTHS, _time, TIME_ARRAY_LENGTH))
     b14:	ce c0       	rjmp	.+412    	; 0xcb2 <main+0x362>
updateTime():
     b16:	80 ef       	ldi	r24, 0xF0	; 240
     b18:	9c e3       	ldi	r25, 0x3C	; 60
     b1a:	f8 da       	rcall	.-2576   	; 0x10c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]>
     b1c:	88 23       	and	r24, r24
     b1e:	09 f4       	brne	.+2      	; 0xb22 <main+0x1d2>
     b20:	06 c2       	rjmp	.+1036   	; 0xf2e <main+0x5de>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    // If seconds are at 59, read again to make sure we didn't accidentally skip a minute
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
     b22:	80 91 f1 3c 	lds	r24, 0x3CF1	; 0x803cf1 <rtc+0x7>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     b26:	98 2f       	mov	r25, r24
     b28:	92 95       	swap	r25
     b2a:	9f 70       	andi	r25, 0x0F	; 15
     b2c:	8f 70       	andi	r24, 0x0F	; 15
     b2e:	93 9d       	mul	r25, r3
     b30:	80 0d       	add	r24, r0
     b32:	11 24       	eor	r1, r1
updateTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    // If seconds are at 59, read again to make sure we didn't accidentally skip a minute
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
     b34:	8b 33       	cpi	r24, 0x3B	; 59
     b36:	c9 f4       	brne	.+50     	; 0xb6a <main+0x21a>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for seconds changed, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(tempTime[TIME_SECONDS]) == 0)
     b38:	8a 81       	ldd	r24, Y+2	; 0x02
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     b3a:	98 2f       	mov	r25, r24
     b3c:	92 95       	swap	r25
     b3e:	9f 70       	andi	r25, 0x0F	; 15
     b40:	8f 70       	andi	r24, 0x0F	; 15
     b42:	93 9d       	mul	r25, r3
     b44:	80 0d       	add	r24, r0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    if (BCDtoDEC(_time[TIME_SECONDS]) == 59)
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        // If the reading for seconds changed, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(tempTime[TIME_SECONDS]) == 0)
     b46:	11 24       	eor	r1, r1
updateTime():
     b48:	81 11       	cpse	r24, r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:95
        {
            memcpy(_time, tempTime, TIME_ARRAY_LENGTH);
     b4a:	09 c0       	rjmp	.+18     	; 0xb5e <main+0x20e>
     b4c:	88 e0       	ldi	r24, 0x08	; 8
     b4e:	fe 01       	movw	r30, r28
     b50:	31 96       	adiw	r30, 0x01	; 1
     b52:	a0 ef       	ldi	r26, 0xF0	; 240
     b54:	bc e3       	ldi	r27, 0x3C	; 60
     b56:	01 90       	ld	r0, Z+
     b58:	0d 92       	st	X+, r0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:97
        }
        if (!readMultipleRegisters(RV8803_HUNDREDTHS, tempTime, TIME_ARRAY_LENGTH))
     b5a:	8a 95       	dec	r24
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <main+0x206>
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	d4 da       	rcall	.-2648   	; 0x10c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.7]>
     b64:	88 23       	and	r24, r24
     b66:	09 f4       	brne	.+2      	; 0xb6a <main+0x21a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:110
      if (rtc.updateTime()) {
        rtcReadable = true;
        Serial.println("RTC_READABLE:1");
     b68:	e2 c1       	rjmp	.+964    	; 0xf2e <main+0x5de>
loop():
     b6a:	84 ea       	ldi	r24, 0xA4	; 164
     b6c:	9a e9       	ldi	r25, 0x9A	; 154
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:112

        delay(100);
     b6e:	a5 dc       	rcall	.-1718   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     b70:	64 e6       	ldi	r22, 0x64	; 100
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:134
    return BCDtoDEC(_time[TIME_MINUTES]);
}

uint8_t RV8803Tiny::getHours()
{
    return BCDtoDEC(_time[TIME_HOURS]);
     b78:	4e dc       	rcall	.-1892   	; 0x416 <delay>
getHours():
     b7a:	80 91 f3 3c 	lds	r24, 0x3CF3	; 0x803cf3 <rtc+0x9>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     b7e:	98 2f       	mov	r25, r24
     b80:	92 95       	swap	r25
     b82:	9f 70       	andi	r25, 0x0F	; 15
     b84:	8f 70       	andi	r24, 0x0F	; 15
     b86:	93 9d       	mul	r25, r3
     b88:	80 0d       	add	r24, r0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     b8a:	11 24       	eor	r1, r1
nthdig():
     b8c:	63 2d       	mov	r22, r3
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     b8e:	e7 d4       	rcall	.+2510   	; 0x155e <__udivmodqi4>
     b90:	29 2f       	mov	r18, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:168
}

RV8803Tiny::updateTimeArray(void)
{
    currTimeArray[0] = nthdig(1, getHours());
     b92:	e5 d4       	rcall	.+2506   	; 0x155e <__udivmodqi4>
updateTimeArray():
     b94:	90 93 ea 3c 	sts	0x3CEA, r25	; 0x803cea <rtc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:169
    currTimeArray[1] = nthdig(0, getHours());
     b98:	20 93 eb 3c 	sts	0x3CEB, r18	; 0x803ceb <rtc+0x1>
getMinutes():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:129
    return BCDtoDEC(_time[TIME_SECONDS]);
}

uint8_t RV8803Tiny::getMinutes()
{
    return BCDtoDEC(_time[TIME_MINUTES]);
     b9c:	80 91 f2 3c 	lds	r24, 0x3CF2	; 0x803cf2 <rtc+0x8>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     ba0:	98 2f       	mov	r25, r24
     ba2:	92 95       	swap	r25
     ba4:	9f 70       	andi	r25, 0x0F	; 15
     ba6:	8f 70       	andi	r24, 0x0F	; 15
     ba8:	93 9d       	mul	r25, r3
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     baa:	80 0d       	add	r24, r0
     bac:	11 24       	eor	r1, r1
nthdig():
     bae:	d7 d4       	rcall	.+2478   	; 0x155e <__udivmodqi4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     bb0:	29 2f       	mov	r18, r25
     bb2:	d5 d4       	rcall	.+2474   	; 0x155e <__udivmodqi4>
updateTimeArray():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:170

RV8803Tiny::updateTimeArray(void)
{
    currTimeArray[0] = nthdig(1, getHours());
    currTimeArray[1] = nthdig(0, getHours());
    currTimeArray[2] = nthdig(1, getMinutes());
     bb4:	90 93 ec 3c 	sts	0x3CEC, r25	; 0x803cec <rtc+0x2>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:171
    currTimeArray[3] = nthdig(0, getMinutes());
     bb8:	20 93 ed 3c 	sts	0x3CED, r18	; 0x803ced <rtc+0x3>
getSeconds():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:124
    return (date);
}

uint8_t RV8803Tiny::getSeconds()
{
    return BCDtoDEC(_time[TIME_SECONDS]);
     bbc:	80 91 f1 3c 	lds	r24, 0x3CF1	; 0x803cf1 <rtc+0x7>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     bc0:	98 2f       	mov	r25, r24
     bc2:	92 95       	swap	r25
     bc4:	9f 70       	andi	r25, 0x0F	; 15
     bc6:	8f 70       	andi	r24, 0x0F	; 15
     bc8:	93 9d       	mul	r25, r3
     bca:	80 0d       	add	r24, r0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:162
}

uint8_t RV8803Tiny::nthdig(int n, uint8_t k)
{
    while (n--)
        k /= 10;
     bcc:	11 24       	eor	r1, r1
nthdig():
     bce:	c7 d4       	rcall	.+2446   	; 0x155e <__udivmodqi4>
     bd0:	29 2f       	mov	r18, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:163
    return k % 10;
     bd2:	c5 d4       	rcall	.+2442   	; 0x155e <__udivmodqi4>
updateTimeArray():
     bd4:	90 93 ee 3c 	sts	0x3CEE, r25	; 0x803cee <rtc+0x4>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:172
{
    currTimeArray[0] = nthdig(1, getHours());
    currTimeArray[1] = nthdig(0, getHours());
    currTimeArray[2] = nthdig(1, getMinutes());
    currTimeArray[3] = nthdig(0, getMinutes());
    currTimeArray[4] = nthdig(1, getSeconds());
     bd8:	20 93 ef 3c 	sts	0x3CEF, r18	; 0x803cef <rtc+0x5>
loop():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:173
    currTimeArray[5] = nthdig(0, getSeconds());
     bdc:	64 e6       	ldi	r22, 0x64	; 100
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:116

        rtc.updateTimeArray();

        delay(100);
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	18 dc       	rcall	.-2000   	; 0x416 <delay>
stringTime():
     be6:	20 91 f1 3c 	lds	r18, 0x3CF1	; 0x803cf1 <rtc+0x7>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
     bea:	90 91 f2 3c 	lds	r25, 0x3CF2	; 0x803cf2 <rtc+0x8>
     bee:	80 91 f3 3c 	lds	r24, 0x3CF3	; 0x803cf3 <rtc+0x9>
BCDtoDEC():
     bf2:	32 2f       	mov	r19, r18
     bf4:	32 95       	swap	r19
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     bf6:	3f 70       	andi	r19, 0x0F	; 15
     bf8:	2f 70       	andi	r18, 0x0F	; 15
     bfa:	33 9d       	mul	r19, r3
     bfc:	20 0d       	add	r18, r0
     bfe:	11 24       	eor	r1, r1
stringTime():
     c00:	1f 92       	push	r1
     c02:	2f 93       	push	r18
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
     c04:	29 2f       	mov	r18, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     c06:	22 95       	swap	r18
     c08:	2f 70       	andi	r18, 0x0F	; 15
     c0a:	9f 70       	andi	r25, 0x0F	; 15
     c0c:	23 9d       	mul	r18, r3
     c0e:	90 0d       	add	r25, r0
     c10:	11 24       	eor	r1, r1
stringTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
     c12:	1f 92       	push	r1
     c14:	9f 93       	push	r25
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     c16:	98 2f       	mov	r25, r24
     c18:	92 95       	swap	r25
     c1a:	9f 70       	andi	r25, 0x0F	; 15
     c1c:	8f 70       	andi	r24, 0x0F	; 15
     c1e:	93 9d       	mul	r25, r3
     c20:	80 0d       	add	r24, r0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
     c22:	11 24       	eor	r1, r1
stringTime():
     c24:	1f 92       	push	r1
     c26:	8f 93       	push	r24
     c28:	5f 92       	push	r5
     c2a:	4f 92       	push	r4
     c2c:	7f 92       	push	r7
     c2e:	6f 92       	push	r6
     c30:	b5 d6       	rcall	.+3434   	; 0x199c <sprintf>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:119

        // Send string date & time
        Serial.println(String(rtc.stringTime()));
     c32:	60 e1       	ldi	r22, 0x10	; 16
     c34:	7c e3       	ldi	r23, 0x3C	; 60
     c36:	ce 01       	movw	r24, r28
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	6e dd       	rcall	.-1316   	; 0x718 <String::String(char const*)>
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	29 dc       	rcall	.-1966   	; 0x494 <Print::println(String const&) [clone .constprop.20]>
__base_dtor ():
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:114
  char buf[33];
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String() {
  free(buffer);
     c46:	5b d5       	rcall	.+2742   	; 0x16fe <free>
stringDate():
     c48:	20 91 f7 3c 	lds	r18, 0x3CF7	; 0x803cf7 <rtc+0xd>
     c4c:	90 91 f6 3c 	lds	r25, 0x3CF6	; 0x803cf6 <rtc+0xc>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
     c50:	80 91 f5 3c 	lds	r24, 0x3CF5	; 0x803cf5 <rtc+0xb>
BCDtoDEC():
     c54:	32 2f       	mov	r19, r18
     c56:	32 95       	swap	r19
     c58:	3f 70       	andi	r19, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     c5a:	2f 70       	andi	r18, 0x0F	; 15
     c5c:	33 9d       	mul	r19, r3
     c5e:	20 0d       	add	r18, r0
     c60:	11 24       	eor	r1, r1
stringDate():
     c62:	1f 92       	push	r1
     c64:	2f 93       	push	r18
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
     c66:	29 2f       	mov	r18, r25
     c68:	22 95       	swap	r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     c6a:	2f 70       	andi	r18, 0x0F	; 15
     c6c:	9f 70       	andi	r25, 0x0F	; 15
     c6e:	23 9d       	mul	r18, r3
     c70:	90 0d       	add	r25, r0
     c72:	11 24       	eor	r1, r1
stringDate():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
     c74:	1f 92       	push	r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:264
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
     c76:	9f 93       	push	r25
BCDtoDEC():
     c78:	98 2f       	mov	r25, r24
     c7a:	92 95       	swap	r25
     c7c:	9f 70       	andi	r25, 0x0F	; 15
     c7e:	8f 70       	andi	r24, 0x0F	; 15
     c80:	93 9d       	mul	r25, r3
     c82:	80 0d       	add	r24, r0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
     c84:	11 24       	eor	r1, r1
stringDate():
     c86:	1f 92       	push	r1
     c88:	8f 93       	push	r24
     c8a:	02 ec       	ldi	r16, 0xC2	; 194
     c8c:	1a e9       	ldi	r17, 0x9A	; 154
     c8e:	1f 93       	push	r17
     c90:	0f 93       	push	r16
     c92:	ff 92       	push	r15
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:120
        Serial.println(String(rtc.stringDate()));
     c94:	ef 92       	push	r14
     c96:	82 d6       	rcall	.+3332   	; 0x199c <sprintf>
loop():
     c98:	69 e1       	ldi	r22, 0x19	; 25
     c9a:	7c e3       	ldi	r23, 0x3C	; 60
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	3b dd       	rcall	.-1418   	; 0x718 <String::String(char const*)>
     ca2:	ce 01       	movw	r24, r28
     ca4:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/api/String.cpp:114
     ca6:	f6 db       	rcall	.-2068   	; 0x494 <Print::println(String const&) [clone .constprop.20]>
__base_dtor ():
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	28 d5       	rcall	.+2640   	; 0x16fe <free>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:120
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	de bf       	out	0x3e, r29	; 62
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:127
        rtcReadable = false;
        Serial.println("RTC_READABLE:0");
      }
    }

    rtcReadabilityChecked = true;
     cb2:	20 92 47 3c 	sts	0x3C47, r2	; 0x803c47 <rtcReadabilityChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:128
    printHeader = false;
     cb6:	10 92 4c 3c 	sts	0x3C4C, r1	; 0x803c4c <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:133
  }


  /* ---- 3. check button for two presses ---- */
  if (!printHeader) {
     cba:	80 91 4c 3c 	lds	r24, 0x3C4C	; 0x803c4c <printHeader>
     cbe:	81 11       	cpse	r24, r1
     cc0:	0d c0       	rjmp	.+26     	; 0xcdc <main+0x38c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:134
    Serial.println("\nCHECKING BUTTON's CONDITION:");
     cc2:	82 ee       	ldi	r24, 0xE2	; 226
     cc4:	9a e9       	ldi	r25, 0x9A	; 154
     cc6:	f9 db       	rcall	.-2062   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     cc8:	88 e3       	ldi	r24, 0x38	; 56
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:135
    Serial.println("----------------------------");
     cca:	9b e9       	ldi	r25, 0x9B	; 155
     ccc:	f6 db       	rcall	.-2068   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     cce:	20 92 4c 3c 	sts	0x3C4C, r2	; 0x803c4c <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:136
    printHeader = true;
     cd2:	68 eb       	ldi	r22, 0xB8	; 184
     cd4:	7b e0       	ldi	r23, 0x0B	; 11
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:137
    delay(3000);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	9d db       	rcall	.-2246   	; 0x416 <delay>
     cdc:	80 91 47 3c 	lds	r24, 0x3C47	; 0x803c47 <rtcReadabilityChecked>
     ce0:	88 23       	and	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:140
  }

  if (rtcReadabilityChecked && !btnConnChecked) {
     ce2:	09 f4       	brne	.+2      	; 0xce6 <main+0x396>
     ce4:	6d c0       	rjmp	.+218    	; 0xdc0 <main+0x470>
     ce6:	80 91 46 3c 	lds	r24, 0x3C46	; 0x803c46 <btnConnChecked>
     cea:	81 11       	cpse	r24, r1
     cec:	69 c0       	rjmp	.+210    	; 0xdc0 <main+0x470>
millis():
     cee:	2f b7       	in	r18, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	80 91 2e 3c 	lds	r24, 0x3C2E	; 0x803c2e <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:181
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  uint8_t oldSREG = SREG;
  cli();
     cf6:	90 91 2f 3c 	lds	r25, 0x3C2F	; 0x803c2f <timer_millis+0x1>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:212
     * like it was all one (5 clocks 5 words). It now contain m >> 7, add to m (4 & 4).
     * Repeat the leftshift twice more (17 clocks 9 words) giving m >> 5, subtract (4 & 4)  and you're done.
     * This not only is more efficient in and of itself, but it  ALSO saves you 4 words and 6 clocks in the prologue and epilogue
     * because you don't need to save and restore r16 and r17 because you don't piss away 4 registers. */
  #else
    m = timer_millis;
     cfa:	a0 91 30 3c 	lds	r26, 0x3C30	; 0x803c30 <timer_millis+0x2>
     cfe:	b0 91 31 3c 	lds	r27, 0x3C31	; 0x803c31 <timer_millis+0x3>
     d02:	2f bf       	out	0x3f, r18	; 63
loop():
     d04:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <btnWatchTimerCurr>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:213
    SREG = oldSREG;
     d08:	90 93 43 3c 	sts	0x3C43, r25	; 0x803c43 <btnWatchTimerCurr+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:142

    btnWatchTimerCurr = millis();
     d0c:	a0 93 44 3c 	sts	0x3C44, r26	; 0x803c44 <btnWatchTimerCurr+0x2>
     d10:	b0 93 45 3c 	sts	0x3C45, r27	; 0x803c45 <btnWatchTimerCurr+0x3>
     d14:	40 91 3e 3c 	lds	r20, 0x3C3E	; 0x803c3e <btnWatchTimerStart>
     d18:	50 91 3f 3c 	lds	r21, 0x3C3F	; 0x803c3f <btnWatchTimerStart+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:144

    if ( btnWatchTimerCurr - btnWatchTimerStart >= 1000) {
     d1c:	60 91 40 3c 	lds	r22, 0x3C40	; 0x803c40 <btnWatchTimerStart+0x2>
     d20:	70 91 41 3c 	lds	r23, 0x3C41	; 0x803c41 <btnWatchTimerStart+0x3>
     d24:	84 1b       	sub	r24, r20
     d26:	95 0b       	sbc	r25, r21
     d28:	a6 0b       	sbc	r26, r22
     d2a:	b7 0b       	sbc	r27, r23
     d2c:	88 3e       	cpi	r24, 0xE8	; 232
     d2e:	93 40       	sbci	r25, 0x03	; 3
     d30:	a1 05       	cpc	r26, r1
     d32:	b1 05       	cpc	r27, r1
     d34:	08 f4       	brcc	.+2      	; 0xd38 <main+0x3e8>
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <main+0x470>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:146

      btnWatcherFlag++;
     d38:	80 91 3c 3c 	lds	r24, 0x3C3C	; 0x803c3c <btnWatcherFlag>
     d3c:	90 91 3d 3c 	lds	r25, 0x3C3D	; 0x803c3d <btnWatcherFlag+0x1>
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	80 93 3c 3c 	sts	0x3C3C, r24	; 0x803c3c <btnWatcherFlag>
     d46:	90 93 3d 3c 	sts	0x3C3D, r25	; 0x803c3d <btnWatcherFlag+0x1>
digitalRead():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring_digital.c:377

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask) {
     d4a:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <vtable for UartClass+0x7f6a1b>
     d4e:	82 fb       	bst	r24, 2
     d50:	88 27       	eor	r24, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:147
      SW_OneState = digitalRead(14);
     d52:	80 f9       	bld	r24, 0
loop():
     d54:	80 93 3b 3c 	sts	0x3C3B, r24	; 0x803c3b <SW_OneState>
write():
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	9b e9       	ldi	r25, 0x9B	; 155
     d5c:	8f db       	rcall	.-2274   	; 0x47c <Print::write(char const*) [clone .part.2] [clone .constprop.33]>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:150

      Serial.print("SW_STATE:");
      Serial.print(SW_OneState);
     d5e:	80 91 3b 3c 	lds	r24, 0x3C3B	; 0x803c3b <SW_OneState>
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	b6 db       	rcall	.-2196   	; 0x4d2 <Print::print(int, int) [clone .constprop.25]>
write():
     d66:	8a e0       	ldi	r24, 0x0A	; 10
     d68:	9b e9       	ldi	r25, 0x9B	; 155
     d6a:	88 db       	rcall	.-2288   	; 0x47c <Print::write(char const*) [clone .part.2] [clone .constprop.33]>
loop():
     d6c:	80 91 3c 3c 	lds	r24, 0x3C3C	; 0x803c3c <btnWatcherFlag>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:152
      Serial.print(" [");
      Serial.print(10 - btnWatcherFlag);
     d70:	90 91 3d 3c 	lds	r25, 0x3C3D	; 0x803c3d <btnWatcherFlag+0x1>
     d74:	96 01       	movw	r18, r12
     d76:	28 1b       	sub	r18, r24
     d78:	39 0b       	sbc	r19, r25
     d7a:	c9 01       	movw	r24, r18
     d7c:	aa db       	rcall	.-2220   	; 0x4d2 <Print::print(int, int) [clone .constprop.25]>
     d7e:	8d e0       	ldi	r24, 0x0D	; 13
     d80:	9b e9       	ldi	r25, 0x9B	; 155
     d82:	9b db       	rcall	.-2250   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:153
      Serial.println(" sec left]");
     d84:	80 91 3c 3c 	lds	r24, 0x3C3C	; 0x803c3c <btnWatcherFlag>
     d88:	90 91 3d 3c 	lds	r25, 0x3C3D	; 0x803c3d <btnWatcherFlag+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:155

      if (btnWatcherFlag >= watchBtnFor) {
     d8c:	0a 97       	sbiw	r24, 0x0a	; 10
     d8e:	44 f0       	brlt	.+16     	; 0xda0 <main+0x450>
     d90:	20 92 46 3c 	sts	0x3C46, r2	; 0x803c46 <btnConnChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:156
        btnConnChecked = true;
     d94:	10 92 3c 3c 	sts	0x3C3C, r1	; 0x803c3c <btnWatcherFlag>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:157
        btnWatcherFlag = 0;
     d98:	10 92 3d 3c 	sts	0x3C3D, r1	; 0x803c3d <btnWatcherFlag+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:158
        printHeader = false;
     d9c:	10 92 4c 3c 	sts	0x3C4C, r1	; 0x803c4c <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:161
      }

      btnWatchTimerStart = btnWatchTimerCurr;
     da0:	80 91 42 3c 	lds	r24, 0x3C42	; 0x803c42 <btnWatchTimerCurr>
     da4:	90 91 43 3c 	lds	r25, 0x3C43	; 0x803c43 <btnWatchTimerCurr+0x1>
     da8:	a0 91 44 3c 	lds	r26, 0x3C44	; 0x803c44 <btnWatchTimerCurr+0x2>
     dac:	b0 91 45 3c 	lds	r27, 0x3C45	; 0x803c45 <btnWatchTimerCurr+0x3>
     db0:	80 93 3e 3c 	sts	0x3C3E, r24	; 0x803c3e <btnWatchTimerStart>
     db4:	90 93 3f 3c 	sts	0x3C3F, r25	; 0x803c3f <btnWatchTimerStart+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:167
    }
  }


  /* ---- 4. check display routine ---- */
  if (!printHeader) {
     db8:	a0 93 40 3c 	sts	0x3C40, r26	; 0x803c40 <btnWatchTimerStart+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:168
    Serial.println("\nCHECKING DISPLAY's CONDITION:");
     dbc:	b0 93 41 3c 	sts	0x3C41, r27	; 0x803c41 <btnWatchTimerStart+0x3>
     dc0:	80 91 4c 3c 	lds	r24, 0x3C4C	; 0x803c4c <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:169
    Serial.println("-----------------------------");
     dc4:	81 11       	cpse	r24, r1
     dc6:	33 c0       	rjmp	.+102    	; 0xe2e <main+0x4de>
     dc8:	88 e1       	ldi	r24, 0x18	; 24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:170
    delay(3000);
     dca:	9b e9       	ldi	r25, 0x9B	; 155
     dcc:	76 db       	rcall	.-2324   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     dce:	87 e3       	ldi	r24, 0x37	; 55
     dd0:	9b e9       	ldi	r25, 0x9B	; 155
     dd2:	73 db       	rcall	.-2330   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:171
    Serial.println("Watch if you see the below pattern \nin the segments\n(Starting in 10 sec):");
     dd4:	68 eb       	ldi	r22, 0xB8	; 184
     dd6:	7b e0       	ldi	r23, 0x0B	; 11
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:172
    Serial.println("0, 1");
     ddc:	1c db       	rcall	.-2504   	; 0x416 <delay>
     dde:	85 e5       	ldi	r24, 0x55	; 85
     de0:	9b e9       	ldi	r25, 0x9B	; 155
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:173
    Serial.println("2, 3");
     de2:	6b db       	rcall	.-2346   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     de4:	8f e9       	ldi	r24, 0x9F	; 159
     de6:	9b e9       	ldi	r25, 0x9B	; 155
     de8:	68 db       	rcall	.-2352   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:174
    Serial.println("delay(4000);");
     dea:	84 ea       	ldi	r24, 0xA4	; 164
     dec:	9b e9       	ldi	r25, 0x9B	; 155
     dee:	65 db       	rcall	.-2358   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     df0:	89 ea       	ldi	r24, 0xA9	; 169
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:175
    Serial.println("4, 5");
     df2:	9b e9       	ldi	r25, 0x9B	; 155
     df4:	62 db       	rcall	.-2364   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     df6:	86 eb       	ldi	r24, 0xB6	; 182
     df8:	9b e9       	ldi	r25, 0x9B	; 155
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:176
    Serial.println("6, 7");
     dfa:	5f db       	rcall	.-2370   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     dfc:	8b eb       	ldi	r24, 0xBB	; 187
     dfe:	9b e9       	ldi	r25, 0x9B	; 155
     e00:	5c db       	rcall	.-2376   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:177
    Serial.println("delay(4000);");
     e02:	89 ea       	ldi	r24, 0xA9	; 169
     e04:	9b e9       	ldi	r25, 0x9B	; 155
     e06:	59 db       	rcall	.-2382   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     e08:	80 ec       	ldi	r24, 0xC0	; 192
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:178
    Serial.println("8, 9");
     e0a:	9b e9       	ldi	r25, 0x9B	; 155
     e0c:	56 db       	rcall	.-2388   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     e0e:	85 ec       	ldi	r24, 0xC5	; 197
     e10:	9b e9       	ldi	r25, 0x9B	; 155
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:179
    Serial.println("0, 0");
     e12:	53 db       	rcall	.-2394   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     e14:	89 ea       	ldi	r24, 0xA9	; 169
     e16:	9b e9       	ldi	r25, 0x9B	; 155
     e18:	50 db       	rcall	.-2400   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:180
    Serial.println("delay(4000);");
     e1a:	8a ec       	ldi	r24, 0xCA	; 202
     e1c:	9b e9       	ldi	r25, 0x9B	; 155
     e1e:	4d db       	rcall	.-2406   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     e20:	20 92 4c 3c 	sts	0x3C4C, r2	; 0x803c4c <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:181
    Serial.println("Finally display will Turn OFF");
     e24:	60 e1       	ldi	r22, 0x10	; 16
     e26:	77 e2       	ldi	r23, 0x27	; 39
     e28:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:182
    printHeader = true;
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	f4 da       	rcall	.-2584   	; 0x416 <delay>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:183
    delay(10000);
     e2e:	80 91 46 3c 	lds	r24, 0x3C46	; 0x803c46 <btnConnChecked>
     e32:	88 23       	and	r24, r24
     e34:	09 f4       	brne	.+2      	; 0xe38 <main+0x4e8>
     e36:	1b ce       	rjmp	.-970    	; 0xa6e <main+0x11e>
     e38:	80 91 3a 3c 	lds	r24, 0x3C3A	; 0x803c3a <displayChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:187
    //    Serial.println(displayCycleCounter);
  }

  if (btnConnChecked && !displayChecked) {
     e3c:	81 11       	cpse	r24, r1
     e3e:	17 ce       	rjmp	.-978    	; 0xa6e <main+0x11e>
showOnDisplay():
     e40:	bb da       	rcall	.-2698   	; 0x3b8 <micros>
     e42:	60 93 2a 3c 	sts	0x3C2A, r22	; 0x803c2a <currentMicros>
     e46:	70 93 2b 3c 	sts	0x3C2B, r23	; 0x803c2b <currentMicros+0x1>
     e4a:	80 93 2c 3c 	sts	0x3C2C, r24	; 0x803c2c <currentMicros+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:259
};

int c = 0;

void showOnDisplay(uint8_t * digits) {
  currentMicros = micros();
     e4e:	90 93 2d 3c 	sts	0x3C2D, r25	; 0x803c2d <currentMicros+0x3>
     e52:	20 91 26 3c 	lds	r18, 0x3C26	; 0x803c26 <startMicros>
     e56:	30 91 27 3c 	lds	r19, 0x3C27	; 0x803c27 <startMicros+0x1>
     e5a:	40 91 28 3c 	lds	r20, 0x3C28	; 0x803c28 <startMicros+0x2>
     e5e:	50 91 29 3c 	lds	r21, 0x3C29	; 0x803c29 <startMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:261

  if (currentMicros - startMicros >= period) {
     e62:	62 1b       	sub	r22, r18
     e64:	73 0b       	sbc	r23, r19
     e66:	84 0b       	sbc	r24, r20
     e68:	95 0b       	sbc	r25, r21
     e6a:	6a 30       	cpi	r22, 0x0A	; 10
     e6c:	71 05       	cpc	r23, r1
     e6e:	81 05       	cpc	r24, r1
     e70:	91 05       	cpc	r25, r1
     e72:	d0 f1       	brcs	.+116    	; 0xee8 <main+0x598>
     e74:	3e ef       	ldi	r19, 0xFE	; 254
     e76:	30 93 06 04 	sts	0x0406, r19	; 0x800406 <vtable for UartClass+0x7f69d9>
     e7a:	80 ef       	ldi	r24, 0xF0	; 240
     e7c:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f69f8>
     e80:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:264

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
     e82:	80 91 24 3c 	lds	r24, 0x3C24	; 0x803c24 <c>
     e86:	90 91 25 3c 	lds	r25, 0x3C25	; 0x803c25 <c+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:266
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
     e8a:	94 01       	movw	r18, r8
     e8c:	08 2e       	mov	r0, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:269

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
     e8e:	01 c0       	rjmp	.+2      	; 0xe92 <main+0x542>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:270
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
     e90:	22 0f       	add	r18, r18
     e92:	0a 94       	dec	r0
     e94:	ea f7       	brpl	.-6      	; 0xe90 <main+0x540>
     e96:	20 7f       	andi	r18, 0xF0	; 240
     e98:	20 93 27 04 	sts	0x0427, r18	; 0x800427 <vtable for UartClass+0x7f69fa>
     e9c:	80 50       	subi	r24, 0x00	; 0
     e9e:	94 4c       	sbci	r25, 0xC4	; 196
     ea0:	dc 01       	movw	r26, r24
     ea2:	ec 91       	ld	r30, X
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:271
    PORTB.OUTTGL = mask;                    // Toggle those bits
     ea6:	ee 5d       	subi	r30, 0xDE	; 222
     ea8:	f5 46       	sbci	r31, 0x65	; 101
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:273
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
     eaa:	80 81       	ld	r24, Z
     eac:	81 b9       	out	0x01, r24	; 1
     eae:	78 94       	sei
     eb0:	80 91 24 3c 	lds	r24, 0x3C24	; 0x803c24 <c>
     eb4:	90 91 25 3c 	lds	r25, 0x3C25	; 0x803c25 <c+0x1>
     eb8:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:274
    VPORTA.OUT = this_digit;
     eba:	84 30       	cpi	r24, 0x04	; 4
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:275
    sei(); // Interrupts back on
     ebc:	91 05       	cpc	r25, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:277

    c++;
     ebe:	dc f5       	brge	.+118    	; 0xf36 <main+0x5e6>
     ec0:	80 93 24 3c 	sts	0x3C24, r24	; 0x803c24 <c>
     ec4:	90 93 25 3c 	sts	0x3C25, r25	; 0x803c25 <c+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:278
    if (c > 3) c = 0;
     ec8:	80 91 2a 3c 	lds	r24, 0x3C2A	; 0x803c2a <currentMicros>
     ecc:	90 91 2b 3c 	lds	r25, 0x3C2B	; 0x803c2b <currentMicros+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:277
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
     ed0:	a0 91 2c 3c 	lds	r26, 0x3C2C	; 0x803c2c <currentMicros+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:280
    if (c > 3) c = 0;

    startMicros = currentMicros;
     ed4:	b0 91 2d 3c 	lds	r27, 0x3C2D	; 0x803c2d <currentMicros+0x3>
     ed8:	80 93 26 3c 	sts	0x3C26, r24	; 0x803c26 <startMicros>
     edc:	90 93 27 3c 	sts	0x3C27, r25	; 0x803c27 <startMicros+0x1>
     ee0:	a0 93 28 3c 	sts	0x3C28, r26	; 0x803c28 <startMicros+0x2>
     ee4:	b0 93 29 3c 	sts	0x3C29, r27	; 0x803c29 <startMicros+0x3>
loop():
     ee8:	80 91 38 3c 	lds	r24, 0x3C38	; 0x803c38 <displayCycleCounter>
     eec:	90 91 39 3c 	lds	r25, 0x3C39	; 0x803c39 <displayCycleCounter+0x1>
     ef0:	20 91 36 3c 	lds	r18, 0x3C36	; 0x803c36 <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:191

  if (btnConnChecked && !displayChecked) {

    showOnDisplay(digits_);

    if (displayCycleCounter != prevCounter) {
     ef4:	30 91 37 3c 	lds	r19, 0x3C37	; 0x803c37 <prevCounter+0x1>
     ef8:	82 17       	cp	r24, r18
     efa:	93 07       	cpc	r25, r19
     efc:	09 f4       	brne	.+2      	; 0xf00 <main+0x5b0>
     efe:	45 c0       	rjmp	.+138    	; 0xf8a <main+0x63a>
     f00:	9c 01       	movw	r18, r24
     f02:	22 50       	subi	r18, 0x02	; 2
     f04:	31 09       	sbc	r19, r1
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	31 05       	cpc	r19, r1
     f0a:	e0 f4       	brcc	.+56     	; 0xf44 <main+0x5f4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:195

      //      Serial.println(displayCycleCounter);

      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
     f0c:	e0 e0       	ldi	r30, 0x00	; 0
     f0e:	fc e3       	ldi	r31, 0x3C	; 60
     f10:	ae 16       	cp	r10, r30
     f12:	bf 06       	cpc	r11, r31
     f14:	91 f1       	breq	.+100    	; 0xf7a <main+0x62a>
     f16:	80 81       	ld	r24, Z
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:196
        for (int i = 0; i < sizeof(digits_); i++) {
     f18:	8c 5f       	subi	r24, 0xFC	; 252
     f1a:	8a 30       	cpi	r24, 0x0A	; 10
     f1c:	88 f4       	brcc	.+34     	; 0xf40 <main+0x5f0>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:197
          digits_[i] += 4;
     f1e:	80 83       	st	Z, r24
     f20:	31 96       	adiw	r30, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:198
          if (digits_[i] > 9) digits_[i] = 0;
     f22:	f6 cf       	rjmp	.-20     	; 0xf10 <main+0x5c0>
     f24:	20 92 48 3c 	sts	0x3C48, r2	; 0x803c48 <rtcAvailable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:197

      //      Serial.println(displayCycleCounter);

      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < sizeof(digits_); i++) {
          digits_[i] += 4;
     f28:	85 e7       	ldi	r24, 0x75	; 117
     f2a:	9a e9       	ldi	r25, 0x9A	; 154
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:88
    if (!rtc.begin()) {
      rtcAvailable = false;
      Serial.println("RTC_ADDR_FOUND:0");
      //    Serial.println(); rtc addr
    } else {
      rtcAvailable = true;
     f2c:	d0 cd       	rjmp	.-1120   	; 0xace <main+0x17e>
     f2e:	83 ed       	ldi	r24, 0xD3	; 211
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:89
      Serial.println("RTC_ADDR_FOUND:1");
     f30:	9a e9       	ldi	r25, 0x9A	; 154
     f32:	c3 da       	rcall	.-2682   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     f34:	be ce       	rjmp	.-644    	; 0xcb2 <main+0x362>
showOnDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:123
        // Send string date & time
        Serial.println(String(rtc.stringTime()));
        Serial.println(String(rtc.stringDate()));
      } else {
        rtcReadable = false;
        Serial.println("RTC_READABLE:0");
     f36:	10 92 24 3c 	sts	0x3C24, r1	; 0x803c24 <c>
     f3a:	10 92 25 3c 	sts	0x3C25, r1	; 0x803c25 <c+0x1>
     f3e:	c4 cf       	rjmp	.-120    	; 0xec8 <main+0x578>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:278
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    if (c > 3) c = 0;
     f40:	10 82       	st	Z, r1
     f42:	ee cf       	rjmp	.-36     	; 0xf20 <main+0x5d0>
     f44:	04 97       	sbiw	r24, 0x04	; 4
     f46:	cc f0       	brlt	.+50     	; 0xf7a <main+0x62a>
turnOffDisplay():
     f48:	b0 e2       	ldi	r27, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:198
      //      Serial.println(displayCycleCounter);

      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < sizeof(digits_); i++) {
          digits_[i] += 4;
          if (digits_[i] > 9) digits_[i] = 0;
     f4a:	b0 93 46 04 	sts	0x0446, r27	; 0x800446 <vtable for UartClass+0x7f6a19>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:202
        }
      }

      if (displayCycleCounter > 3) {
     f4e:	0e ef       	ldi	r16, 0xFE	; 254
     f50:	00 93 06 04 	sts	0x0406, r16	; 0x800406 <vtable for UartClass+0x7f69d9>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:285
    startMicros = currentMicros;
  }
}

void turnOffDisplay() {
  PORTC.OUTCLR = PIN5_bm; // toggle PC5 OFF
     f54:	10 ef       	ldi	r17, 0xF0	; 240
     f56:	10 93 25 04 	sts	0x0425, r17	; 0x800425 <vtable for UartClass+0x7f69f8>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:288

  // ---- Clear all leds of a segment ---- //
  PORTA.OUTCLR = 0b11111110;
     f5a:	10 92 38 3c 	sts	0x3C38, r1	; 0x803c38 <displayCycleCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:290
  // ---- Deactivatec all segments by setting them HIGH (My segments are in common Anode config) ---- //
  PORTB.OUTSET = 0b11110000;
     f5e:	10 92 39 3c 	sts	0x3C39, r1	; 0x803c39 <displayCycleCounter+0x1>
     f62:	10 92 36 3c 	sts	0x3C36, r1	; 0x803c36 <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:204
        }
      }

      if (displayCycleCounter > 3) {
        turnOffDisplay();
        displayCycleCounter = 0;
     f66:	10 92 37 3c 	sts	0x3C37, r1	; 0x803c37 <prevCounter+0x1>
     f6a:	20 92 3a 3c 	sts	0x3C3A, r2	; 0x803c3a <displayChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:205
        prevCounter = 0;
     f6e:	88 ee       	ldi	r24, 0xE8	; 232
     f70:	9b e9       	ldi	r25, 0x9B	; 155
     f72:	a3 da       	rcall	.-2746   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:206
        displayChecked = true;
     f74:	8d e0       	ldi	r24, 0x0D	; 13
     f76:	9c e9       	ldi	r25, 0x9C	; 156
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:208

        Serial.println("\nReport DISPLAY OKAY by pressing '1'");
     f78:	a0 da       	rcall	.-2752   	; 0x4ba <Print::println(char const*) [clone .constprop.30]>
     f7a:	80 91 38 3c 	lds	r24, 0x3C38	; 0x803c38 <displayCycleCounter>
     f7e:	90 91 39 3c 	lds	r25, 0x3C39	; 0x803c39 <displayCycleCounter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:209
        Serial.println("Report DISPLAY NOT OKAY by pressing '0'");
     f82:	80 93 36 3c 	sts	0x3C36, r24	; 0x803c36 <prevCounter>
     f86:	90 93 37 3c 	sts	0x3C37, r25	; 0x803c37 <prevCounter+0x1>
millis():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:212
      }

      prevCounter = displayCycleCounter;
     f8a:	8f b7       	in	r24, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	40 91 2e 3c 	lds	r20, 0x3C2E	; 0x803c2e <timer_millis>
     f92:	50 91 2f 3c 	lds	r21, 0x3C2F	; 0x803c2f <timer_millis+0x1>
     f96:	60 91 30 3c 	lds	r22, 0x3C30	; 0x803c30 <timer_millis+0x2>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:181
  unsigned long m;

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  uint8_t oldSREG = SREG;
  cli();
     f9a:	70 91 31 3c 	lds	r23, 0x3C31	; 0x803c31 <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:212
     * like it was all one (5 clocks 5 words). It now contain m >> 7, add to m (4 & 4).
     * Repeat the leftshift twice more (17 clocks 9 words) giving m >> 5, subtract (4 & 4)  and you're done.
     * This not only is more efficient in and of itself, but it  ALSO saves you 4 words and 6 clocks in the prologue and epilogue
     * because you don't need to save and restore r16 and r17 because you don't piss away 4 registers. */
  #else
    m = timer_millis;
     f9e:	8f bf       	out	0x3f, r24	; 63
loop():
     fa0:	80 91 32 3c 	lds	r24, 0x3C32	; 0x803c32 <startCountMillis>
     fa4:	90 91 33 3c 	lds	r25, 0x3C33	; 0x803c33 <startCountMillis+0x1>
     fa8:	a0 91 34 3c 	lds	r26, 0x3C34	; 0x803c34 <startCountMillis+0x2>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.4.2/cores/megatinycore/wiring.c:213
    SREG = oldSREG;
     fac:	b0 91 35 3c 	lds	r27, 0x3C35	; 0x803c35 <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:217
    }


    currentCountMillis = millis();
    if (currentCountMillis - startCountMillis >= countdownPeriod) {
     fb0:	8a 01       	movw	r16, r20
     fb2:	9b 01       	movw	r18, r22
     fb4:	08 1b       	sub	r16, r24
     fb6:	19 0b       	sbc	r17, r25
     fb8:	2a 0b       	sbc	r18, r26
     fba:	3b 0b       	sbc	r19, r27
     fbc:	00 3a       	cpi	r16, 0xA0	; 160
     fbe:	1f 40       	sbci	r17, 0x0F	; 15
     fc0:	21 05       	cpc	r18, r1
     fc2:	31 05       	cpc	r19, r1
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <main+0x678>
     fc6:	53 cd       	rjmp	.-1370   	; 0xa6e <main+0x11e>
     fc8:	80 91 38 3c 	lds	r24, 0x3C38	; 0x803c38 <displayCycleCounter>
     fcc:	90 91 39 3c 	lds	r25, 0x3C39	; 0x803c39 <displayCycleCounter+0x1>
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	80 93 38 3c 	sts	0x3C38, r24	; 0x803c38 <displayCycleCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:218
      displayCycleCounter++;
     fd6:	90 93 39 3c 	sts	0x3C39, r25	; 0x803c39 <displayCycleCounter+0x1>
     fda:	40 93 32 3c 	sts	0x3C32, r20	; 0x803c32 <startCountMillis>
     fde:	50 93 33 3c 	sts	0x3C33, r21	; 0x803c33 <startCountMillis+0x1>
     fe2:	60 93 34 3c 	sts	0x3C34, r22	; 0x803c34 <startCountMillis+0x2>
     fe6:	70 93 35 3c 	sts	0x3C35, r23	; 0x803c35 <startCountMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/clock_firmware_production/Tests/components_check/components_check.ino:219
      startCountMillis = currentCountMillis;
     fea:	41 cd       	rjmp	.-1406   	; 0xa6e <main+0x11e>

00000fec <vfprintf>:
vfprintf():
     fec:	ab e0       	ldi	r26, 0x0B	; 11
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	eb ef       	ldi	r30, 0xFB	; 251
     ff2:	f7 e0       	ldi	r31, 0x07	; 7
     ff4:	74 c2       	rjmp	.+1256   	; 0x14de <__prologue_saves__>
     ff6:	7c 01       	movw	r14, r24
     ff8:	3b 01       	movw	r6, r22
     ffa:	8a 01       	movw	r16, r20
     ffc:	fc 01       	movw	r30, r24
     ffe:	16 82       	std	Z+6, r1	; 0x06
    1000:	17 82       	std	Z+7, r1	; 0x07
    1002:	83 81       	ldd	r24, Z+3	; 0x03
    1004:	81 ff       	sbrs	r24, 1
    1006:	ba c1       	rjmp	.+884    	; 0x137c <vfprintf+0x390>
    1008:	ce 01       	movw	r24, r28
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	5c 01       	movw	r10, r24
    100e:	f7 01       	movw	r30, r14
    1010:	93 81       	ldd	r25, Z+3	; 0x03
    1012:	f3 01       	movw	r30, r6
    1014:	93 fd       	sbrc	r25, 3
    1016:	85 91       	lpm	r24, Z+
    1018:	93 ff       	sbrs	r25, 3
    101a:	81 91       	ld	r24, Z+
    101c:	3f 01       	movw	r6, r30
    101e:	88 23       	and	r24, r24
    1020:	09 f4       	brne	.+2      	; 0x1024 <vfprintf+0x38>
    1022:	49 c1       	rjmp	.+658    	; 0x12b6 <vfprintf+0x2ca>
    1024:	85 32       	cpi	r24, 0x25	; 37
    1026:	39 f4       	brne	.+14     	; 0x1036 <vfprintf+0x4a>
    1028:	93 fd       	sbrc	r25, 3
    102a:	85 91       	lpm	r24, Z+
    102c:	93 ff       	sbrs	r25, 3
    102e:	81 91       	ld	r24, Z+
    1030:	3f 01       	movw	r6, r30
    1032:	85 32       	cpi	r24, 0x25	; 37
    1034:	21 f4       	brne	.+8      	; 0x103e <vfprintf+0x52>
    1036:	b7 01       	movw	r22, r14
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b9 d1       	rcall	.+882    	; 0x13ae <fputc>
    103c:	e8 cf       	rjmp	.-48     	; 0x100e <vfprintf+0x22>
    103e:	91 2c       	mov	r9, r1
    1040:	21 2c       	mov	r2, r1
    1042:	31 2c       	mov	r3, r1
    1044:	ff e1       	ldi	r31, 0x1F	; 31
    1046:	f3 15       	cp	r31, r3
    1048:	38 f0       	brcs	.+14     	; 0x1058 <vfprintf+0x6c>
    104a:	8b 32       	cpi	r24, 0x2B	; 43
    104c:	11 f1       	breq	.+68     	; 0x1092 <vfprintf+0xa6>
    104e:	90 f4       	brcc	.+36     	; 0x1074 <vfprintf+0x88>
    1050:	80 32       	cpi	r24, 0x20	; 32
    1052:	09 f1       	breq	.+66     	; 0x1096 <vfprintf+0xaa>
    1054:	83 32       	cpi	r24, 0x23	; 35
    1056:	29 f1       	breq	.+74     	; 0x10a2 <vfprintf+0xb6>
    1058:	37 fc       	sbrc	r3, 7
    105a:	3c c0       	rjmp	.+120    	; 0x10d4 <vfprintf+0xe8>
    105c:	20 ed       	ldi	r18, 0xD0	; 208
    105e:	28 0f       	add	r18, r24
    1060:	2a 30       	cpi	r18, 0x0A	; 10
    1062:	50 f5       	brcc	.+84     	; 0x10b8 <vfprintf+0xcc>
    1064:	36 fe       	sbrs	r3, 6
    1066:	20 c0       	rjmp	.+64     	; 0x10a8 <vfprintf+0xbc>
    1068:	8a e0       	ldi	r24, 0x0A	; 10
    106a:	98 9e       	mul	r9, r24
    106c:	20 0d       	add	r18, r0
    106e:	11 24       	eor	r1, r1
    1070:	92 2e       	mov	r9, r18
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <vfprintf+0x94>
    1074:	8d 32       	cpi	r24, 0x2D	; 45
    1076:	91 f0       	breq	.+36     	; 0x109c <vfprintf+0xb0>
    1078:	80 33       	cpi	r24, 0x30	; 48
    107a:	71 f7       	brne	.-36     	; 0x1058 <vfprintf+0x6c>
    107c:	68 94       	set
    107e:	30 f8       	bld	r3, 0
    1080:	f3 01       	movw	r30, r6
    1082:	93 fd       	sbrc	r25, 3
    1084:	85 91       	lpm	r24, Z+
    1086:	93 ff       	sbrs	r25, 3
    1088:	81 91       	ld	r24, Z+
    108a:	3f 01       	movw	r6, r30
    108c:	81 11       	cpse	r24, r1
    108e:	da cf       	rjmp	.-76     	; 0x1044 <vfprintf+0x58>
    1090:	21 c0       	rjmp	.+66     	; 0x10d4 <vfprintf+0xe8>
    1092:	68 94       	set
    1094:	31 f8       	bld	r3, 1
    1096:	68 94       	set
    1098:	32 f8       	bld	r3, 2
    109a:	f2 cf       	rjmp	.-28     	; 0x1080 <vfprintf+0x94>
    109c:	68 94       	set
    109e:	33 f8       	bld	r3, 3
    10a0:	ef cf       	rjmp	.-34     	; 0x1080 <vfprintf+0x94>
    10a2:	68 94       	set
    10a4:	34 f8       	bld	r3, 4
    10a6:	ec cf       	rjmp	.-40     	; 0x1080 <vfprintf+0x94>
    10a8:	ea e0       	ldi	r30, 0x0A	; 10
    10aa:	2e 9e       	mul	r2, r30
    10ac:	20 0d       	add	r18, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	22 2e       	mov	r2, r18
    10b2:	68 94       	set
    10b4:	35 f8       	bld	r3, 5
    10b6:	e4 cf       	rjmp	.-56     	; 0x1080 <vfprintf+0x94>
    10b8:	8e 32       	cpi	r24, 0x2E	; 46
    10ba:	29 f4       	brne	.+10     	; 0x10c6 <vfprintf+0xda>
    10bc:	36 fc       	sbrc	r3, 6
    10be:	fb c0       	rjmp	.+502    	; 0x12b6 <vfprintf+0x2ca>
    10c0:	68 94       	set
    10c2:	36 f8       	bld	r3, 6
    10c4:	dd cf       	rjmp	.-70     	; 0x1080 <vfprintf+0x94>
    10c6:	8c 36       	cpi	r24, 0x6C	; 108
    10c8:	19 f4       	brne	.+6      	; 0x10d0 <vfprintf+0xe4>
    10ca:	68 94       	set
    10cc:	37 f8       	bld	r3, 7
    10ce:	d8 cf       	rjmp	.-80     	; 0x1080 <vfprintf+0x94>
    10d0:	88 36       	cpi	r24, 0x68	; 104
    10d2:	b1 f2       	breq	.-84     	; 0x1080 <vfprintf+0x94>
    10d4:	98 2f       	mov	r25, r24
    10d6:	9f 7d       	andi	r25, 0xDF	; 223
    10d8:	95 54       	subi	r25, 0x45	; 69
    10da:	93 30       	cpi	r25, 0x03	; 3
    10dc:	d8 f0       	brcs	.+54     	; 0x1114 <vfprintf+0x128>
    10de:	83 36       	cpi	r24, 0x63	; 99
    10e0:	91 f1       	breq	.+100    	; 0x1146 <vfprintf+0x15a>
    10e2:	83 37       	cpi	r24, 0x73	; 115
    10e4:	b1 f1       	breq	.+108    	; 0x1152 <vfprintf+0x166>
    10e6:	83 35       	cpi	r24, 0x53	; 83
    10e8:	09 f0       	breq	.+2      	; 0x10ec <vfprintf+0x100>
    10ea:	5e c0       	rjmp	.+188    	; 0x11a8 <vfprintf+0x1bc>
    10ec:	28 01       	movw	r4, r16
    10ee:	f2 e0       	ldi	r31, 0x02	; 2
    10f0:	4f 0e       	add	r4, r31
    10f2:	51 1c       	adc	r5, r1
    10f4:	f8 01       	movw	r30, r16
    10f6:	c0 80       	ld	r12, Z
    10f8:	d1 80       	ldd	r13, Z+1	; 0x01
    10fa:	69 2d       	mov	r22, r9
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	36 fc       	sbrc	r3, 6
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <vfprintf+0x11a>
    1102:	6f ef       	ldi	r22, 0xFF	; 255
    1104:	7f ef       	ldi	r23, 0xFF	; 255
    1106:	c6 01       	movw	r24, r12
    1108:	3c d1       	rcall	.+632    	; 0x1382 <strnlen_P>
    110a:	4c 01       	movw	r8, r24
    110c:	68 94       	set
    110e:	37 f8       	bld	r3, 7
    1110:	82 01       	movw	r16, r4
    1112:	0a c0       	rjmp	.+20     	; 0x1128 <vfprintf+0x13c>
    1114:	0c 5f       	subi	r16, 0xFC	; 252
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	ff e3       	ldi	r31, 0x3F	; 63
    111a:	f9 83       	std	Y+1, r31	; 0x01
    111c:	88 24       	eor	r8, r8
    111e:	83 94       	inc	r8
    1120:	91 2c       	mov	r9, r1
    1122:	65 01       	movw	r12, r10
    1124:	e8 94       	clt
    1126:	37 f8       	bld	r3, 7
    1128:	33 fe       	sbrs	r3, 3
    112a:	2a c0       	rjmp	.+84     	; 0x1180 <vfprintf+0x194>
    112c:	52 2c       	mov	r5, r2
    112e:	81 14       	cp	r8, r1
    1130:	91 04       	cpc	r9, r1
    1132:	59 f5       	brne	.+86     	; 0x118a <vfprintf+0x19e>
    1134:	55 20       	and	r5, r5
    1136:	09 f4       	brne	.+2      	; 0x113a <vfprintf+0x14e>
    1138:	6a cf       	rjmp	.-300    	; 0x100e <vfprintf+0x22>
    113a:	b7 01       	movw	r22, r14
    113c:	80 e2       	ldi	r24, 0x20	; 32
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	36 d1       	rcall	.+620    	; 0x13ae <fputc>
    1142:	5a 94       	dec	r5
    1144:	f7 cf       	rjmp	.-18     	; 0x1134 <vfprintf+0x148>
    1146:	f8 01       	movw	r30, r16
    1148:	80 81       	ld	r24, Z
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	0e 5f       	subi	r16, 0xFE	; 254
    114e:	1f 4f       	sbci	r17, 0xFF	; 255
    1150:	e5 cf       	rjmp	.-54     	; 0x111c <vfprintf+0x130>
    1152:	28 01       	movw	r4, r16
    1154:	f2 e0       	ldi	r31, 0x02	; 2
    1156:	4f 0e       	add	r4, r31
    1158:	51 1c       	adc	r5, r1
    115a:	f8 01       	movw	r30, r16
    115c:	c0 80       	ld	r12, Z
    115e:	d1 80       	ldd	r13, Z+1	; 0x01
    1160:	69 2d       	mov	r22, r9
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	36 fc       	sbrc	r3, 6
    1166:	02 c0       	rjmp	.+4      	; 0x116c <vfprintf+0x180>
    1168:	6f ef       	ldi	r22, 0xFF	; 255
    116a:	7f ef       	ldi	r23, 0xFF	; 255
    116c:	c6 01       	movw	r24, r12
    116e:	14 d1       	rcall	.+552    	; 0x1398 <strnlen>
    1170:	4c 01       	movw	r8, r24
    1172:	82 01       	movw	r16, r4
    1174:	d7 cf       	rjmp	.-82     	; 0x1124 <vfprintf+0x138>
    1176:	b7 01       	movw	r22, r14
    1178:	80 e2       	ldi	r24, 0x20	; 32
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	18 d1       	rcall	.+560    	; 0x13ae <fputc>
    117e:	2a 94       	dec	r2
    1180:	28 14       	cp	r2, r8
    1182:	19 04       	cpc	r1, r9
    1184:	09 f0       	breq	.+2      	; 0x1188 <vfprintf+0x19c>
    1186:	b8 f7       	brcc	.-18     	; 0x1176 <vfprintf+0x18a>
    1188:	d1 cf       	rjmp	.-94     	; 0x112c <vfprintf+0x140>
    118a:	f6 01       	movw	r30, r12
    118c:	37 fc       	sbrc	r3, 7
    118e:	85 91       	lpm	r24, Z+
    1190:	37 fe       	sbrs	r3, 7
    1192:	81 91       	ld	r24, Z+
    1194:	6f 01       	movw	r12, r30
    1196:	b7 01       	movw	r22, r14
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	09 d1       	rcall	.+530    	; 0x13ae <fputc>
    119c:	51 10       	cpse	r5, r1
    119e:	5a 94       	dec	r5
    11a0:	f1 e0       	ldi	r31, 0x01	; 1
    11a2:	8f 1a       	sub	r8, r31
    11a4:	91 08       	sbc	r9, r1
    11a6:	c3 cf       	rjmp	.-122    	; 0x112e <vfprintf+0x142>
    11a8:	84 36       	cpi	r24, 0x64	; 100
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <vfprintf+0x1c6>
    11ac:	89 36       	cpi	r24, 0x69	; 105
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <vfprintf+0x1c6>
    11b0:	73 c0       	rjmp	.+230    	; 0x1298 <vfprintf+0x2ac>
    11b2:	f8 01       	movw	r30, r16
    11b4:	37 fe       	sbrs	r3, 7
    11b6:	67 c0       	rjmp	.+206    	; 0x1286 <vfprintf+0x29a>
    11b8:	60 81       	ld	r22, Z
    11ba:	71 81       	ldd	r23, Z+1	; 0x01
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	0c 5f       	subi	r16, 0xFC	; 252
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	f3 2d       	mov	r31, r3
    11c6:	ff 76       	andi	r31, 0x6F	; 111
    11c8:	3f 2e       	mov	r3, r31
    11ca:	97 ff       	sbrs	r25, 7
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <vfprintf+0x1f4>
    11ce:	90 95       	com	r25
    11d0:	80 95       	com	r24
    11d2:	70 95       	com	r23
    11d4:	61 95       	neg	r22
    11d6:	7f 4f       	sbci	r23, 0xFF	; 255
    11d8:	8f 4f       	sbci	r24, 0xFF	; 255
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	68 94       	set
    11de:	37 f8       	bld	r3, 7
    11e0:	2a e0       	ldi	r18, 0x0A	; 10
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	a5 01       	movw	r20, r10
    11e6:	13 d1       	rcall	.+550    	; 0x140e <__ultoa_invert>
    11e8:	c8 2e       	mov	r12, r24
    11ea:	ca 18       	sub	r12, r10
    11ec:	8c 2c       	mov	r8, r12
    11ee:	43 2c       	mov	r4, r3
    11f0:	36 fe       	sbrs	r3, 6
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <vfprintf+0x220>
    11f4:	e8 94       	clt
    11f6:	40 f8       	bld	r4, 0
    11f8:	c9 14       	cp	r12, r9
    11fa:	40 f4       	brcc	.+16     	; 0x120c <vfprintf+0x220>
    11fc:	34 fe       	sbrs	r3, 4
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <vfprintf+0x21e>
    1200:	32 fc       	sbrc	r3, 2
    1202:	03 c0       	rjmp	.+6      	; 0x120a <vfprintf+0x21e>
    1204:	f3 2d       	mov	r31, r3
    1206:	fe 7e       	andi	r31, 0xEE	; 238
    1208:	4f 2e       	mov	r4, r31
    120a:	89 2c       	mov	r8, r9
    120c:	44 fe       	sbrs	r4, 4
    120e:	90 c0       	rjmp	.+288    	; 0x1330 <vfprintf+0x344>
    1210:	fe 01       	movw	r30, r28
    1212:	ec 0d       	add	r30, r12
    1214:	f1 1d       	adc	r31, r1
    1216:	80 81       	ld	r24, Z
    1218:	80 33       	cpi	r24, 0x30	; 48
    121a:	09 f0       	breq	.+2      	; 0x121e <vfprintf+0x232>
    121c:	82 c0       	rjmp	.+260    	; 0x1322 <vfprintf+0x336>
    121e:	24 2d       	mov	r18, r4
    1220:	29 7e       	andi	r18, 0xE9	; 233
    1222:	42 2e       	mov	r4, r18
    1224:	84 2d       	mov	r24, r4
    1226:	88 70       	andi	r24, 0x08	; 8
    1228:	58 2e       	mov	r5, r24
    122a:	43 fc       	sbrc	r4, 3
    122c:	8f c0       	rjmp	.+286    	; 0x134c <vfprintf+0x360>
    122e:	40 fe       	sbrs	r4, 0
    1230:	89 c0       	rjmp	.+274    	; 0x1344 <vfprintf+0x358>
    1232:	9c 2c       	mov	r9, r12
    1234:	82 14       	cp	r8, r2
    1236:	18 f4       	brcc	.+6      	; 0x123e <vfprintf+0x252>
    1238:	2c 0c       	add	r2, r12
    123a:	92 2c       	mov	r9, r2
    123c:	98 18       	sub	r9, r8
    123e:	44 fe       	sbrs	r4, 4
    1240:	8b c0       	rjmp	.+278    	; 0x1358 <vfprintf+0x36c>
    1242:	b7 01       	movw	r22, r14
    1244:	80 e3       	ldi	r24, 0x30	; 48
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	b2 d0       	rcall	.+356    	; 0x13ae <fputc>
    124a:	42 fe       	sbrs	r4, 2
    124c:	08 c0       	rjmp	.+16     	; 0x125e <vfprintf+0x272>
    124e:	88 e7       	ldi	r24, 0x78	; 120
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	41 fe       	sbrs	r4, 1
    1254:	02 c0       	rjmp	.+4      	; 0x125a <vfprintf+0x26e>
    1256:	88 e5       	ldi	r24, 0x58	; 88
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	b7 01       	movw	r22, r14
    125c:	a8 d0       	rcall	.+336    	; 0x13ae <fputc>
    125e:	c9 14       	cp	r12, r9
    1260:	08 f4       	brcc	.+2      	; 0x1264 <vfprintf+0x278>
    1262:	86 c0       	rjmp	.+268    	; 0x1370 <vfprintf+0x384>
    1264:	ca 94       	dec	r12
    1266:	d1 2c       	mov	r13, r1
    1268:	9f ef       	ldi	r25, 0xFF	; 255
    126a:	c9 1a       	sub	r12, r25
    126c:	d9 0a       	sbc	r13, r25
    126e:	ca 0c       	add	r12, r10
    1270:	db 1c       	adc	r13, r11
    1272:	f6 01       	movw	r30, r12
    1274:	82 91       	ld	r24, -Z
    1276:	6f 01       	movw	r12, r30
    1278:	b7 01       	movw	r22, r14
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	98 d0       	rcall	.+304    	; 0x13ae <fputc>
    127e:	ac 14       	cp	r10, r12
    1280:	bd 04       	cpc	r11, r13
    1282:	b9 f7       	brne	.-18     	; 0x1272 <vfprintf+0x286>
    1284:	57 cf       	rjmp	.-338    	; 0x1134 <vfprintf+0x148>
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	07 2e       	mov	r0, r23
    128c:	00 0c       	add	r0, r0
    128e:	88 0b       	sbc	r24, r24
    1290:	99 0b       	sbc	r25, r25
    1292:	0e 5f       	subi	r16, 0xFE	; 254
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	96 cf       	rjmp	.-212    	; 0x11c4 <vfprintf+0x1d8>
    1298:	d3 2c       	mov	r13, r3
    129a:	e8 94       	clt
    129c:	d4 f8       	bld	r13, 4
    129e:	2a e0       	ldi	r18, 0x0A	; 10
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	85 37       	cpi	r24, 0x75	; 117
    12a4:	31 f1       	breq	.+76     	; 0x12f2 <vfprintf+0x306>
    12a6:	23 2d       	mov	r18, r3
    12a8:	29 7f       	andi	r18, 0xF9	; 249
    12aa:	d2 2e       	mov	r13, r18
    12ac:	8f 36       	cpi	r24, 0x6F	; 111
    12ae:	f9 f0       	breq	.+62     	; 0x12ee <vfprintf+0x302>
    12b0:	40 f4       	brcc	.+16     	; 0x12c2 <vfprintf+0x2d6>
    12b2:	88 35       	cpi	r24, 0x58	; 88
    12b4:	a1 f0       	breq	.+40     	; 0x12de <vfprintf+0x2f2>
    12b6:	f7 01       	movw	r30, r14
    12b8:	86 81       	ldd	r24, Z+6	; 0x06
    12ba:	97 81       	ldd	r25, Z+7	; 0x07
    12bc:	2b 96       	adiw	r28, 0x0b	; 11
    12be:	e2 e1       	ldi	r30, 0x12	; 18
    12c0:	27 c1       	rjmp	.+590    	; 0x1510 <__epilogue_restores__>
    12c2:	80 37       	cpi	r24, 0x70	; 112
    12c4:	49 f0       	breq	.+18     	; 0x12d8 <vfprintf+0x2ec>
    12c6:	88 37       	cpi	r24, 0x78	; 120
    12c8:	b1 f7       	brne	.-20     	; 0x12b6 <vfprintf+0x2ca>
    12ca:	d4 fe       	sbrs	r13, 4
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <vfprintf+0x2e6>
    12ce:	68 94       	set
    12d0:	d2 f8       	bld	r13, 2
    12d2:	20 e1       	ldi	r18, 0x10	; 16
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <vfprintf+0x306>
    12d8:	68 94       	set
    12da:	d4 f8       	bld	r13, 4
    12dc:	f6 cf       	rjmp	.-20     	; 0x12ca <vfprintf+0x2de>
    12de:	34 fe       	sbrs	r3, 4
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <vfprintf+0x2fc>
    12e2:	82 2f       	mov	r24, r18
    12e4:	86 60       	ori	r24, 0x06	; 6
    12e6:	d8 2e       	mov	r13, r24
    12e8:	20 e1       	ldi	r18, 0x10	; 16
    12ea:	32 e0       	ldi	r19, 0x02	; 2
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <vfprintf+0x306>
    12ee:	28 e0       	ldi	r18, 0x08	; 8
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	f8 01       	movw	r30, r16
    12f4:	d7 fe       	sbrs	r13, 7
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <vfprintf+0x328>
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	0c 5f       	subi	r16, 0xFC	; 252
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
    1304:	a5 01       	movw	r20, r10
    1306:	83 d0       	rcall	.+262    	; 0x140e <__ultoa_invert>
    1308:	c8 2e       	mov	r12, r24
    130a:	ca 18       	sub	r12, r10
    130c:	3d 2c       	mov	r3, r13
    130e:	e8 94       	clt
    1310:	37 f8       	bld	r3, 7
    1312:	6c cf       	rjmp	.-296    	; 0x11ec <vfprintf+0x200>
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	0e 5f       	subi	r16, 0xFE	; 254
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	f1 cf       	rjmp	.-30     	; 0x1304 <vfprintf+0x318>
    1322:	42 fc       	sbrc	r4, 2
    1324:	02 c0       	rjmp	.+4      	; 0x132a <vfprintf+0x33e>
    1326:	83 94       	inc	r8
    1328:	7d cf       	rjmp	.-262    	; 0x1224 <vfprintf+0x238>
    132a:	83 94       	inc	r8
    132c:	83 94       	inc	r8
    132e:	7a cf       	rjmp	.-268    	; 0x1224 <vfprintf+0x238>
    1330:	84 2d       	mov	r24, r4
    1332:	86 78       	andi	r24, 0x86	; 134
    1334:	09 f4       	brne	.+2      	; 0x1338 <vfprintf+0x34c>
    1336:	76 cf       	rjmp	.-276    	; 0x1224 <vfprintf+0x238>
    1338:	f6 cf       	rjmp	.-20     	; 0x1326 <vfprintf+0x33a>
    133a:	b7 01       	movw	r22, r14
    133c:	80 e2       	ldi	r24, 0x20	; 32
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	36 d0       	rcall	.+108    	; 0x13ae <fputc>
    1342:	83 94       	inc	r8
    1344:	82 14       	cp	r8, r2
    1346:	c8 f3       	brcs	.-14     	; 0x133a <vfprintf+0x34e>
    1348:	51 2c       	mov	r5, r1
    134a:	79 cf       	rjmp	.-270    	; 0x123e <vfprintf+0x252>
    134c:	52 2c       	mov	r5, r2
    134e:	58 18       	sub	r5, r8
    1350:	82 14       	cp	r8, r2
    1352:	08 f4       	brcc	.+2      	; 0x1356 <vfprintf+0x36a>
    1354:	74 cf       	rjmp	.-280    	; 0x123e <vfprintf+0x252>
    1356:	f8 cf       	rjmp	.-16     	; 0x1348 <vfprintf+0x35c>
    1358:	84 2d       	mov	r24, r4
    135a:	86 78       	andi	r24, 0x86	; 134
    135c:	09 f4       	brne	.+2      	; 0x1360 <vfprintf+0x374>
    135e:	7f cf       	rjmp	.-258    	; 0x125e <vfprintf+0x272>
    1360:	8b e2       	ldi	r24, 0x2B	; 43
    1362:	41 fe       	sbrs	r4, 1
    1364:	80 e2       	ldi	r24, 0x20	; 32
    1366:	47 fc       	sbrc	r4, 7
    1368:	8d e2       	ldi	r24, 0x2D	; 45
    136a:	b7 01       	movw	r22, r14
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	76 cf       	rjmp	.-276    	; 0x125c <vfprintf+0x270>
    1370:	b7 01       	movw	r22, r14
    1372:	80 e3       	ldi	r24, 0x30	; 48
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	1b d0       	rcall	.+54     	; 0x13ae <fputc>
    1378:	9a 94       	dec	r9
    137a:	71 cf       	rjmp	.-286    	; 0x125e <vfprintf+0x272>
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	9f ef       	ldi	r25, 0xFF	; 255
    1380:	9d cf       	rjmp	.-198    	; 0x12bc <vfprintf+0x2d0>

00001382 <strnlen_P>:
strnlen_P():
    1382:	fc 01       	movw	r30, r24
    1384:	05 90       	lpm	r0, Z+
    1386:	61 50       	subi	r22, 0x01	; 1
    1388:	70 40       	sbci	r23, 0x00	; 0
    138a:	01 10       	cpse	r0, r1
    138c:	d8 f7       	brcc	.-10     	; 0x1384 <strnlen_P+0x2>
    138e:	80 95       	com	r24
    1390:	90 95       	com	r25
    1392:	8e 0f       	add	r24, r30
    1394:	9f 1f       	adc	r25, r31
    1396:	08 95       	ret

00001398 <strnlen>:
strnlen():
    1398:	fc 01       	movw	r30, r24
    139a:	61 50       	subi	r22, 0x01	; 1
    139c:	70 40       	sbci	r23, 0x00	; 0
    139e:	01 90       	ld	r0, Z+
    13a0:	01 10       	cpse	r0, r1
    13a2:	d8 f7       	brcc	.-10     	; 0x139a <strnlen+0x2>
    13a4:	80 95       	com	r24
    13a6:	90 95       	com	r25
    13a8:	8e 0f       	add	r24, r30
    13aa:	9f 1f       	adc	r25, r31
    13ac:	08 95       	ret

000013ae <fputc>:
fputc():
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	18 2f       	mov	r17, r24
    13b8:	09 2f       	mov	r16, r25
    13ba:	eb 01       	movw	r28, r22
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	81 fd       	sbrc	r24, 1
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <fputc+0x26>
    13c2:	1f ef       	ldi	r17, 0xFF	; 255
    13c4:	0f ef       	ldi	r16, 0xFF	; 255
    13c6:	81 2f       	mov	r24, r17
    13c8:	90 2f       	mov	r25, r16
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	08 95       	ret
    13d4:	82 ff       	sbrs	r24, 2
    13d6:	14 c0       	rjmp	.+40     	; 0x1400 <fputc+0x52>
    13d8:	2e 81       	ldd	r18, Y+6	; 0x06
    13da:	3f 81       	ldd	r19, Y+7	; 0x07
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	9d 81       	ldd	r25, Y+5	; 0x05
    13e0:	28 17       	cp	r18, r24
    13e2:	39 07       	cpc	r19, r25
    13e4:	3c f4       	brge	.+14     	; 0x13f4 <fputc+0x46>
    13e6:	e8 81       	ld	r30, Y
    13e8:	f9 81       	ldd	r31, Y+1	; 0x01
    13ea:	cf 01       	movw	r24, r30
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	88 83       	st	Y, r24
    13f0:	99 83       	std	Y+1, r25	; 0x01
    13f2:	10 83       	st	Z, r17
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	9f 81       	ldd	r25, Y+7	; 0x07
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	8e 83       	std	Y+6, r24	; 0x06
    13fc:	9f 83       	std	Y+7, r25	; 0x07
    13fe:	e3 cf       	rjmp	.-58     	; 0x13c6 <fputc+0x18>
    1400:	e8 85       	ldd	r30, Y+8	; 0x08
    1402:	f9 85       	ldd	r31, Y+9	; 0x09
    1404:	81 2f       	mov	r24, r17
    1406:	09 95       	icall
    1408:	89 2b       	or	r24, r25
    140a:	a1 f3       	breq	.-24     	; 0x13f4 <fputc+0x46>
    140c:	da cf       	rjmp	.-76     	; 0x13c2 <fputc+0x14>

0000140e <__ultoa_invert>:
__ultoa_invert():
    140e:	fa 01       	movw	r30, r20
    1410:	aa 27       	eor	r26, r26
    1412:	28 30       	cpi	r18, 0x08	; 8
    1414:	51 f1       	breq	.+84     	; 0x146a <__ultoa_invert+0x5c>
    1416:	20 31       	cpi	r18, 0x10	; 16
    1418:	81 f1       	breq	.+96     	; 0x147a <__ultoa_invert+0x6c>
    141a:	e8 94       	clt
    141c:	6f 93       	push	r22
    141e:	6e 7f       	andi	r22, 0xFE	; 254
    1420:	6e 5f       	subi	r22, 0xFE	; 254
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	af 4f       	sbci	r26, 0xFF	; 255
    142a:	b1 e0       	ldi	r27, 0x01	; 1
    142c:	3e d0       	rcall	.+124    	; 0x14aa <__ultoa_invert+0x9c>
    142e:	b4 e0       	ldi	r27, 0x04	; 4
    1430:	3c d0       	rcall	.+120    	; 0x14aa <__ultoa_invert+0x9c>
    1432:	67 0f       	add	r22, r23
    1434:	78 1f       	adc	r23, r24
    1436:	89 1f       	adc	r24, r25
    1438:	9a 1f       	adc	r25, r26
    143a:	a1 1d       	adc	r26, r1
    143c:	68 0f       	add	r22, r24
    143e:	79 1f       	adc	r23, r25
    1440:	8a 1f       	adc	r24, r26
    1442:	91 1d       	adc	r25, r1
    1444:	a1 1d       	adc	r26, r1
    1446:	6a 0f       	add	r22, r26
    1448:	71 1d       	adc	r23, r1
    144a:	81 1d       	adc	r24, r1
    144c:	91 1d       	adc	r25, r1
    144e:	a1 1d       	adc	r26, r1
    1450:	20 d0       	rcall	.+64     	; 0x1492 <__ultoa_invert+0x84>
    1452:	09 f4       	brne	.+2      	; 0x1456 <__ultoa_invert+0x48>
    1454:	68 94       	set
    1456:	3f 91       	pop	r19
    1458:	2a e0       	ldi	r18, 0x0A	; 10
    145a:	26 9f       	mul	r18, r22
    145c:	11 24       	eor	r1, r1
    145e:	30 19       	sub	r19, r0
    1460:	30 5d       	subi	r19, 0xD0	; 208
    1462:	31 93       	st	Z+, r19
    1464:	de f6       	brtc	.-74     	; 0x141c <__ultoa_invert+0xe>
    1466:	cf 01       	movw	r24, r30
    1468:	08 95       	ret
    146a:	46 2f       	mov	r20, r22
    146c:	47 70       	andi	r20, 0x07	; 7
    146e:	40 5d       	subi	r20, 0xD0	; 208
    1470:	41 93       	st	Z+, r20
    1472:	b3 e0       	ldi	r27, 0x03	; 3
    1474:	0f d0       	rcall	.+30     	; 0x1494 <__ultoa_invert+0x86>
    1476:	c9 f7       	brne	.-14     	; 0x146a <__ultoa_invert+0x5c>
    1478:	f6 cf       	rjmp	.-20     	; 0x1466 <__ultoa_invert+0x58>
    147a:	46 2f       	mov	r20, r22
    147c:	4f 70       	andi	r20, 0x0F	; 15
    147e:	40 5d       	subi	r20, 0xD0	; 208
    1480:	4a 33       	cpi	r20, 0x3A	; 58
    1482:	18 f0       	brcs	.+6      	; 0x148a <__ultoa_invert+0x7c>
    1484:	49 5d       	subi	r20, 0xD9	; 217
    1486:	31 fd       	sbrc	r19, 1
    1488:	40 52       	subi	r20, 0x20	; 32
    148a:	41 93       	st	Z+, r20
    148c:	02 d0       	rcall	.+4      	; 0x1492 <__ultoa_invert+0x84>
    148e:	a9 f7       	brne	.-22     	; 0x147a <__ultoa_invert+0x6c>
    1490:	ea cf       	rjmp	.-44     	; 0x1466 <__ultoa_invert+0x58>
    1492:	b4 e0       	ldi	r27, 0x04	; 4
    1494:	a6 95       	lsr	r26
    1496:	97 95       	ror	r25
    1498:	87 95       	ror	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	ba 95       	dec	r27
    14a0:	c9 f7       	brne	.-14     	; 0x1494 <__ultoa_invert+0x86>
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	61 05       	cpc	r22, r1
    14a6:	71 05       	cpc	r23, r1
    14a8:	08 95       	ret
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	0a 2e       	mov	r0, r26
    14b0:	06 94       	lsr	r0
    14b2:	57 95       	ror	r21
    14b4:	47 95       	ror	r20
    14b6:	37 95       	ror	r19
    14b8:	27 95       	ror	r18
    14ba:	ba 95       	dec	r27
    14bc:	c9 f7       	brne	.-14     	; 0x14b0 <__ultoa_invert+0xa2>
    14be:	62 0f       	add	r22, r18
    14c0:	73 1f       	adc	r23, r19
    14c2:	84 1f       	adc	r24, r20
    14c4:	95 1f       	adc	r25, r21
    14c6:	a0 1d       	adc	r26, r0
    14c8:	08 95       	ret

000014ca <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    14ca:	3a d0       	rcall	.+116    	; 0x1540 <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    14cc:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    14ce:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    14d0:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    14d2:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    14d4:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    14d6:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    14d8:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    14da:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    14dc:	08 95       	ret

000014de <__prologue_saves__>:
__prologue_saves__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    14de:	2f 92       	push	r2
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    14e0:	3f 92       	push	r3
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    14e2:	4f 92       	push	r4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    14e4:	5f 92       	push	r5
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    14e6:	6f 92       	push	r6
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    14e8:	7f 92       	push	r7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    14ea:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    14ec:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    14ee:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    14f0:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    14f2:	cf 92       	push	r12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    14f4:	df 92       	push	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    14f6:	ef 92       	push	r14
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    14f8:	ff 92       	push	r15
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    14fa:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    14fc:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    14fe:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1500:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    1502:	cd b7       	in	r28, 0x3d	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    1504:	de b7       	in	r29, 0x3e	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    1506:	ca 1b       	sub	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    1508:	db 0b       	sbc	r29, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    150a:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    150c:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    150e:	09 94       	ijmp

00001510 <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1510:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1512:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1514:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1516:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    1518:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    151a:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    151c:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    151e:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    1520:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    1522:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    1524:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    1526:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    1528:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    152a:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    152c:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    152e:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    1530:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    1532:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    1534:	ce 0f       	add	r28, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    1536:	d1 1d       	adc	r29, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    1538:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    153a:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    153c:	ed 01       	movw	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    153e:	08 95       	ret

00001540 <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1540:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1542:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1544:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1546:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1548:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    154a:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    154c:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    154e:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1550:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1552:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1554:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1556:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1558:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    155a:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    155c:	08 95       	ret

0000155e <__udivmodqi4>:
__udivmodqi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    155e:	99 1b       	sub	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    1560:	79 e0       	ldi	r23, 0x09	; 9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    1562:	04 c0       	rjmp	.+8      	; 0x156c <__udivmodqi4_ep>

00001564 <__udivmodqi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    1564:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    1566:	96 17       	cp	r25, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    1568:	08 f0       	brcs	.+2      	; 0x156c <__udivmodqi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    156a:	96 1b       	sub	r25, r22

0000156c <__udivmodqi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    156c:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    156e:	7a 95       	dec	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    1570:	c9 f7       	brne	.-14     	; 0x1564 <__udivmodqi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    1572:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    1574:	08 95       	ret

00001576 <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1576:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1578:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    157a:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    157c:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    157e:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1580:	0d c0       	rjmp	.+26     	; 0x159c <__udivmodsi4_ep>

00001582 <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1582:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1584:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1586:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1588:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    158a:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    158c:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    158e:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1590:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1592:	20 f0       	brcs	.+8      	; 0x159c <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1594:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1596:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1598:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    159a:	f5 0b       	sbc	r31, r21

0000159c <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    159c:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    159e:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    15a0:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    15a2:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    15a4:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    15a6:	69 f7       	brne	.-38     	; 0x1582 <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    15a8:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    15aa:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    15ac:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    15ae:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    15b0:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    15b2:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    15b4:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    15b6:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    15b8:	08 95       	ret

000015ba <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    15ba:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    15bc:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    15be:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    15c0:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    15c2:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    15c4:	09 94       	ijmp

000015c6 <malloc>:
malloc():
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	10 f4       	brcc	.+4      	; 0x15d8 <malloc+0x12>
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	e0 91 fb 3c 	lds	r30, 0x3CFB	; 0x803cfb <__flp>
    15dc:	f0 91 fc 3c 	lds	r31, 0x3CFC	; 0x803cfc <__flp+0x1>
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	a0 e0       	ldi	r26, 0x00	; 0
    15e8:	30 97       	sbiw	r30, 0x00	; 0
    15ea:	99 f4       	brne	.+38     	; 0x1612 <malloc+0x4c>
    15ec:	21 15       	cp	r18, r1
    15ee:	31 05       	cpc	r19, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <malloc+0x2e>
    15f2:	4a c0       	rjmp	.+148    	; 0x1688 <malloc+0xc2>
    15f4:	28 1b       	sub	r18, r24
    15f6:	39 0b       	sbc	r19, r25
    15f8:	24 30       	cpi	r18, 0x04	; 4
    15fa:	31 05       	cpc	r19, r1
    15fc:	d8 f5       	brcc	.+118    	; 0x1674 <malloc+0xae>
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	9b 81       	ldd	r25, Y+3	; 0x03
    1602:	61 15       	cp	r22, r1
    1604:	71 05       	cpc	r23, r1
    1606:	89 f1       	breq	.+98     	; 0x166a <malloc+0xa4>
    1608:	fb 01       	movw	r30, r22
    160a:	82 83       	std	Z+2, r24	; 0x02
    160c:	93 83       	std	Z+3, r25	; 0x03
    160e:	fe 01       	movw	r30, r28
    1610:	11 c0       	rjmp	.+34     	; 0x1634 <malloc+0x6e>
    1612:	40 81       	ld	r20, Z
    1614:	51 81       	ldd	r21, Z+1	; 0x01
    1616:	02 81       	ldd	r16, Z+2	; 0x02
    1618:	13 81       	ldd	r17, Z+3	; 0x03
    161a:	48 17       	cp	r20, r24
    161c:	59 07       	cpc	r21, r25
    161e:	e0 f0       	brcs	.+56     	; 0x1658 <malloc+0x92>
    1620:	48 17       	cp	r20, r24
    1622:	59 07       	cpc	r21, r25
    1624:	99 f4       	brne	.+38     	; 0x164c <malloc+0x86>
    1626:	10 97       	sbiw	r26, 0x00	; 0
    1628:	61 f0       	breq	.+24     	; 0x1642 <malloc+0x7c>
    162a:	12 96       	adiw	r26, 0x02	; 2
    162c:	0c 93       	st	X, r16
    162e:	12 97       	sbiw	r26, 0x02	; 2
    1630:	13 96       	adiw	r26, 0x03	; 3
    1632:	1c 93       	st	X, r17
    1634:	32 96       	adiw	r30, 0x02	; 2
    1636:	cf 01       	movw	r24, r30
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret
    1642:	00 93 fb 3c 	sts	0x3CFB, r16	; 0x803cfb <__flp>
    1646:	10 93 fc 3c 	sts	0x3CFC, r17	; 0x803cfc <__flp+0x1>
    164a:	f4 cf       	rjmp	.-24     	; 0x1634 <malloc+0x6e>
    164c:	21 15       	cp	r18, r1
    164e:	31 05       	cpc	r19, r1
    1650:	51 f0       	breq	.+20     	; 0x1666 <malloc+0xa0>
    1652:	42 17       	cp	r20, r18
    1654:	53 07       	cpc	r21, r19
    1656:	38 f0       	brcs	.+14     	; 0x1666 <malloc+0xa0>
    1658:	a9 01       	movw	r20, r18
    165a:	db 01       	movw	r26, r22
    165c:	9a 01       	movw	r18, r20
    165e:	bd 01       	movw	r22, r26
    1660:	df 01       	movw	r26, r30
    1662:	f8 01       	movw	r30, r16
    1664:	c1 cf       	rjmp	.-126    	; 0x15e8 <malloc+0x22>
    1666:	ef 01       	movw	r28, r30
    1668:	f9 cf       	rjmp	.-14     	; 0x165c <malloc+0x96>
    166a:	80 93 fb 3c 	sts	0x3CFB, r24	; 0x803cfb <__flp>
    166e:	90 93 fc 3c 	sts	0x3CFC, r25	; 0x803cfc <__flp+0x1>
    1672:	cd cf       	rjmp	.-102    	; 0x160e <malloc+0x48>
    1674:	fe 01       	movw	r30, r28
    1676:	e2 0f       	add	r30, r18
    1678:	f3 1f       	adc	r31, r19
    167a:	81 93       	st	Z+, r24
    167c:	91 93       	st	Z+, r25
    167e:	22 50       	subi	r18, 0x02	; 2
    1680:	31 09       	sbc	r19, r1
    1682:	28 83       	st	Y, r18
    1684:	39 83       	std	Y+1, r19	; 0x01
    1686:	d7 cf       	rjmp	.-82     	; 0x1636 <malloc+0x70>
    1688:	20 91 f9 3c 	lds	r18, 0x3CF9	; 0x803cf9 <__brkval>
    168c:	30 91 fa 3c 	lds	r19, 0x3CFA	; 0x803cfa <__brkval+0x1>
    1690:	23 2b       	or	r18, r19
    1692:	41 f4       	brne	.+16     	; 0x16a4 <malloc+0xde>
    1694:	20 91 06 3c 	lds	r18, 0x3C06	; 0x803c06 <__malloc_heap_start>
    1698:	30 91 07 3c 	lds	r19, 0x3C07	; 0x803c07 <__malloc_heap_start+0x1>
    169c:	20 93 f9 3c 	sts	0x3CF9, r18	; 0x803cf9 <__brkval>
    16a0:	30 93 fa 3c 	sts	0x3CFA, r19	; 0x803cfa <__brkval+0x1>
    16a4:	20 91 04 3c 	lds	r18, 0x3C04	; 0x803c04 <__malloc_heap_end>
    16a8:	30 91 05 3c 	lds	r19, 0x3C05	; 0x803c05 <__malloc_heap_end+0x1>
    16ac:	21 15       	cp	r18, r1
    16ae:	31 05       	cpc	r19, r1
    16b0:	41 f4       	brne	.+16     	; 0x16c2 <malloc+0xfc>
    16b2:	2d b7       	in	r18, 0x3d	; 61
    16b4:	3e b7       	in	r19, 0x3e	; 62
    16b6:	40 91 08 3c 	lds	r20, 0x3C08	; 0x803c08 <__malloc_margin>
    16ba:	50 91 09 3c 	lds	r21, 0x3C09	; 0x803c09 <__malloc_margin+0x1>
    16be:	24 1b       	sub	r18, r20
    16c0:	35 0b       	sbc	r19, r21
    16c2:	e0 91 f9 3c 	lds	r30, 0x3CF9	; 0x803cf9 <__brkval>
    16c6:	f0 91 fa 3c 	lds	r31, 0x3CFA	; 0x803cfa <__brkval+0x1>
    16ca:	e2 17       	cp	r30, r18
    16cc:	f3 07       	cpc	r31, r19
    16ce:	a0 f4       	brcc	.+40     	; 0x16f8 <malloc+0x132>
    16d0:	2e 1b       	sub	r18, r30
    16d2:	3f 0b       	sbc	r19, r31
    16d4:	28 17       	cp	r18, r24
    16d6:	39 07       	cpc	r19, r25
    16d8:	78 f0       	brcs	.+30     	; 0x16f8 <malloc+0x132>
    16da:	ac 01       	movw	r20, r24
    16dc:	4e 5f       	subi	r20, 0xFE	; 254
    16de:	5f 4f       	sbci	r21, 0xFF	; 255
    16e0:	24 17       	cp	r18, r20
    16e2:	35 07       	cpc	r19, r21
    16e4:	48 f0       	brcs	.+18     	; 0x16f8 <malloc+0x132>
    16e6:	4e 0f       	add	r20, r30
    16e8:	5f 1f       	adc	r21, r31
    16ea:	40 93 f9 3c 	sts	0x3CF9, r20	; 0x803cf9 <__brkval>
    16ee:	50 93 fa 3c 	sts	0x3CFA, r21	; 0x803cfa <__brkval+0x1>
    16f2:	81 93       	st	Z+, r24
    16f4:	91 93       	st	Z+, r25
    16f6:	9f cf       	rjmp	.-194    	; 0x1636 <malloc+0x70>
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	e0 e0       	ldi	r30, 0x00	; 0
    16fc:	9c cf       	rjmp	.-200    	; 0x1636 <malloc+0x70>

000016fe <free>:
free():
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	00 97       	sbiw	r24, 0x00	; 0
    1704:	e9 f0       	breq	.+58     	; 0x1740 <free+0x42>
    1706:	fc 01       	movw	r30, r24
    1708:	32 97       	sbiw	r30, 0x02	; 2
    170a:	12 82       	std	Z+2, r1	; 0x02
    170c:	13 82       	std	Z+3, r1	; 0x03
    170e:	a0 91 fb 3c 	lds	r26, 0x3CFB	; 0x803cfb <__flp>
    1712:	b0 91 fc 3c 	lds	r27, 0x3CFC	; 0x803cfc <__flp+0x1>
    1716:	ed 01       	movw	r28, r26
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	10 97       	sbiw	r26, 0x00	; 0
    171e:	a1 f4       	brne	.+40     	; 0x1748 <free+0x4a>
    1720:	20 81       	ld	r18, Z
    1722:	31 81       	ldd	r19, Z+1	; 0x01
    1724:	82 0f       	add	r24, r18
    1726:	93 1f       	adc	r25, r19
    1728:	20 91 f9 3c 	lds	r18, 0x3CF9	; 0x803cf9 <__brkval>
    172c:	30 91 fa 3c 	lds	r19, 0x3CFA	; 0x803cfa <__brkval+0x1>
    1730:	28 17       	cp	r18, r24
    1732:	39 07       	cpc	r19, r25
    1734:	09 f0       	breq	.+2      	; 0x1738 <free+0x3a>
    1736:	61 c0       	rjmp	.+194    	; 0x17fa <free+0xfc>
    1738:	e0 93 f9 3c 	sts	0x3CF9, r30	; 0x803cf9 <__brkval>
    173c:	f0 93 fa 3c 	sts	0x3CFA, r31	; 0x803cfa <__brkval+0x1>
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret
    1746:	ea 01       	movw	r28, r20
    1748:	ce 17       	cp	r28, r30
    174a:	df 07       	cpc	r29, r31
    174c:	e8 f5       	brcc	.+122    	; 0x17c8 <free+0xca>
    174e:	4a 81       	ldd	r20, Y+2	; 0x02
    1750:	5b 81       	ldd	r21, Y+3	; 0x03
    1752:	9e 01       	movw	r18, r28
    1754:	41 15       	cp	r20, r1
    1756:	51 05       	cpc	r21, r1
    1758:	b1 f7       	brne	.-20     	; 0x1746 <free+0x48>
    175a:	e9 01       	movw	r28, r18
    175c:	ea 83       	std	Y+2, r30	; 0x02
    175e:	fb 83       	std	Y+3, r31	; 0x03
    1760:	49 91       	ld	r20, Y+
    1762:	59 91       	ld	r21, Y+
    1764:	c4 0f       	add	r28, r20
    1766:	d5 1f       	adc	r29, r21
    1768:	ec 17       	cp	r30, r28
    176a:	fd 07       	cpc	r31, r29
    176c:	61 f4       	brne	.+24     	; 0x1786 <free+0x88>
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	02 96       	adiw	r24, 0x02	; 2
    1774:	84 0f       	add	r24, r20
    1776:	95 1f       	adc	r25, r21
    1778:	e9 01       	movw	r28, r18
    177a:	88 83       	st	Y, r24
    177c:	99 83       	std	Y+1, r25	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	e0 e0       	ldi	r30, 0x00	; 0
    178a:	12 96       	adiw	r26, 0x02	; 2
    178c:	8d 91       	ld	r24, X+
    178e:	9c 91       	ld	r25, X
    1790:	13 97       	sbiw	r26, 0x03	; 3
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	b9 f5       	brne	.+110    	; 0x1804 <free+0x106>
    1796:	2d 91       	ld	r18, X+
    1798:	3c 91       	ld	r19, X
    179a:	11 97       	sbiw	r26, 0x01	; 1
    179c:	cd 01       	movw	r24, r26
    179e:	02 96       	adiw	r24, 0x02	; 2
    17a0:	82 0f       	add	r24, r18
    17a2:	93 1f       	adc	r25, r19
    17a4:	20 91 f9 3c 	lds	r18, 0x3CF9	; 0x803cf9 <__brkval>
    17a8:	30 91 fa 3c 	lds	r19, 0x3CFA	; 0x803cfa <__brkval+0x1>
    17ac:	28 17       	cp	r18, r24
    17ae:	39 07       	cpc	r19, r25
    17b0:	39 f6       	brne	.-114    	; 0x1740 <free+0x42>
    17b2:	30 97       	sbiw	r30, 0x00	; 0
    17b4:	51 f5       	brne	.+84     	; 0x180a <free+0x10c>
    17b6:	10 92 fb 3c 	sts	0x3CFB, r1	; 0x803cfb <__flp>
    17ba:	10 92 fc 3c 	sts	0x3CFC, r1	; 0x803cfc <__flp+0x1>
    17be:	a0 93 f9 3c 	sts	0x3CF9, r26	; 0x803cf9 <__brkval>
    17c2:	b0 93 fa 3c 	sts	0x3CFA, r27	; 0x803cfa <__brkval+0x1>
    17c6:	bc cf       	rjmp	.-136    	; 0x1740 <free+0x42>
    17c8:	c2 83       	std	Z+2, r28	; 0x02
    17ca:	d3 83       	std	Z+3, r29	; 0x03
    17cc:	40 81       	ld	r20, Z
    17ce:	51 81       	ldd	r21, Z+1	; 0x01
    17d0:	84 0f       	add	r24, r20
    17d2:	95 1f       	adc	r25, r21
    17d4:	c8 17       	cp	r28, r24
    17d6:	d9 07       	cpc	r29, r25
    17d8:	61 f4       	brne	.+24     	; 0x17f2 <free+0xf4>
    17da:	4e 5f       	subi	r20, 0xFE	; 254
    17dc:	5f 4f       	sbci	r21, 0xFF	; 255
    17de:	88 81       	ld	r24, Y
    17e0:	99 81       	ldd	r25, Y+1	; 0x01
    17e2:	48 0f       	add	r20, r24
    17e4:	59 1f       	adc	r21, r25
    17e6:	40 83       	st	Z, r20
    17e8:	51 83       	std	Z+1, r21	; 0x01
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	9b 81       	ldd	r25, Y+3	; 0x03
    17ee:	82 83       	std	Z+2, r24	; 0x02
    17f0:	93 83       	std	Z+3, r25	; 0x03
    17f2:	21 15       	cp	r18, r1
    17f4:	31 05       	cpc	r19, r1
    17f6:	09 f0       	breq	.+2      	; 0x17fa <free+0xfc>
    17f8:	b0 cf       	rjmp	.-160    	; 0x175a <free+0x5c>
    17fa:	e0 93 fb 3c 	sts	0x3CFB, r30	; 0x803cfb <__flp>
    17fe:	f0 93 fc 3c 	sts	0x3CFC, r31	; 0x803cfc <__flp+0x1>
    1802:	9e cf       	rjmp	.-196    	; 0x1740 <free+0x42>
    1804:	fd 01       	movw	r30, r26
    1806:	dc 01       	movw	r26, r24
    1808:	c0 cf       	rjmp	.-128    	; 0x178a <free+0x8c>
    180a:	12 82       	std	Z+2, r1	; 0x02
    180c:	13 82       	std	Z+3, r1	; 0x03
    180e:	d7 cf       	rjmp	.-82     	; 0x17be <free+0xc0>

00001810 <realloc>:
realloc():
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	a0 e0       	ldi	r26, 0x00	; 0
    1814:	ed e0       	ldi	r30, 0x0D	; 13
    1816:	fc e0       	ldi	r31, 0x0C	; 12
    1818:	64 ce       	rjmp	.-824    	; 0x14e2 <__prologue_saves__+0x4>
    181a:	8c 01       	movw	r16, r24
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	41 f4       	brne	.+16     	; 0x1830 <realloc+0x20>
    1820:	cb 01       	movw	r24, r22
    1822:	d1 de       	rcall	.-606    	; 0x15c6 <malloc>
    1824:	8c 01       	movw	r16, r24
    1826:	c8 01       	movw	r24, r16
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	e0 e1       	ldi	r30, 0x10	; 16
    182e:	72 ce       	rjmp	.-796    	; 0x1514 <__epilogue_restores__+0x4>
    1830:	fc 01       	movw	r30, r24
    1832:	e6 0f       	add	r30, r22
    1834:	f7 1f       	adc	r31, r23
    1836:	9c 01       	movw	r18, r24
    1838:	22 50       	subi	r18, 0x02	; 2
    183a:	31 09       	sbc	r19, r1
    183c:	e2 17       	cp	r30, r18
    183e:	f3 07       	cpc	r31, r19
    1840:	08 f4       	brcc	.+2      	; 0x1844 <realloc+0x34>
    1842:	99 c0       	rjmp	.+306    	; 0x1976 <realloc+0x166>
    1844:	d9 01       	movw	r26, r18
    1846:	cd 91       	ld	r28, X+
    1848:	dc 91       	ld	r29, X
    184a:	11 97       	sbiw	r26, 0x01	; 1
    184c:	c6 17       	cp	r28, r22
    184e:	d7 07       	cpc	r29, r23
    1850:	90 f0       	brcs	.+36     	; 0x1876 <realloc+0x66>
    1852:	c5 30       	cpi	r28, 0x05	; 5
    1854:	d1 05       	cpc	r29, r1
    1856:	38 f3       	brcs	.-50     	; 0x1826 <realloc+0x16>
    1858:	ce 01       	movw	r24, r28
    185a:	04 97       	sbiw	r24, 0x04	; 4
    185c:	86 17       	cp	r24, r22
    185e:	97 07       	cpc	r25, r23
    1860:	10 f3       	brcs	.-60     	; 0x1826 <realloc+0x16>
    1862:	c6 1b       	sub	r28, r22
    1864:	d7 0b       	sbc	r29, r23
    1866:	22 97       	sbiw	r28, 0x02	; 2
    1868:	c1 93       	st	Z+, r28
    186a:	d1 93       	st	Z+, r29
    186c:	6d 93       	st	X+, r22
    186e:	7c 93       	st	X, r23
    1870:	cf 01       	movw	r24, r30
    1872:	45 df       	rcall	.-374    	; 0x16fe <free>
    1874:	d8 cf       	rjmp	.-80     	; 0x1826 <realloc+0x16>
    1876:	5b 01       	movw	r10, r22
    1878:	ac 1a       	sub	r10, r28
    187a:	bd 0a       	sbc	r11, r29
    187c:	4c 01       	movw	r8, r24
    187e:	8c 0e       	add	r8, r28
    1880:	9d 1e       	adc	r9, r29
    1882:	a0 91 fb 3c 	lds	r26, 0x3CFB	; 0x803cfb <__flp>
    1886:	b0 91 fc 3c 	lds	r27, 0x3CFC	; 0x803cfc <__flp+0x1>
    188a:	51 2c       	mov	r5, r1
    188c:	41 2c       	mov	r4, r1
    188e:	f1 2c       	mov	r15, r1
    1890:	e1 2c       	mov	r14, r1
    1892:	10 97       	sbiw	r26, 0x00	; 0
    1894:	31 f5       	brne	.+76     	; 0x18e2 <realloc+0xd2>
    1896:	80 91 f9 3c 	lds	r24, 0x3CF9	; 0x803cf9 <__brkval>
    189a:	90 91 fa 3c 	lds	r25, 0x3CFA	; 0x803cfa <__brkval+0x1>
    189e:	88 15       	cp	r24, r8
    18a0:	99 05       	cpc	r25, r9
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <realloc+0x96>
    18a4:	5c c0       	rjmp	.+184    	; 0x195e <realloc+0x14e>
    18a6:	46 16       	cp	r4, r22
    18a8:	57 06       	cpc	r5, r23
    18aa:	08 f0       	brcs	.+2      	; 0x18ae <realloc+0x9e>
    18ac:	58 c0       	rjmp	.+176    	; 0x195e <realloc+0x14e>
    18ae:	80 91 04 3c 	lds	r24, 0x3C04	; 0x803c04 <__malloc_heap_end>
    18b2:	90 91 05 3c 	lds	r25, 0x3C05	; 0x803c05 <__malloc_heap_end+0x1>
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	41 f4       	brne	.+16     	; 0x18ca <realloc+0xba>
    18ba:	8d b7       	in	r24, 0x3d	; 61
    18bc:	9e b7       	in	r25, 0x3e	; 62
    18be:	40 91 08 3c 	lds	r20, 0x3C08	; 0x803c08 <__malloc_margin>
    18c2:	50 91 09 3c 	lds	r21, 0x3C09	; 0x803c09 <__malloc_margin+0x1>
    18c6:	84 1b       	sub	r24, r20
    18c8:	95 0b       	sbc	r25, r21
    18ca:	e8 17       	cp	r30, r24
    18cc:	f9 07       	cpc	r31, r25
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <realloc+0xc2>
    18d0:	52 c0       	rjmp	.+164    	; 0x1976 <realloc+0x166>
    18d2:	e0 93 f9 3c 	sts	0x3CF9, r30	; 0x803cf9 <__brkval>
    18d6:	f0 93 fa 3c 	sts	0x3CFA, r31	; 0x803cfa <__brkval+0x1>
    18da:	f9 01       	movw	r30, r18
    18dc:	60 83       	st	Z, r22
    18de:	71 83       	std	Z+1, r23	; 0x01
    18e0:	a2 cf       	rjmp	.-188    	; 0x1826 <realloc+0x16>
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	12 96       	adiw	r26, 0x02	; 2
    18ea:	6c 90       	ld	r6, X
    18ec:	12 97       	sbiw	r26, 0x02	; 2
    18ee:	13 96       	adiw	r26, 0x03	; 3
    18f0:	7c 90       	ld	r7, X
    18f2:	13 97       	sbiw	r26, 0x03	; 3
    18f4:	a8 15       	cp	r26, r8
    18f6:	b9 05       	cpc	r27, r9
    18f8:	59 f5       	brne	.+86     	; 0x1950 <realloc+0x140>
    18fa:	6c 01       	movw	r12, r24
    18fc:	42 e0       	ldi	r20, 0x02	; 2
    18fe:	c4 0e       	add	r12, r20
    1900:	d1 1c       	adc	r13, r1
    1902:	ca 14       	cp	r12, r10
    1904:	db 04       	cpc	r13, r11
    1906:	20 f1       	brcs	.+72     	; 0x1950 <realloc+0x140>
    1908:	ac 01       	movw	r20, r24
    190a:	4a 19       	sub	r20, r10
    190c:	5b 09       	sbc	r21, r11
    190e:	da 01       	movw	r26, r20
    1910:	12 96       	adiw	r26, 0x02	; 2
    1912:	15 97       	sbiw	r26, 0x05	; 5
    1914:	80 f0       	brcs	.+32     	; 0x1936 <realloc+0x126>
    1916:	62 82       	std	Z+2, r6	; 0x02
    1918:	73 82       	std	Z+3, r7	; 0x03
    191a:	40 83       	st	Z, r20
    191c:	51 83       	std	Z+1, r21	; 0x01
    191e:	d9 01       	movw	r26, r18
    1920:	6d 93       	st	X+, r22
    1922:	7c 93       	st	X, r23
    1924:	e1 14       	cp	r14, r1
    1926:	f1 04       	cpc	r15, r1
    1928:	71 f0       	breq	.+28     	; 0x1946 <realloc+0x136>
    192a:	d7 01       	movw	r26, r14
    192c:	12 96       	adiw	r26, 0x02	; 2
    192e:	ed 93       	st	X+, r30
    1930:	fc 93       	st	X, r31
    1932:	13 97       	sbiw	r26, 0x03	; 3
    1934:	78 cf       	rjmp	.-272    	; 0x1826 <realloc+0x16>
    1936:	22 96       	adiw	r28, 0x02	; 2
    1938:	8c 0f       	add	r24, r28
    193a:	9d 1f       	adc	r25, r29
    193c:	f9 01       	movw	r30, r18
    193e:	80 83       	st	Z, r24
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	f3 01       	movw	r30, r6
    1944:	ef cf       	rjmp	.-34     	; 0x1924 <realloc+0x114>
    1946:	e0 93 fb 3c 	sts	0x3CFB, r30	; 0x803cfb <__flp>
    194a:	f0 93 fc 3c 	sts	0x3CFC, r31	; 0x803cfc <__flp+0x1>
    194e:	6b cf       	rjmp	.-298    	; 0x1826 <realloc+0x16>
    1950:	48 16       	cp	r4, r24
    1952:	59 06       	cpc	r5, r25
    1954:	08 f4       	brcc	.+2      	; 0x1958 <realloc+0x148>
    1956:	2c 01       	movw	r4, r24
    1958:	7d 01       	movw	r14, r26
    195a:	d3 01       	movw	r26, r6
    195c:	9a cf       	rjmp	.-204    	; 0x1892 <realloc+0x82>
    195e:	cb 01       	movw	r24, r22
    1960:	32 de       	rcall	.-924    	; 0x15c6 <malloc>
    1962:	7c 01       	movw	r14, r24
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	39 f0       	breq	.+14     	; 0x1976 <realloc+0x166>
    1968:	ae 01       	movw	r20, r28
    196a:	b8 01       	movw	r22, r16
    196c:	07 d0       	rcall	.+14     	; 0x197c <memcpy>
    196e:	c8 01       	movw	r24, r16
    1970:	c6 de       	rcall	.-628    	; 0x16fe <free>
    1972:	87 01       	movw	r16, r14
    1974:	58 cf       	rjmp	.-336    	; 0x1826 <realloc+0x16>
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	00 e0       	ldi	r16, 0x00	; 0
    197a:	55 cf       	rjmp	.-342    	; 0x1826 <realloc+0x16>

0000197c <memcpy>:
memcpy():
    197c:	fb 01       	movw	r30, r22
    197e:	dc 01       	movw	r26, r24
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <memcpy+0xa>
    1982:	01 90       	ld	r0, Z+
    1984:	0d 92       	st	X+, r0
    1986:	41 50       	subi	r20, 0x01	; 1
    1988:	50 40       	sbci	r21, 0x00	; 0
    198a:	d8 f7       	brcc	.-10     	; 0x1982 <memcpy+0x6>
    198c:	08 95       	ret

0000198e <strcpy>:
strcpy():
    198e:	fb 01       	movw	r30, r22
    1990:	dc 01       	movw	r26, r24
    1992:	01 90       	ld	r0, Z+
    1994:	0d 92       	st	X+, r0
    1996:	00 20       	and	r0, r0
    1998:	e1 f7       	brne	.-8      	; 0x1992 <strcpy+0x4>
    199a:	08 95       	ret

0000199c <sprintf>:
sprintf():
    199c:	ae e0       	ldi	r26, 0x0E	; 14
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e3 ed       	ldi	r30, 0xD3	; 211
    19a2:	fc e0       	ldi	r31, 0x0C	; 12
    19a4:	aa cd       	rjmp	.-1196   	; 0x14fa <__prologue_saves__+0x1c>
    19a6:	0d 89       	ldd	r16, Y+21	; 0x15
    19a8:	1e 89       	ldd	r17, Y+22	; 0x16
    19aa:	86 e0       	ldi	r24, 0x06	; 6
    19ac:	8c 83       	std	Y+4, r24	; 0x04
    19ae:	09 83       	std	Y+1, r16	; 0x01
    19b0:	1a 83       	std	Y+2, r17	; 0x02
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	9f e7       	ldi	r25, 0x7F	; 127
    19b6:	8d 83       	std	Y+5, r24	; 0x05
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	ae 01       	movw	r20, r28
    19bc:	47 5e       	subi	r20, 0xE7	; 231
    19be:	5f 4f       	sbci	r21, 0xFF	; 255
    19c0:	6f 89       	ldd	r22, Y+23	; 0x17
    19c2:	78 8d       	ldd	r23, Y+24	; 0x18
    19c4:	ce 01       	movw	r24, r28
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	11 db       	rcall	.-2526   	; 0xfec <vfprintf>
    19ca:	2f 81       	ldd	r18, Y+7	; 0x07
    19cc:	38 85       	ldd	r19, Y+8	; 0x08
    19ce:	02 0f       	add	r16, r18
    19d0:	13 1f       	adc	r17, r19
    19d2:	f8 01       	movw	r30, r16
    19d4:	10 82       	st	Z, r1
    19d6:	2e 96       	adiw	r28, 0x0e	; 14
    19d8:	e4 e0       	ldi	r30, 0x04	; 4
    19da:	a8 cd       	rjmp	.-1200   	; 0x152c <__epilogue_restores__+0x1c>

000019dc <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    19dc:	f8 94       	cli

000019de <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    19de:	ff cf       	rjmp	.-2      	; 0x19de <__stop_program>
