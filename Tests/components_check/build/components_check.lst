
/private/var/folders/yp/37w_03rx1qdbfsqckbyyk9t80000gn/T/arduino-sketch-5881CB90D42ECC6070325818771F6501/components_check.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:61
       0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	7b c0       	rjmp	.+246    	; 0xfc <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	79 c0       	rjmp	.+242    	; 0xfc <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	77 c0       	rjmp	.+238    	; 0xfc <__bad_interrupt>
       e:	00 00       	nop
../../../../crt1/gcrt1.S:70
      10:	75 c0       	rjmp	.+234    	; 0xfc <__bad_interrupt>
      12:	00 00       	nop
../../../../crt1/gcrt1.S:71
      14:	73 c0       	rjmp	.+230    	; 0xfc <__bad_interrupt>
      16:	00 00       	nop
../../../../crt1/gcrt1.S:72
      18:	71 c0       	rjmp	.+226    	; 0xfc <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	6f c0       	rjmp	.+222    	; 0xfc <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	6d c0       	rjmp	.+218    	; 0xfc <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	1e c5       	rjmp	.+2620   	; 0xa62 <__vector_9>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	69 c0       	rjmp	.+210    	; 0xfc <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	67 c0       	rjmp	.+206    	; 0xfc <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	65 c0       	rjmp	.+202    	; 0xfc <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	63 c0       	rjmp	.+198    	; 0xfc <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	61 c0       	rjmp	.+194    	; 0xfc <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	5f c0       	rjmp	.+190    	; 0xfc <__bad_interrupt>
      3e:	00 00       	nop
../../../../crt1/gcrt1.S:82
      40:	5d c0       	rjmp	.+186    	; 0xfc <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	5b c0       	rjmp	.+182    	; 0xfc <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	59 c0       	rjmp	.+178    	; 0xfc <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	57 c0       	rjmp	.+174    	; 0xfc <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	55 c0       	rjmp	.+170    	; 0xfc <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	53 c0       	rjmp	.+166    	; 0xfc <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	51 c0       	rjmp	.+162    	; 0xfc <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	4f c0       	rjmp	.+158    	; 0xfc <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	4d c0       	rjmp	.+154    	; 0xfc <__bad_interrupt>
      62:	00 00       	nop
../../../../crt1/gcrt1.S:91
      64:	4b c0       	rjmp	.+150    	; 0xfc <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	49 c0       	rjmp	.+146    	; 0xfc <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	55 c5       	rjmp	.+2730   	; 0xb18 <__vector_27>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	4e c5       	rjmp	.+2716   	; 0xb0e <__vector_28>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	56 c5       	rjmp	.+2732   	; 0xb22 <__vector_29>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	41 c0       	rjmp	.+130    	; 0xfc <__bad_interrupt>
	...

0000007c <__trampolines_end>:
__trampolines_start():
      7c:	45 46       	sbci	r20, 0x65	; 101
      7e:	47 65       	ori	r20, 0x57	; 87
      80:	66 67       	ori	r22, 0x76	; 118
	...

00000083 <__c.2210>:
      83:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000094 <__ctors_start>:
__ctors_start():
      94:	a4 06       	cpc	r10, r20

00000096 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
      96:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
      98:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
      9a:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
      9c:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
      9e:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
      a0:	de bf       	out	0x3e, r29	; 62

000000a2 <_initThreeStuff()>:
_Z15_initThreeStuffv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:95
 * (many are available reasonably cheaply on aliexpress et al.) end up being very useful        *
 * for this sort of thing.                                                                      */

  void __attribute__((weak)) init_reset_flags();
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
      a2:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <vtable for UartClass+0x7f5ff3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:96
    RSTCTRL.RSTFR = flags;
      a6:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <vtable for UartClass+0x7f5ff3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:97
    if (flags == 0) {
      aa:	81 11       	cpse	r24, r1
      ac:	05 c0       	rjmp	.+10     	; 0xb8 <_initThreeStuff()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:98
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
      ae:	98 ed       	ldi	r25, 0xD8	; 216
      b0:	21 e0       	ldi	r18, 0x01	; 1
      b2:	94 bf       	out	0x34, r25	; 52
      b4:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <vtable for UartClass+0x7f5ff4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:100
    }
    GPIOR0 = flags;
      b8:	8c bb       	out	0x1c, r24	; 28

000000ba <__do_clear_bss>:
__do_clear_bss():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      ba:	2d e3       	ldi	r18, 0x3D	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      bc:	ac e0       	ldi	r26, 0x0C	; 12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      be:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      c4:	ab 31       	cpi	r26, 0x1B	; 27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      c6:	b2 07       	cpc	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_copy_data>:
__do_copy_data():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      ca:	1c e3       	ldi	r17, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      cc:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      ce:	bc e3       	ldi	r27, 0x3C	; 60
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      d0:	e2 ed       	ldi	r30, 0xD2	; 210
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      d2:	f3 e2       	ldi	r31, 0x23	; 35
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      d6:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      d8:	0d 92       	st	X+, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      da:	ac 30       	cpi	r26, 0x0C	; 12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      dc:	b1 07       	cpc	r27, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_global_ctors>:
__do_global_ctors():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      e0:	10 e0       	ldi	r17, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      e2:	cb e4       	ldi	r28, 0x4B	; 75
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      e4:	d0 e0       	ldi	r29, 0x00	; 0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_global_ctors+0x10>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e8:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      ea:	fe 01       	movw	r30, r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      ec:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__tablejump2__>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      f0:	ca 34       	cpi	r28, 0x4A	; 74
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      f2:	d1 07       	cpc	r29, r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      f4:	c9 f7       	brne	.-14     	; 0xe8 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
      f6:	3f d6       	rcall	.+3198   	; 0xd76 <main>
../../../../crt1/gcrt1.S:315
      f8:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <_exit>

000000fc <__bad_interrupt>:
__vector_22():
../../../../crt1/gcrt1.S:209
      fc:	81 cf       	rjmp	.-254    	; 0x0 <__vectors>

000000fe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>:
_ZN17TinyMegaI2CMaster5startEhi.constprop.18():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:66

// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
      fe:	89 2b       	or	r24, r25
     100:	c9 f0       	breq	.+50     	; 0x134 <__EEPROM_REGION_LENGTH__+0x34>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:70
    read = 0; // Write
  else
  {
    I2Ccount = readcount;
     102:	8f ef       	ldi	r24, 0xFF	; 255
     104:	9f ef       	ldi	r25, 0xFF	; 255
     106:	80 93 91 3c 	sts	0x3C91, r24	; 0x803c91 <TinyMegaI2C>
     10a:	90 93 92 3c 	sts	0x3C92, r25	; 0x803c92 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:71
    read = 1;
     10e:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:73
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
     110:	84 66       	ori	r24, 0x64	; 100
     112:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <vtable for UartClass+0x7f67ca>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:74
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
     116:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f67c8>
     11a:	80 7c       	andi	r24, 0xC0	; 192
     11c:	e1 f3       	breq	.-8      	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:76
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
     11e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f67c8>
     122:	83 fd       	sbrc	r24, 3
     124:	09 c0       	rjmp	.+18     	; 0x138 <__EEPROM_REGION_LENGTH__+0x38>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:78
    return false;                        // Return false if arbitration lost or bus error
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
     126:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f67c8>
     12a:	82 95       	swap	r24
     12c:	81 70       	andi	r24, 0x01	; 1
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	89 27       	eor	r24, r25
     132:	08 95       	ret
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:67
// Start transmission by sending address
bool TinyMegaI2CMaster::start(uint8_t address, int readcount)
{
  bool read;
  if (readcount == 0)
    read = 0; // Write
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	ec cf       	rjmp	.-40     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:77
  }                                 // Read
  TWI0.MADDR = address << 1 | read; // Send START condition
  while (!(TWI0.MSTATUS & (TWI_WIF_bm | TWI_RIF_bm)))
    ; // Wait for write or read interrupt flag
  if ((TWI0.MSTATUS & TWI_ARBLOST_bm))
    return false;                        // Return false if arbitration lost or bus error
     138:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:79
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}
     13a:	08 95       	ret

0000013c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>:
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:402
    {
        return (false);
    }
}

bool RV8803Tiny::readMultipleRegisters(uint8_t addr, uint8_t *dest, uint8_t len)
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:405
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	db df       	rcall	.-74     	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
     148:	81 11       	cpse	r24, r1
     14a:	02 c0       	rjmp	.+4      	; 0x150 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	3c c0       	rjmp	.+120    	; 0x1c8 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x8c>
write():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:55
  return TinyMegaI2CMaster::read();
}

bool TinyMegaI2CMaster::write(uint8_t data)
{
  while (!(TWI0.MSTATUS & TWI_WIF_bm))
     150:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f67c8>
     154:	86 ff       	sbrs	r24, 6
     156:	fc cf       	rjmp	.-8      	; 0x150 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x14>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:57
    ; // Wait for write interrupt flag
  TWI0.MDATA = data;
     158:	80 e1       	ldi	r24, 0x10	; 16
     15a:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <vtable for UartClass+0x7f67cb>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:58
  TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc;   // Do nothing
     15e:	82 e0       	ldi	r24, 0x02	; 2
     160:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f67c7>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:59
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Returns true if slave gave an ACK
     164:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f67c8>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:408
{
    //  Master sends out the START condition, signifyig it'll be a write operation [ R/W bit is a 0 ]
    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    { //  if Acknowledged from RV-8803
        //  Master sends out the Register Address to RV-8803-C7.
        if (TinyMegaI2C.write(addr))
     168:	84 fd       	sbrc	r24, 4
     16a:	f0 cf       	rjmp	.-32     	; 0x14c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
restart():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:83
  return !(TWI0.MSTATUS & TWI_RXACK_bm); // Return true if slave gave an ACK
}

bool TinyMegaI2CMaster::restart(uint8_t address, int readcount)
{
  return TinyMegaI2CMaster::start(address, readcount);
     16c:	8f ef       	ldi	r24, 0xFF	; 255
     16e:	9f ef       	ldi	r25, 0xFF	; 255
     170:	c6 df       	rcall	.-116    	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:412
        { //  if Acknowledged from RV-8803
            //  Master sends out the Repeated START condition (or STOP condition followed by START condition)
            //  Master sends out Slave Address, 65h for the RV-8803 [ R/W bit is -1 ] indicating unknown number of read operation
            if (TinyMegaI2C.restart(RV8803_ADDR, -1))
     172:	88 23       	and	r24, r24
     174:	59 f3       	breq	.-42     	; 0x14c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
     176:	fe 01       	movw	r30, r28
     178:	9e 01       	movw	r18, r28
     17a:	28 5f       	subi	r18, 0xF8	; 248
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     17e:	46 e0       	ldi	r20, 0x06	; 6
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     180:	52 e0       	ldi	r21, 0x02	; 2
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:34
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
}

uint8_t TinyMegaI2CMaster::read(void)
{
  if (I2Ccount != 0)
     182:	80 91 91 3c 	lds	r24, 0x3C91	; 0x803c91 <TinyMegaI2C>
     186:	90 91 92 3c 	lds	r25, 0x3C92	; 0x803c92 <TinyMegaI2C+0x1>
     18a:	00 97       	sbiw	r24, 0x00	; 0
     18c:	29 f0       	breq	.+10     	; 0x198 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x5c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:35
    I2Ccount--;
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	80 93 91 3c 	sts	0x3C91, r24	; 0x803c91 <TinyMegaI2C>
     194:	90 93 92 3c 	sts	0x3C92, r25	; 0x803c92 <TinyMegaI2C+0x1>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:36
  while (!(TWI0.MSTATUS & TWI_RIF_bm))
     198:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <vtable for UartClass+0x7f67c8>
     19c:	87 ff       	sbrs	r24, 7
     19e:	fc cf       	rjmp	.-8      	; 0x198 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x5c>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:38
    ; // Wait for read interrupt flag
  uint8_t data = TWI0.MDATA;
     1a0:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <vtable for UartClass+0x7f67cb>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:40
  // Check slave sent ACK?
  if (I2Ccount != 0)
     1a4:	60 91 91 3c 	lds	r22, 0x3C91	; 0x803c91 <TinyMegaI2C>
     1a8:	70 91 92 3c 	lds	r23, 0x3C92	; 0x803c92 <TinyMegaI2C+0x1>
     1ac:	67 2b       	or	r22, r23
     1ae:	79 f0       	breq	.+30     	; 0x1ce <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x92>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:41
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
     1b0:	50 93 14 08 	sts	0x0814, r21	; 0x800814 <vtable for UartClass+0x7f67c7>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:423
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
                {
                    dest[i] = TinyMegaI2C.read();
     1b4:	81 93       	st	Z+, r24
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:421
                // 2. [NO NEED] The above Steps can be repeated if necessary and the address bit increments automatically.
                // 3. ** The Master, addressed as Receiver, can stop data transmission by not generating an acknowledge on the
                // last byte that has been sent from the Slave {thaat's why we didn't do step 1 here}.
                // In this event, the Slave-Transmitter must leave the data line HIGH to enable the Master to generate a STOP condition.

                for (uint8_t i = 0; i < len; i++)
     1b6:	e2 17       	cp	r30, r18
     1b8:	f3 07       	cpc	r31, r19
     1ba:	19 f7       	brne	.-58     	; 0x182 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x46>
stop():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:88
  return TinyMegaI2CMaster::start(address, readcount);
}

void TinyMegaI2CMaster::stop(void)
{
  TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_STOP_gc; // Send STOP
     1bc:	87 e0       	ldi	r24, 0x07	; 7
     1be:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <vtable for UartClass+0x7f67c7>
_ZN10RV8803Tiny21readMultipleRegistersEhPhh.constprop.8():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:427
                {
                    dest[i] = TinyMegaI2C.read();
                }

                TinyMegaI2C.stop();
                return (dest);
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	cd 2b       	or	r28, r29
     1c6:	11 f2       	breq	.-124    	; 0x14c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x10>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:443
    }
    else
    {
        return (false);
    }
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret
read():
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:43
  uint8_t data = TWI0.MDATA;
  // Check slave sent ACK?
  if (I2Ccount != 0)
    TWI0.MCTRLB = TWI_MCMD_RECVTRANS_gc; // if ACK = more bytes to read
  else
    TWI0.MCTRLB = TWI_ACKACT_bm | TWI_MCMD_RECVTRANS_gc; // else Send NAK
     1ce:	40 93 14 08 	sts	0x0814, r20	; 0x800814 <vtable for UartClass+0x7f67c7>
     1d2:	f0 cf       	rjmp	.-32     	; 0x1b4 <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]+0x78>

000001d4 <UartClass::availableForWrite()>:
_ZN9UartClass17availableForWriteEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:642
  int UartClass::availableForWrite(void) {
    tx_buffer_index_t head;
    tx_buffer_index_t tail;

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
     1d4:	fc 01       	movw	r30, r24
     1d6:	53 89       	ldd	r21, Z+19	; 0x13
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:643
      tail = _tx_buffer_tail;
     1d8:	44 89       	ldd	r20, Z+20	; 0x14
     1da:	25 2f       	mov	r18, r21
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	84 2f       	mov	r24, r20
     1e0:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:646
    }
    if (head >= tail) {
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1e2:	82 1b       	sub	r24, r18
     1e4:	93 0b       	sbc	r25, r19
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:645

    TX_BUFFER_ATOMIC {
      head = _tx_buffer_head;
      tail = _tx_buffer_tail;
    }
    if (head >= tail) {
     1e6:	54 17       	cp	r21, r20
     1e8:	10 f0       	brcs	.+4      	; 0x1ee <UartClass::availableForWrite()+0x1a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:646
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1ea:	4f 96       	adiw	r24, 0x1f	; 31
     1ec:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:648
    }
    return tail - head - 1;
     1ee:	01 97       	sbiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:649
  }
     1f0:	08 95       	ret

000001f2 <UartClass::read()>:
_ZN9UartClass4readEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:626
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }

  int UartClass::read(void) {
     1f2:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:628
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
     1f4:	91 89       	ldd	r25, Z+17	; 0x11
     1f6:	82 89       	ldd	r24, Z+18	; 0x12
     1f8:	98 17       	cp	r25, r24
     1fa:	61 f0       	breq	.+24     	; 0x214 <UartClass::read()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:631
      return -1;
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
     1fc:	a2 89       	ldd	r26, Z+18	; 0x12
     1fe:	ae 0f       	add	r26, r30
     200:	bf 2f       	mov	r27, r31
     202:	b1 1d       	adc	r27, r1
     204:	55 96       	adiw	r26, 0x15	; 21
     206:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:632
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
     208:	92 89       	ldd	r25, Z+18	; 0x12
     20a:	9f 5f       	subi	r25, 0xFF	; 255
     20c:	9f 73       	andi	r25, 0x3F	; 63
     20e:	92 8b       	std	Z+18, r25	; 0x12
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:633
      return c;
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:629
  }

  int UartClass::read(void) {
    // if the head isn't ahead of the tail, we don't have any characters
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:635
    } else {
      unsigned char c = _rx_buffer[_rx_buffer_tail];
      _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) & (SERIAL_RX_BUFFER_SIZE - 1); // % SERIAL_RX_BUFFER_SIZE;
      return c;
    }
  }
     218:	08 95       	ret

0000021a <UartClass::peek()>:
_ZN9UartClass4peekEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:618
}
  int UartClass::available(void) {
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
     21a:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:619
    if (_rx_buffer_head == _rx_buffer_tail) {
     21c:	91 89       	ldd	r25, Z+17	; 0x11
     21e:	82 89       	ldd	r24, Z+18	; 0x12
     220:	98 17       	cp	r25, r24
     222:	31 f0       	breq	.+12     	; 0x230 <UartClass::peek()+0x16>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:622
      return -1;
    } else {
      return _rx_buffer[_rx_buffer_tail];
     224:	82 89       	ldd	r24, Z+18	; 0x12
     226:	e8 0f       	add	r30, r24
     228:	f1 1d       	adc	r31, r1
     22a:	85 89       	ldd	r24, Z+21	; 0x15
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:620
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
  }

  int UartClass::peek(void) {
    if (_rx_buffer_head == _rx_buffer_tail) {
      return -1;
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	9f ef       	ldi	r25, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:624
    } else {
      return _rx_buffer[_rx_buffer_tail];
    }
  }
     234:	08 95       	ret

00000236 <UartClass::available()>:
_ZN9UartClass9availableEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:614

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
}
  int UartClass::available(void) {
     236:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:615
    return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) & (SERIAL_RX_BUFFER_SIZE - 1); //% SERIAL_RX_BUFFER_SIZE;
     238:	91 89       	ldd	r25, Z+17	; 0x11
     23a:	22 89       	ldd	r18, Z+18	; 0x12
     23c:	89 2f       	mov	r24, r25
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	80 5c       	subi	r24, 0xC0	; 192
     242:	9f 4f       	sbci	r25, 0xFF	; 255
     244:	82 1b       	sub	r24, r18
     246:	91 09       	sbc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:616
  }
     248:	8f 73       	andi	r24, 0x3F	; 63
     24a:	99 27       	eor	r25, r25
     24c:	08 95       	ret

0000024e <UartClass::end()>:
_ZN9UartClass3endEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:598
    pinMode(_usart_pins[muxrow][3], OUTPUT); // make XDIR output.
  }
  */
}

void UartClass::end() {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:600
  // wait for transmission of outgoing data
  flush();
     254:	e8 81       	ld	r30, Y
     256:	f9 81       	ldd	r31, Y+1	; 0x01
     258:	06 80       	ldd	r0, Z+6	; 0x06
     25a:	f7 81       	ldd	r31, Z+7	; 0x07
     25c:	e0 2d       	mov	r30, r0
     25e:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:603
  // Disable receiver and transmitter as well as the RX complete and the data register empty interrupts.
  // TXCIE only used in half duplex - we can just turn the damned thing off yo!
  volatile USART_t * temp = _hwserial_module; /* compiler does a slightly better job with this. */
     260:	ec 85       	ldd	r30, Y+12	; 0x0c
     262:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:604
  temp -> CTRLB &= 0; //~(USART_RXEN_bm | USART_TXEN_bm);
     264:	86 81       	ldd	r24, Z+6	; 0x06
     266:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:605
  temp -> CTRLA &= 0; //~(USART_RXCIE_bm | USART_DREIE_bm | USART_TXCIE_bm);
     268:	85 81       	ldd	r24, Z+5	; 0x05
     26a:	15 82       	std	Z+5, r1	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:606
  temp -> STATUS =  USART_TXCIF_bm; // want to make sure no chanceofthat firing in error.
     26c:	80 e4       	ldi	r24, 0x40	; 64
     26e:	84 83       	std	Z+4, r24	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:608
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     270:	8a 89       	ldd	r24, Y+18	; 0x12
     272:	89 8b       	std	Y+17, r24	; 0x11
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:612

  // Note: Does not change output pins
  // though the datasheetsays turning the TX module sets it to input.
  _state = 0;
     274:	18 8a       	std	Y+16, r1	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:613
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <UartClass::_poll_tx_data_empty()>:
_ZN9UartClass19_poll_tx_data_emptyEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:352
    uartClass._tx_buffer_tail = txTail;
  }
#endif

// To invoke data empty "interrupt" via a call, use this method
void UartClass::_poll_tx_data_empty(void) {
     27c:	dc 01       	movw	r26, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:353
  if ((!(SREG & CPU_I_bm)) ||  CPUINT.STATUS) {
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	07 fe       	sbrs	r0, 7
     282:	04 c0       	rjmp	.+8      	; 0x28c <UartClass::_poll_tx_data_empty()+0x10>
     284:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <vtable for UartClass+0x7f60c4>
     288:	88 23       	and	r24, r24
     28a:	b1 f0       	breq	.+44     	; 0x2b8 <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:370
    // so we'll have to poll the "data register empty" flag ourselves.
    // If it is set, pretend an interrupt has happened and call the handler
    // to free up space for us.
    // -Spence 10/23/20
    // Invoke interrupt handler only if conditions data register is empty
    if ((*_hwserial_module).STATUS & USART_DREIF_bm) {
     28c:	1c 96       	adiw	r26, 0x0c	; 12
     28e:	ed 91       	ld	r30, X+
     290:	fc 91       	ld	r31, X
     292:	1d 97       	sbiw	r26, 0x0d	; 13
     294:	84 81       	ldd	r24, Z+4	; 0x04
     296:	85 ff       	sbrs	r24, 5
     298:	0f c0       	rjmp	.+30     	; 0x2b8 <_poll_dre_done>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:371
      if (_tx_buffer_head != _tx_buffer_tail) {
     29a:	53 96       	adiw	r26, 0x13	; 19
     29c:	9c 91       	ld	r25, X
     29e:	53 97       	sbiw	r26, 0x13	; 19
     2a0:	54 96       	adiw	r26, 0x14	; 20
     2a2:	8c 91       	ld	r24, X
     2a4:	98 17       	cp	r25, r24
     2a6:	21 f0       	breq	.+8      	; 0x2b0 <UartClass::_poll_tx_data_empty()+0x34>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:373
        // Buffer empty, so disable "data register empty" interrupt
        (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
     2a8:	85 81       	ldd	r24, Z+5	; 0x05
     2aa:	8f 7d       	andi	r24, 0xDF	; 223
     2ac:	85 83       	std	Z+5, r24	; 0x05
     2ae:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:397
#ifdef USART1
                ::"z"((uint16_t)thisSerial)
#else
                ::"z"(&Serial)
#endif
                : "r18","r19","r24","r25","r26","r27");
     2b0:	e3 e9       	ldi	r30, 0x93	; 147
     2b2:	fc e3       	ldi	r31, 0x3C	; 60
     2b4:	e8 94       	clt
     2b6:	78 c3       	rjmp	.+1776   	; 0x9a8 <_poll_dre>

000002b8 <_poll_dre_done>:
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:404
    }
  }
  // In case interrupts are enabled, the interrupt routine will be invoked by itself
  // Note that this currently does not handle cases where the DRE interruopt becomes
  // disabled, yet you are actually attempting to send. I don't think it can happen.
}
     2b8:	08 95       	ret

000002ba <UartClass::write(unsigned char)>:
_ZN9UartClass5writeEh():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:682
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }


  size_t UartClass::write(uint8_t c) {
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:683
    _state |= 1; // Record that we have written to serial since it was begun.
     2c4:	88 89       	ldd	r24, Y+16	; 0x10
     2c6:	98 2f       	mov	r25, r24
     2c8:	91 60       	ori	r25, 0x01	; 1
     2ca:	98 8b       	std	Y+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:688
    // If the buffer and the data register is empty, just write the byte
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
     2cc:	2b 89       	ldd	r18, Y+19	; 0x13
     2ce:	9c 89       	ldd	r25, Y+20	; 0x14
     2d0:	29 13       	cpse	r18, r25
     2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <UartClass::write(unsigned char)+0x2e>
     2d4:	ec 85       	ldd	r30, Y+12	; 0x0c
     2d6:	fd 85       	ldd	r31, Y+13	; 0x0d
     2d8:	94 81       	ldd	r25, Z+4	; 0x04
     2da:	95 ff       	sbrs	r25, 5
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <UartClass::write(unsigned char)+0x2e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:689
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     2de:	81 fd       	sbrc	r24, 1
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <UartClass::write(unsigned char)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:696
        ctrla &= ~USART_RXCIE_bm;
        ctrla |=  USART_TXCIE_bm;
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
        (*_hwserial_module).CTRLA = ctrla;
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     2e2:	80 e4       	ldi	r24, 0x40	; 64
     2e4:	84 83       	std	Z+4, r24	; 0x04
     2e6:	12 c0       	rjmp	.+36     	; 0x30c <UartClass::write(unsigned char)+0x52>
     2e8:	06 2f       	mov	r16, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:714
       * // that the interrupt handler is called in this situation
       * (*_hwserial_module).CTRLA &= (~USART_DREIE_bm);
       */
      return 1;
    }
    tx_buffer_index_t i = (_tx_buffer_head + 1) & (SERIAL_TX_BUFFER_SIZE - 1);  // % SERIAL_TX_BUFFER_SIZE;
     2ea:	1b 89       	ldd	r17, Y+19	; 0x13
     2ec:	1f 5f       	subi	r17, 0xFF	; 255
     2ee:	1f 71       	andi	r17, 0x1F	; 31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:718

    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
     2f0:	8c 89       	ldd	r24, Y+20	; 0x14
     2f2:	81 13       	cpse	r24, r17
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:719
      _poll_tx_data_empty();
     2f4:	15 c0       	rjmp	.+42     	; 0x320 <UartClass::write(unsigned char)+0x66>
     2f6:	ce 01       	movw	r24, r28
     2f8:	c1 df       	rcall	.-126    	; 0x27c <UartClass::_poll_tx_data_empty()>
     2fa:	fa cf       	rjmp	.-12     	; 0x2f0 <UartClass::write(unsigned char)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:690
    // to the data register and be done. This shortcut helps
    // significantly improve the effective data rate at high (>
    // 500kbit/s) bit rates, where interrupt overhead becomes a slowdown.
    if ((_tx_buffer_head == _tx_buffer_tail) && ((*_hwserial_module).STATUS & USART_DREIF_bm)) {
      if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
        uint8_t ctrla = (*_hwserial_module).CTRLA;
     2fc:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:691
        ctrla &= ~USART_RXCIE_bm;
     2fe:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:692
        ctrla |=  USART_TXCIE_bm;
     300:	80 64       	ori	r24, 0x40	; 64
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:693
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
     302:	90 e4       	ldi	r25, 0x40	; 64
     304:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:694
        (*_hwserial_module).CTRLA = ctrla;
     306:	ec 85       	ldd	r30, Y+12	; 0x0c
     308:	fd 85       	ldd	r31, Y+13	; 0x0d
     30a:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:699
      } else {
        (*_hwserial_module).STATUS = USART_TXCIF_bm;
      }
      // MUST clear TXCIF **before** writing new char, otherwise ill-timed interrupt can cause it to erase the flag after the new charchter has been sent!
      (*_hwserial_module).TXDATAL = c;
     30c:	ec 85       	ldd	r30, Y+12	; 0x0c
     30e:	fd 85       	ldd	r31, Y+13	; 0x0d
     310:	62 83       	std	Z+2, r22	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:734
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
    }
    return 1;
  }
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:721
    // If the output buffer is full, there's nothing we can do other than to
    // wait for the interrupt handler to empty it a bit (or emulate interrupts)
    while (i == _tx_buffer_tail) {
      _poll_tx_data_empty();
    }
    _tx_buffer[_tx_buffer_head] = c;
     320:	eb 89       	ldd	r30, Y+19	; 0x13
     322:	ec 0f       	add	r30, r28
     324:	fd 2f       	mov	r31, r29
     326:	f1 1d       	adc	r31, r1
     328:	eb 5a       	subi	r30, 0xAB	; 171
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	00 83       	st	Z, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:722
    _tx_buffer_head = i;
     32e:	1b 8b       	std	Y+19, r17	; 0x13
     330:	ec 85       	ldd	r30, Y+12	; 0x0c
     332:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:723
    if (_state & 2) { // in half duplex mode, we turn off RXC interrupt
     334:	88 89       	ldd	r24, Y+16	; 0x10
     336:	81 ff       	sbrs	r24, 1
     338:	09 c0       	rjmp	.+18     	; 0x34c <UartClass::write(unsigned char)+0x92>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:724
      uint8_t ctrla = (*_hwserial_module).CTRLA;
     33a:	85 81       	ldd	r24, Z+5	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:725
      ctrla &= ~USART_RXCIE_bm;
     33c:	8f 77       	andi	r24, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:726
      ctrla |= USART_TXCIE_bm | USART_DREIE_bm;
     33e:	80 66       	ori	r24, 0x60	; 96
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:727
      (*_hwserial_module).STATUS = USART_TXCIF_bm;
     340:	90 e4       	ldi	r25, 0x40	; 64
     342:	94 83       	std	Z+4, r25	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:728
      (*_hwserial_module).CTRLA = ctrla;
     344:	ec 85       	ldd	r30, Y+12	; 0x0c
     346:	fd 85       	ldd	r31, Y+13	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:731
    } else {
      // Enable "data register empty interrupt"
      (*_hwserial_module).CTRLA |= USART_DREIE_bm;
     348:	85 83       	std	Z+5, r24	; 0x05
     34a:	e3 cf       	rjmp	.-58     	; 0x312 <UartClass::write(unsigned char)+0x58>
     34c:	85 81       	ldd	r24, Z+5	; 0x05
     34e:	80 62       	ori	r24, 0x20	; 32
     350:	fb cf       	rjmp	.-10     	; 0x348 <UartClass::write(unsigned char)+0x8e>

00000352 <UartClass::flush()>:
_ZN9UartClass5flushEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:651
      return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    }
    return tail - head - 1;
  }

  void UartClass::flush() {
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:655
    // If we have never written a byte, no need to flush. This special
    // case is needed since there is no way to force the TXCIF (transmit
    // complete) bit to 1 during initialization
    if (!_state & 1) {
     358:	88 89       	ldd	r24, Y+16	; 0x10
     35a:	88 23       	and	r24, r24
     35c:	59 f0       	breq	.+22     	; 0x374 <UartClass::flush()+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:670
    // it's appropriate to use for applications where it has only very small benefits, and significant risk of surprising the user and causing
    // breakage of code that would otherwise work. Finally, the previous implementation didn't check if it was called from the current lvl1 ISR
    // and in that case flush(), and write() with full buffer would just straight up hang...

    // Spin until the data-register-empty-interrupt is disabled and TX complete interrupt flag is raised
    while (((*_hwserial_module).CTRLA & USART_DREIE_bm) || (!((*_hwserial_module).STATUS & USART_TXCIF_bm))) {
     35e:	ec 85       	ldd	r30, Y+12	; 0x0c
     360:	fd 85       	ldd	r31, Y+13	; 0x0d
     362:	85 81       	ldd	r24, Z+5	; 0x05
     364:	85 fd       	sbrc	r24, 5
     366:	03 c0       	rjmp	.+6      	; 0x36e <UartClass::flush()+0x1c>
     368:	84 81       	ldd	r24, Z+4	; 0x04
     36a:	86 fd       	sbrc	r24, 6
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:675

      // If interrupts are globally disabled or the and DR empty interrupt is disabled,
      // poll the "data register empty" interrupt flag to prevent deadlock

      _poll_tx_data_empty();
     36c:	03 c0       	rjmp	.+6      	; 0x374 <UartClass::flush()+0x22>
     36e:	ce 01       	movw	r24, r28
     370:	85 df       	rcall	.-246    	; 0x27c <UartClass::_poll_tx_data_empty()>
     372:	f5 cf       	rjmp	.-22     	; 0x35e <UartClass::flush()+0xc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:679
    }
    // When we get here, nothing is queued anymore (DREIE is disabled) and
    // the hardware finished transmission (TXCIF is set).
  }
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <micros>:
micros():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:316
    #else
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     37a:	8f b7       	in	r24, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:317
    cli(); /* INTERRUPTS OFF */
     37c:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:319
    #if defined(MILLIS_USE_TIMERA0)
      ticks = TCA0.SPLIT.HCNT;
     37e:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <vtable for UartClass+0x7f69d4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:320
      flags = TCA0.SPLIT.INTFLAGS;
     382:	90 91 0b 0a 	lds	r25, 0x0A0B	; 0x800a0b <vtable for UartClass+0x7f69be>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:336
     * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
     * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !(defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4))
      overflows = timer_overflow_count;
     386:	20 91 8c 3c 	lds	r18, 0x3C8C	; 0x803c8c <timer_overflow_count>
     38a:	30 91 8d 3c 	lds	r19, 0x3C8D	; 0x803c8d <timer_overflow_count+0x1>
     38e:	40 91 8e 3c 	lds	r20, 0x3C8E	; 0x803c8e <timer_overflow_count+0x2>
     392:	50 91 8f 3c 	lds	r21, 0x3C8F	; 0x803c8f <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:341
    #else
      overflows = timer_millis;
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     396:	8f bf       	out	0x3f, r24	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:345
    #if defined(MILLIS_USE_TIMERD0)
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
    #elif defined(MILLIS_USE_TIMERA0)
      ticks = (TIME_TRACKING_TIMER_PERIOD) - ticks;
     398:	8e ef       	ldi	r24, 0xFE	; 254
     39a:	86 1b       	sub	r24, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:346
      if ((flags & TCA_SPLIT_HUNF_bm) && (ticks < 0x4)) {
     39c:	91 ff       	sbrs	r25, 1
     39e:	06 c0       	rjmp	.+12     	; 0x3ac <micros+0x32>
     3a0:	84 30       	cpi	r24, 0x04	; 4
     3a2:	20 f4       	brcc	.+8      	; 0x3ac <micros+0x32>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:353
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
    #endif
        #if (defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4)) && !(F_CPU > 2000000UL)
          overflows +=2;
        #else
          overflows++;
     3a4:	2f 5f       	subi	r18, 0xFF	; 255
     3a6:	3f 4f       	sbci	r19, 0xFF	; 255
     3a8:	4f 4f       	sbci	r20, 0xFF	; 255
     3aa:	5f 4f       	sbci	r21, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:692
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                     + (ticks * 3 + ((uint16_t)(ticks >> 2) - (ticks >> 4)));
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	89 9f       	mul	r24, r25
     3b0:	f0 01       	movw	r30, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	98 2f       	mov	r25, r24
     3b6:	92 95       	swap	r25
     3b8:	9f 70       	andi	r25, 0x0F	; 15
     3ba:	e9 1b       	sub	r30, r25
     3bc:	f1 09       	sbc	r31, r1
     3be:	86 95       	lsr	r24
     3c0:	86 95       	lsr	r24
     3c2:	e8 0f       	add	r30, r24
     3c4:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:691
            + (ticks * 5 + ((uint16_t)(ticks >> 2) + (ticks >> 4) + (ticks >> 5)));
      #elif (F_CPU == 10000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 64)
        microseconds = (overflows * clockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
            + ((ticks << 3) - ((uint16_t)(ticks << 1) + (ticks >> 1) - (ticks >> 3)));
      #elif (F_CPU == 5000000UL && TIME_TRACKING_TICKS_PER_OVF == 255 && TIME_TRACKING_TIMER_DIVIDER == 16)
        microseconds = (overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
     3c6:	a0 e3       	ldi	r26, 0x30	; 48
     3c8:	b3 e0       	ldi	r27, 0x03	; 3
     3ca:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__muluhisi3>
     3ce:	6e 0f       	add	r22, r30
     3d0:	7f 1f       	adc	r23, r31
     3d2:	81 1d       	adc	r24, r1
     3d4:	91 1d       	adc	r25, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:702
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     3d6:	08 95       	ret

000003d8 <delay>:
delay():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:770
        _delay_ms(1);
      }
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
     3d8:	cf 92       	push	r12
     3da:	df 92       	push	r13
     3dc:	ef 92       	push	r14
     3de:	ff 92       	push	r15
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	6b 01       	movw	r12, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:771
    uint16_t start = (uint16_t) micros();
     3e6:	7c 01       	movw	r14, r24
     3e8:	c8 df       	rcall	.-112    	; 0x37a <micros>
     3ea:	eb 01       	movw	r28, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:772
    while (ms > 0) {
     3ec:	c1 14       	cp	r12, r1
     3ee:	d1 04       	cpc	r13, r1
     3f0:	e1 04       	cpc	r14, r1
     3f2:	f1 04       	cpc	r15, r1
     3f4:	41 f4       	brne	.+16     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
     3f6:	12 c0       	rjmp	.+36     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:774
      while (((uint16_t) micros() - start) >= 1000 && ms) {
        ms-- ;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	c8 1a       	sub	r12, r24
     3fc:	d1 08       	sbc	r13, r1
     3fe:	e1 08       	sbc	r14, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:775
        start += 1000;
     400:	f1 08       	sbc	r15, r1
     402:	c8 51       	subi	r28, 0x18	; 24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:773
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
    uint16_t start = (uint16_t) micros();
    while (ms > 0) {
      while (((uint16_t) micros() - start) >= 1000 && ms) {
     404:	dc 4f       	sbci	r29, 0xFC	; 252
     406:	b9 df       	rcall	.-142    	; 0x37a <micros>
     408:	6c 1b       	sub	r22, r28
     40a:	7d 0b       	sbc	r23, r29
     40c:	68 3e       	cpi	r22, 0xE8	; 232
     40e:	73 40       	sbci	r23, 0x03	; 3
     410:	68 f3       	brcs	.-38     	; 0x3ec <delay+0x14>
     412:	c1 14       	cp	r12, r1
     414:	d1 04       	cpc	r13, r1
     416:	e1 04       	cpc	r14, r1
     418:	f1 04       	cpc	r15, r1
     41a:	71 f7       	brne	.-36     	; 0x3f8 <delay+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:778
        ms-- ;
        start += 1000;
      }
    }
  }
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <millis>:
millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:248


unsigned long millis() {
  // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
  unsigned long m;
  uint8_t oldSREG = SREG;
     42a:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:249
  cli();
     42c:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:300
      "adc %D0, %D1"    "\n\t"
      : "+r" (m), "+r" (temp), "+d" (cnt)
      );
    */
  #else
    m = timer_millis;
     42e:	60 91 88 3c 	lds	r22, 0x3C88	; 0x803c88 <timer_millis>
     432:	70 91 89 3c 	lds	r23, 0x3C89	; 0x803c89 <timer_millis+0x1>
     436:	80 91 8a 3c 	lds	r24, 0x3C8A	; 0x803c8a <timer_millis+0x2>
     43a:	90 91 8b 3c 	lds	r25, 0x3C8B	; 0x803c8b <timer_millis+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:301
    SREG = oldSREG;
     43e:	2f bf       	out	0x3f, r18	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:304
  #endif
  return m;
}
     440:	08 95       	ret

00000442 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     442:	af 92       	push	r10
     444:	bf 92       	push	r11
     446:	cf 92       	push	r12
     448:	df 92       	push	r13
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	6c 01       	movw	r12, r24
     458:	7b 01       	movw	r14, r22
     45a:	8b 01       	movw	r16, r22
     45c:	04 0f       	add	r16, r20
     45e:	15 1f       	adc	r17, r21
     460:	eb 01       	movw	r28, r22
     462:	5e 01       	movw	r10, r28
     464:	ae 18       	sub	r10, r14
     466:	bf 08       	sbc	r11, r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     468:	c0 17       	cp	r28, r16
     46a:	d1 07       	cpc	r29, r17
     46c:	59 f0       	breq	.+22     	; 0x484 <Print::write(unsigned char const*, unsigned int)+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:32
    if (write(*buffer++)) {
     46e:	69 91       	ld	r22, Y+
     470:	d6 01       	movw	r26, r12
     472:	ed 91       	ld	r30, X+
     474:	fc 91       	ld	r31, X
     476:	01 90       	ld	r0, Z+
     478:	f0 81       	ld	r31, Z
     47a:	e0 2d       	mov	r30, r0
     47c:	c6 01       	movw	r24, r12
     47e:	09 95       	icall
     480:	89 2b       	or	r24, r25
     482:	79 f7       	brne	.-34     	; 0x462 <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     484:	c5 01       	movw	r24, r10
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	df 90       	pop	r13
     494:	cf 90       	pop	r12
     496:	bf 90       	pop	r11
     498:	af 90       	pop	r10
     49a:	08 95       	ret

0000049c <UartClass::operator bool()>:
_ZN9UartClasscvbEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.h:293
    inline   size_t write(unsigned int n)   {return write((uint8_t)n);}
    inline   size_t write(int n)            {return write((uint8_t)n);}
    using Print::write; // pull in write(str) and write(buf, size) from Print
    explicit operator bool() {
      return true;
    }
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	08 95       	ret

000004a0 <UartClass::begin(unsigned long)>:
_ZN9UartClass5beginEm():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.h:257

  public:
    inline             UartClass(volatile USART_t *hwserial_module, uint8_t module_number, uint8_t default_pinset);
    bool                    pins(uint8_t tx, uint8_t rx);
    bool                    swap(uint8_t mux_level = 1);
    void                   begin(uint32_t baud) {begin(baud, SERIAL_8N1);}
     4a0:	dc 01       	movw	r26, r24
     4a2:	ed 91       	ld	r30, X+
     4a4:	fc 91       	ld	r31, X
     4a6:	00 88       	ldd	r0, Z+16	; 0x10
     4a8:	f1 89       	ldd	r31, Z+17	; 0x11
     4aa:	e0 2d       	mov	r30, r0
     4ac:	23 e0       	ldi	r18, 0x03	; 3
     4ae:	30 e0       	ldi	r19, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:56
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) {
        return 0;
      }
      return write((const uint8_t *)str, strlen(str));
     4b0:	09 94       	ijmp

000004b2 <Print::println() [clone .constprop.28]>:
_ZN5Print7printlnEv.constprop.28():
     4b2:	42 e0       	ldi	r20, 0x02	; 2
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	67 e6       	ldi	r22, 0x67	; 103
     4b8:	70 ea       	ldi	r23, 0xA0	; 160
     4ba:	83 e9       	ldi	r24, 0x93	; 147
     4bc:	9c e3       	ldi	r25, 0x3C	; 60
     4be:	c1 cf       	rjmp	.-126    	; 0x442 <Print::write(unsigned char const*, unsigned int)>

000004c0 <Print::println(char const*) [clone .constprop.26]>:
_ZN5Print7printlnEPKc.constprop.26():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:133
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[]) {
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
write():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:56
     4c4:	fc 01       	movw	r30, r24
     4c6:	01 90       	ld	r0, Z+
     4c8:	00 20       	and	r0, r0
     4ca:	e9 f7       	brne	.-6      	; 0x4c6 <Print::println(char const*) [clone .constprop.26]+0x6>
     4cc:	31 97       	sbiw	r30, 0x01	; 1
     4ce:	af 01       	movw	r20, r30
     4d0:	48 1b       	sub	r20, r24
     4d2:	59 0b       	sbc	r21, r25
     4d4:	bc 01       	movw	r22, r24
     4d6:	83 e9       	ldi	r24, 0x93	; 147
     4d8:	9c e3       	ldi	r25, 0x3C	; 60
     4da:	b3 df       	rcall	.-154    	; 0x442 <Print::write(unsigned char const*, unsigned int)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:135
  size_t n = print(c);
  n += println();
     4dc:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc.constprop.26():
     4de:	e9 df       	rcall	.-46     	; 0x4b2 <Print::println() [clone .constprop.28]>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:137
  return n;
}
     4e0:	8c 0f       	add	r24, r28
     4e2:	9d 1f       	adc	r25, r29
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:127

size_t Print::println(void) {
  return write("\r\n");
}

size_t Print::println(const String &s) {
     4e8:	08 95       	ret

000004ea <Print::println(String const&) [clone .constprop.21]>:
_ZN5Print7printlnERK6String.constprop.21():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.h:60
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
write():
     4ee:	fc 01       	movw	r30, r24
     4f0:	44 81       	ldd	r20, Z+4	; 0x04
     4f2:	55 81       	ldd	r21, Z+5	; 0x05
     4f4:	60 81       	ld	r22, Z
     4f6:	71 81       	ldd	r23, Z+1	; 0x01
     4f8:	83 e9       	ldi	r24, 0x93	; 147
     4fa:	9c e3       	ldi	r25, 0x3C	; 60
     4fc:	a2 df       	rcall	.-188    	; 0x442 <Print::write(unsigned char const*, unsigned int)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:129
  size_t n = print(s);
  n += println();
     4fe:	ec 01       	movw	r28, r24
_ZN5Print7printlnERK6String.constprop.21():
     500:	d8 df       	rcall	.-80     	; 0x4b2 <Print::println() [clone .constprop.28]>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/Print.cpp:131
  return n;
}
     502:	8c 0f       	add	r24, r28
     504:	9d 1f       	adc	r25, r29
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <String::invalidate()>:
_ZN6String10invalidateEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:127
  buffer = NULL;
  capacity = 0;
  len = 0;
}

void String::invalidate(void) {
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:128
  if (buffer) {
     512:	88 81       	ld	r24, Y
     514:	99 81       	ldd	r25, Y+1	; 0x01
     516:	00 97       	sbiw	r24, 0x00	; 0
     518:	11 f0       	breq	.+4      	; 0x51e <String::invalidate()+0x12>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:129
    free(buffer);
     51a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <free>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:131
  }
  buffer = NULL;
     51e:	18 82       	st	Y, r1
     520:	19 82       	std	Y+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:132
  capacity = len = 0;
     522:	1c 82       	std	Y+4, r1	; 0x04
     524:	1d 82       	std	Y+5, r1	; 0x05
     526:	1a 82       	std	Y+2, r1	; 0x02
     528:	1b 82       	std	Y+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:133
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <String::~String()>:
_ZN6StringD2Ev():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:114
  char buf[33];
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String() {
  free(buffer);
     530:	fc 01       	movw	r30, r24
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <free>

0000053a <pinMode>:
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     53a:	86 31       	cpi	r24, 0x16	; 22
     53c:	f0 f4       	brcc	.+60     	; 0x57a <pinMode+0x40>
check_valid_digital_pin():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:32
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin))
     53e:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:136
  return port << 1;
}
void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
     540:	fc 01       	movw	r30, r24
     542:	e1 5d       	subi	r30, 0xD1	; 209
     544:	ff 45       	sbci	r31, 0x5F	; 95
     546:	20 81       	ld	r18, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:137
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
     548:	2f 3f       	cpi	r18, 0xFF	; 255
     54a:	b9 f0       	breq	.+46     	; 0x57a <pinMode+0x40>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:140
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     54c:	fc 01       	movw	r30, r24
     54e:	e7 5e       	subi	r30, 0xE7	; 231
     550:	ff 45       	sbci	r31, 0x5F	; 95
portToPortBaseOffset():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:130
  SREG = oldSREG; // re-enable interrupts
}

static inline uint8_t portToPortBaseOffset(uint8_t port);
static inline uint8_t portToPortBaseOffset(uint8_t port) {
  _SWAP(port);
     552:	e0 81       	ld	r30, Z
     554:	e2 95       	swap	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:131
  return port << 1;
     556:	ee 0f       	add	r30, r30
pinMode():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:140
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if ((bit_mask == NOT_A_PIN) || (mode > 3)) {
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	f4 60       	ori	r31, 0x04	; 4
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:141
  if (mode & 0x01) {
     55c:	61 30       	cpi	r22, 0x01	; 1
     55e:	71 f4       	brne	.+28     	; 0x57c <pinMode+0x42>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:143
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
     560:	21 83       	std	Z+1, r18	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:154
    } else if (mode == 0) {
      *(port_base + 6) = bit_mask;
    }
    */
  }
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
     562:	8d 5f       	subi	r24, 0xFD	; 253
     564:	9f 45       	sbci	r25, 0x5F	; 95
     566:	dc 01       	movw	r26, r24
     568:	8c 91       	ld	r24, X
     56a:	80 61       	ori	r24, 0x10	; 16
     56c:	e8 0f       	add	r30, r24
     56e:	f1 1d       	adc	r31, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:156
  bit_mask = *port_base;
  if (mode & 2) {
     570:	80 81       	ld	r24, Z
     572:	61 30       	cpi	r22, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:161
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
  }
  *port_base = bit_mask;
     574:	29 f0       	breq	.+10     	; 0x580 <pinMode+0x46>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:162
}
     576:	88 60       	ori	r24, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:145
  volatile uint8_t * port_base = ((volatile uint8_t *) (uint16_t)(0x0400 | portToPortBaseOffset(digitalPinToPort(pin))));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else {
    *(port_base + 2) = bit_mask;
     578:	80 83       	st	Z, r24
     57a:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:159
  port_base +=(uint8_t) digitalPinToBitPosition(pin) | (uint8_t) 0x10;
  bit_mask = *port_base;
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
     57c:	22 83       	std	Z+2, r18	; 0x02
     57e:	f1 cf       	rjmp	.-30     	; 0x562 <pinMode+0x28>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:19
{
}

void TinyMegaI2CMaster::init()
{
  pinMode(PIN_WIRE_SDA, INPUT_PULLUP);
     580:	87 7f       	andi	r24, 0xF7	; 247
     582:	fa cf       	rjmp	.-12     	; 0x578 <pinMode+0x3e>

00000584 <TinyMegaI2CMaster::init() [clone .constprop.17]>:
_ZN17TinyMegaI2CMaster4initEv.constprop.17():
     584:	62 e0       	ldi	r22, 0x02	; 2
     586:	8a e0       	ldi	r24, 0x0A	; 10
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:20
  pinMode(PIN_WIRE_SCL, INPUT_PULLUP);
     588:	d8 df       	rcall	.-80     	; 0x53a <pinMode>
     58a:	62 e0       	ldi	r22, 0x02	; 2
     58c:	8b e0       	ldi	r24, 0x0B	; 11
     58e:	d5 df       	rcall	.-86     	; 0x53a <pinMode>
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:27
  // For ATTINY-1607-MFR, Setting SDA SCL pins with DPM would be
  // PORTB.PIN0CTRL = PORT_PULLUPEN_bm; // SCL
  // PORTB.PIN1CTRL = PORT_PULLUPEN_bm; // SDA

  uint32_t baud = ((F_CPU / FREQUENCY) - (((F_CPU * T_RISE) / 1000) / 1000) / 1000 - 10) / 2;
  TWI0.MBAUD = (uint8_t)baud;
     590:	e0 e1       	ldi	r30, 0x10	; 16
     592:	f8 e0       	ldi	r31, 0x08	; 8
     594:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:28
  TWI0.MCTRLA = TWI_ENABLE_bm; // Enable as master, no interrupts
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	83 83       	std	Z+3, r24	; 0x03
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:29
  TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc;
     59a:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Documents/Arduino/libraries/TinyMegaI2C/src/TinyMegaI2C.cpp:30
}
     59c:	08 95       	ret

0000059e <UartClass::begin(unsigned long, unsigned int)>:
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:470
    _pin_set = 0;
  }
  return false;
}

void UartClass::begin(unsigned long baud, uint16_t options) {
     59e:	8f 92       	push	r8
     5a0:	9f 92       	push	r9
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	8c 01       	movw	r16, r24
     5b4:	4a 01       	movw	r8, r20
     5b6:	5b 01       	movw	r10, r22
     5b8:	e9 01       	movw	r28, r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:473
  // Make sure no transmissions are ongoing and USART is disabled in case begin() is called by accident
  // without first calling end()
  if (_state & 1) {
     5ba:	dc 01       	movw	r26, r24
     5bc:	50 96       	adiw	r26, 0x10	; 16
     5be:	8c 91       	ld	r24, X
     5c0:	50 97       	sbiw	r26, 0x10	; 16
     5c2:	80 ff       	sbrs	r24, 0
     5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <UartClass::begin(unsigned long, unsigned int)+0x36>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:474
    this->end();
     5c6:	ed 91       	ld	r30, X+
     5c8:	fc 91       	ld	r31, X
     5ca:	02 88       	ldd	r0, Z+18	; 0x12
     5cc:	f3 89       	ldd	r31, Z+19	; 0x13
     5ce:	e0 2d       	mov	r30, r0
     5d0:	c8 01       	movw	r24, r16
     5d2:	09 95       	icall
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:478
  }

  uint8_t ctrlc = (uint8_t) options;
  if (ctrlc == 0) {                         // see if they passed anything in low byte or SERIAL_CONFIG_VALID.
     5d4:	c1 11       	cpse	r28, r1
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <UartClass::begin(unsigned long, unsigned int)+0x3c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:479
    ctrlc = (uint8_t)SERIAL_8N1;            // low byte of 0 could mean they want SERIAL_5N1. Or that they thought they'd
     5d8:	c3 e0       	ldi	r28, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:481
  }
  ctrlc &= ~0x04; // Now unset that 0x04 bit if it's set, because none of the values with it set are supported. We use that to smuggle in a "this constant was specified" for 5N1
     5da:	ec 2e       	mov	r14, r28
     5dc:	e8 94       	clt
     5de:	e2 f8       	bld	r14, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:482
  uint8_t ctrla = (uint8_t) (options >> 8);// CTRLA will get the remains of the options high byte.
     5e0:	fd 2e       	mov	r15, r29
     5e2:	cd 2f       	mov	r28, r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:484
  uint16_t baud_setting = 0;                // at this point it should be able to reuse those 2 registers that it received options in!
  uint8_t   ctrlb = (~ctrla & 0xC0);        // Top two bits (TXEN RXEN), inverted so they match he sense in the registers.
     5e4:	d0 95       	com	r29
     5e6:	d0 7c       	andi	r29, 0xC0	; 192
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:485
  if (baud   > F_CPU / 16) {            // if this baud is too fast for non-U2X
     5e8:	b5 eb       	ldi	r27, 0xB5	; 181
     5ea:	8b 16       	cp	r8, r27
     5ec:	b4 ec       	ldi	r27, 0xC4	; 196
     5ee:	9b 06       	cpc	r9, r27
     5f0:	b4 e0       	ldi	r27, 0x04	; 4
     5f2:	ab 06       	cpc	r10, r27
     5f4:	b1 04       	cpc	r11, r1
     5f6:	28 f0       	brcs	.+10     	; 0x602 <UartClass::begin(unsigned long, unsigned int)+0x64>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:486
        ctrlb   |= USART_RXMODE0_bm;        // set the U2X bit in what will become CTRLB
     5f8:	d2 60       	ori	r29, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:487
        baud   >>= 1;                       // And lower the baud rate by haldf
     5fa:	b6 94       	lsr	r11
     5fc:	a7 94       	ror	r10
     5fe:	97 94       	ror	r9
     600:	87 94       	ror	r8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:489
  }
  baud_setting = (((4 * F_CPU) / baud));  // And now the registers that baud was passed in are done.
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	7d e2       	ldi	r23, 0x2D	; 45
     606:	81 e3       	ldi	r24, 0x31	; 49
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	a5 01       	movw	r20, r10
     60c:	94 01       	movw	r18, r8
     60e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__udivmodsi4>
     612:	20 34       	cpi	r18, 0x40	; 64
     614:	31 05       	cpc	r19, r1
     616:	10 f4       	brcc	.+4      	; 0x61c <UartClass::begin(unsigned long, unsigned int)+0x7e>
     618:	20 e4       	ldi	r18, 0x40	; 64
     61a:	30 e0       	ldi	r19, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:495
  if (baud_setting < 64)                      // so set to the maximum baud rate setting.
    baud_setting= 64;       // set the U2X bit in what will become CTRLB
  //} else if (baud < (F_CPU / 16800)) {      // Baud rate is too low
  //  baud_setting = 65535;                   // minimum baud rate.'
                                            // Baud setting done now we do the other options not in CTRLC;
  if (ctrla & 0x04) {                       // is ODME option set?
     61c:	f2 fc       	sbrc	r15, 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:496
    ctrlb |= USART_ODME_bm;                 // set the bit in what will become CTRLB
     61e:	d8 60       	ori	r29, 0x08	; 8
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:498
  }
  ctrla &= 0x2B;                            // Only LBME and RS485 (both of them); will get written to CTRLA, but we leave the event bit.
     620:	8c 2f       	mov	r24, r28
     622:	8b 72       	andi	r24, 0x2B	; 43
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:499
  if (ctrlb & USART_RXEN_bm) {              // if RX is to be enabled
     624:	d7 fd       	sbrc	r29, 7
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:500
    ctrla  |= USART_RXCIE_bm;               // we will want to enable the ISR.
     626:	80 68       	ori	r24, 0x80	; 128
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:502
  }
  uint8_t setpinmask = ctrlb & 0xC8;        // ODME in bit 3, TX and RX enabled in bit 6, 7
     628:	cd 2f       	mov	r28, r29
     62a:	c8 7c       	andi	r28, 0xC8	; 200
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:503
  if ((ctrla & USART_LBME_bm) && (setpinmask == 0xC8)) { // if it's open-drain and loopback, need to set state bit 2.
     62c:	83 ff       	sbrs	r24, 3
     62e:	07 c0       	rjmp	.+14     	; 0x63e <UartClass::begin(unsigned long, unsigned int)+0xa0>
     630:	c8 3c       	cpi	r28, 0xC8	; 200
     632:	29 f4       	brne	.+10     	; 0x63e <UartClass::begin(unsigned long, unsigned int)+0xa0>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:504
    _state                 |= 2;            // since that changes some behavior (RXC disabled while sending) // Now we should be able to ST _state.
     634:	f8 01       	movw	r30, r16
     636:	90 89       	ldd	r25, Z+16	; 0x10
     638:	92 60       	ori	r25, 0x02	; 2
     63a:	90 8b       	std	Z+16, r25	; 0x10
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:505
    setpinmask             |= 0x10;         // this tells _set_pins not to disturb the configuration on the RX pin.
     63c:	c8 ed       	ldi	r28, 0xD8	; 216
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:507
  }
  if (ctrla & USART_RS485_bm) {             // RS485 mode recorded here too... because we need to set
     63e:	80 fd       	sbrc	r24, 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:508
    setpinmask             |= 0x01;         // set pin output if we need to do that. Datasheet isn't clear
     640:	c1 60       	ori	r28, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:510
  }
  uint8_t oldSREG = SREG;
     642:	ff b6       	in	r15, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:511
  cli();
     644:	f8 94       	cli
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:512
  volatile USART_t* MyUSART = _hwserial_module;
     646:	d8 01       	movw	r26, r16
     648:	1c 96       	adiw	r26, 0x0c	; 12
     64a:	ed 91       	ld	r30, X+
     64c:	fc 91       	ld	r31, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:513
  (*MyUSART).CTRLB          = 0;            // gotta disable first - some things are enable-locked.
     64e:	16 82       	std	Z+6, r1	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:514
  (*MyUSART).CTRLC          = ctrlc;        // No reason not to set first.
     650:	e7 82       	std	Z+7, r14	; 0x07
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:515
  (*MyUSART).BAUD           = baud_setting; // Wish I could have set it long ago
     652:	20 87       	std	Z+8, r18	; 0x08
     654:	31 87       	std	Z+9, r19	; 0x09
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:516
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
     656:	85 ff       	sbrs	r24, 5
     658:	3f c0       	rjmp	.+126    	; 0x6d8 <UartClass::begin(unsigned long, unsigned int)+0x13a>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:517
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
     65a:	cf 77       	andi	r28, 0x7F	; 127
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:518
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	94 87       	std	Z+12, r25	; 0x0c
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:519
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
     660:	9f ef       	ldi	r25, 0xFF	; 255
     662:	95 87       	std	Z+13, r25	; 0x0d
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:523
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
     664:	8f 7d       	andi	r24, 0xDF	; 223
     666:	85 83       	std	Z+5, r24	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:524
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
     668:	d6 83       	std	Z+6, r29	; 0x06
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:525
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
     66a:	f8 01       	movw	r30, r16
     66c:	27 85       	ldd	r18, Z+15	; 0x0f
     66e:	86 85       	ldd	r24, Z+14	; 0x0e
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:538
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     670:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <vtable for UartClass+0x7f61b4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:537
    uint8_t muxregval    = PORTMUX.USARTROUTEA;
    muxregval           &= ~(mod_nbr ? 0x0C : 0x03);
    PORTMUX.USARTROUTEA  = (muxregval) | (mux_set << (mod_nbr ? 2 : 0)); // shift muxset left if needed.

  #else
    if (mux_set) {
     674:	22 23       	and	r18, r18
     676:	91 f1       	breq	.+100    	; 0x6dc <UartClass::begin(unsigned long, unsigned int)+0x13e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:538
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
     678:	91 60       	ori	r25, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:540
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     67a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <vtable for UartClass+0x7f61b4>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:548
  #if MEGATINYCORE_SERIES == 2
    if (mux_set == 3) { // not connected to pins...
      return;           // so we are done!
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
     67e:	82 0f       	add	r24, r18
     680:	99 27       	eor	r25, r25
     682:	99 1f       	adc	r25, r25
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	8c 01       	movw	r16, r24
     68e:	0b 5b       	subi	r16, 0xBB	; 187
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:549
  if ((enmask & 0x40 && !(enmask & 0x08))) {
     690:	1f 45       	sbci	r17, 0x5F	; 95
     692:	c6 ff       	sbrs	r28, 6
     694:	25 c0       	rjmp	.+74     	; 0x6e0 <UartClass::begin(unsigned long, unsigned int)+0x142>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:550
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
     696:	c3 fd       	sbrc	r28, 3
     698:	23 c0       	rjmp	.+70     	; 0x6e0 <UartClass::begin(unsigned long, unsigned int)+0x142>
     69a:	61 e0       	ldi	r22, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:553
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     69c:	d8 01       	movw	r26, r16
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:555
  }
  if (enmask & 0x80 && !(enmask & 0x10)) {
     69e:	8c 91       	ld	r24, X
     6a0:	4c df       	rcall	.-360    	; 0x53a <pinMode>
     6a2:	c7 ff       	sbrs	r28, 7
     6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <UartClass::begin(unsigned long, unsigned int)+0x116>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:557
    // Likewise if RX is enabled, unless loopback mode is too (in which case we caught it above, it should be pulled up
    pinMode(muxrow[1], INPUT_PULLUP);
     6a6:	c4 fd       	sbrc	r28, 4
     6a8:	05 c0       	rjmp	.+10     	; 0x6b4 <UartClass::begin(unsigned long, unsigned int)+0x116>
     6aa:	62 e0       	ldi	r22, 0x02	; 2
     6ac:	d8 01       	movw	r26, r16
     6ae:	11 96       	adiw	r26, 0x01	; 1
     6b0:	8c 91       	ld	r24, X
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:559
  }
  if (enmask & 0x01) { // finally if RS485 mode is enabled, we make XDIR output, otherwise it can't drive the pin.
     6b2:	43 df       	rcall	.-378    	; 0x53a <pinMode>
     6b4:	c0 ff       	sbrs	r28, 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:560
    pinMode(muxrow[3], OUTPUT); // make XDIR output.
     6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <UartClass::begin(unsigned long, unsigned int)+0x122>
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	f8 01       	movw	r30, r16
     6bc:	83 81       	ldd	r24, Z+3	; 0x03
     6be:	3d df       	rcall	.-390    	; 0x53a <pinMode>
_ZN9UartClass5beginEmj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:526
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
  }                                         // finally strip out the SERIAL_EVENT_RX bit which is in the DREIE
  (*MyUSART).CTRLA          = ctrla & 0xDF; // position, which we never set in begin.
  (*MyUSART).CTRLB          = ctrlb;        // Set the all important CTRLB...
  _set_pins(_module_number, _pin_set, setpinmask); // set up the pin(s)
  SREG = oldSREG;                             // re-enable interrupts, and we're done.
     6c0:	ff be       	out	0x3f, r15	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:527
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	bf 90       	pop	r11
     6d0:	af 90       	pop	r10
     6d2:	9f 90       	pop	r9
     6d4:	8f 90       	pop	r8
     6d6:	08 95       	ret
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:521
  if (ctrla & 0x20) {                       // Now we have to do a bit of work
    setpinmask             &= 0x7F;         // Remove the RX pin in this case because we get the input from elsewhere.
    (*MyUSART).EVCTRL       = 1;            // enable event input - not clear from datasheet what's needed to
    (*MyUSART).TXPLCTRL     = 0xFF;         // Disable pulse length encoding.
  } else {
    (*MyUSART).EVCTRL       = 0;            // This needs to be turned off when not in use.
     6d8:	14 86       	std	Z+12, r1	; 0x0c
     6da:	c4 cf       	rjmp	.-120    	; 0x664 <UartClass::begin(unsigned long, unsigned int)+0xc6>
_set_pins():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:540

  #else
    if (mux_set) {
      PORTMUX.CTRLB       |= 0x01; // for 0/1-series this can only be zero or 1
    } else {
      PORTMUX.CTRLB       &= 0xFE;
     6dc:	9e 7f       	andi	r25, 0xFE	; 254
     6de:	cd cf       	rjmp	.-102    	; 0x67a <UartClass::begin(unsigned long, unsigned int)+0xdc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:551
    }
  #endif
  const uint8_t* muxrow = &(_usart_pins[mod_nbr + mux_set][0]);
  if ((enmask & 0x40 && !(enmask & 0x08))) {
    pinMode(muxrow[0], OUTPUT); // If and only if TX is enabled and open drain isn't should the TX pin be output.
  } else if (enmask & 0x50) { // if it is enabled but is in open drain mode, or is disabled, but loopback is enabled
     6e0:	2c 2f       	mov	r18, r28
     6e2:	20 75       	andi	r18, 0x50	; 80
     6e4:	f1 f2       	breq	.-68     	; 0x6a2 <UartClass::begin(unsigned long, unsigned int)+0x104>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:553
    // TX should be INPUT_PULLUP.
    pinMode(muxrow[0], INPUT_PULLUP);
     6e6:	8b 5b       	subi	r24, 0xBB	; 187
     6e8:	9f 45       	sbci	r25, 0x5F	; 95
     6ea:	62 e0       	ldi	r22, 0x02	; 2
     6ec:	fc 01       	movw	r30, r24
     6ee:	80 81       	ld	r24, Z
     6f0:	d7 cf       	rjmp	.-82     	; 0x6a0 <UartClass::begin(unsigned long, unsigned int)+0x102>

000006f2 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:135
  }
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size) {
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:136
  if (buffer && capacity >= size) {
     6fc:	88 81       	ld	r24, Y
     6fe:	99 81       	ldd	r25, Y+1	; 0x01
     700:	00 97       	sbiw	r24, 0x00	; 0
     702:	59 f0       	breq	.+22     	; 0x71a <String::reserve(unsigned int)+0x28>
     704:	2a 81       	ldd	r18, Y+2	; 0x02
     706:	3b 81       	ldd	r19, Y+3	; 0x03
     708:	26 17       	cp	r18, r22
     70a:	37 07       	cpc	r19, r23
     70c:	30 f0       	brcs	.+12     	; 0x71a <String::reserve(unsigned int)+0x28>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:141
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
      buffer[0] = 0;
     70e:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:146
    }
    return 1;
  }
  return 0;
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret
     71a:	8b 01       	movw	r16, r22
changeBuffer():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:149

unsigned char String::changeBuffer(unsigned int maxStrLen) {
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
     71c:	6f 5f       	subi	r22, 0xFF	; 255
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <realloc>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:150
  if (newbuffer) {
     724:	00 97       	sbiw	r24, 0x00	; 0
     726:	59 f0       	breq	.+22     	; 0x73e <String::reserve(unsigned int)+0x4c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:151
    buffer = newbuffer;
     728:	88 83       	st	Y, r24
     72a:	99 83       	std	Y+1, r25	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:152
    capacity = maxStrLen;
     72c:	0a 83       	std	Y+2, r16	; 0x02
     72e:	1b 83       	std	Y+3, r17	; 0x03
_ZN6String7reserveEj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:140
unsigned char String::reserve(unsigned int size) {
  if (buffer && capacity >= size) {
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
     730:	2c 81       	ldd	r18, Y+4	; 0x04
     732:	3d 81       	ldd	r19, Y+5	; 0x05
     734:	23 2b       	or	r18, r19
     736:	59 f7       	brne	.-42     	; 0x70e <String::reserve(unsigned int)+0x1c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:141
      buffer[0] = 0;
     738:	fc 01       	movw	r30, r24
     73a:	10 82       	st	Z, r1
     73c:	e8 cf       	rjmp	.-48     	; 0x70e <String::reserve(unsigned int)+0x1c>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:145
    }
    return 1;
  }
  return 0;
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	e7 cf       	rjmp	.-50     	; 0x710 <String::reserve(unsigned int)+0x1e>

00000742 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:261

unsigned char String::concat(const String &s) {
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length) {
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:263
  unsigned int newlen = len + length;
  if (!cstr) {
     74e:	61 15       	cp	r22, r1
     750:	71 05       	cpc	r23, r1
     752:	41 f4       	brne	.+16     	; 0x764 <String::concat(char const*, unsigned int)+0x22>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:264
    return 0;
     754:	80 e0       	ldi	r24, 0x00	; 0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:275
    return 0;
  }
  strcpy(buffer + len, cstr);
  len = newlen;
  return 1;
}
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:266
unsigned char String::concat(const char *cstr, unsigned int length) {
  unsigned int newlen = len + length;
  if (!cstr) {
    return 0;
  }
  if (length == 0) {
     762:	08 95       	ret
     764:	41 15       	cp	r20, r1
     766:	51 05       	cpc	r21, r1
     768:	a9 f0       	breq	.+42     	; 0x794 <String::concat(char const*, unsigned int)+0x52>
     76a:	7b 01       	movw	r14, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:262
unsigned char String::concat(const String &s) {
  return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length) {
  unsigned int newlen = len + length;
     76c:	ec 01       	movw	r28, r24
     76e:	0c 81       	ldd	r16, Y+4	; 0x04
     770:	1d 81       	ldd	r17, Y+5	; 0x05
     772:	04 0f       	add	r16, r20
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:269
    return 0;
  }
  if (length == 0) {
    return 1;
  }
  if (!reserve(newlen)) {
     774:	15 1f       	adc	r17, r21
     776:	b8 01       	movw	r22, r16
     778:	bc df       	rcall	.-136    	; 0x6f2 <String::reserve(unsigned int)>
     77a:	88 23       	and	r24, r24
     77c:	59 f3       	breq	.-42     	; 0x754 <String::concat(char const*, unsigned int)+0x12>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:272
    return 0;
  }
  strcpy(buffer + len, cstr);
     77e:	28 81       	ld	r18, Y
     780:	39 81       	ldd	r19, Y+1	; 0x01
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	9d 81       	ldd	r25, Y+5	; 0x05
     786:	b7 01       	movw	r22, r14
     788:	82 0f       	add	r24, r18
     78a:	93 1f       	adc	r25, r19
     78c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <strcpy>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:267
  unsigned int newlen = len + length;
  if (!cstr) {
    return 0;
  }
  if (length == 0) {
    return 1;
     790:	0c 83       	std	Y+4, r16	; 0x04
     792:	1d 83       	std	Y+5, r17	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:362
    a.invalidate();
  }
  return a;
}

StringSumHelper &operator + (const StringSumHelper &lhs, const char *cstr) {
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	df cf       	rjmp	.-66     	; 0x756 <String::concat(char const*, unsigned int)+0x14>

00000798 <operator+(StringSumHelper const&, char const*)>:
_ZplRK15StringSumHelperPKc():
     798:	cf 93       	push	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:364
  StringSumHelper &a = const_cast<StringSumHelper &>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) {
     79a:	df 93       	push	r29
     79c:	ec 01       	movw	r28, r24
     79e:	fb 01       	movw	r30, r22
     7a0:	01 90       	ld	r0, Z+
     7a2:	00 20       	and	r0, r0
     7a4:	e9 f7       	brne	.-6      	; 0x7a0 <operator+(StringSumHelper const&, char const*)+0x8>
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	af 01       	movw	r20, r30
     7aa:	46 1b       	sub	r20, r22
     7ac:	57 0b       	sbc	r21, r23
     7ae:	c9 df       	rcall	.-110    	; 0x742 <String::concat(char const*, unsigned int)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:365
    a.invalidate();
     7b0:	81 11       	cpse	r24, r1
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <operator+(StringSumHelper const&, char const*)+0x20>
     7b4:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:368
  }
  return a;
}
     7b6:	aa de       	rcall	.-684    	; 0x50c <String::invalidate()>
     7b8:	ce 01       	movw	r24, r28
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:354

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper &operator + (const StringSumHelper &lhs, const String &rhs) {
     7be:	08 95       	ret

000007c0 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:356
  StringSumHelper &a = const_cast<StringSumHelper &>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) {
     7c4:	ec 01       	movw	r28, r24
     7c6:	fb 01       	movw	r30, r22
     7c8:	44 81       	ldd	r20, Z+4	; 0x04
     7ca:	55 81       	ldd	r21, Z+5	; 0x05
     7cc:	60 81       	ld	r22, Z
     7ce:	71 81       	ldd	r23, Z+1	; 0x01
     7d0:	b8 df       	rcall	.-144    	; 0x742 <String::concat(char const*, unsigned int)>
     7d2:	81 11       	cpse	r24, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:357
    a.invalidate();
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <operator+(StringSumHelper const&, String const&)+0x1a>
     7d6:	ce 01       	movw	r24, r28
     7d8:	99 de       	rcall	.-718    	; 0x50c <String::invalidate()>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:360
  }
  return a;
}
     7da:	ce 01       	movw	r24, r28
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:162

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String &String::copy(const char *cstr, unsigned int length) {
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ec 01       	movw	r28, r24
     7f0:	7b 01       	movw	r14, r22
     7f2:	8a 01       	movw	r16, r20
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:163
  if (!reserve(length)) {
     7f4:	ba 01       	movw	r22, r20
     7f6:	7d df       	rcall	.-262    	; 0x6f2 <String::reserve(unsigned int)>
     7f8:	81 11       	cpse	r24, r1
     7fa:	0a c0       	rjmp	.+20     	; 0x810 <String::copy(char const*, unsigned int)+0x2e>
     7fc:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:164
    invalidate();
     7fe:	86 de       	rcall	.-756    	; 0x50c <String::invalidate()>
     800:	ce 01       	movw	r24, r28
     802:	df 91       	pop	r29
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:170
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
  return *this;
}
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	08 95       	ret
     810:	0c 83       	std	Y+4, r16	; 0x04
     812:	1d 83       	std	Y+5, r17	; 0x05
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:167
String &String::copy(const char *cstr, unsigned int length) {
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
     814:	b7 01       	movw	r22, r14
     816:	88 81       	ld	r24, Y
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:168
  strcpy(buffer, cstr);
     818:	99 81       	ldd	r25, Y+1	; 0x01
     81a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <strcpy>
     81e:	f0 cf       	rjmp	.-32     	; 0x800 <String::copy(char const*, unsigned int)+0x1e>

00000820 <String::String(int, unsigned char) [clone .constprop.19]>:
_ZN6StringC2Eih.constprop.19():
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:73
  char buf[1 + 8 * sizeof(unsigned char)];
  utoa(value, buf, base);
  *this = buf;
}

String::String(int value, unsigned char base) {
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	62 97       	sbiw	r28, 0x12	; 18
     832:	cd bf       	out	0x3d, r28	; 61
     834:	de bf       	out	0x3e, r29	; 62
     836:	8c 01       	movw	r16, r24
     838:	cb 01       	movw	r24, r22
_ZN6String4initEv():
     83a:	f8 01       	movw	r30, r16
     83c:	10 82       	st	Z, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     83e:	11 82       	std	Z+1, r1	; 0x01
     840:	12 82       	std	Z+2, r1	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     842:	13 82       	std	Z+3, r1	; 0x03
     844:	14 82       	std	Z+4, r1	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:124
  len = 0;
     846:	15 82       	std	Z+5, r1	; 0x05
itoa():
     848:	4a e0       	ldi	r20, 0x0A	; 10
/Users/saurabhdatta/Library/Arduino15/packages/DxCore/tools/avr-gcc/7.3.0-atmel3.6.1-azduino4b/avr/include/stdlib.h:439
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     84a:	9e 01       	movw	r18, r28
     84c:	2f 5f       	subi	r18, 0xFF	; 255
     84e:	3f 4f       	sbci	r19, 0xFF	; 255
     850:	79 01       	movw	r14, r18
     852:	b9 01       	movw	r22, r18
     854:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__itoa_ncheck>
operator=():
     858:	f7 01       	movw	r30, r14
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:235
}
#endif

String &String::operator = (const char *cstr) {
  if (cstr) {
    copy(cstr, strlen(cstr));
     85a:	01 90       	ld	r0, Z+
     85c:	00 20       	and	r0, r0
     85e:	e9 f7       	brne	.-6      	; 0x85a <String::String(int, unsigned char) [clone .constprop.19]+0x3a>
     860:	31 97       	sbiw	r30, 0x01	; 1
     862:	af 01       	movw	r20, r30
     864:	4e 19       	sub	r20, r14
     866:	5f 09       	sbc	r21, r15
     868:	b7 01       	movw	r22, r14
     86a:	c8 01       	movw	r24, r16
     86c:	ba df       	rcall	.-140    	; 0x7e2 <String::copy(char const*, unsigned int)>
_ZN6StringC2Eih.constprop.19():
     86e:	62 96       	adiw	r28, 0x12	; 18
     870:	cd bf       	out	0x3d, r28	; 61
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:78
String::String(int value, unsigned char base) {
  init();
  char buf[2 + 8 * sizeof(int)];
  itoa(value, buf, base);
  *this = buf;
}
     872:	de bf       	out	0x3e, r29	; 62
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	08 95       	ret

00000882 <String::String(char const*)>:
_ZN6String4initEv():
     882:	fc 01       	movw	r30, r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     884:	10 82       	st	Z, r1
     886:	11 82       	std	Z+1, r1	; 0x01
     888:	12 82       	std	Z+2, r1	; 0x02
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     88a:	13 82       	std	Z+3, r1	; 0x03
     88c:	14 82       	std	Z+4, r1	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:124
  len = 0;
     88e:	15 82       	std	Z+5, r1	; 0x05
_ZN6StringC2EPKc():
     890:	61 15       	cp	r22, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:32
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr) {
  init();
  if (cstr) {
     892:	71 05       	cpc	r23, r1
     894:	49 f0       	breq	.+18     	; 0x8a8 <String::String(char const*)+0x26>
     896:	fb 01       	movw	r30, r22
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:33
    copy(cstr, strlen(cstr));
     898:	01 90       	ld	r0, Z+
     89a:	00 20       	and	r0, r0
     89c:	e9 f7       	brne	.-6      	; 0x898 <String::String(char const*)+0x16>
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	af 01       	movw	r20, r30
     8a2:	46 1b       	sub	r20, r22
     8a4:	57 0b       	sbc	r21, r23
     8a6:	9d cf       	rjmp	.-198    	; 0x7e2 <String::copy(char const*, unsigned int)>
     8a8:	08 95       	ret

000008aa <printStepTitle(String, int) [clone .constprop.2]>:
_Z14printStepTitle6Stringi.constprop.2():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:35
  }
}
     8aa:	cf 92       	push	r12
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:20
  btnWatchTimerStart = millis();
  startDisplayFPSMicros = micros();
  startCountMillis = millis();
}

void printStepTitle(String Title, int holdDelay) {
     8ac:	df 92       	push	r13
     8ae:	ef 92       	push	r14
     8b0:	ff 92       	push	r15
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:21
  if (!printHeader) {
     8be:	2c 97       	sbiw	r28, 0x0c	; 12
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	20 91 90 3c 	lds	r18, 0x3C90	; 0x803c90 <printHeader>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
};

class StringSumHelper : public String {
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
     8c8:	21 11       	cpse	r18, r1
     8ca:	5a c0       	rjmp	.+180    	; 0x980 <printStepTitle(String, int) [clone .constprop.2]+0xd6>
     8cc:	7c 01       	movw	r14, r24
_ZN15StringSumHelperC2EPKc():
     8ce:	6a e6       	ldi	r22, 0x6A	; 106
     8d0:	70 ea       	ldi	r23, 0xA0	; 160
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:22
    Serial.println("\n[H]" + Title + ":");
     8d2:	ce 01       	movw	r24, r28
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	d5 df       	rcall	.-86     	; 0x882 <String::String(char const*)>
_Z14printStepTitle6Stringi.constprop.2():
     8d8:	b7 01       	movw	r22, r14
     8da:	ce 01       	movw	r24, r28
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	70 df       	rcall	.-288    	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
     8e0:	62 e6       	ldi	r22, 0x62	; 98
     8e2:	73 ea       	ldi	r23, 0xA3	; 163
     8e4:	59 df       	rcall	.-334    	; 0x798 <operator+(StringSumHelper const&, char const*)>
     8e6:	01 de       	rcall	.-1022   	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
_ZN15StringSumHelperD2Ev():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
     8e8:	ce 01       	movw	r24, r28
     8ea:	01 96       	adiw	r24, 0x01	; 1
     8ec:	21 de       	rcall	.-958    	; 0x530 <String::~String()>
_Z14printStepTitle6Stringi.constprop.2():
     8ee:	8e 01       	movw	r16, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:23
    String underline = "-";
     8f0:	09 5f       	subi	r16, 0xF9	; 249
     8f2:	1f 4f       	sbci	r17, 0xFF	; 255
     8f4:	6f e6       	ldi	r22, 0x6F	; 111
     8f6:	70 ea       	ldi	r23, 0xA0	; 160
     8f8:	c8 01       	movw	r24, r16
     8fa:	c3 df       	rcall	.-122    	; 0x882 <String::String(char const*)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:24
    for (int i = 0; i < int(Title.length())*2; i++) {
     8fc:	d1 2c       	mov	r13, r1
     8fe:	c1 2c       	mov	r12, r1
     900:	f7 01       	movw	r30, r14
     902:	84 81       	ldd	r24, Z+4	; 0x04
     904:	95 81       	ldd	r25, Z+5	; 0x05
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	c8 16       	cp	r12, r24
     90c:	d9 06       	cpc	r13, r25
     90e:	64 f5       	brge	.+88     	; 0x968 <printStepTitle(String, int) [clone .constprop.2]+0xbe>
_ZN6String4initEv():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
     910:	19 82       	std	Y+1, r1	; 0x01
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:123
  capacity = 0;
     912:	1a 82       	std	Y+2, r1	; 0x02
     914:	1b 82       	std	Y+3, r1	; 0x03
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:124
  len = 0;
     916:	1c 82       	std	Y+4, r1	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:208
String &String::operator = (const String &rhs) {
  if (this == &rhs) {
    return *this;
  }

  if (rhs.buffer) {
     918:	1d 82       	std	Y+5, r1	; 0x05
     91a:	1e 82       	std	Y+6, r1	; 0x06
operator=():
     91c:	6f 81       	ldd	r22, Y+7	; 0x07
     91e:	78 85       	ldd	r23, Y+8	; 0x08
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:209
    copy(rhs.buffer, rhs.len);
     920:	61 15       	cp	r22, r1
     922:	71 05       	cpc	r23, r1
     924:	29 f0       	breq	.+10     	; 0x930 <printStepTitle(String, int) [clone .constprop.2]+0x86>
     926:	4b 85       	ldd	r20, Y+11	; 0x0b
     928:	5c 85       	ldd	r21, Y+12	; 0x0c
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:25
      underline = underline + "-";
     92a:	ce 01       	movw	r24, r28
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	59 df       	rcall	.-334    	; 0x7e2 <String::copy(char const*, unsigned int)>
_Z14printStepTitle6Stringi.constprop.2():
     930:	6f e6       	ldi	r22, 0x6F	; 111
     932:	70 ea       	ldi	r23, 0xA0	; 160
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:204
  rhs.len = 0;
}
#endif

String &String::operator = (const String &rhs) {
  if (this == &rhs) {
     934:	ce 01       	movw	r24, r28
     936:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:208
    return *this;
  }

  if (rhs.buffer) {
     938:	2f df       	rcall	.-418    	; 0x798 <operator+(StringSumHelper const&, char const*)>
operator=():
     93a:	80 17       	cp	r24, r16
     93c:	91 07       	cpc	r25, r17
     93e:	51 f0       	breq	.+20     	; 0x954 <printStepTitle(String, int) [clone .constprop.2]+0xaa>
     940:	fc 01       	movw	r30, r24
     942:	60 81       	ld	r22, Z
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:209
    copy(rhs.buffer, rhs.len);
     944:	71 81       	ldd	r23, Z+1	; 0x01
     946:	61 15       	cp	r22, r1
     948:	71 05       	cpc	r23, r1
     94a:	59 f0       	breq	.+22     	; 0x962 <printStepTitle(String, int) [clone .constprop.2]+0xb8>
     94c:	44 81       	ldd	r20, Z+4	; 0x04
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
     94e:	55 81       	ldd	r21, Z+5	; 0x05
     950:	c8 01       	movw	r24, r16
     952:	47 df       	rcall	.-370    	; 0x7e2 <String::copy(char const*, unsigned int)>
_ZN15StringSumHelperD2Ev():
     954:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:24

void printStepTitle(String Title, int holdDelay) {
  if (!printHeader) {
    Serial.println("\n[H]" + Title + ":");
    String underline = "-";
    for (int i = 0; i < int(Title.length())*2; i++) {
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	eb dd       	rcall	.-1066   	; 0x530 <String::~String()>
_Z14printStepTitle6Stringi.constprop.2():
     95a:	ff ef       	ldi	r31, 0xFF	; 255
     95c:	cf 1a       	sub	r12, r31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.cpp:211
  } else {
    invalidate();
     95e:	df 0a       	sbc	r13, r31
     960:	cf cf       	rjmp	.-98     	; 0x900 <printStepTitle(String, int) [clone .constprop.2]+0x56>
operator=():
     962:	c8 01       	movw	r24, r16
     964:	d3 dd       	rcall	.-1114   	; 0x50c <String::invalidate()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:27
      underline = underline + "-";
    }
    Serial.println(underline);
     966:	f6 cf       	rjmp	.-20     	; 0x954 <printStepTitle(String, int) [clone .constprop.2]+0xaa>
_Z14printStepTitle6Stringi.constprop.2():
     968:	c8 01       	movw	r24, r16
     96a:	bf dd       	rcall	.-1154   	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:28
    printHeader = true;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	80 93 90 3c 	sts	0x3C90, r24	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:29
    delay(holdDelay);
     972:	60 ed       	ldi	r22, 0xD0	; 208
     974:	77 e0       	ldi	r23, 0x07	; 7
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	2e dd       	rcall	.-1444   	; 0x3d8 <delay>
     97c:	c8 01       	movw	r24, r16
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:23
}

void printStepTitle(String Title, int holdDelay) {
  if (!printHeader) {
    Serial.println("\n[H]" + Title + ":");
    String underline = "-";
     97e:	d8 dd       	rcall	.-1104   	; 0x530 <String::~String()>
     980:	2c 96       	adiw	r28, 0x0c	; 12
     982:	cd bf       	out	0x3d, r28	; 61
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:31
    }
    Serial.println(underline);
    printHeader = true;
    delay(holdDelay);
  }
}
     984:	de bf       	out	0x3e, r29	; 62
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	08 95       	ret

00000998 <_do_dre()>:
_Z7_do_drev():
     998:	2f 93       	push	r18
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:307
      "out        0x3f,     r18"      "\n\t"  // restore SREG
      "pop         r18"               "\n\t"  // pop old r18
      "pop         r31"               "\n\t"  // pop the Z that the isr pushed.
      "pop         r30"               "\n\t"
      "reti"                        "\n"   // and RETI!
      ::);
     99a:	2f b7       	in	r18, 0x3f	; 63
     99c:	2f 93       	push	r18
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	af 93       	push	r26
     9a4:	bf 93       	push	r27
     9a6:	68 94       	set

000009a8 <_poll_dre>:
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	c4 85       	ldd	r28, Z+12	; 0x0c
     9b0:	d8 e0       	ldi	r29, 0x08	; 8
     9b2:	94 89       	ldd	r25, Z+20	; 0x14
     9b4:	df 01       	movw	r26, r30
     9b6:	a9 0f       	add	r26, r25
     9b8:	b2 1f       	adc	r27, r18
     9ba:	ab 5a       	subi	r26, 0xAB	; 171
     9bc:	bf 4f       	sbci	r27, 0xFF	; 255
     9be:	8c 91       	ld	r24, X
     9c0:	20 e4       	ldi	r18, 0x40	; 64
     9c2:	2c 83       	std	Y+4, r18	; 0x04
     9c4:	8a 83       	std	Y+2, r24	; 0x02
     9c6:	9f 5f       	subi	r25, 0xFF	; 255
     9c8:	9f 71       	andi	r25, 0x1F	; 31
     9ca:	8d 81       	ldd	r24, Y+5	; 0x05
     9cc:	23 89       	ldd	r18, Z+19	; 0x13
     9ce:	29 13       	cpse	r18, r25
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <_done_dre_irq>
     9d2:	8f 7d       	andi	r24, 0xDF	; 223
     9d4:	8d 83       	std	Y+5, r24	; 0x05

000009d6 <_done_dre_irq>:
     9d6:	94 8b       	std	Z+20, r25	; 0x14
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	0e f0       	brts	.+2      	; 0x9e0 <_done_dre_irq+0xa>
     9de:	6c cc       	rjmp	.-1832   	; 0x2b8 <_poll_dre_done>
     9e0:	bf 91       	pop	r27
     9e2:	af 91       	pop	r26
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	2f 91       	pop	r18
     9ea:	2f bf       	out	0x3f, r18	; 63
     9ec:	2f 91       	pop	r18
     9ee:	ff 91       	pop	r31
     9f0:	ef 91       	pop	r30
     9f2:	18 95       	reti

000009f4 <_do_rxc()>:
_Z7_do_rxcv():
     9f4:	2f 93       	push	r18
     9f6:	2f b7       	in	r18, 0x3f	; 63
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:175
        "out       0x3f,       r18"   "\n\t" // and write back
        "pop        r18"              "\n\t" // used as tail pointer and z known zero.
        "pop        r31"              "\n\t" // end with Z which the isr pushed to make room for
        "pop        r30"              "\n\t" // pointer to serial instance
        "reti"                        "\n"   // return
        ::);
     9f8:	2f 93       	push	r18
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	c4 85       	ldd	r28, Z+12	; 0x0c
     a04:	d8 e0       	ldi	r29, 0x08	; 8
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	98 81       	ld	r25, Y
     a0a:	81 fd       	sbrc	r24, 1
     a0c:	0d c0       	rjmp	.+26     	; 0xa28 <_end_rxc>
     a0e:	c1 89       	ldd	r28, Z+17	; 0x11
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	8c 0f       	add	r24, r28
     a14:	8f 73       	andi	r24, 0x3F	; 63
     a16:	22 89       	ldd	r18, Z+18	; 0x12
     a18:	28 17       	cp	r18, r24
     a1a:	31 f0       	breq	.+12     	; 0xa28 <_end_rxc>
     a1c:	ce 0f       	add	r28, r30
     a1e:	df 2f       	mov	r29, r31
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	d2 1f       	adc	r29, r18
     a24:	9d 8b       	std	Y+21, r25	; 0x15
     a26:	81 8b       	std	Z+17, r24	; 0x11

00000a28 <_end_rxc>:
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	9f 91       	pop	r25
     a2e:	8f 91       	pop	r24
     a30:	2f 91       	pop	r18
     a32:	2f bf       	out	0x3f, r18	; 63
     a34:	2f 91       	pop	r18
     a36:	ff 91       	pop	r31
     a38:	ef 91       	pop	r30
     a3a:	18 95       	reti

00000a3c <_do_txc()>:
_Z7_do_txcv():
     a3c:	ff 93       	push	r31
     a3e:	8f 93       	push	r24
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART.cpp:105
        "out     0x3f,      r24"  "\n\t"  // restore it
        "pop      r24"            "\n\t"  // pop r24 to get it's old value back
        "pop      r31"            "\n\t"  // and r31
        "pop      r30"            "\n\t"  // Pop the register the ISR did
        "reti"                    "\n"    // return from the interrupt.
        ::);
     a40:	8f b7       	in	r24, 0x3f	; 63
     a42:	8f 93       	push	r24
     a44:	f8 e0       	ldi	r31, 0x08	; 8

00000a46 <_txc_flush_rx>:
     a46:	80 81       	ld	r24, Z
     a48:	84 81       	ldd	r24, Z+4	; 0x04
     a4a:	87 ff       	sbrs	r24, 7
     a4c:	fc cf       	rjmp	.-8      	; 0xa46 <_txc_flush_rx>
     a4e:	85 81       	ldd	r24, Z+5	; 0x05
     a50:	8f 7b       	andi	r24, 0xBF	; 191
     a52:	80 68       	ori	r24, 0x80	; 128
     a54:	85 83       	std	Z+5, r24	; 0x05
     a56:	8f 91       	pop	r24
     a58:	8f bf       	out	0x3f, r24	; 63
     a5a:	8f 91       	pop	r24
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	18 95       	reti

00000a62 <__vector_9>:
__vector_9():
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:163
#elif defined(MILLIS_USE_TIMERB4)
  ISR(TCB4_INT_vect)
#else
  #error "No millis timer selected, but not disabled - cannot determine millis vector"
#endif
{
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	80 91 88 3c 	lds	r24, 0x3C88	; 0x803c88 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:175
    #else
      timer_millis += 2;
    #endif
  #else
    #if !defined(MILLIS_USE_TIMERRTC) // TCA0 or TCD0
      uint32_t m = timer_millis;
     a82:	90 91 89 3c 	lds	r25, 0x3C89	; 0x803c89 <timer_millis+0x1>
     a86:	a0 91 8a 3c 	lds	r26, 0x3C8A	; 0x803c8a <timer_millis+0x2>
     a8a:	b0 91 8b 3c 	lds	r27, 0x3C8B	; 0x803c8b <timer_millis+0x3>
     a8e:	40 91 86 3c 	lds	r20, 0x3C86	; 0x803c86 <timer_fract>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:176
      uint16_t f = timer_fract;
     a92:	50 91 87 3c 	lds	r21, 0x3C87	; 0x803c87 <timer_fract+0x1>
     a96:	9a 01       	movw	r18, r20
     a98:	20 5d       	subi	r18, 0xD0	; 208
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:178
      m += MILLIS_INC;
      f += FRACT_INC;
     a9a:	3c 4f       	sbci	r19, 0xFC	; 252
     a9c:	28 3e       	cpi	r18, 0xE8	; 232
     a9e:	63 e0       	ldi	r22, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:179
      if (f >= FRACT_MAX) {
     aa0:	36 07       	cpc	r19, r22
     aa2:	28 f0       	brcs	.+10     	; 0xaae <__vector_9+0x4c>
     aa4:	28 5e       	subi	r18, 0xE8	; 232
     aa6:	33 40       	sbci	r19, 0x03	; 3
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:181

        f -= FRACT_MAX;
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	a1 1d       	adc	r26, r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:182
        m += 1;
     aac:	b1 1d       	adc	r27, r1
     aae:	20 93 86 3c 	sts	0x3C86, r18	; 0x803c86 <timer_fract>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:184
      }
      timer_fract = f;
     ab2:	30 93 87 3c 	sts	0x3C87, r19	; 0x803c87 <timer_fract+0x1>
     ab6:	80 93 88 3c 	sts	0x3C88, r24	; 0x803c88 <timer_millis>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:185
      timer_millis = m;
     aba:	90 93 89 3c 	sts	0x3C89, r25	; 0x803c89 <timer_millis+0x1>
     abe:	a0 93 8a 3c 	sts	0x3C8A, r26	; 0x803c8a <timer_millis+0x2>
     ac2:	b0 93 8b 3c 	sts	0x3C8B, r27	; 0x803c8b <timer_millis+0x3>
     ac6:	80 91 8c 3c 	lds	r24, 0x3C8C	; 0x803c8c <timer_overflow_count>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:189
    #endif
    // if RTC is used as timer, we only increment the overflow count
    // Overflow count isn't used for TCB's
    timer_overflow_count++;
     aca:	90 91 8d 3c 	lds	r25, 0x3C8D	; 0x803c8d <timer_overflow_count+0x1>
     ace:	a0 91 8e 3c 	lds	r26, 0x3C8E	; 0x803c8e <timer_overflow_count+0x2>
     ad2:	b0 91 8f 3c 	lds	r27, 0x3C8F	; 0x803c8f <timer_overflow_count+0x3>
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	a1 1d       	adc	r26, r1
     ada:	b1 1d       	adc	r27, r1
     adc:	80 93 8c 3c 	sts	0x3C8C, r24	; 0x803c8c <timer_overflow_count>
     ae0:	90 93 8d 3c 	sts	0x3C8D, r25	; 0x803c8d <timer_overflow_count+0x1>
     ae4:	a0 93 8e 3c 	sts	0x3C8E, r26	; 0x803c8e <timer_overflow_count+0x2>
     ae8:	b0 93 8f 3c 	sts	0x3C8F, r27	; 0x803c8f <timer_overflow_count+0x3>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:193
  #endif
  /* Clear flag */
  #if defined(MILLIS_USE_TIMERA0)
    TCA0.SPLIT.INTFLAGS = TCA_SPLIT_HUNF_bm;
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <vtable for UartClass+0x7f69be>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:201
  #elif defined(MILLIS_USE_TIMERRTC)
    RTC.INTFLAGS = RTC_OVF_bm;
  #else // timerb
    _timer->INTFLAGS = TCB_CAPT_bm;
  #endif
}
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	6f 91       	pop	r22
     afc:	5f 91       	pop	r21
     afe:	4f 91       	pop	r20
     b00:	3f 91       	pop	r19
     b02:	2f 91       	pop	r18
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:73
  #else
    ISR(USART0_DRE_vect, ISR_NAKED) {
      __asm__ __volatile__(
                "push  r30"    "\n\t"
                "push  r31"    "\n\t"
                :::);
     b0c:	18 95       	reti

00000b0e <__vector_28>:
__vector_28():
     b0e:	ef 93       	push	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:76
      __asm__ __volatile__(
                "jmp _do_dre"  "\n"
                ::"z"(&Serial));
     b10:	ff 93       	push	r31
     b12:	e3 e9       	ldi	r30, 0x93	; 147
     b14:	fc e3       	ldi	r31, 0x3C	; 60
     b16:	40 cf       	rjmp	.-384    	; 0x998 <_do_dre()>

00000b18 <__vector_27>:
__vector_27():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:55
  #else
    ISR(USART0_RXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push      r30"     "\n\t"
            "push      r31"     "\n\t"
            :::);
     b18:	ef 93       	push	r30
     b1a:	ff 93       	push	r31
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:58
      __asm__ __volatile__(
            "jmp   _do_rxc"     "\n\t"
            ::"z"(&Serial));
     b1c:	e3 e9       	ldi	r30, 0x93	; 147
     b1e:	fc e3       	ldi	r31, 0x3C	; 60
     b20:	69 cf       	rjmp	.-302    	; 0x9f4 <_do_rxc()>

00000b22 <__vector_29>:
__vector_29():
     b22:	ef 93       	push	r30
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/UART0.cpp:31
    ISR(USART0_TXC_vect, ISR_NAKED) {
      __asm__ __volatile__(
            "push  r30"         "\n\t" // push the low byte of Z
            "ldi r30, 0x00"     "\n\t" // and put the low bit of this USART there - 0x20 * n
            "jmp _do_txc"      "\n\t" // _do_txc pushes the other necessary registers and loads 0x08 into the high byte.
            :::);
     b24:	e0 e0       	ldi	r30, 0x00	; 0
     b26:	8a cf       	rjmp	.-236    	; 0xa3c <_do_txc()>

00000b28 <vfprintf>:
vfprintf():
     b28:	ab e0       	ldi	r26, 0x0B	; 11
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	e9 e9       	ldi	r30, 0x99	; 153
     b2e:	f5 e0       	ldi	r31, 0x05	; 5
     b30:	1b c7       	rjmp	.+3638   	; 0x1968 <__prologue_saves__+0x8>
     b32:	6c 01       	movw	r12, r24
     b34:	7b 01       	movw	r14, r22
     b36:	3a 01       	movw	r6, r20
     b38:	fc 01       	movw	r30, r24
     b3a:	16 82       	std	Z+6, r1	; 0x06
     b3c:	17 82       	std	Z+7, r1	; 0x07
     b3e:	83 81       	ldd	r24, Z+3	; 0x03
     b40:	81 ff       	sbrs	r24, 1
     b42:	ff c0       	rjmp	.+510    	; 0xd42 <vfprintf+0x21a>
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	4c 01       	movw	r8, r24
     b4a:	f6 01       	movw	r30, r12
     b4c:	b3 80       	ldd	r11, Z+3	; 0x03
     b4e:	f7 01       	movw	r30, r14
     b50:	b3 fc       	sbrc	r11, 3
     b52:	05 91       	lpm	r16, Z+
     b54:	b3 fe       	sbrs	r11, 3
     b56:	01 91       	ld	r16, Z+
     b58:	7f 01       	movw	r14, r30
     b5a:	00 23       	and	r16, r16
     b5c:	41 f1       	breq	.+80     	; 0xbae <vfprintf+0x86>
     b5e:	05 32       	cpi	r16, 0x25	; 37
     b60:	39 f4       	brne	.+14     	; 0xb70 <vfprintf+0x48>
     b62:	b3 fc       	sbrc	r11, 3
     b64:	05 91       	lpm	r16, Z+
     b66:	b3 fe       	sbrs	r11, 3
     b68:	01 91       	ld	r16, Z+
     b6a:	7f 01       	movw	r14, r30
     b6c:	05 32       	cpi	r16, 0x25	; 37
     b6e:	39 f5       	brne	.+78     	; 0xbbe <vfprintf+0x96>
     b70:	b6 01       	movw	r22, r12
     b72:	80 2f       	mov	r24, r16
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	53 d7       	rcall	.+3750   	; 0x1a1e <fputc>
     b78:	53 01       	movw	r10, r6
     b7a:	35 01       	movw	r6, r10
     b7c:	e6 cf       	rjmp	.-52     	; 0xb4a <vfprintf+0x22>
     b7e:	10 68       	ori	r17, 0x80	; 128
     b80:	f7 01       	movw	r30, r14
     b82:	b3 fc       	sbrc	r11, 3
     b84:	05 91       	lpm	r16, Z+
     b86:	b3 fe       	sbrs	r11, 3
     b88:	01 91       	ld	r16, Z+
     b8a:	7f 01       	movw	r14, r30
     b8c:	17 fd       	sbrc	r17, 7
     b8e:	0d c0       	rjmp	.+26     	; 0xbaa <vfprintf+0x82>
     b90:	00 23       	and	r16, r16
     b92:	69 f0       	breq	.+26     	; 0xbae <vfprintf+0x86>
     b94:	60 2f       	mov	r22, r16
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	83 e8       	ldi	r24, 0x83	; 131
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	12 d7       	rcall	.+3620   	; 0x19c2 <strchr_P>
     b9e:	89 2b       	or	r24, r25
     ba0:	79 f7       	brne	.-34     	; 0xb80 <vfprintf+0x58>
     ba2:	03 32       	cpi	r16, 0x23	; 35
     ba4:	51 f0       	breq	.+20     	; 0xbba <vfprintf+0x92>
     ba6:	0c 36       	cpi	r16, 0x6C	; 108
     ba8:	51 f3       	breq	.-44     	; 0xb7e <vfprintf+0x56>
     baa:	01 11       	cpse	r16, r1
     bac:	0a c0       	rjmp	.+20     	; 0xbc2 <vfprintf+0x9a>
     bae:	f6 01       	movw	r30, r12
     bb0:	86 81       	ldd	r24, Z+6	; 0x06
     bb2:	97 81       	ldd	r25, Z+7	; 0x07
     bb4:	2b 96       	adiw	r28, 0x0b	; 11
     bb6:	ee e0       	ldi	r30, 0x0E	; 14
     bb8:	f0 c6       	rjmp	.+3552   	; 0x199a <__epilogue_restores__+0x8>
     bba:	10 e1       	ldi	r17, 0x10	; 16
     bbc:	e1 cf       	rjmp	.-62     	; 0xb80 <vfprintf+0x58>
     bbe:	10 e0       	ldi	r17, 0x00	; 0
     bc0:	e5 cf       	rjmp	.-54     	; 0xb8c <vfprintf+0x64>
     bc2:	60 2f       	mov	r22, r16
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	8c e7       	ldi	r24, 0x7C	; 124
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	fb d6       	rcall	.+3574   	; 0x19c2 <strchr_P>
     bcc:	89 2b       	or	r24, r25
     bce:	49 f0       	breq	.+18     	; 0xbe2 <vfprintf+0xba>
     bd0:	53 01       	movw	r10, r6
     bd2:	f4 e0       	ldi	r31, 0x04	; 4
     bd4:	af 0e       	add	r10, r31
     bd6:	b1 1c       	adc	r11, r1
     bd8:	b6 01       	movw	r22, r12
     bda:	8f e3       	ldi	r24, 0x3F	; 63
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	1f d7       	rcall	.+3646   	; 0x1a1e <fputc>
     be0:	cc cf       	rjmp	.-104    	; 0xb7a <vfprintf+0x52>
     be2:	03 36       	cpi	r16, 0x63	; 99
     be4:	09 f4       	brne	.+2      	; 0xbe8 <vfprintf+0xc0>
     be6:	52 c0       	rjmp	.+164    	; 0xc8c <vfprintf+0x164>
     be8:	03 37       	cpi	r16, 0x73	; 115
     bea:	09 f4       	brne	.+2      	; 0xbee <vfprintf+0xc6>
     bec:	59 c0       	rjmp	.+178    	; 0xca0 <vfprintf+0x178>
     bee:	03 35       	cpi	r16, 0x53	; 83
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <vfprintf+0xcc>
     bf2:	55 c0       	rjmp	.+170    	; 0xc9e <vfprintf+0x176>
     bf4:	04 36       	cpi	r16, 0x64	; 100
     bf6:	19 f0       	breq	.+6      	; 0xbfe <vfprintf+0xd6>
     bf8:	09 36       	cpi	r16, 0x69	; 105
     bfa:	09 f0       	breq	.+2      	; 0xbfe <vfprintf+0xd6>
     bfc:	70 c0       	rjmp	.+224    	; 0xcde <vfprintf+0x1b6>
     bfe:	53 01       	movw	r10, r6
     c00:	17 ff       	sbrs	r17, 7
     c02:	62 c0       	rjmp	.+196    	; 0xcc8 <vfprintf+0x1a0>
     c04:	f4 e0       	ldi	r31, 0x04	; 4
     c06:	af 0e       	add	r10, r31
     c08:	b1 1c       	adc	r11, r1
     c0a:	f3 01       	movw	r30, r6
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	93 81       	ldd	r25, Z+3	; 0x03
     c14:	1f 7e       	andi	r17, 0xEF	; 239
     c16:	97 ff       	sbrs	r25, 7
     c18:	08 c0       	rjmp	.+16     	; 0xc2a <vfprintf+0x102>
     c1a:	90 95       	com	r25
     c1c:	80 95       	com	r24
     c1e:	70 95       	com	r23
     c20:	61 95       	neg	r22
     c22:	7f 4f       	sbci	r23, 0xFF	; 255
     c24:	8f 4f       	sbci	r24, 0xFF	; 255
     c26:	9f 4f       	sbci	r25, 0xFF	; 255
     c28:	10 64       	ori	r17, 0x40	; 64
     c2a:	2a e0       	ldi	r18, 0x0A	; 10
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	a4 01       	movw	r20, r8
     c30:	26 d7       	rcall	.+3660   	; 0x1a7e <__ultoa_invert>
     c32:	08 2f       	mov	r16, r24
     c34:	08 19       	sub	r16, r8
     c36:	16 ff       	sbrs	r17, 6
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <vfprintf+0x11a>
     c3a:	b6 01       	movw	r22, r12
     c3c:	8d e2       	ldi	r24, 0x2D	; 45
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	ee d6       	rcall	.+3548   	; 0x1a1e <fputc>
     c42:	14 ff       	sbrs	r17, 4
     c44:	13 c0       	rjmp	.+38     	; 0xc6c <vfprintf+0x144>
     c46:	fe 01       	movw	r30, r28
     c48:	e0 0f       	add	r30, r16
     c4a:	f1 1d       	adc	r31, r1
     c4c:	80 81       	ld	r24, Z
     c4e:	80 33       	cpi	r24, 0x30	; 48
     c50:	69 f0       	breq	.+26     	; 0xc6c <vfprintf+0x144>
     c52:	b6 01       	movw	r22, r12
     c54:	80 e3       	ldi	r24, 0x30	; 48
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	e2 d6       	rcall	.+3524   	; 0x1a1e <fputc>
     c5a:	12 ff       	sbrs	r17, 2
     c5c:	07 c0       	rjmp	.+14     	; 0xc6c <vfprintf+0x144>
     c5e:	10 72       	andi	r17, 0x20	; 32
     c60:	81 2f       	mov	r24, r17
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	b6 01       	movw	r22, r12
     c66:	88 5a       	subi	r24, 0xA8	; 168
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	d9 d6       	rcall	.+3506   	; 0x1a1e <fputc>
     c6c:	01 50       	subi	r16, 0x01	; 1
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	0f 5f       	subi	r16, 0xFF	; 255
     c72:	1f 4f       	sbci	r17, 0xFF	; 255
     c74:	08 0d       	add	r16, r8
     c76:	19 1d       	adc	r17, r9
     c78:	f8 01       	movw	r30, r16
     c7a:	82 91       	ld	r24, -Z
     c7c:	8f 01       	movw	r16, r30
     c7e:	b6 01       	movw	r22, r12
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	cd d6       	rcall	.+3482   	; 0x1a1e <fputc>
     c84:	08 15       	cp	r16, r8
     c86:	19 05       	cpc	r17, r9
     c88:	b9 f7       	brne	.-18     	; 0xc78 <vfprintf+0x150>
     c8a:	77 cf       	rjmp	.-274    	; 0xb7a <vfprintf+0x52>
     c8c:	53 01       	movw	r10, r6
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	a8 0e       	add	r10, r24
     c92:	b1 1c       	adc	r11, r1
     c94:	b6 01       	movw	r22, r12
     c96:	f3 01       	movw	r30, r6
     c98:	80 81       	ld	r24, Z
     c9a:	91 81       	ldd	r25, Z+1	; 0x01
     c9c:	a0 cf       	rjmp	.-192    	; 0xbde <vfprintf+0xb6>
     c9e:	11 60       	ori	r17, 0x01	; 1
     ca0:	53 01       	movw	r10, r6
     ca2:	f2 e0       	ldi	r31, 0x02	; 2
     ca4:	af 0e       	add	r10, r31
     ca6:	b1 1c       	adc	r11, r1
     ca8:	f3 01       	movw	r30, r6
     caa:	60 80       	ld	r6, Z
     cac:	71 80       	ldd	r7, Z+1	; 0x01
     cae:	f3 01       	movw	r30, r6
     cb0:	10 fd       	sbrc	r17, 0
     cb2:	85 91       	lpm	r24, Z+
     cb4:	10 ff       	sbrs	r17, 0
     cb6:	81 91       	ld	r24, Z+
     cb8:	3f 01       	movw	r6, r30
     cba:	88 23       	and	r24, r24
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <vfprintf+0x198>
     cbe:	5d cf       	rjmp	.-326    	; 0xb7a <vfprintf+0x52>
     cc0:	b6 01       	movw	r22, r12
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	ac d6       	rcall	.+3416   	; 0x1a1e <fputc>
     cc6:	f3 cf       	rjmp	.-26     	; 0xcae <vfprintf+0x186>
     cc8:	f2 e0       	ldi	r31, 0x02	; 2
     cca:	af 0e       	add	r10, r31
     ccc:	b1 1c       	adc	r11, r1
     cce:	f3 01       	movw	r30, r6
     cd0:	60 81       	ld	r22, Z
     cd2:	71 81       	ldd	r23, Z+1	; 0x01
     cd4:	07 2e       	mov	r0, r23
     cd6:	00 0c       	add	r0, r0
     cd8:	88 0b       	sbc	r24, r24
     cda:	99 0b       	sbc	r25, r25
     cdc:	9b cf       	rjmp	.-202    	; 0xc14 <vfprintf+0xec>
     cde:	00 37       	cpi	r16, 0x70	; 112
     ce0:	09 f1       	breq	.+66     	; 0xd24 <vfprintf+0x1fc>
     ce2:	40 f4       	brcc	.+16     	; 0xcf4 <vfprintf+0x1cc>
     ce4:	08 35       	cpi	r16, 0x58	; 88
     ce6:	01 f1       	breq	.+64     	; 0xd28 <vfprintf+0x200>
     ce8:	0f 36       	cpi	r16, 0x6F	; 111
     cea:	09 f0       	breq	.+2      	; 0xcee <vfprintf+0x1c6>
     cec:	60 cf       	rjmp	.-320    	; 0xbae <vfprintf+0x86>
     cee:	28 e0       	ldi	r18, 0x08	; 8
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	0c c0       	rjmp	.+24     	; 0xd0c <vfprintf+0x1e4>
     cf4:	05 37       	cpi	r16, 0x75	; 117
     cf6:	39 f0       	breq	.+14     	; 0xd06 <vfprintf+0x1de>
     cf8:	08 37       	cpi	r16, 0x78	; 120
     cfa:	09 f0       	breq	.+2      	; 0xcfe <vfprintf+0x1d6>
     cfc:	58 cf       	rjmp	.-336    	; 0xbae <vfprintf+0x86>
     cfe:	14 62       	ori	r17, 0x24	; 36
     d00:	20 e1       	ldi	r18, 0x10	; 16
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <vfprintf+0x1e4>
     d06:	1f 7e       	andi	r17, 0xEF	; 239
     d08:	2a e0       	ldi	r18, 0x0A	; 10
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	53 01       	movw	r10, r6
     d0e:	17 ff       	sbrs	r17, 7
     d10:	0f c0       	rjmp	.+30     	; 0xd30 <vfprintf+0x208>
     d12:	f4 e0       	ldi	r31, 0x04	; 4
     d14:	af 0e       	add	r10, r31
     d16:	b1 1c       	adc	r11, r1
     d18:	f3 01       	movw	r30, r6
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	85 cf       	rjmp	.-246    	; 0xc2e <vfprintf+0x106>
     d24:	10 61       	ori	r17, 0x10	; 16
     d26:	eb cf       	rjmp	.-42     	; 0xcfe <vfprintf+0x1d6>
     d28:	14 60       	ori	r17, 0x04	; 4
     d2a:	20 e1       	ldi	r18, 0x10	; 16
     d2c:	32 e0       	ldi	r19, 0x02	; 2
     d2e:	ee cf       	rjmp	.-36     	; 0xd0c <vfprintf+0x1e4>
     d30:	f2 e0       	ldi	r31, 0x02	; 2
     d32:	af 0e       	add	r10, r31
     d34:	b1 1c       	adc	r11, r1
     d36:	f3 01       	movw	r30, r6
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	76 cf       	rjmp	.-276    	; 0xc2e <vfprintf+0x106>
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	9f ef       	ldi	r25, 0xFF	; 255
     d46:	36 cf       	rjmp	.-404    	; 0xbb4 <vfprintf+0x8c>

00000d48 <global constructors keyed to 65535_0_components_check.ino.cpp.o.2643>:
_GLOBAL__I_65535_0_components_check.ino.cpp.o.2643():
     d48:	e3 e9       	ldi	r30, 0x93	; 147
     d4a:	fc e3       	ldi	r31, 0x3C	; 60
     d4c:	12 82       	std	Z+2, r1	; 0x02
     d4e:	13 82       	std	Z+3, r1	; 0x03
     d50:	88 ee       	ldi	r24, 0xE8	; 232
     d52:	93 e0       	ldi	r25, 0x03	; 3
     d54:	a0 e0       	ldi	r26, 0x00	; 0
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	84 83       	std	Z+4, r24	; 0x04
     d5a:	95 83       	std	Z+5, r25	; 0x05
     d5c:	a6 83       	std	Z+6, r26	; 0x06
     d5e:	b7 83       	std	Z+7, r27	; 0x07
     d60:	81 e5       	ldi	r24, 0x51	; 81
     d62:	90 ea       	ldi	r25, 0xA0	; 160
     d64:	80 83       	st	Z, r24
     d66:	91 83       	std	Z+1, r25	; 0x01
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	98 e0       	ldi	r25, 0x08	; 8
     d6c:	84 87       	std	Z+12, r24	; 0x0c
     d6e:	95 87       	std	Z+13, r25	; 0x0d
     d70:	16 86       	std	Z+14, r1	; 0x0e
     d72:	17 86       	std	Z+15, r1	; 0x0f
     d74:	08 95       	ret

00000d76 <main>:
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	64 97       	sbiw	r28, 0x14	; 20
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	de bf       	out	0x3e, r29	; 62
init_clock():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1333
      #elif (F_CPU == 8000000) // 16MHz prescaled by 2
        /* Clock DIV2 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_2X_gc));
      #elif (F_CPU == 5000000) // 20MHz prescaled by 4
        /* Clock DIV4 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_4X_gc));
     d84:	88 ed       	ldi	r24, 0xD8	; 216
     d86:	93 e0       	ldi	r25, 0x03	; 3
     d88:	84 bf       	out	0x34, r24	; 52
     d8a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <vtable for UartClass+0x7f6014>
init_ADC0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1429
    #elif F_CPU  >= 12000000    // 16 MHz / 16 = 1.0 MHz,  20 MHz / 16 = 1.25 MHz
      ADC0.CTRLC  = ADC_PRESC_DIV16_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  3000000    //  4 MHz /  4 = 1.0 MHz,   5 MHz /  4 = 1.25 MHz
      ADC0.CTRLC  =  ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
     d8e:	81 e5       	ldi	r24, 0x51	; 81
     d90:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <vtable for UartClass+0x7f65b5>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1436
      ADC0.CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #endif
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      ADC0.SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      ADC0.SAMPCTRL = (13);   // 15 ADC clock,s 12 us
     d94:	8d e0       	ldi	r24, 0x0D	; 13
     d96:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <vtable for UartClass+0x7f65b8>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1440
    #else
      ADC0.SAMPCTRL = (10); // 12 ADC clocks, 12 us
    #endif
    ADC0.CTRLD    = ADC_INITDLY_DLY16_gc;
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <vtable for UartClass+0x7f65b6>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1441
    ADC0.CTRLA    = ADC_ENABLE_bm;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <vtable for UartClass+0x7f65b3>
init_TCA0():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1533
  #ifdef __AVR_ATtinyxy2__
    PORTMUX.CTRLC = 1; // move WO0 output to PA7 so PA3 can be used with WO3
  #endif

  /* Enable Split Mode */
  TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm;
     da6:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <vtable for UartClass+0x7f69b6>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1538

  // Only 1 WGM so no need to specifically set up.

  /* Period setting, 8-bit register in SPLIT mode */
  TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
     daa:	8e ef       	ldi	r24, 0xFE	; 254
     dac:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <vtable for UartClass+0x7f69d9>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1539
  TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
     db0:	80 93 27 0a 	sts	0x0A27, r24	; 0x800a27 <vtable for UartClass+0x7f69da>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1559
  #if (F_CPU > 25000000) //   use 256 divider when clocked over 25 MHz
    TCA0.SPLIT.CTRLA   = (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 5000000) //  use 64 divider for everything in the middle
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV64_gc) | (TCA_SPLIT_ENABLE_bm);
  #elif (F_CPU > 1000000) // and use 16...
    TCA0.SPLIT.CTRLA   =  (TCA_SPLIT_CLKSEL_DIV16_gc) | (TCA_SPLIT_ENABLE_bm);
     db4:	89 e0       	ldi	r24, 0x09	; 9
     db6:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <vtable for UartClass+0x7f69b3>
init_millis():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1227
{
  #if defined(MILLIS_USE_TIMERNONE)
    badCall("init_millis() is only valid with millis time keeping enabled.");
  #else
    #if defined(MILLIS_USE_TIMERA0)
      TCA0.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
     dba:	80 91 0a 0a 	lds	r24, 0x0A0A	; 0x800a0a <vtable for UartClass+0x7f69bd>
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <vtable for UartClass+0x7f69bd>
init():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring.c:1303
  #ifndef MILLIS_USE_TIMERNONE
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  sei();
     dc4:	78 94       	sei
main():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/main.cpp:53
  onBeforeInit(); // Emnpty callback called before init but after the .init stuff. First normal code executed
  init(); // Interrupts are turned on just prior to init() returning.
  initVariant();
  if (!onAfterInit()) sei();  // enable interrupts.
     dc6:	78 94       	sei
setup():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:28

bool sentSerialcheckFlag;


void setup() {
  Serial.begin(115200);
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	52 ec       	ldi	r21, 0xC2	; 194
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	83 e9       	ldi	r24, 0x93	; 147
     dd2:	9c e3       	ldi	r25, 0x3C	; 60
     dd4:	65 db       	rcall	.-2358   	; 0x4a0 <UartClass::begin(unsigned long)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:32
  while (!Serial) {
    // trying to connect to serial...
  }
  delay(5000);
     dd6:	68 e8       	ldi	r22, 0x88	; 136
     dd8:	73 e1       	ldi	r23, 0x13	; 19
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:14

bool printHeader;

//-- Init functions **
void initAllTheTimeTrackers() {
  pinTestModeStartMillis = millis();
     dde:	fc da       	rcall	.-2568   	; 0x3d8 <delay>
initAllTheTimeTrackers():
     de0:	24 db       	rcall	.-2488   	; 0x42a <millis>
     de2:	60 93 40 3c 	sts	0x3C40, r22	; 0x803c40 <pinTestModeStartMillis>
     de6:	70 93 41 3c 	sts	0x3C41, r23	; 0x803c41 <pinTestModeStartMillis+0x1>
     dea:	80 93 42 3c 	sts	0x3C42, r24	; 0x803c42 <pinTestModeStartMillis+0x2>
     dee:	90 93 43 3c 	sts	0x3C43, r25	; 0x803c43 <pinTestModeStartMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:15
  btnWatchTimerStart = millis();
     df2:	1b db       	rcall	.-2506   	; 0x42a <millis>
     df4:	60 93 64 3c 	sts	0x3C64, r22	; 0x803c64 <btnWatchTimerStart>
     df8:	70 93 65 3c 	sts	0x3C65, r23	; 0x803c65 <btnWatchTimerStart+0x1>
     dfc:	80 93 66 3c 	sts	0x3C66, r24	; 0x803c66 <btnWatchTimerStart+0x2>
     e00:	90 93 67 3c 	sts	0x3C67, r25	; 0x803c67 <btnWatchTimerStart+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:16
  startDisplayFPSMicros = micros();
     e04:	ba da       	rcall	.-2700   	; 0x37a <micros>
     e06:	60 93 70 3c 	sts	0x3C70, r22	; 0x803c70 <startDisplayFPSMicros>
     e0a:	70 93 71 3c 	sts	0x3C71, r23	; 0x803c71 <startDisplayFPSMicros+0x1>
     e0e:	80 93 72 3c 	sts	0x3C72, r24	; 0x803c72 <startDisplayFPSMicros+0x2>
     e12:	90 93 73 3c 	sts	0x3C73, r25	; 0x803c73 <startDisplayFPSMicros+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/extraUtils.h:17
  startCountMillis = millis();
     e16:	09 db       	rcall	.-2542   	; 0x42a <millis>
     e18:	60 93 78 3c 	sts	0x3C78, r22	; 0x803c78 <startCountMillis>
     e1c:	70 93 79 3c 	sts	0x3C79, r23	; 0x803c79 <startCountMillis+0x1>
     e20:	80 93 7a 3c 	sts	0x3C7A, r24	; 0x803c7a <startCountMillis+0x2>
     e24:	90 93 7b 3c 	sts	0x3C7B, r25	; 0x803c7b <startCountMillis+0x3>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:191

      //  For Port C (After Port A & Port B)
      if (PORTA_checked && PORTB_checked && !PORTC_checked) {

        byte portAddrMask = 0b00000001;
        portAddrMask <<= pcc;
     e28:	01 e0       	ldi	r16, 0x01	; 1
     e2a:	10 e0       	ldi	r17, 0x00	; 0
     e2c:	22 24       	eor	r2, r2
     e2e:	23 94       	inc	r2
     e30:	31 2c       	mov	r3, r1
stringTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
     e32:	8b e8       	ldi	r24, 0x8B	; 139
     e34:	48 2e       	mov	r4, r24
     e36:	82 ea       	ldi	r24, 0xA2	; 162
     e38:	58 2e       	mov	r5, r24
setupDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:50
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
     e3a:	9e ef       	ldi	r25, 0xFE	; 254
     e3c:	d9 2e       	mov	r13, r25
showOnDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:95
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
     e3e:	21 e1       	ldi	r18, 0x11	; 17
     e40:	62 2e       	mov	r6, r18
     e42:	71 2c       	mov	r7, r1
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:39
}


void loop() {
  /* --- 0. Send Serial check flag = 1 ---*/
  if (!sentSerialcheckFlag) {
     e44:	80 91 85 3c 	lds	r24, 0x3C85	; 0x803c85 <sentSerialcheckFlag>
     e48:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:40
    Serial.println("SERIAL:1");
     e4a:	06 c0       	rjmp	.+12     	; 0xe58 <main+0xe2>
     e4c:	81 e7       	ldi	r24, 0x71	; 113
     e4e:	90 ea       	ldi	r25, 0xA0	; 160
     e50:	37 db       	rcall	.-2450   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:41
    sentSerialcheckFlag = true;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	80 93 85 3c 	sts	0x3C85, r24	; 0x803c85 <sentSerialcheckFlag>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:45
  }

  /* ----  1. Check ATTINY's Internal digital IO Pin Status. ---- */
  printStepTitle("CHECKING ATTINY's INT IOs", HOLD_DELAY);
     e58:	6a e7       	ldi	r22, 0x7A	; 122
     e5a:	70 ea       	ldi	r23, 0xA0	; 160
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	10 dd       	rcall	.-1504   	; 0x882 <String::String(char const*)>
     e62:	ce 01       	movw	r24, r28
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	21 dd       	rcall	.-1470   	; 0x8aa <printStepTitle(String, int) [clone .constprop.2]>
     e68:	ce 01       	movw	r24, r28
     e6a:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:47

  if (!pinExaminationFinished) {
     e6c:	61 db       	rcall	.-2366   	; 0x530 <String::~String()>
     e6e:	80 91 84 3c 	lds	r24, 0x3C84	; 0x803c84 <pinExaminationFinished>
     e72:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:198
        cli();
        PORTC.DIRSET = portAddrMask;
        PORTC.OUTSET = portAddrMask;
        // Set as INPUT and read STATE
        PORTC.DIRCLR = portAddrMask;
        firstState = PORTC.IN & portAddrMask;
     e74:	39 c1       	rjmp	.+626    	; 0x10e8 <main+0x372>
examinePins():
     e76:	cc 24       	eor	r12, r12
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:62
boolean isSerialPin;


void examinePins() {
  while (true) {
    pinTestModeCurrMillis = millis();
     e78:	c3 94       	inc	r12
     e7a:	d7 da       	rcall	.-2642   	; 0x42a <millis>
     e7c:	60 93 44 3c 	sts	0x3C44, r22	; 0x803c44 <pinTestModeCurrMillis>
     e80:	70 93 45 3c 	sts	0x3C45, r23	; 0x803c45 <pinTestModeCurrMillis+0x1>
     e84:	80 93 46 3c 	sts	0x3C46, r24	; 0x803c46 <pinTestModeCurrMillis+0x2>
     e88:	90 93 47 3c 	sts	0x3C47, r25	; 0x803c47 <pinTestModeCurrMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:64

    if (pinTestModeCurrMillis - pinTestModeStartMillis >= testModeProgressPeriod) {
     e8c:	80 90 40 3c 	lds	r8, 0x3C40	; 0x803c40 <pinTestModeStartMillis>
     e90:	90 90 41 3c 	lds	r9, 0x3C41	; 0x803c41 <pinTestModeStartMillis+0x1>
     e94:	a0 90 42 3c 	lds	r10, 0x3C42	; 0x803c42 <pinTestModeStartMillis+0x2>
     e98:	b0 90 43 3c 	lds	r11, 0x3C43	; 0x803c43 <pinTestModeStartMillis+0x3>
     e9c:	68 19       	sub	r22, r8
     e9e:	79 09       	sbc	r23, r9
     ea0:	8a 09       	sbc	r24, r10
     ea2:	9b 09       	sbc	r25, r11
     ea4:	64 36       	cpi	r22, 0x64	; 100
     ea6:	71 05       	cpc	r23, r1
     ea8:	81 05       	cpc	r24, r1
     eaa:	91 05       	cpc	r25, r1
     eac:	30 f3       	brcs	.-52     	; 0xe7a <main+0x104>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:67

      //---  For Port A (Before Port B & C) ---//
      if (!PORTA_checked && !PORTB_checked && !PORTC_checked) {
     eae:	80 91 3f 3c 	lds	r24, 0x3C3F	; 0x803c3f <PORTA_checked>
     eb2:	81 11       	cpse	r24, r1
     eb4:	50 c0       	rjmp	.+160    	; 0xf56 <main+0x1e0>
     eb6:	80 91 3e 3c 	lds	r24, 0x3C3E	; 0x803c3e <PORTB_checked>
     eba:	81 11       	cpse	r24, r1
     ebc:	47 c0       	rjmp	.+142    	; 0xf4c <main+0x1d6>
     ebe:	80 91 3d 3c 	lds	r24, 0x3C3D	; 0x803c3d <PORTC_checked>
     ec2:	81 11       	cpse	r24, r1
     ec4:	43 c0       	rjmp	.+134    	; 0xf4c <main+0x1d6>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:69
        byte portAddrMask = 0b00000001;
        portAddrMask <<= pac;
     ec6:	c8 01       	movw	r24, r16
     ec8:	00 90 00 3c 	lds	r0, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <main+0x15c>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <main+0x158>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:72

        // Set as OUTPUT & HIGH
        cli();
     ed6:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:73
        PORTA.DIRSET = portAddrMask;
     ed8:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <vtable for UartClass+0x7f63b4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:74
        PORTA.OUTSET = portAddrMask;
     edc:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <vtable for UartClass+0x7f63b8>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:76
        // Set as INPUT and read STATE
        PORTA.DIRCLR = portAddrMask;
     ee0:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <vtable for UartClass+0x7f63b5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:77
        firstState = PORTA.IN & portAddrMask;
     ee4:	20 91 08 04 	lds	r18, 0x0408	; 0x800408 <vtable for UartClass+0x7f63bb>
     ee8:	28 23       	and	r18, r24
     eea:	31 e0       	ldi	r19, 0x01	; 1
     eec:	09 f4       	brne	.+2      	; 0xef0 <main+0x17a>
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	30 93 3c 3c 	sts	0x3C3C, r19	; 0x803c3c <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:79
        // Set as OUTPUT & LOW
        PORTA.DIRSET = portAddrMask;
     ef4:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <vtable for UartClass+0x7f63b4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:80
        PORTA.OUTCLR = portAddrMask;
     ef8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <vtable for UartClass+0x7f63b9>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:82
        // Set as INPUT and read STATE, again
        PORTA.DIRCLR = portAddrMask;
     efc:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <vtable for UartClass+0x7f63b5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:83
        secondState = PORTA.IN & portAddrMask;
     f00:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <vtable for UartClass+0x7f63bb>
     f04:	89 23       	and	r24, r25
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	09 f4       	brne	.+2      	; 0xf0c <main+0x196>
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	90 93 3b 3c 	sts	0x3C3B, r25	; 0x803c3b <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:84
        sei();
     f10:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:87

        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
     f12:	20 91 3c 3c 	lds	r18, 0x3C3C	; 0x803c3c <firstState>
     f16:	80 91 00 3c 	lds	r24, 0x3C00	; 0x803c00 <__DATA_REGION_ORIGIN__>
     f1a:	90 91 01 3c 	lds	r25, 0x3C01	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
     f1e:	fc 01       	movw	r30, r24
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	e5 5d       	subi	r30, 0xD5	; 213
     f26:	f3 4c       	sbci	r31, 0xC3	; 195
     f28:	22 23       	and	r18, r18
     f2a:	09 f4       	brne	.+2      	; 0xf2e <main+0x1b8>
     f2c:	06 c1       	rjmp	.+524    	; 0x113a <main+0x3c4>
     f2e:	20 91 3b 3c 	lds	r18, 0x3C3B	; 0x803c3b <secondState>
     f32:	21 11       	cpse	r18, r1
     f34:	02 c1       	rjmp	.+516    	; 0x113a <main+0x3c4>
     f36:	00 83       	st	Z, r16
     f38:	11 83       	std	Z+1, r17	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:91
        else portAStatus[pac - 1] = 0;


        pac++;
     f3a:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:92
        if (pac > int(sizeof(portAStatus) / 2)) {
     f3c:	88 30       	cpi	r24, 0x08	; 8
     f3e:	91 05       	cpc	r25, r1
     f40:	0c f0       	brlt	.+2      	; 0xf44 <main+0x1ce>
     f42:	fe c0       	rjmp	.+508    	; 0x1140 <main+0x3ca>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:91
        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
        else portAStatus[pac - 1] = 0;


        pac++;
     f44:	80 93 00 3c 	sts	0x3C00, r24	; 0x803c00 <__DATA_REGION_ORIGIN__>
     f48:	90 93 01 3c 	sts	0x3C01, r25	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:119
          }
        }
      }

      //---  For Port B (After Port A) ---//
      if (PORTA_checked && !PORTB_checked && !PORTC_checked) {
     f4c:	80 91 3f 3c 	lds	r24, 0x3C3F	; 0x803c3f <PORTA_checked>
     f50:	88 23       	and	r24, r24
     f52:	09 f4       	brne	.+2      	; 0xf56 <main+0x1e0>
     f54:	61 c0       	rjmp	.+194    	; 0x1018 <main+0x2a2>
     f56:	80 91 3e 3c 	lds	r24, 0x3C3E	; 0x803c3e <PORTB_checked>
     f5a:	81 11       	cpse	r24, r1
     f5c:	62 c0       	rjmp	.+196    	; 0x1022 <main+0x2ac>
     f5e:	80 91 3d 3c 	lds	r24, 0x3C3D	; 0x803c3d <PORTC_checked>
     f62:	81 11       	cpse	r24, r1
     f64:	5e c0       	rjmp	.+188    	; 0x1022 <main+0x2ac>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:124
        byte portAddrMask = 0b00000001; // pbc staring at 4

        // PB2 and PB3 are serial, assuming they are working

        if (pbc == 2 || pbc == 3) {
     f66:	80 91 2b 3c 	lds	r24, 0x3C2B	; 0x803c2b <pbc>
     f6a:	90 91 2c 3c 	lds	r25, 0x3C2C	; 0x803c2c <pbc+0x1>
     f6e:	9c 01       	movw	r18, r24
     f70:	22 50       	subi	r18, 0x02	; 2
     f72:	31 09       	sbc	r19, r1
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	08 f0       	brcs	.+2      	; 0xf7c <main+0x206>
     f7a:	45 c1       	rjmp	.+650    	; 0x1206 <main+0x490>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:125
          isSerialPin = true;
     f7c:	c0 92 2a 3c 	sts	0x3C2A, r12	; 0x803c2a <isSerialPin>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:127
          // Just for filling in hardcoded data for later
          firstState = LOW;
     f80:	10 92 3c 3c 	sts	0x3C3C, r1	; 0x803c3c <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:128
          secondState = LOW;
     f84:	10 92 3b 3c 	sts	0x3C3B, r1	; 0x803c3b <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:133
        } else {
          isSerialPin = false;
        }

        if (!isSerialPin) {
     f88:	20 91 2a 3c 	lds	r18, 0x3C2A	; 0x803c2a <isSerialPin>
     f8c:	21 11       	cpse	r18, r1
     f8e:	25 c0       	rjmp	.+74     	; 0xfda <main+0x264>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:135
          // bit shift and iterate through PORT
          portAddrMask <<= pbc;
     f90:	a8 01       	movw	r20, r16
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <main+0x222>
     f94:	44 0f       	add	r20, r20
     f96:	55 1f       	adc	r21, r21
     f98:	8a 95       	dec	r24
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <main+0x21e>
     f9c:	ca 01       	movw	r24, r20
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:138

          // Set as OUTPUT & HIGH
          cli();
     f9e:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:139
          PORTB.DIRSET = portAddrMask;
     fa0:	40 93 21 04 	sts	0x0421, r20	; 0x800421 <vtable for UartClass+0x7f63d4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:140
          PORTB.OUTSET = portAddrMask;
     fa4:	40 93 25 04 	sts	0x0425, r20	; 0x800425 <vtable for UartClass+0x7f63d8>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:142
          // Set as INPUT and read STATE
          PORTB.DIRCLR = portAddrMask;
     fa8:	40 93 22 04 	sts	0x0422, r20	; 0x800422 <vtable for UartClass+0x7f63d5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:143
          firstState = PORTB.IN & portAddrMask;
     fac:	20 91 28 04 	lds	r18, 0x0428	; 0x800428 <vtable for UartClass+0x7f63db>
     fb0:	24 23       	and	r18, r20
     fb2:	31 e0       	ldi	r19, 0x01	; 1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <main+0x242>
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	30 93 3c 3c 	sts	0x3C3C, r19	; 0x803c3c <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:145
          // Set as OUTPUT & LOW
          PORTB.DIRSET = portAddrMask;
     fbc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <vtable for UartClass+0x7f63d4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:146
          PORTB.OUTCLR = portAddrMask;
     fc0:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <vtable for UartClass+0x7f63d9>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:148
          // Set as INPUT and read STATE, again!
          PORTB.DIRCLR = portAddrMask;
     fc4:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <vtable for UartClass+0x7f63d5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:149
          secondState = PORTB.IN & portAddrMask;
     fc8:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <vtable for UartClass+0x7f63db>
     fcc:	89 23       	and	r24, r25
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <main+0x25e>
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	90 93 3b 3c 	sts	0x3C3B, r25	; 0x803c3b <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:150
          sei();
     fd8:	78 94       	sei
     fda:	20 91 2b 3c 	lds	r18, 0x3C2B	; 0x803c2b <pbc>
     fde:	30 91 2c 3c 	lds	r19, 0x3C2C	; 0x803c2c <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:155
        }


        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
     fe2:	40 91 3c 3c 	lds	r20, 0x3C3C	; 0x803c3c <firstState>
     fe6:	c9 01       	movw	r24, r18
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	86 5e       	subi	r24, 0xE6	; 230
     fee:	93 4c       	sbci	r25, 0xC3	; 195
     ff0:	44 23       	and	r20, r20
     ff2:	09 f4       	brne	.+2      	; 0xff6 <main+0x280>
     ff4:	0b c1       	rjmp	.+534    	; 0x120c <main+0x496>
     ff6:	40 91 3b 3c 	lds	r20, 0x3C3B	; 0x803c3b <secondState>
     ffa:	41 11       	cpse	r20, r1
     ffc:	07 c1       	rjmp	.+526    	; 0x120c <main+0x496>
     ffe:	dc 01       	movw	r26, r24
    1000:	0d 93       	st	X+, r16
    1002:	1c 93       	st	X, r17
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:159
        else portBStatus[pbc] = 0;


        pbc++;
    1004:	2f 5f       	subi	r18, 0xFF	; 255
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:160
        if (pbc > int(sizeof(portBStatus) / 2)) {
    1008:	29 30       	cpi	r18, 0x09	; 9
    100a:	31 05       	cpc	r19, r1
    100c:	0c f0       	brlt	.+2      	; 0x1010 <main+0x29a>
    100e:	02 c1       	rjmp	.+516    	; 0x1214 <main+0x49e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:159
        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
        else portBStatus[pbc] = 0;


        pbc++;
    1010:	20 93 2b 3c 	sts	0x3C2B, r18	; 0x803c2b <pbc>
    1014:	30 93 2c 3c 	sts	0x3C2C, r19	; 0x803c2c <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:188
          }
        }
      }

      //  For Port C (After Port A & Port B)
      if (PORTA_checked && PORTB_checked && !PORTC_checked) {
    1018:	80 91 3f 3c 	lds	r24, 0x3C3F	; 0x803c3f <PORTA_checked>
    101c:	88 23       	and	r24, r24
    101e:	09 f4       	brne	.+2      	; 0x1022 <main+0x2ac>
    1020:	c6 c1       	rjmp	.+908    	; 0x13ae <main+0x638>
    1022:	80 91 3e 3c 	lds	r24, 0x3C3E	; 0x803c3e <PORTB_checked>
    1026:	88 23       	and	r24, r24
    1028:	09 f4       	brne	.+2      	; 0x102c <main+0x2b6>
    102a:	4c c0       	rjmp	.+152    	; 0x10c4 <main+0x34e>
    102c:	80 91 3d 3c 	lds	r24, 0x3C3D	; 0x803c3d <PORTC_checked>
    1030:	81 11       	cpse	r24, r1
    1032:	48 c0       	rjmp	.+144    	; 0x10c4 <main+0x34e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:191

        byte portAddrMask = 0b00000001;
        portAddrMask <<= pcc;
    1034:	c8 01       	movw	r24, r16
    1036:	00 90 18 3c 	lds	r0, 0x3C18	; 0x803c18 <pcc>
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <main+0x2ca>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <main+0x2c6>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:193

        cli();
    1044:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:194
        PORTC.DIRSET = portAddrMask;
    1046:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f63f4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:195
        PORTC.OUTSET = portAddrMask;
    104a:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <vtable for UartClass+0x7f63f8>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:197
        // Set as INPUT and read STATE
        PORTC.DIRCLR = portAddrMask;
    104e:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <vtable for UartClass+0x7f63f5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:198
        firstState = PORTC.IN & portAddrMask;
    1052:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <vtable for UartClass+0x7f63fb>
    1056:	28 23       	and	r18, r24
    1058:	31 e0       	ldi	r19, 0x01	; 1
    105a:	09 f4       	brne	.+2      	; 0x105e <main+0x2e8>
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	30 93 3c 3c 	sts	0x3C3C, r19	; 0x803c3c <firstState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:200
        // Set as OUTPUT & LOW
        PORTC.DIRSET = portAddrMask;
    1062:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f63f4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:201
        PORTC.OUTCLR = portAddrMask;
    1066:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f63f9>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:203
        // Set as INPUT and read STATE, again
        PORTC.DIRCLR = portAddrMask;
    106a:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <vtable for UartClass+0x7f63f5>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:204
        secondState = PORTC.IN & portAddrMask;
    106e:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <vtable for UartClass+0x7f63fb>
    1072:	89 23       	and	r24, r25
    1074:	91 e0       	ldi	r25, 0x01	; 1
    1076:	09 f4       	brne	.+2      	; 0x107a <main+0x304>
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	90 93 3b 3c 	sts	0x3C3B, r25	; 0x803c3b <secondState>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:205
        sei();
    107e:	78 94       	sei
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:208


        if (firstState == HIGH && secondState == LOW) {
    1080:	20 91 3c 3c 	lds	r18, 0x3C3C	; 0x803c3c <firstState>
    1084:	80 91 18 3c 	lds	r24, 0x3C18	; 0x803c18 <pcc>
    1088:	90 91 19 3c 	lds	r25, 0x3C19	; 0x803c19 <pcc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:211
          //  Means that particular pin state is changing and working
          //  Mark that pin as "working: 1"
          portCStatus[pcc] = 1;
    108c:	fc 01       	movw	r30, r24
    108e:	ee 0f       	add	r30, r30
    1090:	ff 1f       	adc	r31, r31
    1092:	e4 5f       	subi	r30, 0xF4	; 244
    1094:	f3 4c       	sbci	r31, 0xC3	; 195
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:208
        PORTC.DIRCLR = portAddrMask;
        secondState = PORTC.IN & portAddrMask;
        sei();


        if (firstState == HIGH && secondState == LOW) {
    1096:	22 23       	and	r18, r18
    1098:	09 f4       	brne	.+2      	; 0x109c <main+0x326>
    109a:	23 c1       	rjmp	.+582    	; 0x12e2 <main+0x56c>
    109c:	20 91 3b 3c 	lds	r18, 0x3C3B	; 0x803c3b <secondState>
    10a0:	21 11       	cpse	r18, r1
    10a2:	1f c1       	rjmp	.+574    	; 0x12e2 <main+0x56c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:211
          //  Means that particular pin state is changing and working
          //  Mark that pin as "working: 1"
          portCStatus[pcc] = 1;
    10a4:	00 83       	st	Z, r16
    10a6:	11 83       	std	Z+1, r17	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:217
        } else {
          //  Mark that pin as "not-working: 0"
          portCStatus[pcc] = 0;
        }

        pcc++;
    10a8:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:218
        if (pcc > 5) {
    10aa:	86 30       	cpi	r24, 0x06	; 6
    10ac:	91 05       	cpc	r25, r1
    10ae:	0c f0       	brlt	.+2      	; 0x10b2 <main+0x33c>
    10b0:	1b c1       	rjmp	.+566    	; 0x12e8 <main+0x572>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:217
        } else {
          //  Mark that pin as "not-working: 0"
          portCStatus[pcc] = 0;
        }

        pcc++;
    10b2:	80 93 18 3c 	sts	0x3C18, r24	; 0x803c18 <pcc>
    10b6:	90 93 19 3c 	sts	0x3C19, r25	; 0x803c19 <pcc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:245
        }
      }



      if (PORTA_checked && PORTB_checked && PORTC_checked) {
    10ba:	80 91 3f 3c 	lds	r24, 0x3C3F	; 0x803c3f <PORTA_checked>
    10be:	88 23       	and	r24, r24
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <main+0x34e>
    10c2:	75 c1       	rjmp	.+746    	; 0x13ae <main+0x638>
    10c4:	80 91 3e 3c 	lds	r24, 0x3C3E	; 0x803c3e <PORTB_checked>
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <main+0x358>
    10cc:	70 c1       	rjmp	.+736    	; 0x13ae <main+0x638>
    10ce:	80 91 3d 3c 	lds	r24, 0x3C3D	; 0x803c3d <PORTC_checked>
    10d2:	88 23       	and	r24, r24
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <main+0x362>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:246
        Serial.println("\nATTINY Digital IO Test finished!");
    10d6:	6b c1       	rjmp	.+726    	; 0x13ae <main+0x638>
    10d8:	83 e1       	ldi	r24, 0x13	; 19
    10da:	92 ea       	ldi	r25, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:50
    examinePins();

    pinExaminationFinished = true;
    10dc:	f1 d9       	rcall	.-3102   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
loop():
    10de:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:51
    printHeader = false;
    10e0:	80 93 84 3c 	sts	0x3C84, r24	; 0x803c84 <pinExaminationFinished>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:56
  }


  /* ----  2. Check rtc clock addr. ---- */
  printStepTitle("CHECKING RTC's AVAILABILITY", HOLD_DELAY);
    10e4:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
    10e8:	65 e3       	ldi	r22, 0x35	; 53
    10ea:	72 ea       	ldi	r23, 0xA2	; 162
    10ec:	ce 01       	movw	r24, r28
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	c8 db       	rcall	.-2160   	; 0x882 <String::String(char const*)>
    10f2:	ce 01       	movw	r24, r28
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	d9 db       	rcall	.-2126   	; 0x8aa <printStepTitle(String, int) [clone .constprop.2]>
    10f8:	ce 01       	movw	r24, r28
    10fa:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:58

  if (pinExaminationFinished && !rtcAvailabilityChecked) {
    10fc:	19 da       	rcall	.-3022   	; 0x530 <String::~String()>
    10fe:	80 91 84 3c 	lds	r24, 0x3C84	; 0x803c84 <pinExaminationFinished>
    1102:	88 23       	and	r24, r24
    1104:	09 f4       	brne	.+2      	; 0x1108 <main+0x392>
    1106:	79 c1       	rjmp	.+754    	; 0x13fa <main+0x684>
    1108:	80 91 83 3c 	lds	r24, 0x3C83	; 0x803c83 <rtcAvailabilityChecked>
    110c:	81 11       	cpse	r24, r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:67
{
}

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();
    110e:	75 c1       	rjmp	.+746    	; 0x13fa <main+0x684>
begin():
    1110:	39 da       	rcall	.-2958   	; 0x584 <TinyMegaI2CMaster::init() [clone .constprop.17]>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 7f 00 	call	0xfe	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
    111a:	81 11       	cpse	r24, r1
    111c:	5d c1       	rjmp	.+698    	; 0x13d8 <main+0x662>
reportRTCAvailability():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:22
bool rtcAvailabilityChecked;
bool rtcReadabilityChecked;

void reportRTCAvailability() {
  while (!rtc.begin()) {
    if (checking_rtc_counter < 20) {
    111e:	80 91 48 3c 	lds	r24, 0x3C48	; 0x803c48 <checking_rtc_counter>
    1122:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <checking_rtc_counter+0x1>
    1126:	84 31       	cpi	r24, 0x14	; 20
    1128:	91 05       	cpc	r25, r1
    112a:	0c f0       	brlt	.+2      	; 0x112e <main+0x3b8>
    112c:	51 c1       	rjmp	.+674    	; 0x13d0 <main+0x65a>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:23
      checking_rtc_counter += 1;
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	80 93 48 3c 	sts	0x3C48, r24	; 0x803c48 <checking_rtc_counter>
    1134:	90 93 49 3c 	sts	0x3C49, r25	; 0x803c49 <checking_rtc_counter+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:88
        secondState = PORTA.IN & portAddrMask;
        sei();

        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portAStatus[pac - 1] = 1;
        else portAStatus[pac - 1] = 0;
    1138:	eb cf       	rjmp	.-42     	; 0x1110 <main+0x39a>
examinePins():
    113a:	10 82       	st	Z, r1
    113c:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:93


        pac++;
        if (pac > int(sizeof(portAStatus) / 2)) {
          pac = 1;
    113e:	fd ce       	rjmp	.-518    	; 0xf3a <main+0x1c4>
    1140:	20 92 00 3c 	sts	0x3C00, r2	; 0x803c00 <__DATA_REGION_ORIGIN__>
    1144:	30 92 01 3c 	sts	0x3C01, r3	; 0x803c01 <__DATA_REGION_ORIGIN__+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:94
          PORTA_checked = true;
    1148:	c0 92 3f 3c 	sts	0x3C3F, r12	; 0x803c3f <PORTA_checked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:95
          Serial.println("\nPORT-A IO check finished!");
    114c:	84 e9       	ldi	r24, 0x94	; 148
    114e:	90 ea       	ldi	r25, 0xA0	; 160
    1150:	b7 d9       	rcall	.-3218   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1152:	fd e2       	ldi	r31, 0x2D	; 45
    1154:	8f 2e       	mov	r8, r31
    1156:	fc e3       	ldi	r31, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:97

          int total_working_pins = 0;
    1158:	9f 2e       	mov	r9, r31
main():
    115a:	f1 2c       	mov	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:100

          // ** Duct tape solution
          for (int i = 0; i < int(sizeof(portAStatus) / 2); i++) {
    115c:	e1 2c       	mov	r14, r1
    115e:	b1 2c       	mov	r11, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:101
            if (portAStatus[i] == 0) {
    1160:	a1 2c       	mov	r10, r1
examinePins():
    1162:	d4 01       	movw	r26, r8
    1164:	8d 91       	ld	r24, X+
    1166:	9d 91       	ld	r25, X+
    1168:	4d 01       	movw	r8, r26
    116a:	bf ef       	ldi	r27, 0xFF	; 255
    116c:	ab 1a       	sub	r10, r27
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:102
              Serial.println("\nInternally, PA" + String(i + 1) + "not working");
    116e:	bb 0a       	sbc	r11, r27
    1170:	89 2b       	or	r24, r25
    1172:	41 f5       	brne	.+80     	; 0x11c4 <main+0x44e>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    1174:	b5 01       	movw	r22, r10
    1176:	ce 01       	movw	r24, r28
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	52 db       	rcall	.-2396   	; 0x820 <String::String(int, unsigned char) [clone .constprop.19]>
_ZN15StringSumHelperC2EPKc():
    117c:	6f ea       	ldi	r22, 0xAF	; 175
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:102
    117e:	70 ea       	ldi	r23, 0xA0	; 160
    1180:	ce 01       	movw	r24, r28
    1182:	09 96       	adiw	r24, 0x09	; 9
    1184:	7e db       	rcall	.-2308   	; 0x882 <String::String(char const*)>
examinePins():
    1186:	be 01       	movw	r22, r28
    1188:	6f 5f       	subi	r22, 0xFF	; 255
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	ce 01       	movw	r24, r28
    118e:	09 96       	adiw	r24, 0x09	; 9
    1190:	17 db       	rcall	.-2514   	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
    1192:	6f eb       	ldi	r22, 0xBF	; 191
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    1194:	70 ea       	ldi	r23, 0xA0	; 160
    1196:	00 db       	rcall	.-2560   	; 0x798 <operator+(StringSumHelper const&, char const*)>
    1198:	a8 d9       	rcall	.-3248   	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
_ZN15StringSumHelperD2Ev():
    119a:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:102
    119c:	09 96       	adiw	r24, 0x09	; 9
    119e:	c8 d9       	rcall	.-3184   	; 0x530 <String::~String()>
examinePins():
    11a0:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:100
          Serial.println("\nPORT-A IO check finished!");

          int total_working_pins = 0;

          // ** Duct tape solution
          for (int i = 0; i < int(sizeof(portAStatus) / 2); i++) {
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	c5 d9       	rcall	.-3190   	; 0x530 <String::~String()>
    11a6:	f7 e0       	ldi	r31, 0x07	; 7
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:108
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portAStatus) / 2) {
    11a8:	af 16       	cp	r10, r31
    11aa:	b1 04       	cpc	r11, r1
    11ac:	d1 f6       	brne	.-76     	; 0x1162 <main+0x3ec>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:109
            Serial.println("\nIn PORT A (PA1-PA7)");
    11ae:	27 e0       	ldi	r18, 0x07	; 7
    11b0:	e2 16       	cp	r14, r18
    11b2:	f1 04       	cpc	r15, r1
    11b4:	59 f4       	brne	.+22     	; 0x11cc <main+0x456>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:110
            Serial.println("all pins are working!");
    11b6:	8b ec       	ldi	r24, 0xCB	; 203
    11b8:	90 ea       	ldi	r25, 0xA0	; 160
    11ba:	82 d9       	rcall	.-3324   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:104
          // ** Duct tape solution
          for (int i = 0; i < int(sizeof(portAStatus) / 2); i++) {
            if (portAStatus[i] == 0) {
              Serial.println("\nInternally, PA" + String(i + 1) + "not working");
            } else {
              total_working_pins += 1;
    11bc:	80 ee       	ldi	r24, 0xE0	; 224
    11be:	90 ea       	ldi	r25, 0xA0	; 160
    11c0:	7f d9       	rcall	.-3330   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:112

          if (total_working_pins == sizeof(portAStatus) / 2) {
            Serial.println("\nIn PORT A (PA1-PA7)");
            Serial.println("all pins are working!");
          } else {
            Serial.println("\nIn PORT A (PA1-PA7), a total");
    11c2:	c4 ce       	rjmp	.-632    	; 0xf4c <main+0x1d6>
    11c4:	ef ef       	ldi	r30, 0xFF	; 255
    11c6:	ee 1a       	sub	r14, r30
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:113
            Serial.println("of only " + String(total_working_pins) + " pins are working!");
    11c8:	fe 0a       	sbc	r15, r30
    11ca:	ed cf       	rjmp	.-38     	; 0x11a6 <main+0x430>
    11cc:	86 ef       	ldi	r24, 0xF6	; 246
    11ce:	90 ea       	ldi	r25, 0xA0	; 160
    11d0:	77 d9       	rcall	.-3346   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    11d2:	b7 01       	movw	r22, r14
    11d4:	ce 01       	movw	r24, r28
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	23 db       	rcall	.-2490   	; 0x820 <String::String(int, unsigned char) [clone .constprop.19]>
_ZN15StringSumHelperC2EPKc():
    11da:	64 e1       	ldi	r22, 0x14	; 20
    11dc:	71 ea       	ldi	r23, 0xA1	; 161
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:113
    11de:	ce 01       	movw	r24, r28
    11e0:	09 96       	adiw	r24, 0x09	; 9
    11e2:	4f db       	rcall	.-2402   	; 0x882 <String::String(char const*)>
examinePins():
    11e4:	be 01       	movw	r22, r28
    11e6:	6f 5f       	subi	r22, 0xFF	; 255
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	ce 01       	movw	r24, r28
    11ec:	09 96       	adiw	r24, 0x09	; 9
    11ee:	e8 da       	rcall	.-2608   	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
    11f0:	69 e7       	ldi	r22, 0x79	; 121
    11f2:	71 ea       	ldi	r23, 0xA1	; 161
    11f4:	d1 da       	rcall	.-2654   	; 0x798 <operator+(StringSumHelper const&, char const*)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    11f6:	79 d9       	rcall	.-3342   	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
_ZN15StringSumHelperD2Ev():
    11f8:	ce 01       	movw	r24, r28
    11fa:	09 96       	adiw	r24, 0x09	; 9
    11fc:	99 d9       	rcall	.-3278   	; 0x530 <String::~String()>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:113
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	96 d9       	rcall	.-3284   	; 0x530 <String::~String()>
    1204:	a3 ce       	rjmp	.-698    	; 0xf4c <main+0x1d6>
    1206:	10 92 2a 3c 	sts	0x3C2A, r1	; 0x803c2a <isSerialPin>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:130
          isSerialPin = true;
          // Just for filling in hardcoded data for later
          firstState = LOW;
          secondState = LOW;
        } else {
          isSerialPin = false;
    120a:	be ce       	rjmp	.-644    	; 0xf88 <main+0x212>
    120c:	fc 01       	movw	r30, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:156
        }


        //  Mark that pin as "working: 1, if you see the pin has toggled!"
        if (firstState == HIGH && secondState == LOW) portBStatus[pbc] = 1;
        else portBStatus[pbc] = 0;
    120e:	10 82       	st	Z, r1
    1210:	11 82       	std	Z+1, r1	; 0x01
    1212:	f8 ce       	rjmp	.-528    	; 0x1004 <main+0x28e>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:161


        pbc++;
        if (pbc > int(sizeof(portBStatus) / 2)) {
          pbc = 0;
    1214:	10 92 2b 3c 	sts	0x3C2B, r1	; 0x803c2b <pbc>
    1218:	10 92 2c 3c 	sts	0x3C2C, r1	; 0x803c2c <pbc+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:162
          PORTB_checked = true;
    121c:	c0 92 3e 3c 	sts	0x3C3E, r12	; 0x803c3e <PORTB_checked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:163
          Serial.println("\nPORT-B IO check finished!");
    1220:	8d e1       	ldi	r24, 0x1D	; 29
    1222:	91 ea       	ldi	r25, 0xA1	; 161
    1224:	4d d9       	rcall	.-3430   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1226:	7a e1       	ldi	r23, 0x1A	; 26
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:165

          int total_working_pins = 0;
    1228:	87 2e       	mov	r8, r23
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:167

          for (int i = 0; i < int(sizeof(portBStatus) / 2); i++) { // ignoring RX TX pin's registered states
    122a:	7c e3       	ldi	r23, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:168
            if ((portBStatus[i] == 0) && i != 2 && i != 3) {
    122c:	97 2e       	mov	r9, r23
main():
    122e:	b1 2c       	mov	r11, r1
    1230:	a1 2c       	mov	r10, r1
    1232:	f1 2c       	mov	r15, r1
    1234:	e1 2c       	mov	r14, r1
examinePins():
    1236:	d4 01       	movw	r26, r8
    1238:	8d 91       	ld	r24, X+
    123a:	9d 91       	ld	r25, X+
    123c:	4d 01       	movw	r8, r26
    123e:	89 2b       	or	r24, r25
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:169
              Serial.println("\nInternally, PB" + String(i) + " not working!");
    1240:	79 f5       	brne	.+94     	; 0x12a0 <main+0x52a>
    1242:	c7 01       	movw	r24, r14
    1244:	02 97       	sbiw	r24, 0x02	; 2
    1246:	02 97       	sbiw	r24, 0x02	; 2
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    1248:	c8 f0       	brcs	.+50     	; 0x127c <main+0x506>
    124a:	b7 01       	movw	r22, r14
    124c:	ce 01       	movw	r24, r28
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	e7 da       	rcall	.-2610   	; 0x820 <String::String(int, unsigned char) [clone .constprop.19]>
_ZN15StringSumHelperC2EPKc():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:169
    1252:	68 e3       	ldi	r22, 0x38	; 56
    1254:	71 ea       	ldi	r23, 0xA1	; 161
    1256:	ce 01       	movw	r24, r28
    1258:	09 96       	adiw	r24, 0x09	; 9
    125a:	13 db       	rcall	.-2522   	; 0x882 <String::String(char const*)>
examinePins():
    125c:	be 01       	movw	r22, r28
    125e:	6f 5f       	subi	r22, 0xFF	; 255
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	ce 01       	movw	r24, r28
    1264:	09 96       	adiw	r24, 0x09	; 9
    1266:	ac da       	rcall	.-2728   	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    1268:	68 e4       	ldi	r22, 0x48	; 72
    126a:	71 ea       	ldi	r23, 0xA1	; 161
    126c:	95 da       	rcall	.-2774   	; 0x798 <operator+(StringSumHelper const&, char const*)>
    126e:	3d d9       	rcall	.-3462   	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
_ZN15StringSumHelperD2Ev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:169
    1270:	ce 01       	movw	r24, r28
    1272:	09 96       	adiw	r24, 0x09	; 9
    1274:	5d d9       	rcall	.-3398   	; 0x530 <String::~String()>
examinePins():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:167
          PORTB_checked = true;
          Serial.println("\nPORT-B IO check finished!");

          int total_working_pins = 0;

          for (int i = 0; i < int(sizeof(portBStatus) / 2); i++) { // ignoring RX TX pin's registered states
    1276:	ce 01       	movw	r24, r28
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	5a d9       	rcall	.-3404   	; 0x530 <String::~String()>
    127c:	ef ef       	ldi	r30, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:177
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portBStatus) / 2 - 2) { // ignoring RX TX pins
    127e:	ee 1a       	sub	r14, r30
    1280:	fe 0a       	sbc	r15, r30
    1282:	f8 e0       	ldi	r31, 0x08	; 8
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:178
            Serial.println("\nIn PORT B (PB0-PB1 & PB4-PB7),");
    1284:	ef 16       	cp	r14, r31
    1286:	f1 04       	cpc	r15, r1
    1288:	b1 f6       	brne	.-84     	; 0x1236 <main+0x4c0>
    128a:	26 e0       	ldi	r18, 0x06	; 6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:179
            Serial.println("All pins are working!");
    128c:	a2 16       	cp	r10, r18
    128e:	b1 04       	cpc	r11, r1
    1290:	59 f4       	brne	.+22     	; 0x12a8 <main+0x532>
    1292:	86 e5       	ldi	r24, 0x56	; 86
    1294:	91 ea       	ldi	r25, 0xA1	; 161
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:173
            if ((portBStatus[i] == 0) && i != 2 && i != 3) {
              Serial.println("\nInternally, PB" + String(i) + " not working!");
            } else if ((portBStatus[i] == 0) && (i == 2 || i == 3)) {
              //  Serial.println("Ignoring Hardcoded values for Serial Pins!");
            } else {
              total_working_pins += 1;
    1296:	14 d9       	rcall	.-3544   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1298:	86 e7       	ldi	r24, 0x76	; 118
    129a:	91 ea       	ldi	r25, 0xA1	; 161
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:181

          if (total_working_pins == sizeof(portBStatus) / 2 - 2) { // ignoring RX TX pins
            Serial.println("\nIn PORT B (PB0-PB1 & PB4-PB7),");
            Serial.println("All pins are working!");
          } else {
            Serial.println("\nIn PORT B (PB0-PB1 & PB4-PB7), a total");
    129c:	11 d9       	rcall	.-3550   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    129e:	bc ce       	rjmp	.-648    	; 0x1018 <main+0x2a2>
    12a0:	bf ef       	ldi	r27, 0xFF	; 255
    12a2:	ab 1a       	sub	r10, r27
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:182
            Serial.println("of only " + String(total_working_pins) + " pins are working!");
    12a4:	bb 0a       	sbc	r11, r27
    12a6:	ea cf       	rjmp	.-44     	; 0x127c <main+0x506>
    12a8:	8c e8       	ldi	r24, 0x8C	; 140
    12aa:	91 ea       	ldi	r25, 0xA1	; 161
    12ac:	09 d9       	rcall	.-3566   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    12ae:	b5 01       	movw	r22, r10
    12b0:	ce 01       	movw	r24, r28
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	b5 da       	rcall	.-2710   	; 0x820 <String::String(int, unsigned char) [clone .constprop.19]>
_ZN15StringSumHelperC2EPKc():
    12b6:	64 e1       	ldi	r22, 0x14	; 20
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:182
    12b8:	71 ea       	ldi	r23, 0xA1	; 161
    12ba:	ce 01       	movw	r24, r28
    12bc:	09 96       	adiw	r24, 0x09	; 9
    12be:	e1 da       	rcall	.-2622   	; 0x882 <String::String(char const*)>
examinePins():
    12c0:	be 01       	movw	r22, r28
    12c2:	6f 5f       	subi	r22, 0xFF	; 255
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	ce 01       	movw	r24, r28
    12c8:	09 96       	adiw	r24, 0x09	; 9
    12ca:	7a da       	rcall	.-2828   	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
    12cc:	69 e7       	ldi	r22, 0x79	; 121
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    12ce:	71 ea       	ldi	r23, 0xA1	; 161
    12d0:	63 da       	rcall	.-2874   	; 0x798 <operator+(StringSumHelper const&, char const*)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:182
    12d2:	0b d9       	rcall	.-3562   	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
_ZN15StringSumHelperD2Ev():
    12d4:	ce 01       	movw	r24, r28
    12d6:	09 96       	adiw	r24, 0x09	; 9
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:214
          //  Means that particular pin state is changing and working
          //  Mark that pin as "working: 1"
          portCStatus[pcc] = 1;
        } else {
          //  Mark that pin as "not-working: 0"
          portCStatus[pcc] = 0;
    12d8:	2b d9       	rcall	.-3498   	; 0x530 <String::~String()>
examinePins():
    12da:	ce 01       	movw	r24, r28
    12dc:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:219
        }

        pcc++;
        if (pcc > 5) {
          pcc = 0;
    12de:	28 d9       	rcall	.-3504   	; 0x530 <String::~String()>
    12e0:	9b ce       	rjmp	.-714    	; 0x1018 <main+0x2a2>
    12e2:	10 82       	st	Z, r1
    12e4:	11 82       	std	Z+1, r1	; 0x01
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:220
          PORTC_checked = true;
    12e6:	e0 ce       	rjmp	.-576    	; 0x10a8 <main+0x332>
    12e8:	10 92 18 3c 	sts	0x3C18, r1	; 0x803c18 <pcc>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:221
          Serial.println("\nPORT-C IO check finished!");
    12ec:	10 92 19 3c 	sts	0x3C19, r1	; 0x803c19 <pcc+0x1>
    12f0:	c0 92 3d 3c 	sts	0x3C3D, r12	; 0x803c3d <PORTC_checked>
    12f4:	84 eb       	ldi	r24, 0xB4	; 180
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:223

          int total_working_pins = 0;
    12f6:	91 ea       	ldi	r25, 0xA1	; 161
    12f8:	e3 d8       	rcall	.-3642   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:225

          for (int i = 0; i < int(sizeof(portCStatus) / 2); i++) {
    12fa:	5c e0       	ldi	r21, 0x0C	; 12
    12fc:	85 2e       	mov	r8, r21
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:226
            if (portCStatus[i] == 0) {
    12fe:	5c e3       	ldi	r21, 0x3C	; 60
    1300:	95 2e       	mov	r9, r21
main():
    1302:	f1 2c       	mov	r15, r1
    1304:	e1 2c       	mov	r14, r1
    1306:	b1 2c       	mov	r11, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:227
              Serial.println("\nInternally, PC" + String(i) + " not working!");
    1308:	a1 2c       	mov	r10, r1
examinePins():
    130a:	d4 01       	movw	r26, r8
    130c:	8d 91       	ld	r24, X+
    130e:	9d 91       	ld	r25, X+
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    1310:	4d 01       	movw	r8, r26
    1312:	89 2b       	or	r24, r25
    1314:	59 f5       	brne	.+86     	; 0x136c <main+0x5f6>
    1316:	b5 01       	movw	r22, r10
    1318:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:227
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	81 da       	rcall	.-2814   	; 0x820 <String::String(int, unsigned char) [clone .constprop.19]>
_ZN15StringSumHelperC2EPKc():
    131e:	6f ec       	ldi	r22, 0xCF	; 207
    1320:	71 ea       	ldi	r23, 0xA1	; 161
    1322:	ce 01       	movw	r24, r28
    1324:	09 96       	adiw	r24, 0x09	; 9
    1326:	ad da       	rcall	.-2726   	; 0x882 <String::String(char const*)>
examinePins():
    1328:	be 01       	movw	r22, r28
    132a:	6f 5f       	subi	r22, 0xFF	; 255
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	ce 01       	movw	r24, r28
    1330:	09 96       	adiw	r24, 0x09	; 9
    1332:	46 da       	rcall	.-2932   	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:227
    1334:	68 e4       	ldi	r22, 0x48	; 72
    1336:	71 ea       	ldi	r23, 0xA1	; 161
    1338:	2f da       	rcall	.-2978   	; 0x798 <operator+(StringSumHelper const&, char const*)>
    133a:	d7 d8       	rcall	.-3666   	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
_ZN15StringSumHelperD2Ev():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:225
          PORTC_checked = true;
          Serial.println("\nPORT-C IO check finished!");

          int total_working_pins = 0;

          for (int i = 0; i < int(sizeof(portCStatus) / 2); i++) {
    133c:	ce 01       	movw	r24, r28
    133e:	09 96       	adiw	r24, 0x09	; 9
    1340:	f7 d8       	rcall	.-3602   	; 0x530 <String::~String()>
examinePins():
    1342:	ce 01       	movw	r24, r28
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	f4 d8       	rcall	.-3608   	; 0x530 <String::~String()>
    1348:	ef ef       	ldi	r30, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:233
            } else {
              total_working_pins += 1;
            }
          }

          if (total_working_pins == sizeof(portCStatus) / 2) {
    134a:	ae 1a       	sub	r10, r30
    134c:	be 0a       	sbc	r11, r30
    134e:	f6 e0       	ldi	r31, 0x06	; 6
    1350:	af 16       	cp	r10, r31
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:234
            Serial.println("\nIn PORT C (PC0-PC5),");
    1352:	b1 04       	cpc	r11, r1
    1354:	d1 f6       	brne	.-76     	; 0x130a <main+0x594>
    1356:	26 e0       	ldi	r18, 0x06	; 6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:235
            Serial.println("all pins are working!");
    1358:	e2 16       	cp	r14, r18
    135a:	f1 04       	cpc	r15, r1
    135c:	59 f4       	brne	.+22     	; 0x1374 <main+0x5fe>
    135e:	8f ed       	ldi	r24, 0xDF	; 223
    1360:	91 ea       	ldi	r25, 0xA1	; 161
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:229

          for (int i = 0; i < int(sizeof(portCStatus) / 2); i++) {
            if (portCStatus[i] == 0) {
              Serial.println("\nInternally, PC" + String(i) + " not working!");
            } else {
              total_working_pins += 1;
    1362:	ae d8       	rcall	.-3748   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1364:	80 ee       	ldi	r24, 0xE0	; 224
    1366:	90 ea       	ldi	r25, 0xA0	; 160
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:237

          if (total_working_pins == sizeof(portCStatus) / 2) {
            Serial.println("\nIn PORT C (PC0-PC5),");
            Serial.println("all pins are working!");
          } else {
            Serial.println("\nIn PORT C (PC0-PC5), a total");
    1368:	ab d8       	rcall	.-3754   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    136a:	a7 ce       	rjmp	.-690    	; 0x10ba <main+0x344>
    136c:	bf ef       	ldi	r27, 0xFF	; 255
    136e:	eb 1a       	sub	r14, r27
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:238
            Serial.println("of only " + String(total_working_pins) + " pins are working!");
    1370:	fb 0a       	sbc	r15, r27
    1372:	ea cf       	rjmp	.-44     	; 0x1348 <main+0x5d2>
    1374:	85 ef       	ldi	r24, 0xF5	; 245
    1376:	91 ea       	ldi	r25, 0xA1	; 161
    1378:	a3 d8       	rcall	.-3770   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    137a:	b7 01       	movw	r22, r14
    137c:	ce 01       	movw	r24, r28
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	4f da       	rcall	.-2914   	; 0x820 <String::String(int, unsigned char) [clone .constprop.19]>
_ZN15StringSumHelperC2EPKc():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:238
    1382:	64 e1       	ldi	r22, 0x14	; 20
    1384:	71 ea       	ldi	r23, 0xA1	; 161
    1386:	ce 01       	movw	r24, r28
    1388:	09 96       	adiw	r24, 0x09	; 9
    138a:	7b da       	rcall	.-2826   	; 0x882 <String::String(char const*)>
examinePins():
    138c:	be 01       	movw	r22, r28
    138e:	6f 5f       	subi	r22, 0xFF	; 255
    1390:	7f 4f       	sbci	r23, 0xFF	; 255
    1392:	ce 01       	movw	r24, r28
    1394:	09 96       	adiw	r24, 0x09	; 9
    1396:	14 da       	rcall	.-3032   	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
    1398:	69 e7       	ldi	r22, 0x79	; 121
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    139a:	71 ea       	ldi	r23, 0xA1	; 161
    139c:	fd d9       	rcall	.-3078   	; 0x798 <operator+(StringSumHelper const&, char const*)>
    139e:	a5 d8       	rcall	.-3766   	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
_ZN15StringSumHelperD2Ev():
    13a0:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:238
    13a2:	09 96       	adiw	r24, 0x09	; 9
    13a4:	c5 d8       	rcall	.-3702   	; 0x530 <String::~String()>
examinePins():
    13a6:	ce 01       	movw	r24, r28
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	c2 d8       	rcall	.-3708   	; 0x530 <String::~String()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/internalIOExaminer.h:250
      if (PORTA_checked && PORTB_checked && PORTC_checked) {
        Serial.println("\nATTINY Digital IO Test finished!");
        break;
      }

      pinTestModeStartMillis = pinTestModeCurrMillis;
    13ac:	86 ce       	rjmp	.-756    	; 0x10ba <main+0x344>
    13ae:	80 91 44 3c 	lds	r24, 0x3C44	; 0x803c44 <pinTestModeCurrMillis>
    13b2:	90 91 45 3c 	lds	r25, 0x3C45	; 0x803c45 <pinTestModeCurrMillis+0x1>
    13b6:	a0 91 46 3c 	lds	r26, 0x3C46	; 0x803c46 <pinTestModeCurrMillis+0x2>
    13ba:	b0 91 47 3c 	lds	r27, 0x3C47	; 0x803c47 <pinTestModeCurrMillis+0x3>
    13be:	80 93 40 3c 	sts	0x3C40, r24	; 0x803c40 <pinTestModeStartMillis>
    13c2:	90 93 41 3c 	sts	0x3C41, r25	; 0x803c41 <pinTestModeStartMillis+0x1>
    13c6:	a0 93 42 3c 	sts	0x3C42, r26	; 0x803c42 <pinTestModeStartMillis+0x2>
    13ca:	b0 93 43 3c 	sts	0x3C43, r27	; 0x803c43 <pinTestModeStartMillis+0x3>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:25
    } else {
      checking_rtc_counter = 0;
    13ce:	55 cd       	rjmp	.-1366   	; 0xe7a <main+0x104>
reportRTCAvailability():
    13d0:	10 92 48 3c 	sts	0x3C48, r1	; 0x803c48 <checking_rtc_counter>
    13d4:	10 92 49 3c 	sts	0x3C49, r1	; 0x803c49 <checking_rtc_counter+0x1>
begin():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:67
{
}

bool RV8803Tiny::begin()
{
    TinyMegaI2C.init();
    13d8:	d5 d8       	rcall	.-3670   	; 0x584 <TinyMegaI2CMaster::init() [clone .constprop.17]>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:69

    if (TinyMegaI2C.start(RV8803_ADDR, 0))
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	0e 94 7f 00 	call	0xfe	; 0xfe <TinyMegaI2CMaster::start(unsigned char, int) [clone .constprop.18]>
    13e2:	81 11       	cpse	r24, r1
    13e4:	74 c2       	rjmp	.+1256   	; 0x18ce <main+0xb58>
reportRTCAvailability():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:31
      break;
    }
  }

  if (!rtc.begin()) {
    rtcAvailable = false;
    13e6:	10 92 5f 3c 	sts	0x3C5F, r1	; 0x803c5f <rtcAvailable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:32
    Serial.println("RTC_ADDR_FOUND:0");
    13ea:	81 e5       	ldi	r24, 0x51	; 81
    13ec:	92 ea       	ldi	r25, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:35
  } else {
    rtcAvailable = true;
    Serial.println("RTC_ADDR_FOUND:1");
    13ee:	68 d8       	rcall	.-3888   	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
loop():
    13f0:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:60
    reportRTCAvailability();
    rtcAvailabilityChecked = true;
    13f2:	80 93 83 3c 	sts	0x3C83, r24	; 0x803c83 <rtcAvailabilityChecked>
    13f6:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:61
    printHeader = false;
    13fa:	63 e7       	ldi	r22, 0x73	; 115
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:66
  }


  /* ---- 3. Check curr. factory default time ---- */
  printStepTitle("CHECKING RTC's R/W FUNC", HOLD_DELAY);
    13fc:	72 ea       	ldi	r23, 0xA2	; 162
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	3f da       	rcall	.-2946   	; 0x882 <String::String(char const*)>
    1404:	ce 01       	movw	r24, r28
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	50 da       	rcall	.-2912   	; 0x8aa <printStepTitle(String, int) [clone .constprop.2]>
    140a:	ce 01       	movw	r24, r28
    140c:	01 96       	adiw	r24, 0x01	; 1
    140e:	90 d8       	rcall	.-3808   	; 0x530 <String::~String()>
    1410:	80 91 83 3c 	lds	r24, 0x3C83	; 0x803c83 <rtcAvailabilityChecked>
    1414:	88 23       	and	r24, r24
    1416:	09 f4       	brne	.+2      	; 0x141a <main+0x6a4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:68

  if (rtcAvailabilityChecked && !rtcReadabilityChecked) {
    1418:	c8 c0       	rjmp	.+400    	; 0x15aa <main+0x834>
    141a:	80 91 82 3c 	lds	r24, 0x3C82	; 0x803c82 <rtcReadabilityChecked>
    141e:	81 11       	cpse	r24, r1
    1420:	c4 c0       	rjmp	.+392    	; 0x15aa <main+0x834>
rtcReadWriteChecker():
    1422:	80 91 5f 3c 	lds	r24, 0x3C5F	; 0x803c5f <rtcAvailable>
    1426:	88 23       	and	r24, r24
    1428:	09 f4       	brne	.+2      	; 0x142c <main+0x6b6>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:40
  }
}

void rtcReadWriteChecker() {
  while (rtcAvailable) {
    142a:	b1 c0       	rjmp	.+354    	; 0x158e <main+0x818>
updateTime():
    142c:	8e e0       	ldi	r24, 0x0E	; 14
    142e:	9d e3       	ldi	r25, 0x3D	; 61
    1430:	0e 94 9e 00 	call	0x13c	; 0x13c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:81
    }
}

bool RV8803Tiny::updateTime()
{
    if (!readMultipleRegisters(RV8803_HUNDREDTHS, _time, TIME_ARRAY_LENGTH))
    1434:	88 23       	and	r24, r24
    1436:	09 f4       	brne	.+2      	; 0x143a <main+0x6c4>
    1438:	50 c2       	rjmp	.+1184   	; 0x18da <main+0xb64>
    143a:	80 91 0e 3d 	lds	r24, 0x3D0E	; 0x803d0e <rtc+0x6>
BCDtoDEC():
    143e:	98 2f       	mov	r25, r24
    1440:	92 95       	swap	r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    //If hundredths are at 99 or seconds are at 59, read again to make sure we didn't accidentally skip a second/minute
    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 || BCDtoDEC(_time[TIME_SECONDS]) == 59)
    1442:	9f 70       	andi	r25, 0x0F	; 15
    1444:	2a e0       	ldi	r18, 0x0A	; 10
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1446:	8f 70       	andi	r24, 0x0F	; 15
    1448:	92 9f       	mul	r25, r18
    144a:	80 0d       	add	r24, r0
    144c:	11 24       	eor	r1, r1
updateTime():
    144e:	83 36       	cpi	r24, 0x63	; 99
    1450:	59 f0       	breq	.+22     	; 0x1468 <main+0x6f2>
    1452:	90 91 0f 3d 	lds	r25, 0x3D0F	; 0x803d0f <rtc+0x7>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    //If hundredths are at 99 or seconds are at 59, read again to make sure we didn't accidentally skip a second/minute
    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 || BCDtoDEC(_time[TIME_SECONDS]) == 59)
    1456:	39 2f       	mov	r19, r25
    1458:	32 95       	swap	r19
    145a:	3f 70       	andi	r19, 0x0F	; 15
    145c:	9f 70       	andi	r25, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    145e:	32 9f       	mul	r19, r18
    1460:	90 0d       	add	r25, r0
    1462:	11 24       	eor	r1, r1
updateTime():
    1464:	9b 33       	cpi	r25, 0x3B	; 59
    1466:	d9 f4       	brne	.+54     	; 0x149e <main+0x728>
    1468:	99 81       	ldd	r25, Y+1	; 0x01
BCDtoDEC():
    146a:	29 2f       	mov	r18, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:88
        // Something went wrong
        return (false);
    }

    //If hundredths are at 99 or seconds are at 59, read again to make sure we didn't accidentally skip a second/minute
    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 || BCDtoDEC(_time[TIME_SECONDS]) == 59)
    146c:	22 95       	swap	r18
    146e:	2f 70       	andi	r18, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        //If the reading for hundredths has rolled over, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(_time[TIME_HUNDREDTHS]) > BCDtoDEC(tempTime[TIME_HUNDREDTHS])) 
    1470:	9f 70       	andi	r25, 0x0F	; 15
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1472:	3a e0       	ldi	r19, 0x0A	; 10
    1474:	23 9f       	mul	r18, r19
    1476:	90 0d       	add	r25, r0
    1478:	11 24       	eor	r1, r1
updateTime():
    147a:	98 17       	cp	r25, r24
    147c:	48 f4       	brcc	.+18     	; 0x1490 <main+0x71a>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:93
    if (BCDtoDEC(_time[TIME_HUNDREDTHS]) == 99 || BCDtoDEC(_time[TIME_SECONDS]) == 59)
    {
        uint8_t tempTime[TIME_ARRAY_LENGTH];

        //If the reading for hundredths has rolled over, then our new data is correct, otherwise, we can leave the old data.
        if (BCDtoDEC(_time[TIME_HUNDREDTHS]) > BCDtoDEC(tempTime[TIME_HUNDREDTHS])) 
    147e:	88 e0       	ldi	r24, 0x08	; 8
    1480:	fe 01       	movw	r30, r28
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:95
        {
            memcpy(_time, tempTime, TIME_ARRAY_LENGTH);
    1482:	31 96       	adiw	r30, 0x01	; 1
    1484:	ae e0       	ldi	r26, 0x0E	; 14
    1486:	bd e3       	ldi	r27, 0x3D	; 61
    1488:	01 90       	ld	r0, Z+
    148a:	0d 92       	st	X+, r0
    148c:	8a 95       	dec	r24
    148e:	e1 f7       	brne	.-8      	; 0x1488 <main+0x712>
    1490:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:97
        }
        if (!readMultipleRegisters(RV8803_HUNDREDTHS, tempTime, TIME_ARRAY_LENGTH))
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	0e 94 9e 00 	call	0x13c	; 0x13c <RV8803Tiny::readMultipleRegisters(unsigned char, unsigned char*, unsigned char) [clone .constprop.8]>
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <main+0x728>
    149c:	1e c2       	rjmp	.+1084   	; 0x18da <main+0xb64>
rtcReadWriteChecker():
    149e:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:42
    if (rtc.updateTime()) {
      rtcReadable = true;
    14a0:	80 93 5e 3c 	sts	0x3C5E, r24	; 0x803c5e <rtcReadable>
    14a4:	64 e6       	ldi	r22, 0x64	; 100
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:43
      delay(100);
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay>
stringTime():
    14b0:	20 91 0f 3d 	lds	r18, 0x3D0F	; 0x803d0f <rtc+0x7>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    14b4:	90 91 10 3d 	lds	r25, 0x3D10	; 0x803d10 <rtc+0x8>
    14b8:	80 91 11 3d 	lds	r24, 0x3D11	; 0x803d11 <rtc+0x9>
BCDtoDEC():
    14bc:	32 2f       	mov	r19, r18
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    14be:	32 95       	swap	r19
    14c0:	3f 70       	andi	r19, 0x0F	; 15
    14c2:	4a e0       	ldi	r20, 0x0A	; 10
    14c4:	f4 2e       	mov	r15, r20
    14c6:	2f 70       	andi	r18, 0x0F	; 15
    14c8:	3f 9d       	mul	r19, r15
    14ca:	20 0d       	add	r18, r0
    14cc:	11 24       	eor	r1, r1
stringTime():
    14ce:	1f 92       	push	r1
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    14d0:	2f 93       	push	r18
BCDtoDEC():
    14d2:	29 2f       	mov	r18, r25
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    14d4:	22 95       	swap	r18
    14d6:	2f 70       	andi	r18, 0x0F	; 15
    14d8:	9f 70       	andi	r25, 0x0F	; 15
    14da:	2f 9d       	mul	r18, r15
    14dc:	90 0d       	add	r25, r0
    14de:	11 24       	eor	r1, r1
stringTime():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    14e0:	1f 92       	push	r1
    14e2:	9f 93       	push	r25
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    14e4:	98 2f       	mov	r25, r24
    14e6:	92 95       	swap	r25
    14e8:	9f 70       	andi	r25, 0x0F	; 15
    14ea:	8f 70       	andi	r24, 0x0F	; 15
    14ec:	9f 9d       	mul	r25, r15
    14ee:	80 0d       	add	r24, r0
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:110

// Returns the time in hh:mm:ss
char *RV8803Tiny::stringTime()
{
    static char time[9]; //Max of hh:mm:ss with \0 terminator
    sprintf(time, "%02d:%02d:%02d", BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    14f0:	11 24       	eor	r1, r1
stringTime():
    14f2:	1f 92       	push	r1
    14f4:	8f 93       	push	r24
    14f6:	5f 92       	push	r5
    14f8:	4f 92       	push	r4
    14fa:	8a e4       	ldi	r24, 0x4A	; 74
    14fc:	9c e3       	ldi	r25, 0x3C	; 60
    14fe:	9f 93       	push	r25
    1500:	8f 93       	push	r24
    1502:	57 d5       	rcall	.+2734   	; 0x1fb2 <sprintf>
rtcReadWriteChecker():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:45
      // Send string date & time
      Serial.println(String(rtc.stringTime()));
    1504:	6a e4       	ldi	r22, 0x4A	; 74
    1506:	7c e3       	ldi	r23, 0x3C	; 60
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	ba d9       	rcall	.-3212   	; 0x882 <String::String(char const*)>
    150e:	ce 01       	movw	r24, r28
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	0e 94 75 02 	call	0x4ea	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
    1516:	ce 01       	movw	r24, r28
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	0a d8       	rcall	.-4076   	; 0x530 <String::~String()>
stringDate():
    151c:	20 91 15 3d 	lds	r18, 0x3D15	; 0x803d15 <rtc+0xd>
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    1520:	90 91 14 3d 	lds	r25, 0x3D14	; 0x803d14 <rtc+0xc>
    1524:	80 91 13 3d 	lds	r24, 0x3D13	; 0x803d13 <rtc+0xb>
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    1528:	32 2f       	mov	r19, r18
    152a:	32 95       	swap	r19
    152c:	3f 70       	andi	r19, 0x0F	; 15
    152e:	2f 70       	andi	r18, 0x0F	; 15
    1530:	3f 9d       	mul	r19, r15
    1532:	20 0d       	add	r18, r0
    1534:	11 24       	eor	r1, r1
stringDate():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    1536:	1f 92       	push	r1
    1538:	2f 93       	push	r18
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    153a:	29 2f       	mov	r18, r25
    153c:	22 95       	swap	r18
    153e:	2f 70       	andi	r18, 0x0F	; 15
    1540:	9f 70       	andi	r25, 0x0F	; 15
    1542:	2f 9d       	mul	r18, r15
    1544:	90 0d       	add	r25, r0
    1546:	11 24       	eor	r1, r1
stringDate():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    1548:	1f 92       	push	r1
    154a:	9f 93       	push	r25
BCDtoDEC():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:278
//--------------------------------------------------------//
//----------- READ | WRIRE | OPERATION WRAPPERS ----------//
//--------------------------------------------------------//
uint8_t RV8803Tiny::BCDtoDEC(uint8_t val)
{
    return ((val / 0x10) * 10) + (val % 0x10);
    154c:	98 2f       	mov	r25, r24
    154e:	92 95       	swap	r25
    1550:	9f 70       	andi	r25, 0x0F	; 15
    1552:	8f 70       	andi	r24, 0x0F	; 15
    1554:	9f 9d       	mul	r25, r15
    1556:	80 0d       	add	r24, r0
    1558:	11 24       	eor	r1, r1
stringDate():
/Users/saurabhdatta/Documents/Arduino/libraries/RV8803Tiny/src/RV8803Tiny.cpp:118

//Returns the date in the DD/MM/YYYY format.
char *RV8803Tiny::stringDate()
{
    static char date[11]; //Max of dd/mm/yyyy with \0 terminator
    sprintf(date, "%02d/%02d/20%02d", BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_YEAR]));
    155a:	1f 92       	push	r1
    155c:	8f 93       	push	r24
    155e:	8a e9       	ldi	r24, 0x9A	; 154
    1560:	92 ea       	ldi	r25, 0xA2	; 162
    1562:	9f 93       	push	r25
    1564:	8f 93       	push	r24
    1566:	83 e5       	ldi	r24, 0x53	; 83
    1568:	9c e3       	ldi	r25, 0x3C	; 60
    156a:	9f 93       	push	r25
    156c:	8f 93       	push	r24
    156e:	21 d5       	rcall	.+2626   	; 0x1fb2 <sprintf>
rtcReadWriteChecker():
    1570:	63 e5       	ldi	r22, 0x53	; 83
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:46
      Serial.println(String(rtc.stringDate()));
    1572:	7c e3       	ldi	r23, 0x3C	; 60
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	84 d9       	rcall	.-3320   	; 0x882 <String::String(char const*)>
    157a:	ce 01       	movw	r24, r28
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	0e 94 75 02 	call	0x4ea	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
    1582:	ce 01       	movw	r24, r28
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	0e 94 98 02 	call	0x530	; 0x530 <String::~String()>
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	80 91 5e 3c 	lds	r24, 0x3C5E	; 0x803c5e <rtcReadable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:53
      rtcReadable = false;
      Serial.println("RTC_READABLE:0");
    }
    break;
  }
  if (rtcReadable) {
    1592:	88 23       	and	r24, r24
    1594:	09 f4       	brne	.+2      	; 0x1598 <main+0x822>
    1596:	a8 c1       	rjmp	.+848    	; 0x18e8 <main+0xb72>
    1598:	8a eb       	ldi	r24, 0xBA	; 186
    159a:	92 ea       	ldi	r25, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:54
    Serial.println("RTC_READABLE:1");
    159c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:56
  } else {
    Serial.println("RTC_READABLE:0");
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 82 3c 	sts	0x3C82, r24	; 0x803c82 <rtcReadabilityChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:71
    rtcReadWriteChecker();

    rtcReadabilityChecked = true;
    15a6:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:72
    printHeader = false;
    15aa:	69 ec       	ldi	r22, 0xC9	; 201
    15ac:	72 ea       	ldi	r23, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:77
  }


  /* ---- 4. check button for presses ---- */
  printStepTitle("CHECKING BUTTON COND [Press]", HOLD_DELAY);
    15ae:	ce 01       	movw	r24, r28
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	67 d9       	rcall	.-3378   	; 0x882 <String::String(char const*)>
    15b4:	ce 01       	movw	r24, r28
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	78 d9       	rcall	.-3344   	; 0x8aa <printStepTitle(String, int) [clone .constprop.2]>
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 98 02 	call	0x530	; 0x530 <String::~String()>
initBtnPin():
    15c2:	80 91 60 3c 	lds	r24, 0x3C60	; 0x803c60 <btnInitialized>
    15c6:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:23

bool btnInitialized;
bool btnConnChecked;

void initBtnPin(int Pin) {
  if (!btnInitialized) {
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <main+0x862>
    15ca:	62 e0       	ldi	r22, 0x02	; 2
    15cc:	8e e0       	ldi	r24, 0x0E	; 14
    15ce:	0e 94 9d 02 	call	0x53a	; 0x53a <pinMode>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:25
    //--- Buttons initialization ---//
    pinMode(Pin, INPUT_PULLUP);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 60 3c 	sts	0x3C60, r24	; 0x803c60 <btnInitialized>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:26
    btnInitialized = true;
    15d8:	80 91 82 3c 	lds	r24, 0x3C82	; 0x803c82 <rtcReadabilityChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:80
  initBtnPin(BTN_PIN);

  if (rtcReadabilityChecked && !btnConnChecked) {
    15dc:	88 23       	and	r24, r24
    15de:	09 f4       	brne	.+2      	; 0x15e2 <main+0x86c>
    15e0:	73 c0       	rjmp	.+230    	; 0x16c8 <main+0x952>
    15e2:	80 91 81 3c 	lds	r24, 0x3C81	; 0x803c81 <btnConnChecked>
    15e6:	81 11       	cpse	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:39
    if ( btnWatchTimerCurr - btnWatchTimerStart >= 1000) {
      
      btnWatcherFlag++;
      SW_OneState = digitalRead(14);
      
      Serial.println("SW_STATE: " + String(!SW_OneState) + " [" + String(10 - btnWatcherFlag) + " sec left]");
    15e8:	6f c0       	rjmp	.+222    	; 0x16c8 <main+0x952>
btnChecker():
    15ea:	9a e0       	ldi	r25, 0x0A	; 10
    15ec:	e9 2e       	mov	r14, r25
    15ee:	f1 2c       	mov	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:32
  }
}

void btnChecker() {
  while (true) {
    btnWatchTimerCurr = millis();
    15f0:	cc 24       	eor	r12, r12
    15f2:	c3 94       	inc	r12
    15f4:	0e 94 15 02 	call	0x42a	; 0x42a <millis>
    15f8:	60 93 68 3c 	sts	0x3C68, r22	; 0x803c68 <btnWatchTimerCurr>
    15fc:	70 93 69 3c 	sts	0x3C69, r23	; 0x803c69 <btnWatchTimerCurr+0x1>
    1600:	80 93 6a 3c 	sts	0x3C6A, r24	; 0x803c6a <btnWatchTimerCurr+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:34
    
    if ( btnWatchTimerCurr - btnWatchTimerStart >= 1000) {
    1604:	90 93 6b 3c 	sts	0x3C6B, r25	; 0x803c6b <btnWatchTimerCurr+0x3>
    1608:	80 90 64 3c 	lds	r8, 0x3C64	; 0x803c64 <btnWatchTimerStart>
    160c:	90 90 65 3c 	lds	r9, 0x3C65	; 0x803c65 <btnWatchTimerStart+0x1>
    1610:	a0 90 66 3c 	lds	r10, 0x3C66	; 0x803c66 <btnWatchTimerStart+0x2>
    1614:	b0 90 67 3c 	lds	r11, 0x3C67	; 0x803c67 <btnWatchTimerStart+0x3>
    1618:	68 19       	sub	r22, r8
    161a:	79 09       	sbc	r23, r9
    161c:	8a 09       	sbc	r24, r10
    161e:	9b 09       	sbc	r25, r11
    1620:	68 3e       	cpi	r22, 0xE8	; 232
    1622:	73 40       	sbci	r23, 0x03	; 3
    1624:	81 05       	cpc	r24, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:36
      
      btnWatcherFlag++;
    1626:	91 05       	cpc	r25, r1
    1628:	28 f3       	brcs	.-54     	; 0x15f4 <main+0x87e>
    162a:	80 91 62 3c 	lds	r24, 0x3C62	; 0x803c62 <btnWatcherFlag>
    162e:	90 91 63 3c 	lds	r25, 0x3C63	; 0x803c63 <btnWatcherFlag+0x1>
    1632:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/wiring_digital.c:387

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask) {
    1634:	80 93 62 3c 	sts	0x3C62, r24	; 0x803c62 <btnWatcherFlag>
    1638:	90 93 63 3c 	sts	0x3C63, r25	; 0x803c63 <btnWatcherFlag+0x1>
digitalRead():
    163c:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <vtable for UartClass+0x7f63fb>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:37
      SW_OneState = digitalRead(14);
    1640:	22 fb       	bst	r18, 2
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:39
      
      Serial.println("SW_STATE: " + String(!SW_OneState) + " [" + String(10 - btnWatcherFlag) + " sec left]");
    1642:	22 27       	eor	r18, r18
    1644:	20 f9       	bld	r18, 0
btnChecker():
    1646:	20 93 61 3c 	sts	0x3C61, r18	; 0x803c61 <SW_OneState>
    164a:	b7 01       	movw	r22, r14
    164c:	68 1b       	sub	r22, r24
    164e:	79 0b       	sbc	r23, r25
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	e5 d8       	rcall	.-3638   	; 0x820 <String::String(int, unsigned char) [clone .constprop.19]>
    1656:	60 91 61 3c 	lds	r22, 0x3C61	; 0x803c61 <SW_OneState>
    165a:	6c 25       	eor	r22, r12
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	ce 01       	movw	r24, r28
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:279
  public:
    StringSumHelper(const String &s) : String(s) {}
    StringSumHelper(const char *p) : String(p) {}
    1660:	09 96       	adiw	r24, 0x09	; 9
    1662:	de d8       	rcall	.-3652   	; 0x820 <String::String(int, unsigned char) [clone .constprop.19]>
_ZN15StringSumHelperC2EPKc():
    1664:	66 ee       	ldi	r22, 0xE6	; 230
    1666:	72 ea       	ldi	r23, 0xA2	; 162
    1668:	ce 01       	movw	r24, r28
    166a:	0f 96       	adiw	r24, 0x0f	; 15
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:39
    166c:	0a d9       	rcall	.-3564   	; 0x882 <String::String(char const*)>
btnChecker():
    166e:	be 01       	movw	r22, r28
    1670:	67 5f       	subi	r22, 0xF7	; 247
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	ce 01       	movw	r24, r28
    1676:	0f 96       	adiw	r24, 0x0f	; 15
    1678:	a3 d8       	rcall	.-3770   	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
    167a:	61 ef       	ldi	r22, 0xF1	; 241
    167c:	72 ea       	ldi	r23, 0xA2	; 162
    167e:	8c d8       	rcall	.-3816   	; 0x798 <operator+(StringSumHelper const&, char const*)>
    1680:	be 01       	movw	r22, r28
    1682:	6f 5f       	subi	r22, 0xFF	; 255
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	9c d8       	rcall	.-3784   	; 0x7c0 <operator+(StringSumHelper const&, String const&)>
    1688:	64 ef       	ldi	r22, 0xF4	; 244
    168a:	72 ea       	ldi	r23, 0xA2	; 162
    168c:	85 d8       	rcall	.-3830   	; 0x798 <operator+(StringSumHelper const&, char const*)>
    168e:	0e 94 75 02 	call	0x4ea	; 0x4ea <Print::println(String const&) [clone .constprop.21]>
_ZN15StringSumHelperD2Ev():
    1692:	ce 01       	movw	r24, r28
    1694:	0f 96       	adiw	r24, 0x0f	; 15
    1696:	0e 94 98 02 	call	0x530	; 0x530 <String::~String()>
btnChecker():
/Users/saurabhdatta/Library/Arduino15/packages/megaTinyCore/hardware/megaavr/2.5.11/cores/megatinycore/api/String.h:276
    #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
    void move(String &rhs);
    #endif
};

class StringSumHelper : public String {
    169a:	ce 01       	movw	r24, r28
    169c:	09 96       	adiw	r24, 0x09	; 9
    169e:	0e 94 98 02 	call	0x530	; 0x530 <String::~String()>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:39
    16a2:	ce 01       	movw	r24, r28
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	0e 94 98 02 	call	0x530	; 0x530 <String::~String()>
    16aa:	80 91 62 3c 	lds	r24, 0x3C62	; 0x803c62 <btnWatcherFlag>
    16ae:	90 91 63 3c 	lds	r25, 0x3C63	; 0x803c63 <btnWatcherFlag+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:41

      if (btnWatcherFlag >= watchBtnFor) {
    16b2:	0a 97       	sbiw	r24, 0x0a	; 10
    16b4:	0c f4       	brge	.+2      	; 0x16b8 <main+0x942>
    16b6:	1b c1       	rjmp	.+566    	; 0x18ee <main+0xb78>
    16b8:	10 92 62 3c 	sts	0x3C62, r1	; 0x803c62 <btnWatcherFlag>
    16bc:	10 92 63 3c 	sts	0x3C63, r1	; 0x803c63 <btnWatcherFlag+0x1>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:42
        btnWatcherFlag = 0;
    16c0:	c0 92 81 3c 	sts	0x3C81, r12	; 0x803c81 <btnConnChecked>
    16c4:	10 92 90 3c 	sts	0x3C90, r1	; 0x803c90 <printHeader>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:83
    btnChecker();

    btnConnChecked = true;
    16c8:	6f ef       	ldi	r22, 0xFF	; 255
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:84
    printHeader = false;
    16ca:	72 ea       	ldi	r23, 0xA2	; 162
    16cc:	ce 01       	movw	r24, r28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:89
  }


  /* ---- 5. check display routine ---- */
  printStepTitle("CHECKING DISPLAY's CONDITION", HOLD_DELAY);
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	d8 d8       	rcall	.-3664   	; 0x882 <String::String(char const*)>
    16d2:	ce 01       	movw	r24, r28
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	e9 d8       	rcall	.-3630   	; 0x8aa <printStepTitle(String, int) [clone .constprop.2]>
    16d8:	ce 01       	movw	r24, r28
    16da:	01 96       	adiw	r24, 0x01	; 1
    16dc:	0e 94 98 02 	call	0x530	; 0x530 <String::~String()>
printDisplayObservingInstructions():
    16e0:	80 91 6c 3c 	lds	r24, 0x3C6C	; 0x803c6c <showdisplayobservinginstructions>
    16e4:	81 11       	cpse	r24, r1
    16e6:	31 c0       	rjmp	.+98     	; 0x174a <main+0x9d4>
    16e8:	8c e1       	ldi	r24, 0x1C	; 28
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:25
bool displayChecked;

bool showdisplayobservinginstructions;

void printDisplayObservingInstructions() {
  if (!showdisplayobservinginstructions) {
    16ea:	93 ea       	ldi	r25, 0xA3	; 163
    16ec:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    16f0:	8f e3       	ldi	r24, 0x3F	; 63
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:26
    Serial.println("Watch if you see the below pattern");
    16f2:	93 ea       	ldi	r25, 0xA3	; 163
    16f4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    16f8:	8f e4       	ldi	r24, 0x4F	; 79
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:27
    Serial.println("in the segments");
    16fa:	93 ea       	ldi	r25, 0xA3	; 163
    16fc:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1700:	84 e6       	ldi	r24, 0x64	; 100
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:28
    Serial.println("(Starting in 5 sec):");
    1702:	93 ea       	ldi	r25, 0xA3	; 163
    1704:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1708:	80 e7       	ldi	r24, 0x70	; 112
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:29
    Serial.println("\n0, 1, 2, 3");
    170a:	93 ea       	ldi	r25, 0xA3	; 163
    170c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1710:	8d e7       	ldi	r24, 0x7D	; 125
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:30
    Serial.println("delay(4000);");
    1712:	93 ea       	ldi	r25, 0xA3	; 163
    1714:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1718:	80 e7       	ldi	r24, 0x70	; 112
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:31
    Serial.println("4, 5, 6, 7");
    171a:	93 ea       	ldi	r25, 0xA3	; 163
    171c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1720:	88 e8       	ldi	r24, 0x88	; 136
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:32
    Serial.println("delay(4000);");
    1722:	93 ea       	ldi	r25, 0xA3	; 163
    1724:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1728:	80 e7       	ldi	r24, 0x70	; 112
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:33
    Serial.println("8, 9, 0, 0");
    172a:	93 ea       	ldi	r25, 0xA3	; 163
    172c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1730:	83 e9       	ldi	r24, 0x93	; 147
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:34
    Serial.println("delay(4000);");
    1732:	93 ea       	ldi	r25, 0xA3	; 163
    1734:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1738:	68 e8       	ldi	r22, 0x88	; 136
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:35
    Serial.println("\nFinally display will Turn OFF");
    173a:	73 e1       	ldi	r23, 0x13	; 19
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <delay>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:37

    delay(5000);
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 93 6c 3c 	sts	0x3C6C, r24	; 0x803c6c <showdisplayobservinginstructions>
initSegmentDisplay():
    174a:	80 91 6d 3c 	lds	r24, 0x3C6D	; 0x803c6d <displayPinsInitialized>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:39

    showdisplayobservinginstructions = true;
    174e:	81 11       	cpse	r24, r1
    1750:	13 c0       	rjmp	.+38     	; 0x1778 <main+0xa02>
setupDisplay():
    1752:	80 e2       	ldi	r24, 0x20	; 32
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:132



bool displayPinsInitialized;
void initSegmentDisplay() {
  if (!displayPinsInitialized) {
    1754:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <vtable for UartClass+0x7f63f4>
    1758:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f63f9>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:46
}


void setupDisplay() {
  //  Cathode Pin for last dot of the LED segment (used for battery low warning)
  PORTC.DIRSET = PIN5_bm; // use PC5 as an output
    175c:	d0 92 01 04 	sts	0x0401, r13	; 0x800401 <vtable for UartClass+0x7f63b4>
    1760:	90 ef       	ldi	r25, 0xF0	; 240
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:47
  PORTC.OUTCLR = PIN5_bm; // turn PC5 output off
    1762:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <vtable for UartClass+0x7f63d4>
turnOffDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:50

  //  Cathode Pins for LEDS segments
  PORTA.DIRSET = 0b11111110; // [ PA 1-7 as Outputs]
    1766:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f63f9>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:52
  //  Anode Pins for LEDS
  PORTB.DIRSET = 0b11110000;
    176a:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f63b9>
    176e:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <vtable for UartClass+0x7f63d8>
initSegmentDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:57
}


void turnOffDisplay() {
  PORTC.OUTCLR = PIN5_bm; // toggle PC5 OFF
    1772:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:60

  // ---- Clear all leds of a segment ---- //
  PORTA.OUTCLR = 0b11111110;
    1774:	80 93 6d 3c 	sts	0x3C6D, r24	; 0x803c6d <displayPinsInitialized>
loop():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:62
  // ---- Deactivatec all segments by setting them HIGH (My segments are in common Anode config) ---- //
  PORTB.OUTSET = 0b11110000;
    1778:	80 91 81 3c 	lds	r24, 0x3C81	; 0x803c81 <btnConnChecked>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:136
void initSegmentDisplay() {
  if (!displayPinsInitialized) {
    setupDisplay();
    turnOffDisplay();

    displayPinsInitialized = true;
    177c:	88 23       	and	r24, r24
    177e:	09 f4       	brne	.+2      	; 0x1782 <main+0xa0c>
    1780:	61 cb       	rjmp	.-2366   	; 0xe44 <main+0xce>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:93
  printDisplayObservingInstructions();
  initSegmentDisplay();

  if (btnConnChecked && !displayChecked) {
    1782:	80 91 80 3c 	lds	r24, 0x3C80	; 0x803c80 <displayChecked>
    1786:	81 11       	cpse	r24, r1
    1788:	5d cb       	rjmp	.-2374   	; 0xe44 <main+0xce>
showOnDisplay():
    178a:	80 ef       	ldi	r24, 0xF0	; 240
    178c:	c8 2e       	mov	r12, r24
    178e:	0e 94 bd 01 	call	0x37a	; 0x37a <micros>
    1792:	60 93 74 3c 	sts	0x3C74, r22	; 0x803c74 <currDisplayFPSMicros>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:91
  if (currDisplayFPSMicros - startDisplayFPSMicros >= period) {

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
    1796:	70 93 75 3c 	sts	0x3C75, r23	; 0x803c75 <currDisplayFPSMicros+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:84
};


int c = 0;
void showOnDisplay(uint8_t * digits) {
  currDisplayFPSMicros = micros();
    179a:	80 93 76 3c 	sts	0x3C76, r24	; 0x803c76 <currDisplayFPSMicros+0x2>
    179e:	90 93 77 3c 	sts	0x3C77, r25	; 0x803c77 <currDisplayFPSMicros+0x3>
    17a2:	80 90 70 3c 	lds	r8, 0x3C70	; 0x803c70 <startDisplayFPSMicros>
    17a6:	90 90 71 3c 	lds	r9, 0x3C71	; 0x803c71 <startDisplayFPSMicros+0x1>
    17aa:	a0 90 72 3c 	lds	r10, 0x3C72	; 0x803c72 <startDisplayFPSMicros+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:86

  if (currDisplayFPSMicros - startDisplayFPSMicros >= period) {
    17ae:	b0 90 73 3c 	lds	r11, 0x3C73	; 0x803c73 <startDisplayFPSMicros+0x3>
    17b2:	68 19       	sub	r22, r8
    17b4:	79 09       	sbc	r23, r9
    17b6:	8a 09       	sbc	r24, r10
    17b8:	9b 09       	sbc	r25, r11
    17ba:	6a 30       	cpi	r22, 0x0A	; 10
    17bc:	71 05       	cpc	r23, r1
    17be:	81 05       	cpc	r24, r1
    17c0:	91 05       	cpc	r25, r1
    17c2:	c8 f1       	brcs	.+114    	; 0x1836 <main+0xac0>
    17c4:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f63b9>
    17c8:	c0 92 25 04 	sts	0x0425, r12	; 0x800425 <vtable for UartClass+0x7f63d8>
    17cc:	f8 94       	cli
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:89

    // ---- Clear all leds of a segment ---- //
    PORTA.OUTCLR = 0b11111110;
    17ce:	80 91 6e 3c 	lds	r24, 0x3C6E	; 0x803c6e <c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:91
    // ---- Deactivatec all segments by setting them HIGH (My segments are in common cathode config) ---- //
    PORTB.OUTSET = 0b11110000;
    17d2:	90 91 6f 3c 	lds	r25, 0x3C6F	; 0x803c6f <c+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:94

    // ---- Activate one segment at a time ---- //
    cli(); // Interrupts off so an interrupt can't fire in the middle of these two.
    17d6:	93 01       	movw	r18, r6
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:95
    byte mask = (0b00010001 << c) & 0xF0;   // We need to toggle 2 bits in PORTB.OUT to increment the digit right
    17d8:	08 2e       	mov	r0, r24
    17da:	01 c0       	rjmp	.+2      	; 0x17de <main+0xa68>
    17dc:	22 0f       	add	r18, r18
    17de:	0a 94       	dec	r0
    17e0:	ea f7       	brpl	.-6      	; 0x17dc <main+0xa66>
    17e2:	20 7f       	andi	r18, 0xF0	; 240
    17e4:	20 93 27 04 	sts	0x0427, r18	; 0x800427 <vtable for UartClass+0x7f63da>
    17e8:	8e 5f       	subi	r24, 0xFE	; 254
    17ea:	93 4c       	sbci	r25, 0xC3	; 195
    17ec:	dc 01       	movw	r26, r24
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:96
    PORTB.OUTTGL = mask;                    // Toggle those bits
    17ee:	ec 91       	ld	r30, X
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:98
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    17f2:	e8 50       	subi	r30, 0x08	; 8
    17f4:	f0 46       	sbci	r31, 0x60	; 96
    17f6:	80 81       	ld	r24, Z
    17f8:	81 b9       	out	0x01, r24	; 1
    17fa:	78 94       	sei
    17fc:	80 91 6e 3c 	lds	r24, 0x3C6E	; 0x803c6e <c>
    1800:	90 91 6f 3c 	lds	r25, 0x3C6F	; 0x803c6f <c+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:100
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on
    1804:	01 96       	adiw	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:102

    c++;
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	91 05       	cpc	r25, r1
    180a:	0c f0       	brlt	.+2      	; 0x180e <main+0xa98>
    180c:	81 c0       	rjmp	.+258    	; 0x1910 <main+0xb9a>
    180e:	80 93 6e 3c 	sts	0x3C6E, r24	; 0x803c6e <c>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:103
    if (c > 3) c = 0;
    1812:	90 93 6f 3c 	sts	0x3C6F, r25	; 0x803c6f <c+0x1>
    1816:	80 91 74 3c 	lds	r24, 0x3C74	; 0x803c74 <currDisplayFPSMicros>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:102
    // Immediately do a direct write of the PORTA value using the (fast) VPORT register
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    181a:	90 91 75 3c 	lds	r25, 0x3C75	; 0x803c75 <currDisplayFPSMicros+0x1>
    181e:	a0 91 76 3c 	lds	r26, 0x3C76	; 0x803c76 <currDisplayFPSMicros+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:105
    if (c > 3) c = 0;

    startDisplayFPSMicros = currDisplayFPSMicros;
    1822:	b0 91 77 3c 	lds	r27, 0x3C77	; 0x803c77 <currDisplayFPSMicros+0x3>
    1826:	80 93 70 3c 	sts	0x3C70, r24	; 0x803c70 <startDisplayFPSMicros>
    182a:	90 93 71 3c 	sts	0x3C71, r25	; 0x803c71 <startDisplayFPSMicros+0x1>
    182e:	a0 93 72 3c 	sts	0x3C72, r26	; 0x803c72 <startDisplayFPSMicros+0x2>
    1832:	b0 93 73 3c 	sts	0x3C73, r27	; 0x803c73 <startDisplayFPSMicros+0x3>
operateDisplay():
    1836:	e0 90 7e 3c 	lds	r14, 0x3C7E	; 0x803c7e <displayCycleCounter>
    183a:	f0 90 7f 3c 	lds	r15, 0x3C7F	; 0x803c7f <displayCycleCounter+0x1>
    183e:	80 91 7c 3c 	lds	r24, 0x3C7C	; 0x803c7c <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:144

void operateDisplay() {
  while (true) {
    showOnDisplay(digits_);

    if (displayCycleCounter != prevCounter) {
    1842:	90 91 7d 3c 	lds	r25, 0x3C7D	; 0x803c7d <prevCounter+0x1>
    1846:	e8 16       	cp	r14, r24
    1848:	f9 06       	cpc	r15, r25
    184a:	b9 f0       	breq	.+46     	; 0x187a <main+0xb04>
    184c:	c7 01       	movw	r24, r14
    184e:	02 97       	sbiw	r24, 0x02	; 2
    1850:	02 97       	sbiw	r24, 0x02	; 2
    1852:	08 f0       	brcs	.+2      	; 0x1856 <main+0xae0>
    1854:	64 c0       	rjmp	.+200    	; 0x191e <main+0xba8>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:146
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
    1856:	e2 e0       	ldi	r30, 0x02	; 2
    1858:	fc e3       	ldi	r31, 0x3C	; 60
    185a:	81 91       	ld	r24, Z+
    185c:	8c 5f       	subi	r24, 0xFC	; 252
    185e:	df 01       	movw	r26, r30
    1860:	11 97       	sbiw	r26, 0x01	; 1
    1862:	8a 30       	cpi	r24, 0x0A	; 10
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:148
        for (int i = 0; i < int(sizeof(digits_)); i++) {
          digits_[i] += 4;
    1864:	08 f0       	brcs	.+2      	; 0x1868 <main+0xaf2>
    1866:	59 c0       	rjmp	.+178    	; 0x191a <main+0xba4>
    1868:	8c 93       	st	X, r24
    186a:	bc e3       	ldi	r27, 0x3C	; 60
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:149
          if (digits_[i] > 9) digits_[i] = 0;
    186c:	e6 30       	cpi	r30, 0x06	; 6
    186e:	fb 07       	cpc	r31, r27
    1870:	a1 f7       	brne	.-24     	; 0x185a <main+0xae4>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:148

    if (displayCycleCounter != prevCounter) {
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < int(sizeof(digits_)); i++) {
          digits_[i] += 4;
    1872:	e0 92 7c 3c 	sts	0x3C7C, r14	; 0x803c7c <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:147
    showOnDisplay(digits_);

    if (displayCycleCounter != prevCounter) {
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < int(sizeof(digits_)); i++) {
    1876:	f0 92 7d 3c 	sts	0x3C7D, r15	; 0x803c7d <prevCounter+0x1>
    187a:	0e 94 15 02 	call	0x42a	; 0x42a <millis>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:162

        break;
        //--
      }

      prevCounter = displayCycleCounter;
    187e:	80 90 78 3c 	lds	r8, 0x3C78	; 0x803c78 <startCountMillis>
    1882:	90 90 79 3c 	lds	r9, 0x3C79	; 0x803c79 <startCountMillis+0x1>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:165
    }

    currentCountMillis = millis();
    1886:	a0 90 7a 3c 	lds	r10, 0x3C7A	; 0x803c7a <startCountMillis+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:166
    if (currentCountMillis - startCountMillis >= countdownPeriod) {
    188a:	b0 90 7b 3c 	lds	r11, 0x3C7B	; 0x803c7b <startCountMillis+0x3>
    188e:	9b 01       	movw	r18, r22
    1890:	ac 01       	movw	r20, r24
    1892:	28 19       	sub	r18, r8
    1894:	39 09       	sbc	r19, r9
    1896:	4a 09       	sbc	r20, r10
    1898:	5b 09       	sbc	r21, r11
    189a:	49 01       	movw	r8, r18
    189c:	5a 01       	movw	r10, r20
    189e:	30 ea       	ldi	r19, 0xA0	; 160
    18a0:	83 16       	cp	r8, r19
    18a2:	3f e0       	ldi	r19, 0x0F	; 15
    18a4:	93 06       	cpc	r9, r19
    18a6:	a1 04       	cpc	r10, r1
    18a8:	b1 04       	cpc	r11, r1
    18aa:	08 f4       	brcc	.+2      	; 0x18ae <main+0xb38>
    18ac:	70 cf       	rjmp	.-288    	; 0x178e <main+0xa18>
    18ae:	4f ef       	ldi	r20, 0xFF	; 255
    18b0:	e4 1a       	sub	r14, r20
    18b2:	f4 0a       	sbc	r15, r20
    18b4:	e0 92 7e 3c 	sts	0x3C7E, r14	; 0x803c7e <displayCycleCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:167
      displayCycleCounter++;
    18b8:	f0 92 7f 3c 	sts	0x3C7F, r15	; 0x803c7f <displayCycleCounter+0x1>
    18bc:	60 93 78 3c 	sts	0x3C78, r22	; 0x803c78 <startCountMillis>
    18c0:	70 93 79 3c 	sts	0x3C79, r23	; 0x803c79 <startCountMillis+0x1>
    18c4:	80 93 7a 3c 	sts	0x3C7A, r24	; 0x803c7a <startCountMillis+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:168
      startCountMillis = currentCountMillis;
    18c8:	90 93 7b 3c 	sts	0x3C7B, r25	; 0x803c7b <startCountMillis+0x3>
    18cc:	60 cf       	rjmp	.-320    	; 0x178e <main+0xa18>
reportRTCAvailability():
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	80 93 5f 3c 	sts	0x3C5F, r24	; 0x803c5f <rtcAvailable>
    18d4:	82 e6       	ldi	r24, 0x62	; 98
    18d6:	92 ea       	ldi	r25, 0xA2	; 162
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:34

  if (!rtc.begin()) {
    rtcAvailable = false;
    Serial.println("RTC_ADDR_FOUND:0");
  } else {
    rtcAvailable = true;
    18d8:	8a cd       	rjmp	.-1260   	; 0x13ee <main+0x678>
rtcReadWriteChecker():
    18da:	10 92 5e 3c 	sts	0x3C5E, r1	; 0x803c5e <rtcReadable>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:35
    Serial.println("RTC_ADDR_FOUND:1");
    18de:	8b ea       	ldi	r24, 0xAB	; 171
    18e0:	92 ea       	ldi	r25, 0xA2	; 162
    18e2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:48
      delay(100);
      // Send string date & time
      Serial.println(String(rtc.stringTime()));
      Serial.println(String(rtc.stringDate()));
    } else {
      rtcReadable = false;
    18e6:	53 ce       	rjmp	.-858    	; 0x158e <main+0x818>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:49
      Serial.println("RTC_READABLE:0");
    18e8:	8b ea       	ldi	r24, 0xAB	; 171
    18ea:	92 ea       	ldi	r25, 0xA2	; 162
    18ec:	57 ce       	rjmp	.-850    	; 0x159c <main+0x826>
btnChecker():
    18ee:	80 91 68 3c 	lds	r24, 0x3C68	; 0x803c68 <btnWatchTimerCurr>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/rtcExaminer.h:56
    break;
  }
  if (rtcReadable) {
    Serial.println("RTC_READABLE:1");
  } else {
    Serial.println("RTC_READABLE:0");
    18f2:	90 91 69 3c 	lds	r25, 0x3C69	; 0x803c69 <btnWatchTimerCurr+0x1>
    18f6:	a0 91 6a 3c 	lds	r26, 0x3C6A	; 0x803c6a <btnWatchTimerCurr+0x2>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/btnExaminer.h:45
        break;
      }
      btnWatchTimerStart = btnWatchTimerCurr;
    18fa:	b0 91 6b 3c 	lds	r27, 0x3C6B	; 0x803c6b <btnWatchTimerCurr+0x3>
    18fe:	80 93 64 3c 	sts	0x3C64, r24	; 0x803c64 <btnWatchTimerStart>
    1902:	90 93 65 3c 	sts	0x3C65, r25	; 0x803c65 <btnWatchTimerStart+0x1>
    1906:	a0 93 66 3c 	sts	0x3C66, r26	; 0x803c66 <btnWatchTimerStart+0x2>
    190a:	b0 93 67 3c 	sts	0x3C67, r27	; 0x803c67 <btnWatchTimerStart+0x3>
    190e:	72 ce       	rjmp	.-796    	; 0x15f4 <main+0x87e>
showOnDisplay():
    1910:	10 92 6e 3c 	sts	0x3C6E, r1	; 0x803c6e <c>
    1914:	10 92 6f 3c 	sts	0x3C6F, r1	; 0x803c6f <c+0x1>
    1918:	7e cf       	rjmp	.-260    	; 0x1816 <main+0xaa0>
operateDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:103
    byte this_digit = num_array[digits[c]];
    VPORTA.OUT = this_digit;
    sei(); // Interrupts back on

    c++;
    if (c > 3) c = 0;
    191a:	1c 92       	st	X, r1
    191c:	a6 cf       	rjmp	.-180    	; 0x186a <main+0xaf4>
    191e:	e4 e0       	ldi	r30, 0x04	; 4
    1920:	ee 16       	cp	r14, r30
    1922:	f1 04       	cpc	r15, r1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:149
    if (displayCycleCounter != prevCounter) {
      //  Serial.println(displayCycleCounter);
      if (displayCycleCounter > 1 && displayCycleCounter <= 3) {
        for (int i = 0; i < int(sizeof(digits_)); i++) {
          digits_[i] += 4;
          if (digits_[i] > 9) digits_[i] = 0;
    1924:	0c f4       	brge	.+2      	; 0x1928 <main+0xbb2>
    1926:	a5 cf       	rjmp	.-182    	; 0x1872 <main+0xafc>
turnOffDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:153
        }
      }

      if (displayCycleCounter > 3) {
    1928:	80 e2       	ldi	r24, 0x20	; 32
    192a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <vtable for UartClass+0x7f63f9>
    192e:	d0 92 06 04 	sts	0x0406, r13	; 0x800406 <vtable for UartClass+0x7f63b9>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:57
  PORTB.DIRSET = 0b11110000;
}


void turnOffDisplay() {
  PORTC.OUTCLR = PIN5_bm; // toggle PC5 OFF
    1932:	80 ef       	ldi	r24, 0xF0	; 240
    1934:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <vtable for UartClass+0x7f63d8>
operateDisplay():
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:60

  // ---- Clear all leds of a segment ---- //
  PORTA.OUTCLR = 0b11111110;
    1938:	10 92 7e 3c 	sts	0x3C7E, r1	; 0x803c7e <displayCycleCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:62
  // ---- Deactivatec all segments by setting them HIGH (My segments are in common Anode config) ---- //
  PORTB.OUTSET = 0b11110000;
    193c:	10 92 7f 3c 	sts	0x3C7F, r1	; 0x803c7f <displayCycleCounter+0x1>
    1940:	10 92 7c 3c 	sts	0x3C7C, r1	; 0x803c7c <prevCounter>
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:155
        }
      }

      if (displayCycleCounter > 3) {
        turnOffDisplay();
        displayCycleCounter = 0;
    1944:	10 92 7d 3c 	sts	0x3C7D, r1	; 0x803c7d <prevCounter+0x1>
loop():
    1948:	82 eb       	ldi	r24, 0xB2	; 178
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/displayOperator.h:156
        prevCounter = 0;
    194a:	93 ea       	ldi	r25, 0xA3	; 163
    194c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1950:	8d ea       	ldi	r24, 0xAD	; 173
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:96
    operateDisplay();

    Serial.println("\nDISPLAY WORKING? (write below)");
    1952:	90 ea       	ldi	r25, 0xA0	; 160
    1954:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Print::println(char const*) [clone .constprop.26]>
    1958:	81 e0       	ldi	r24, 0x01	; 1
/Users/saurabhdatta/PersonalProjects/clock/Arduino/watch_firmware/Tests/components_check/components_check.ino:97
    Serial.println("!");
    195a:	80 93 80 3c 	sts	0x3C80, r24	; 0x803c80 <displayChecked>
    195e:	72 ca       	rjmp	.-2844   	; 0xe44 <main+0xce>

00001960 <__prologue_saves__>:
__prologue_saves__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    1960:	2f 92       	push	r2
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    1962:	3f 92       	push	r3
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    1964:	4f 92       	push	r4
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    1966:	5f 92       	push	r5
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    1968:	6f 92       	push	r6
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    196a:	7f 92       	push	r7
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    196c:	8f 92       	push	r8
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    196e:	9f 92       	push	r9
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    1970:	af 92       	push	r10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    1972:	bf 92       	push	r11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    1974:	cf 92       	push	r12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    1976:	df 92       	push	r13
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    1978:	ef 92       	push	r14
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    197a:	ff 92       	push	r15
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    197c:	0f 93       	push	r16
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    197e:	1f 93       	push	r17
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    1980:	cf 93       	push	r28
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    1982:	df 93       	push	r29
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    1984:	cd b7       	in	r28, 0x3d	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    1986:	de b7       	in	r29, 0x3e	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    1988:	ca 1b       	sub	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    198a:	db 0b       	sbc	r29, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    198c:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    198e:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    1990:	09 94       	ijmp

00001992 <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    1992:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    1994:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    1996:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    1998:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    199a:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    199c:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    199e:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    19a0:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    19a2:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    19a4:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    19a6:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    19a8:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    19aa:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    19ac:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    19ae:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    19b0:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    19b2:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    19b4:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    19b6:	ce 0f       	add	r28, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    19b8:	d1 1d       	adc	r29, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    19ba:	cd bf       	out	0x3d, r28	; 61
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    19bc:	de bf       	out	0x3e, r29	; 62
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    19be:	ed 01       	movw	r28, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    19c0:	08 95       	ret

000019c2 <strchr_P>:
strchr_P():
    19c2:	fc 01       	movw	r30, r24
    19c4:	05 90       	lpm	r0, Z+
    19c6:	06 16       	cp	r0, r22
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <strchr_P+0x10>
    19ca:	00 20       	and	r0, r0
    19cc:	d9 f7       	brne	.-10     	; 0x19c4 <strchr_P+0x2>
    19ce:	c0 01       	movw	r24, r0
    19d0:	08 95       	ret
    19d2:	31 97       	sbiw	r30, 0x01	; 1
    19d4:	cf 01       	movw	r24, r30
    19d6:	08 95       	ret

000019d8 <__itoa_ncheck>:
__itoa_ncheck():
    19d8:	bb 27       	eor	r27, r27
    19da:	4a 30       	cpi	r20, 0x0A	; 10
    19dc:	31 f4       	brne	.+12     	; 0x19ea <__itoa_ncheck+0x12>
    19de:	99 23       	and	r25, r25
    19e0:	22 f4       	brpl	.+8      	; 0x19ea <__itoa_ncheck+0x12>
    19e2:	bd e2       	ldi	r27, 0x2D	; 45
    19e4:	90 95       	com	r25
    19e6:	81 95       	neg	r24
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	01 c0       	rjmp	.+2      	; 0x19ee <__utoa_common>

000019ec <__utoa_ncheck>:
__utoa_ncheck():
    19ec:	bb 27       	eor	r27, r27

000019ee <__utoa_common>:
    19ee:	fb 01       	movw	r30, r22
    19f0:	55 27       	eor	r21, r21
    19f2:	aa 27       	eor	r26, r26
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	aa 1f       	adc	r26, r26
    19fa:	a4 17       	cp	r26, r20
    19fc:	10 f0       	brcs	.+4      	; 0x1a02 <__utoa_common+0x14>
    19fe:	a4 1b       	sub	r26, r20
    1a00:	83 95       	inc	r24
    1a02:	50 51       	subi	r21, 0x10	; 16
    1a04:	b9 f7       	brne	.-18     	; 0x19f4 <__utoa_common+0x6>
    1a06:	a0 5d       	subi	r26, 0xD0	; 208
    1a08:	aa 33       	cpi	r26, 0x3A	; 58
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <__utoa_common+0x20>
    1a0c:	a9 5d       	subi	r26, 0xD9	; 217
    1a0e:	a1 93       	st	Z+, r26
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	79 f7       	brne	.-34     	; 0x19f2 <__utoa_common+0x4>
    1a14:	b1 11       	cpse	r27, r1
    1a16:	b1 93       	st	Z+, r27
    1a18:	11 92       	st	Z+, r1
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	8e c0       	rjmp	.+284    	; 0x1b3a <strrev>

00001a1e <fputc>:
fputc():
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	18 2f       	mov	r17, r24
    1a28:	09 2f       	mov	r16, r25
    1a2a:	eb 01       	movw	r28, r22
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	81 fd       	sbrc	r24, 1
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <fputc+0x26>
    1a32:	1f ef       	ldi	r17, 0xFF	; 255
    1a34:	0f ef       	ldi	r16, 0xFF	; 255
    1a36:	81 2f       	mov	r24, r17
    1a38:	90 2f       	mov	r25, r16
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	08 95       	ret
    1a44:	82 ff       	sbrs	r24, 2
    1a46:	14 c0       	rjmp	.+40     	; 0x1a70 <fputc+0x52>
    1a48:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a50:	28 17       	cp	r18, r24
    1a52:	39 07       	cpc	r19, r25
    1a54:	3c f4       	brge	.+14     	; 0x1a64 <fputc+0x46>
    1a56:	e8 81       	ld	r30, Y
    1a58:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5a:	cf 01       	movw	r24, r30
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	88 83       	st	Y, r24
    1a60:	99 83       	std	Y+1, r25	; 0x01
    1a62:	10 83       	st	Z, r17
    1a64:	8e 81       	ldd	r24, Y+6	; 0x06
    1a66:	9f 81       	ldd	r25, Y+7	; 0x07
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	8e 83       	std	Y+6, r24	; 0x06
    1a6c:	9f 83       	std	Y+7, r25	; 0x07
    1a6e:	e3 cf       	rjmp	.-58     	; 0x1a36 <fputc+0x18>
    1a70:	e8 85       	ldd	r30, Y+8	; 0x08
    1a72:	f9 85       	ldd	r31, Y+9	; 0x09
    1a74:	81 2f       	mov	r24, r17
    1a76:	09 95       	icall
    1a78:	89 2b       	or	r24, r25
    1a7a:	a1 f3       	breq	.-24     	; 0x1a64 <fputc+0x46>
    1a7c:	da cf       	rjmp	.-76     	; 0x1a32 <fputc+0x14>

00001a7e <__ultoa_invert>:
__ultoa_invert():
    1a7e:	fa 01       	movw	r30, r20
    1a80:	aa 27       	eor	r26, r26
    1a82:	28 30       	cpi	r18, 0x08	; 8
    1a84:	51 f1       	breq	.+84     	; 0x1ada <__ultoa_invert+0x5c>
    1a86:	20 31       	cpi	r18, 0x10	; 16
    1a88:	81 f1       	breq	.+96     	; 0x1aea <__ultoa_invert+0x6c>
    1a8a:	e8 94       	clt
    1a8c:	6f 93       	push	r22
    1a8e:	6e 7f       	andi	r22, 0xFE	; 254
    1a90:	6e 5f       	subi	r22, 0xFE	; 254
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8f 4f       	sbci	r24, 0xFF	; 255
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	af 4f       	sbci	r26, 0xFF	; 255
    1a9a:	b1 e0       	ldi	r27, 0x01	; 1
    1a9c:	3e d0       	rcall	.+124    	; 0x1b1a <__ultoa_invert+0x9c>
    1a9e:	b4 e0       	ldi	r27, 0x04	; 4
    1aa0:	3c d0       	rcall	.+120    	; 0x1b1a <__ultoa_invert+0x9c>
    1aa2:	67 0f       	add	r22, r23
    1aa4:	78 1f       	adc	r23, r24
    1aa6:	89 1f       	adc	r24, r25
    1aa8:	9a 1f       	adc	r25, r26
    1aaa:	a1 1d       	adc	r26, r1
    1aac:	68 0f       	add	r22, r24
    1aae:	79 1f       	adc	r23, r25
    1ab0:	8a 1f       	adc	r24, r26
    1ab2:	91 1d       	adc	r25, r1
    1ab4:	a1 1d       	adc	r26, r1
    1ab6:	6a 0f       	add	r22, r26
    1ab8:	71 1d       	adc	r23, r1
    1aba:	81 1d       	adc	r24, r1
    1abc:	91 1d       	adc	r25, r1
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	20 d0       	rcall	.+64     	; 0x1b02 <__ultoa_invert+0x84>
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <__ultoa_invert+0x48>
    1ac4:	68 94       	set
    1ac6:	3f 91       	pop	r19
    1ac8:	2a e0       	ldi	r18, 0x0A	; 10
    1aca:	26 9f       	mul	r18, r22
    1acc:	11 24       	eor	r1, r1
    1ace:	30 19       	sub	r19, r0
    1ad0:	30 5d       	subi	r19, 0xD0	; 208
    1ad2:	31 93       	st	Z+, r19
    1ad4:	de f6       	brtc	.-74     	; 0x1a8c <__ultoa_invert+0xe>
    1ad6:	cf 01       	movw	r24, r30
    1ad8:	08 95       	ret
    1ada:	46 2f       	mov	r20, r22
    1adc:	47 70       	andi	r20, 0x07	; 7
    1ade:	40 5d       	subi	r20, 0xD0	; 208
    1ae0:	41 93       	st	Z+, r20
    1ae2:	b3 e0       	ldi	r27, 0x03	; 3
    1ae4:	0f d0       	rcall	.+30     	; 0x1b04 <__ultoa_invert+0x86>
    1ae6:	c9 f7       	brne	.-14     	; 0x1ada <__ultoa_invert+0x5c>
    1ae8:	f6 cf       	rjmp	.-20     	; 0x1ad6 <__ultoa_invert+0x58>
    1aea:	46 2f       	mov	r20, r22
    1aec:	4f 70       	andi	r20, 0x0F	; 15
    1aee:	40 5d       	subi	r20, 0xD0	; 208
    1af0:	4a 33       	cpi	r20, 0x3A	; 58
    1af2:	18 f0       	brcs	.+6      	; 0x1afa <__ultoa_invert+0x7c>
    1af4:	49 5d       	subi	r20, 0xD9	; 217
    1af6:	31 fd       	sbrc	r19, 1
    1af8:	40 52       	subi	r20, 0x20	; 32
    1afa:	41 93       	st	Z+, r20
    1afc:	02 d0       	rcall	.+4      	; 0x1b02 <__ultoa_invert+0x84>
    1afe:	a9 f7       	brne	.-22     	; 0x1aea <__ultoa_invert+0x6c>
    1b00:	ea cf       	rjmp	.-44     	; 0x1ad6 <__ultoa_invert+0x58>
    1b02:	b4 e0       	ldi	r27, 0x04	; 4
    1b04:	a6 95       	lsr	r26
    1b06:	97 95       	ror	r25
    1b08:	87 95       	ror	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	ba 95       	dec	r27
    1b10:	c9 f7       	brne	.-14     	; 0x1b04 <__ultoa_invert+0x86>
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	61 05       	cpc	r22, r1
    1b16:	71 05       	cpc	r23, r1
    1b18:	08 95       	ret
    1b1a:	9b 01       	movw	r18, r22
    1b1c:	ac 01       	movw	r20, r24
    1b1e:	0a 2e       	mov	r0, r26
    1b20:	06 94       	lsr	r0
    1b22:	57 95       	ror	r21
    1b24:	47 95       	ror	r20
    1b26:	37 95       	ror	r19
    1b28:	27 95       	ror	r18
    1b2a:	ba 95       	dec	r27
    1b2c:	c9 f7       	brne	.-14     	; 0x1b20 <__ultoa_invert+0xa2>
    1b2e:	62 0f       	add	r22, r18
    1b30:	73 1f       	adc	r23, r19
    1b32:	84 1f       	adc	r24, r20
    1b34:	95 1f       	adc	r25, r21
    1b36:	a0 1d       	adc	r26, r0
    1b38:	08 95       	ret

00001b3a <strrev>:
strrev():
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	67 2f       	mov	r22, r23
    1b40:	71 91       	ld	r23, Z+
    1b42:	77 23       	and	r23, r23
    1b44:	e1 f7       	brne	.-8      	; 0x1b3e <strrev+0x4>
    1b46:	32 97       	sbiw	r30, 0x02	; 2
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <strrev+0x18>
    1b4a:	7c 91       	ld	r23, X
    1b4c:	6d 93       	st	X+, r22
    1b4e:	70 83       	st	Z, r23
    1b50:	62 91       	ld	r22, -Z
    1b52:	ae 17       	cp	r26, r30
    1b54:	bf 07       	cpc	r27, r31
    1b56:	c8 f3       	brcs	.-14     	; 0x1b4a <strrev+0x10>
    1b58:	08 95       	ret

00001b5a <__muluhisi3>:
__muluhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    1b5a:	09 d0       	rcall	.+18     	; 0x1b6e <__umulhisi3>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    1b5c:	a5 9f       	mul	r26, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    1b5e:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    1b60:	b4 9f       	mul	r27, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    1b62:	90 0d       	add	r25, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    1b64:	a4 9f       	mul	r26, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    1b66:	80 0d       	add	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    1b68:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    1b6a:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    1b6c:	08 95       	ret

00001b6e <__umulhisi3>:
__umulhisi3():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    1b6e:	a2 9f       	mul	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    1b70:	b0 01       	movw	r22, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    1b72:	b3 9f       	mul	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    1b74:	c0 01       	movw	r24, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    1b76:	a3 9f       	mul	r26, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    1b78:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    1b7a:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    1b7c:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    1b7e:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    1b80:	b2 9f       	mul	r27, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    1b82:	70 0d       	add	r23, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    1b84:	81 1d       	adc	r24, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    1b86:	11 24       	eor	r1, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    1b88:	91 1d       	adc	r25, r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    1b8a:	08 95       	ret

00001b8c <__udivmodsi4>:
__udivmodsi4():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1b8c:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1b8e:	1a 2e       	mov	r1, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1b90:	aa 1b       	sub	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1b92:	bb 1b       	sub	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1b94:	fd 01       	movw	r30, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <__udivmodsi4_ep>

00001b98 <__udivmodsi4_loop>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1b98:	aa 1f       	adc	r26, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1b9a:	bb 1f       	adc	r27, r27
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1b9c:	ee 1f       	adc	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1b9e:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1ba0:	a2 17       	cp	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1ba2:	b3 07       	cpc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1ba4:	e4 07       	cpc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1ba6:	f5 07       	cpc	r31, r21
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1ba8:	20 f0       	brcs	.+8      	; 0x1bb2 <__udivmodsi4_ep>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1baa:	a2 1b       	sub	r26, r18
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1bac:	b3 0b       	sbc	r27, r19
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1bae:	e4 0b       	sbc	r30, r20
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1bb0:	f5 0b       	sbc	r31, r21

00001bb2 <__udivmodsi4_ep>:
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1bb2:	66 1f       	adc	r22, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1bb4:	77 1f       	adc	r23, r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1bb6:	88 1f       	adc	r24, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1bb8:	99 1f       	adc	r25, r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1bba:	1a 94       	dec	r1
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <__udivmodsi4_loop>
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1bbe:	60 95       	com	r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1bc0:	70 95       	com	r23
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1bc2:	80 95       	com	r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1bc4:	90 95       	com	r25
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1bc6:	9b 01       	movw	r18, r22
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1bc8:	ac 01       	movw	r20, r24
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1bca:	bd 01       	movw	r22, r26
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1bcc:	cf 01       	movw	r24, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1bce:	08 95       	ret

00001bd0 <__tablejump2__>:
__tablejump2__():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1bd0:	ee 0f       	add	r30, r30
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1bd2:	ff 1f       	adc	r31, r31
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1bd4:	05 90       	lpm	r0, Z+
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1bd6:	f4 91       	lpm	r31, Z
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1bd8:	e0 2d       	mov	r30, r0
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1bda:	09 94       	ijmp

00001bdc <malloc>:
malloc():
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	82 30       	cpi	r24, 0x02	; 2
    1be6:	91 05       	cpc	r25, r1
    1be8:	10 f4       	brcc	.+4      	; 0x1bee <malloc+0x12>
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	e0 91 19 3d 	lds	r30, 0x3D19	; 0x803d19 <__flp>
    1bf2:	f0 91 1a 3d 	lds	r31, 0x3D1A	; 0x803d1a <__flp+0x1>
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	a0 e0       	ldi	r26, 0x00	; 0
    1bfe:	30 97       	sbiw	r30, 0x00	; 0
    1c00:	99 f4       	brne	.+38     	; 0x1c28 <malloc+0x4c>
    1c02:	21 15       	cp	r18, r1
    1c04:	31 05       	cpc	r19, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <malloc+0x2e>
    1c08:	4a c0       	rjmp	.+148    	; 0x1c9e <malloc+0xc2>
    1c0a:	28 1b       	sub	r18, r24
    1c0c:	39 0b       	sbc	r19, r25
    1c0e:	24 30       	cpi	r18, 0x04	; 4
    1c10:	31 05       	cpc	r19, r1
    1c12:	d8 f5       	brcc	.+118    	; 0x1c8a <malloc+0xae>
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	9b 81       	ldd	r25, Y+3	; 0x03
    1c18:	61 15       	cp	r22, r1
    1c1a:	71 05       	cpc	r23, r1
    1c1c:	89 f1       	breq	.+98     	; 0x1c80 <malloc+0xa4>
    1c1e:	fb 01       	movw	r30, r22
    1c20:	82 83       	std	Z+2, r24	; 0x02
    1c22:	93 83       	std	Z+3, r25	; 0x03
    1c24:	fe 01       	movw	r30, r28
    1c26:	11 c0       	rjmp	.+34     	; 0x1c4a <malloc+0x6e>
    1c28:	40 81       	ld	r20, Z
    1c2a:	51 81       	ldd	r21, Z+1	; 0x01
    1c2c:	02 81       	ldd	r16, Z+2	; 0x02
    1c2e:	13 81       	ldd	r17, Z+3	; 0x03
    1c30:	48 17       	cp	r20, r24
    1c32:	59 07       	cpc	r21, r25
    1c34:	e0 f0       	brcs	.+56     	; 0x1c6e <malloc+0x92>
    1c36:	48 17       	cp	r20, r24
    1c38:	59 07       	cpc	r21, r25
    1c3a:	99 f4       	brne	.+38     	; 0x1c62 <malloc+0x86>
    1c3c:	10 97       	sbiw	r26, 0x00	; 0
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <malloc+0x7c>
    1c40:	12 96       	adiw	r26, 0x02	; 2
    1c42:	0c 93       	st	X, r16
    1c44:	12 97       	sbiw	r26, 0x02	; 2
    1c46:	13 96       	adiw	r26, 0x03	; 3
    1c48:	1c 93       	st	X, r17
    1c4a:	32 96       	adiw	r30, 0x02	; 2
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	08 95       	ret
    1c58:	00 93 19 3d 	sts	0x3D19, r16	; 0x803d19 <__flp>
    1c5c:	10 93 1a 3d 	sts	0x3D1A, r17	; 0x803d1a <__flp+0x1>
    1c60:	f4 cf       	rjmp	.-24     	; 0x1c4a <malloc+0x6e>
    1c62:	21 15       	cp	r18, r1
    1c64:	31 05       	cpc	r19, r1
    1c66:	51 f0       	breq	.+20     	; 0x1c7c <malloc+0xa0>
    1c68:	42 17       	cp	r20, r18
    1c6a:	53 07       	cpc	r21, r19
    1c6c:	38 f0       	brcs	.+14     	; 0x1c7c <malloc+0xa0>
    1c6e:	a9 01       	movw	r20, r18
    1c70:	db 01       	movw	r26, r22
    1c72:	9a 01       	movw	r18, r20
    1c74:	bd 01       	movw	r22, r26
    1c76:	df 01       	movw	r26, r30
    1c78:	f8 01       	movw	r30, r16
    1c7a:	c1 cf       	rjmp	.-126    	; 0x1bfe <malloc+0x22>
    1c7c:	ef 01       	movw	r28, r30
    1c7e:	f9 cf       	rjmp	.-14     	; 0x1c72 <malloc+0x96>
    1c80:	80 93 19 3d 	sts	0x3D19, r24	; 0x803d19 <__flp>
    1c84:	90 93 1a 3d 	sts	0x3D1A, r25	; 0x803d1a <__flp+0x1>
    1c88:	cd cf       	rjmp	.-102    	; 0x1c24 <malloc+0x48>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e2 0f       	add	r30, r18
    1c8e:	f3 1f       	adc	r31, r19
    1c90:	81 93       	st	Z+, r24
    1c92:	91 93       	st	Z+, r25
    1c94:	22 50       	subi	r18, 0x02	; 2
    1c96:	31 09       	sbc	r19, r1
    1c98:	28 83       	st	Y, r18
    1c9a:	39 83       	std	Y+1, r19	; 0x01
    1c9c:	d7 cf       	rjmp	.-82     	; 0x1c4c <malloc+0x70>
    1c9e:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1ca2:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1ca6:	23 2b       	or	r18, r19
    1ca8:	41 f4       	brne	.+16     	; 0x1cba <malloc+0xde>
    1caa:	20 91 08 3c 	lds	r18, 0x3C08	; 0x803c08 <__malloc_heap_start>
    1cae:	30 91 09 3c 	lds	r19, 0x3C09	; 0x803c09 <__malloc_heap_start+0x1>
    1cb2:	20 93 17 3d 	sts	0x3D17, r18	; 0x803d17 <__brkval>
    1cb6:	30 93 18 3d 	sts	0x3D18, r19	; 0x803d18 <__brkval+0x1>
    1cba:	20 91 06 3c 	lds	r18, 0x3C06	; 0x803c06 <__malloc_heap_end>
    1cbe:	30 91 07 3c 	lds	r19, 0x3C07	; 0x803c07 <__malloc_heap_end+0x1>
    1cc2:	21 15       	cp	r18, r1
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	41 f4       	brne	.+16     	; 0x1cd8 <malloc+0xfc>
    1cc8:	2d b7       	in	r18, 0x3d	; 61
    1cca:	3e b7       	in	r19, 0x3e	; 62
    1ccc:	40 91 0a 3c 	lds	r20, 0x3C0A	; 0x803c0a <__malloc_margin>
    1cd0:	50 91 0b 3c 	lds	r21, 0x3C0B	; 0x803c0b <__malloc_margin+0x1>
    1cd4:	24 1b       	sub	r18, r20
    1cd6:	35 0b       	sbc	r19, r21
    1cd8:	e0 91 17 3d 	lds	r30, 0x3D17	; 0x803d17 <__brkval>
    1cdc:	f0 91 18 3d 	lds	r31, 0x3D18	; 0x803d18 <__brkval+0x1>
    1ce0:	e2 17       	cp	r30, r18
    1ce2:	f3 07       	cpc	r31, r19
    1ce4:	a0 f4       	brcc	.+40     	; 0x1d0e <malloc+0x132>
    1ce6:	2e 1b       	sub	r18, r30
    1ce8:	3f 0b       	sbc	r19, r31
    1cea:	28 17       	cp	r18, r24
    1cec:	39 07       	cpc	r19, r25
    1cee:	78 f0       	brcs	.+30     	; 0x1d0e <malloc+0x132>
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	4e 5f       	subi	r20, 0xFE	; 254
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	24 17       	cp	r18, r20
    1cf8:	35 07       	cpc	r19, r21
    1cfa:	48 f0       	brcs	.+18     	; 0x1d0e <malloc+0x132>
    1cfc:	4e 0f       	add	r20, r30
    1cfe:	5f 1f       	adc	r21, r31
    1d00:	40 93 17 3d 	sts	0x3D17, r20	; 0x803d17 <__brkval>
    1d04:	50 93 18 3d 	sts	0x3D18, r21	; 0x803d18 <__brkval+0x1>
    1d08:	81 93       	st	Z+, r24
    1d0a:	91 93       	st	Z+, r25
    1d0c:	9f cf       	rjmp	.-194    	; 0x1c4c <malloc+0x70>
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	e0 e0       	ldi	r30, 0x00	; 0
    1d12:	9c cf       	rjmp	.-200    	; 0x1c4c <malloc+0x70>

00001d14 <free>:
free():
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	e9 f0       	breq	.+58     	; 0x1d56 <free+0x42>
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	32 97       	sbiw	r30, 0x02	; 2
    1d20:	12 82       	std	Z+2, r1	; 0x02
    1d22:	13 82       	std	Z+3, r1	; 0x03
    1d24:	a0 91 19 3d 	lds	r26, 0x3D19	; 0x803d19 <__flp>
    1d28:	b0 91 1a 3d 	lds	r27, 0x3D1A	; 0x803d1a <__flp+0x1>
    1d2c:	ed 01       	movw	r28, r26
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	10 97       	sbiw	r26, 0x00	; 0
    1d34:	a1 f4       	brne	.+40     	; 0x1d5e <free+0x4a>
    1d36:	20 81       	ld	r18, Z
    1d38:	31 81       	ldd	r19, Z+1	; 0x01
    1d3a:	82 0f       	add	r24, r18
    1d3c:	93 1f       	adc	r25, r19
    1d3e:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1d42:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	09 f0       	breq	.+2      	; 0x1d4e <free+0x3a>
    1d4c:	61 c0       	rjmp	.+194    	; 0x1e10 <free+0xfc>
    1d4e:	e0 93 17 3d 	sts	0x3D17, r30	; 0x803d17 <__brkval>
    1d52:	f0 93 18 3d 	sts	0x3D18, r31	; 0x803d18 <__brkval+0x1>
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	08 95       	ret
    1d5c:	ea 01       	movw	r28, r20
    1d5e:	ce 17       	cp	r28, r30
    1d60:	df 07       	cpc	r29, r31
    1d62:	e8 f5       	brcc	.+122    	; 0x1dde <free+0xca>
    1d64:	4a 81       	ldd	r20, Y+2	; 0x02
    1d66:	5b 81       	ldd	r21, Y+3	; 0x03
    1d68:	9e 01       	movw	r18, r28
    1d6a:	41 15       	cp	r20, r1
    1d6c:	51 05       	cpc	r21, r1
    1d6e:	b1 f7       	brne	.-20     	; 0x1d5c <free+0x48>
    1d70:	e9 01       	movw	r28, r18
    1d72:	ea 83       	std	Y+2, r30	; 0x02
    1d74:	fb 83       	std	Y+3, r31	; 0x03
    1d76:	49 91       	ld	r20, Y+
    1d78:	59 91       	ld	r21, Y+
    1d7a:	c4 0f       	add	r28, r20
    1d7c:	d5 1f       	adc	r29, r21
    1d7e:	ec 17       	cp	r30, r28
    1d80:	fd 07       	cpc	r31, r29
    1d82:	61 f4       	brne	.+24     	; 0x1d9c <free+0x88>
    1d84:	80 81       	ld	r24, Z
    1d86:	91 81       	ldd	r25, Z+1	; 0x01
    1d88:	02 96       	adiw	r24, 0x02	; 2
    1d8a:	84 0f       	add	r24, r20
    1d8c:	95 1f       	adc	r25, r21
    1d8e:	e9 01       	movw	r28, r18
    1d90:	88 83       	st	Y, r24
    1d92:	99 83       	std	Y+1, r25	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	8a 83       	std	Y+2, r24	; 0x02
    1d9a:	9b 83       	std	Y+3, r25	; 0x03
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	e0 e0       	ldi	r30, 0x00	; 0
    1da0:	12 96       	adiw	r26, 0x02	; 2
    1da2:	8d 91       	ld	r24, X+
    1da4:	9c 91       	ld	r25, X
    1da6:	13 97       	sbiw	r26, 0x03	; 3
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	b9 f5       	brne	.+110    	; 0x1e1a <free+0x106>
    1dac:	2d 91       	ld	r18, X+
    1dae:	3c 91       	ld	r19, X
    1db0:	11 97       	sbiw	r26, 0x01	; 1
    1db2:	cd 01       	movw	r24, r26
    1db4:	02 96       	adiw	r24, 0x02	; 2
    1db6:	82 0f       	add	r24, r18
    1db8:	93 1f       	adc	r25, r19
    1dba:	20 91 17 3d 	lds	r18, 0x3D17	; 0x803d17 <__brkval>
    1dbe:	30 91 18 3d 	lds	r19, 0x3D18	; 0x803d18 <__brkval+0x1>
    1dc2:	28 17       	cp	r18, r24
    1dc4:	39 07       	cpc	r19, r25
    1dc6:	39 f6       	brne	.-114    	; 0x1d56 <free+0x42>
    1dc8:	30 97       	sbiw	r30, 0x00	; 0
    1dca:	51 f5       	brne	.+84     	; 0x1e20 <free+0x10c>
    1dcc:	10 92 19 3d 	sts	0x3D19, r1	; 0x803d19 <__flp>
    1dd0:	10 92 1a 3d 	sts	0x3D1A, r1	; 0x803d1a <__flp+0x1>
    1dd4:	a0 93 17 3d 	sts	0x3D17, r26	; 0x803d17 <__brkval>
    1dd8:	b0 93 18 3d 	sts	0x3D18, r27	; 0x803d18 <__brkval+0x1>
    1ddc:	bc cf       	rjmp	.-136    	; 0x1d56 <free+0x42>
    1dde:	c2 83       	std	Z+2, r28	; 0x02
    1de0:	d3 83       	std	Z+3, r29	; 0x03
    1de2:	40 81       	ld	r20, Z
    1de4:	51 81       	ldd	r21, Z+1	; 0x01
    1de6:	84 0f       	add	r24, r20
    1de8:	95 1f       	adc	r25, r21
    1dea:	c8 17       	cp	r28, r24
    1dec:	d9 07       	cpc	r29, r25
    1dee:	61 f4       	brne	.+24     	; 0x1e08 <free+0xf4>
    1df0:	4e 5f       	subi	r20, 0xFE	; 254
    1df2:	5f 4f       	sbci	r21, 0xFF	; 255
    1df4:	88 81       	ld	r24, Y
    1df6:	99 81       	ldd	r25, Y+1	; 0x01
    1df8:	48 0f       	add	r20, r24
    1dfa:	59 1f       	adc	r21, r25
    1dfc:	40 83       	st	Z, r20
    1dfe:	51 83       	std	Z+1, r21	; 0x01
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	9b 81       	ldd	r25, Y+3	; 0x03
    1e04:	82 83       	std	Z+2, r24	; 0x02
    1e06:	93 83       	std	Z+3, r25	; 0x03
    1e08:	21 15       	cp	r18, r1
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <free+0xfc>
    1e0e:	b0 cf       	rjmp	.-160    	; 0x1d70 <free+0x5c>
    1e10:	e0 93 19 3d 	sts	0x3D19, r30	; 0x803d19 <__flp>
    1e14:	f0 93 1a 3d 	sts	0x3D1A, r31	; 0x803d1a <__flp+0x1>
    1e18:	9e cf       	rjmp	.-196    	; 0x1d56 <free+0x42>
    1e1a:	fd 01       	movw	r30, r26
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	c0 cf       	rjmp	.-128    	; 0x1da0 <free+0x8c>
    1e20:	12 82       	std	Z+2, r1	; 0x02
    1e22:	13 82       	std	Z+3, r1	; 0x03
    1e24:	d7 cf       	rjmp	.-82     	; 0x1dd4 <free+0xc0>

00001e26 <realloc>:
realloc():
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	a0 e0       	ldi	r26, 0x00	; 0
    1e2a:	e8 e1       	ldi	r30, 0x18	; 24
    1e2c:	ff e0       	ldi	r31, 0x0F	; 15
    1e2e:	9a cd       	rjmp	.-1228   	; 0x1964 <__prologue_saves__+0x4>
    1e30:	8c 01       	movw	r16, r24
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	41 f4       	brne	.+16     	; 0x1e46 <realloc+0x20>
    1e36:	cb 01       	movw	r24, r22
    1e38:	d1 de       	rcall	.-606    	; 0x1bdc <malloc>
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	e0 e1       	ldi	r30, 0x10	; 16
    1e44:	a8 cd       	rjmp	.-1200   	; 0x1996 <__epilogue_restores__+0x4>
    1e46:	fc 01       	movw	r30, r24
    1e48:	e6 0f       	add	r30, r22
    1e4a:	f7 1f       	adc	r31, r23
    1e4c:	9c 01       	movw	r18, r24
    1e4e:	22 50       	subi	r18, 0x02	; 2
    1e50:	31 09       	sbc	r19, r1
    1e52:	e2 17       	cp	r30, r18
    1e54:	f3 07       	cpc	r31, r19
    1e56:	08 f4       	brcc	.+2      	; 0x1e5a <realloc+0x34>
    1e58:	99 c0       	rjmp	.+306    	; 0x1f8c <realloc+0x166>
    1e5a:	d9 01       	movw	r26, r18
    1e5c:	cd 91       	ld	r28, X+
    1e5e:	dc 91       	ld	r29, X
    1e60:	11 97       	sbiw	r26, 0x01	; 1
    1e62:	c6 17       	cp	r28, r22
    1e64:	d7 07       	cpc	r29, r23
    1e66:	90 f0       	brcs	.+36     	; 0x1e8c <realloc+0x66>
    1e68:	c5 30       	cpi	r28, 0x05	; 5
    1e6a:	d1 05       	cpc	r29, r1
    1e6c:	38 f3       	brcs	.-50     	; 0x1e3c <realloc+0x16>
    1e6e:	ce 01       	movw	r24, r28
    1e70:	04 97       	sbiw	r24, 0x04	; 4
    1e72:	86 17       	cp	r24, r22
    1e74:	97 07       	cpc	r25, r23
    1e76:	10 f3       	brcs	.-60     	; 0x1e3c <realloc+0x16>
    1e78:	c6 1b       	sub	r28, r22
    1e7a:	d7 0b       	sbc	r29, r23
    1e7c:	22 97       	sbiw	r28, 0x02	; 2
    1e7e:	c1 93       	st	Z+, r28
    1e80:	d1 93       	st	Z+, r29
    1e82:	6d 93       	st	X+, r22
    1e84:	7c 93       	st	X, r23
    1e86:	cf 01       	movw	r24, r30
    1e88:	45 df       	rcall	.-374    	; 0x1d14 <free>
    1e8a:	d8 cf       	rjmp	.-80     	; 0x1e3c <realloc+0x16>
    1e8c:	5b 01       	movw	r10, r22
    1e8e:	ac 1a       	sub	r10, r28
    1e90:	bd 0a       	sbc	r11, r29
    1e92:	4c 01       	movw	r8, r24
    1e94:	8c 0e       	add	r8, r28
    1e96:	9d 1e       	adc	r9, r29
    1e98:	a0 91 19 3d 	lds	r26, 0x3D19	; 0x803d19 <__flp>
    1e9c:	b0 91 1a 3d 	lds	r27, 0x3D1A	; 0x803d1a <__flp+0x1>
    1ea0:	51 2c       	mov	r5, r1
    1ea2:	41 2c       	mov	r4, r1
    1ea4:	f1 2c       	mov	r15, r1
    1ea6:	e1 2c       	mov	r14, r1
    1ea8:	10 97       	sbiw	r26, 0x00	; 0
    1eaa:	31 f5       	brne	.+76     	; 0x1ef8 <realloc+0xd2>
    1eac:	80 91 17 3d 	lds	r24, 0x3D17	; 0x803d17 <__brkval>
    1eb0:	90 91 18 3d 	lds	r25, 0x3D18	; 0x803d18 <__brkval+0x1>
    1eb4:	88 15       	cp	r24, r8
    1eb6:	99 05       	cpc	r25, r9
    1eb8:	09 f0       	breq	.+2      	; 0x1ebc <realloc+0x96>
    1eba:	5c c0       	rjmp	.+184    	; 0x1f74 <realloc+0x14e>
    1ebc:	46 16       	cp	r4, r22
    1ebe:	57 06       	cpc	r5, r23
    1ec0:	08 f0       	brcs	.+2      	; 0x1ec4 <realloc+0x9e>
    1ec2:	58 c0       	rjmp	.+176    	; 0x1f74 <realloc+0x14e>
    1ec4:	80 91 06 3c 	lds	r24, 0x3C06	; 0x803c06 <__malloc_heap_end>
    1ec8:	90 91 07 3c 	lds	r25, 0x3C07	; 0x803c07 <__malloc_heap_end+0x1>
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	41 f4       	brne	.+16     	; 0x1ee0 <realloc+0xba>
    1ed0:	8d b7       	in	r24, 0x3d	; 61
    1ed2:	9e b7       	in	r25, 0x3e	; 62
    1ed4:	40 91 0a 3c 	lds	r20, 0x3C0A	; 0x803c0a <__malloc_margin>
    1ed8:	50 91 0b 3c 	lds	r21, 0x3C0B	; 0x803c0b <__malloc_margin+0x1>
    1edc:	84 1b       	sub	r24, r20
    1ede:	95 0b       	sbc	r25, r21
    1ee0:	e8 17       	cp	r30, r24
    1ee2:	f9 07       	cpc	r31, r25
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <realloc+0xc2>
    1ee6:	52 c0       	rjmp	.+164    	; 0x1f8c <realloc+0x166>
    1ee8:	e0 93 17 3d 	sts	0x3D17, r30	; 0x803d17 <__brkval>
    1eec:	f0 93 18 3d 	sts	0x3D18, r31	; 0x803d18 <__brkval+0x1>
    1ef0:	f9 01       	movw	r30, r18
    1ef2:	60 83       	st	Z, r22
    1ef4:	71 83       	std	Z+1, r23	; 0x01
    1ef6:	a2 cf       	rjmp	.-188    	; 0x1e3c <realloc+0x16>
    1ef8:	8d 91       	ld	r24, X+
    1efa:	9c 91       	ld	r25, X
    1efc:	11 97       	sbiw	r26, 0x01	; 1
    1efe:	12 96       	adiw	r26, 0x02	; 2
    1f00:	6c 90       	ld	r6, X
    1f02:	12 97       	sbiw	r26, 0x02	; 2
    1f04:	13 96       	adiw	r26, 0x03	; 3
    1f06:	7c 90       	ld	r7, X
    1f08:	13 97       	sbiw	r26, 0x03	; 3
    1f0a:	a8 15       	cp	r26, r8
    1f0c:	b9 05       	cpc	r27, r9
    1f0e:	59 f5       	brne	.+86     	; 0x1f66 <realloc+0x140>
    1f10:	6c 01       	movw	r12, r24
    1f12:	42 e0       	ldi	r20, 0x02	; 2
    1f14:	c4 0e       	add	r12, r20
    1f16:	d1 1c       	adc	r13, r1
    1f18:	ca 14       	cp	r12, r10
    1f1a:	db 04       	cpc	r13, r11
    1f1c:	20 f1       	brcs	.+72     	; 0x1f66 <realloc+0x140>
    1f1e:	ac 01       	movw	r20, r24
    1f20:	4a 19       	sub	r20, r10
    1f22:	5b 09       	sbc	r21, r11
    1f24:	da 01       	movw	r26, r20
    1f26:	12 96       	adiw	r26, 0x02	; 2
    1f28:	15 97       	sbiw	r26, 0x05	; 5
    1f2a:	80 f0       	brcs	.+32     	; 0x1f4c <realloc+0x126>
    1f2c:	62 82       	std	Z+2, r6	; 0x02
    1f2e:	73 82       	std	Z+3, r7	; 0x03
    1f30:	40 83       	st	Z, r20
    1f32:	51 83       	std	Z+1, r21	; 0x01
    1f34:	d9 01       	movw	r26, r18
    1f36:	6d 93       	st	X+, r22
    1f38:	7c 93       	st	X, r23
    1f3a:	e1 14       	cp	r14, r1
    1f3c:	f1 04       	cpc	r15, r1
    1f3e:	71 f0       	breq	.+28     	; 0x1f5c <realloc+0x136>
    1f40:	d7 01       	movw	r26, r14
    1f42:	12 96       	adiw	r26, 0x02	; 2
    1f44:	ed 93       	st	X+, r30
    1f46:	fc 93       	st	X, r31
    1f48:	13 97       	sbiw	r26, 0x03	; 3
    1f4a:	78 cf       	rjmp	.-272    	; 0x1e3c <realloc+0x16>
    1f4c:	22 96       	adiw	r28, 0x02	; 2
    1f4e:	8c 0f       	add	r24, r28
    1f50:	9d 1f       	adc	r25, r29
    1f52:	f9 01       	movw	r30, r18
    1f54:	80 83       	st	Z, r24
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	f3 01       	movw	r30, r6
    1f5a:	ef cf       	rjmp	.-34     	; 0x1f3a <realloc+0x114>
    1f5c:	e0 93 19 3d 	sts	0x3D19, r30	; 0x803d19 <__flp>
    1f60:	f0 93 1a 3d 	sts	0x3D1A, r31	; 0x803d1a <__flp+0x1>
    1f64:	6b cf       	rjmp	.-298    	; 0x1e3c <realloc+0x16>
    1f66:	48 16       	cp	r4, r24
    1f68:	59 06       	cpc	r5, r25
    1f6a:	08 f4       	brcc	.+2      	; 0x1f6e <realloc+0x148>
    1f6c:	2c 01       	movw	r4, r24
    1f6e:	7d 01       	movw	r14, r26
    1f70:	d3 01       	movw	r26, r6
    1f72:	9a cf       	rjmp	.-204    	; 0x1ea8 <realloc+0x82>
    1f74:	cb 01       	movw	r24, r22
    1f76:	32 de       	rcall	.-924    	; 0x1bdc <malloc>
    1f78:	7c 01       	movw	r14, r24
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	39 f0       	breq	.+14     	; 0x1f8c <realloc+0x166>
    1f7e:	ae 01       	movw	r20, r28
    1f80:	b8 01       	movw	r22, r16
    1f82:	07 d0       	rcall	.+14     	; 0x1f92 <memcpy>
    1f84:	c8 01       	movw	r24, r16
    1f86:	c6 de       	rcall	.-628    	; 0x1d14 <free>
    1f88:	87 01       	movw	r16, r14
    1f8a:	58 cf       	rjmp	.-336    	; 0x1e3c <realloc+0x16>
    1f8c:	10 e0       	ldi	r17, 0x00	; 0
    1f8e:	00 e0       	ldi	r16, 0x00	; 0
    1f90:	55 cf       	rjmp	.-342    	; 0x1e3c <realloc+0x16>

00001f92 <memcpy>:
memcpy():
    1f92:	fb 01       	movw	r30, r22
    1f94:	dc 01       	movw	r26, r24
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <memcpy+0xa>
    1f98:	01 90       	ld	r0, Z+
    1f9a:	0d 92       	st	X+, r0
    1f9c:	41 50       	subi	r20, 0x01	; 1
    1f9e:	50 40       	sbci	r21, 0x00	; 0
    1fa0:	d8 f7       	brcc	.-10     	; 0x1f98 <memcpy+0x6>
    1fa2:	08 95       	ret

00001fa4 <strcpy>:
strcpy():
    1fa4:	fb 01       	movw	r30, r22
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	01 90       	ld	r0, Z+
    1faa:	0d 92       	st	X+, r0
    1fac:	00 20       	and	r0, r0
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <strcpy+0x4>
    1fb0:	08 95       	ret

00001fb2 <sprintf>:
sprintf():
    1fb2:	ae e0       	ldi	r26, 0x0E	; 14
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	ee ed       	ldi	r30, 0xDE	; 222
    1fb8:	ff e0       	ldi	r31, 0x0F	; 15
    1fba:	e0 cc       	rjmp	.-1600   	; 0x197c <__prologue_saves__+0x1c>
    1fbc:	0d 89       	ldd	r16, Y+21	; 0x15
    1fbe:	1e 89       	ldd	r17, Y+22	; 0x16
    1fc0:	86 e0       	ldi	r24, 0x06	; 6
    1fc2:	8c 83       	std	Y+4, r24	; 0x04
    1fc4:	09 83       	std	Y+1, r16	; 0x01
    1fc6:	1a 83       	std	Y+2, r17	; 0x02
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	9f e7       	ldi	r25, 0x7F	; 127
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	ae 01       	movw	r20, r28
    1fd2:	47 5e       	subi	r20, 0xE7	; 231
    1fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd6:	6f 89       	ldd	r22, Y+23	; 0x17
    1fd8:	78 8d       	ldd	r23, Y+24	; 0x18
    1fda:	ce 01       	movw	r24, r28
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	0e 94 94 05 	call	0xb28	; 0xb28 <vfprintf>
    1fe2:	2f 81       	ldd	r18, Y+7	; 0x07
    1fe4:	38 85       	ldd	r19, Y+8	; 0x08
    1fe6:	02 0f       	add	r16, r18
    1fe8:	13 1f       	adc	r17, r19
    1fea:	f8 01       	movw	r30, r16
    1fec:	10 82       	st	Z, r1
    1fee:	2e 96       	adiw	r28, 0x0e	; 14
    1ff0:	e4 e0       	ldi	r30, 0x04	; 4
    1ff2:	dd cc       	rjmp	.-1606   	; 0x19ae <__epilogue_restores__+0x1c>

00001ff4 <_exit>:
exit():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1ff4:	f8 94       	cli

00001ff6 <__stop_program>:
__stop_program():
/home/admin/build/toolchain-avr-special/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1ff6:	ff cf       	rjmp	.-2      	; 0x1ff6 <__stop_program>
